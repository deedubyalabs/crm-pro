TITLE: Describing MCP Server Requirements to LLM
DESCRIPTION: This snippet provides an example of how to clearly describe the desired functionality of an MCP server to an LLM like Claude. It outlines key aspects such as database connectivity, resource exposure, tool provision, and prompt inclusion, guiding the LLM in generating the server implementation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-mcp-with-llms.mdx#_snippet_0

LANGUAGE: Plaintext
CODE:
```
Build an MCP server that:
- Connects to my company's PostgreSQL database
- Exposes table schemas as resources
- Provides tools for running read-only SQL queries
- Includes prompts for common data analysis tasks
```

----------------------------------------

TITLE: Authorization Flow Steps - Mermaid Diagram
DESCRIPTION: Illustrates the complete OAuth 2.1 authorization flow for the Model Context Protocol (MCP), detailing interactions between the User-Agent (Browser), Client, MCP Server, and Authorization Server, including PKCE parameter generation, token requests, and access token usage.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/authorization.mdx#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant B as User-Agent (Browser)
    participant C as Client
    participant M as MCP Server (Resource Server)
    participant A as Authorization Server

    C->>M: MCP request without token
    M->>C: HTTP 401 Unauthorized with WWW-Authenticate header
    Note over C: Extract resource_metadata URL from WWW-Authenticate

    C->>M: Request Protected Resource Metadata
    M->>C: Return metadata

    Note over C: Parse metadata and extract authorization server(s)<br/>Client determines AS to use

    C->>A: GET /.well-known/oauth-authorization-server
    A->>C: Authorization server metadata response

    alt Dynamic client registration
        C->>A: POST /register
        A->>C: Client Credentials
    end

    Note over C: Generate PKCE parameters
    C->>B: Open browser with authorization URL + code_challenge
    B->>A: Authorization request
    Note over A: User authorizes
    A->>B: Redirect to callback with authorization code
    B->>C: Authorization code callback
    C->>A: Token request + code_verifier
    A->>C: Access token (+ refresh token)
    C->>M: MCP request with access token
    M-->>C: MCP response
    Note over C,M: MCP communication continues with valid token
```

----------------------------------------

TITLE: Client Initialize Request - JSON
DESCRIPTION: This JSON-RPC request is sent by the client to initiate the Model Context Protocol connection. It specifies the supported protocol version, client capabilities (e.g., 'roots', 'sampling'), and client implementation details. This request must not be part of a JSON-RPC batch to ensure compatibility and proper sequence.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/lifecycle.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "initialize",
  "params": {
    "protocolVersion": "2024-11-05",
    "capabilities": {
      "roots": {
        "listChanged": true
      },
      "sampling": {}
    },
    "clientInfo": {
      "name": "ExampleClient",
      "version": "1.0.0"
    }
  }
}
```

----------------------------------------

TITLE: OAuth 2.1 Authorization Code Grant Flow (PKCE) with MCP Server
DESCRIPTION: This sequence diagram illustrates the OAuth 2.1 Authorization Code Grant flow, specifically for public clients using PKCE, within the context of an MCP server. It details the steps from an initial unauthorized MCP request to obtaining and using an access token, involving a User-Agent (browser), the Client, and the MCP Server acting as the authorization server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/authorization.mdx#_snippet_0

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant B as User-Agent (Browser)
    participant C as Client
    participant M as MCP Server

    C->>M: MCP Request
    M->>C: HTTP 401 Unauthorized
    Note over C: Generate code_verifier and code_challenge
    C->>B: Open browser with authorization URL + code_challenge
    B->>M: GET /authorize
    Note over M: User logs in and authorizes
    M->>B: Redirect to callback URL with auth code
    B->>C: Callback with authorization code
    C->>M: Token Request with code + code_verifier
    M->>C: Access Token (+ Refresh Token)
    C->>M: MCP Request with Access Token
    Note over C,M: Begin standard MCP message exchange
```

----------------------------------------

TITLE: Adding .env to .gitignore (Bash)
DESCRIPTION: Appends the string `.env` to the `.gitignore` file. This prevents the `.env` file, which contains sensitive API keys, from being committed to version control, ensuring security.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_16

LANGUAGE: bash
CODE:
```
echo ".env" >> .gitignore
```

----------------------------------------

TITLE: MCP Authorization Flow Sequence Diagram (Mermaid)
DESCRIPTION: This Mermaid sequence diagram illustrates the complete authorization flow for an MCP client interacting with an MCP server and an authorization server. It details the steps from an initial unauthorized request, through resource and authorization server metadata discovery, the OAuth 2.1 authorization flow, token acquisition, and subsequent authenticated MCP requests.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/authorization.mdx#_snippet_0

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant C as Client
    participant M as MCP Server (Resource Server)
    participant A as Authorization Server

    C->>M: MCP request without token
    M-->>C: HTTP 401 Unauthorized with WWW-Authenticate header
    Note over C: Extract resource_metadata<br />from WWW-Authenticate

    C->>M: GET /.well-known/oauth-protected-resource
    M-->>C: Resource metadata with authorization server URL
    Note over C: Validate RS metadata,<br />build AS metadata URL

    C->>A: GET /.well-known/oauth-authorization-server
    A-->>C: Authorization server metadata

    Note over C,A: OAuth 2.1 authorization flow happens here

    C->>A: Token request
    A-->>C: Access token

    C->>M: MCP request with access token
    M-->>C: MCP response
    Note over C,M: MCP communication continues with valid token
```

----------------------------------------

TITLE: Implementing Weather Tool Execution with MCP in Python
DESCRIPTION: This Python snippet defines two asynchronous tools, `get_alerts` and `get_forecast`, using the `@mcp.tool()` decorator. `get_alerts` fetches weather alerts for a given US state, while `get_forecast` retrieves a detailed weather forecast for specified latitude and longitude. Both tools interact with an external NWS API and format the responses for readability.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_4

LANGUAGE: python
CODE:
```
@mcp.tool()
async def get_alerts(state: str) -> str:
    """Get weather alerts for a US state.

    Args:
        state: Two-letter US state code (e.g. CA, NY)
    """
    url = f"{NWS_API_BASE}/alerts/active/area/{state}"
    data = await make_nws_request(url)

    if not data or "features" not in data:
        return "Unable to fetch alerts or no alerts found."

    if not data["features"]:
        return "No active alerts for this state."

    alerts = [format_alert(feature) for feature in data["features"]]
    return "\n---\n".join(alerts)

@mcp.tool()
async def get_forecast(latitude: float, longitude: float) -> str:
    """Get weather forecast for a location.

    Args:
        latitude: Latitude of the location
        longitude: Longitude of the location
    """
    # First get the forecast grid endpoint
    points_url = f"{NWS_API_BASE}/points/{latitude},{longitude}"
    points_data = await make_nws_request(points_url)

    if not points_data:
        return "Unable to fetch forecast data for this location."

    # Get the forecast URL from the points response
    forecast_url = points_data["properties"]["forecast"]
    forecast_data = await make_nws_request(forecast_url)

    if not forecast_data:
        return "Unable to fetch detailed forecast."

    # Format the periods into a readable forecast
    periods = forecast_data["properties"]["periods"]
    forecasts = []
    for period in periods[:5]:  # Only show next 5 periods
        forecast = f"""
{period['name']}:
Temperature: {period['temperature']}Â°{period['temperatureUnit']}
Wind: {period['windSpeed']} {period['windDirection']}
Forecast: {period['detailedForecast']}
"""
        forecasts.append(forecast)

    return "\n---\n".join(forecasts)

```

----------------------------------------

TITLE: Connecting to MCP Server in TypeScript
DESCRIPTION: This asynchronous TypeScript method, `connectToServer`, establishes a connection to an MCP server. It validates the server script path (must be `.py` or `.js`), determines the appropriate command (`python` or `node`), initializes a `StdioClientTransport`, and then connects the MCP `Client` instance. Finally, it requests and logs a list of available tools from the connected server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
  async connectToServer(serverScriptPath: string): Promise<void> {
    const isPython = serverScriptPath.endsWith(".py");
    const isJs = serverScriptPath.endsWith(".js");

    if (!isPython && !isJs) {
      throw new Error("Server script must be a .py or .js file");
    }

    const command = isPython ? "python" : "node";

    this.transport = new StdioClientTransport({
      command,
      args: [serverScriptPath],
    });

    this.client = new Client(
      {
        name: "mcp-client",
        version: "1.0.0",
      },
      {
        capabilities: {},
      }
    );

    await this.client.connect(this.transport);

    // List available tools
    const response = await this.client.request(
      { method: "tools/list" },
      ListToolsResultSchema
    );

    console.log(
      "\nConnected to server with tools:",
      response.tools.map((tool: any) => tool.name)
    );
  }
```

----------------------------------------

TITLE: Defining a Non-Destructive Database Record Creation Tool (TypeScript)
DESCRIPTION: This snippet defines a `create_record` tool for a database. It is explicitly marked as non-destructive (`destructiveHint: false`) and non-idempotent (`idempotentHint: false`), operating within a 'closed world'. It requires `table` and `data` for record creation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#_snippet_9

LANGUAGE: typescript
CODE:
```
// A non-destructive database record creation tool
{
  name: "create_record",
  description: "Create a new record in the database",
  inputSchema: {
    type: "object",
    properties: {
      table: { type: "string" },
      data: { type: "object" }
    },
    required: ["table", "data"]
  },
  annotations: {
    title: "Create Database Record",
    readOnlyHint: false,
    destructiveHint: false,
    idempotentHint: false,
    openWorldHint: false
  }
}
```

----------------------------------------

TITLE: MCP Paginated Request Format - JSON
DESCRIPTION: Demonstrates the JSON request structure for continuing a paginated list operation in the Model Context Protocol (MCP). Clients include the 'cursor' received from a previous response in the 'params' object to fetch the next page of results.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/pagination.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "resources/list",
  "params": {
    "cursor": "eyJwYWdlIjogMn0="
  }
}
```

----------------------------------------

TITLE: MCP Paginated Request Example (JSON)
DESCRIPTION: This JSON snippet illustrates how a client continues a paginated operation in MCP. After receiving a `nextCursor` from a server response, the client includes this opaque `cursor` token in the `params` of its subsequent list request to retrieve the next set of results.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/pagination.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "resources/list",
  "params": {
    "cursor": "eyJwYWdlIjogMn0="
  }
}
```

----------------------------------------

TITLE: Handling Cancellation Race Conditions (Mermaid)
DESCRIPTION: This Mermaid sequence diagram illustrates the timing considerations and potential race conditions when a client sends a cancellation notification to a server. It highlights that cancellation may arrive after request processing has completed or while it's still in progress, requiring graceful handling by both parties.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/utilities/cancellation.mdx#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
   participant Client
   participant Server

   Client->>Server: Request (ID: 123)
   Note over Server: Processing starts
   Client--)Server: notifications/cancelled (ID: 123)
   alt
      Note over Server: Processing may have<br/>completed before<br/>cancellation arrives
   else If not completed
      Note over Server: Stop processing
   end
```

----------------------------------------

TITLE: Defining Weather API Tool Handlers in C#
DESCRIPTION: This C# class, `WeatherTools`, defines two Model Context Protocol (MCP) server tool methods: `GetAlerts` and `GetForecast`. `GetAlerts` retrieves active weather alerts for a specified US state from the National Weather Service API, parsing and formatting the response. `GetForecast` fetches the weather forecast for given latitude and longitude coordinates, similarly parsing and formatting the data. Both methods utilize an `HttpClient` dependency for API calls and are decorated with `[McpServerTool]` attributes.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_55

LANGUAGE: C#
CODE:
```
using ModelContextProtocol.Server;
using System.ComponentModel;
using System.Net.Http.Json;
using System.Text.Json;

namespace QuickstartWeatherServer.Tools;

[McpServerToolType]
public static class WeatherTools
{
    [McpServerTool, Description("Get weather alerts for a US state.")]
    public static async Task<string> GetAlerts(
        HttpClient client,
        [Description("The US state to get alerts for.")] string state)
    {
        var jsonElement = await client.GetFromJsonAsync<JsonElement>($"/alerts/active/area/{state}");
        var alerts = jsonElement.GetProperty("features").EnumerateArray();

        if (!alerts.Any())
        {
            return "No active alerts for this state.";
        }

        return string.Join("\n--\n", alerts.Select(alert =>
        {
            JsonElement properties = alert.GetProperty("properties");
            return $"""
                    Event: {properties.GetProperty("event").GetString()}
                    Area: {properties.GetProperty("areaDesc").GetString()}
                    Severity: {properties.GetProperty("severity").GetString()}
                    Description: {properties.GetProperty("description").GetString()}
                    Instruction: {properties.GetProperty("instruction").GetString()}
                    """;
        }));
    }

    [McpServerTool, Description("Get weather forecast for a location.")]
    public static async Task<string> GetForecast(
        HttpClient client,
        [Description("Latitude of the location.")] double latitude,
        [Description("Longitude of the location.")] double longitude)
    {
        var jsonElement = await client.GetFromJsonAsync<JsonElement>($"/points/{latitude},{longitude}");
        var periods = jsonElement.GetProperty("properties").GetProperty("periods").EnumerateArray();

        return string.Join("\n---\n", periods.Select(period => $"""
                {period.GetProperty("name").GetString()}
                Temperature: {period.GetProperty("temperature").GetInt32()}Â°F
                Wind: {period.GetProperty("windSpeed").GetString()} {period.GetProperty("windDirection").GetString()}
                Forecast: {period.GetProperty("detailedForecast").GetString()}
                """));
    }
}
```

----------------------------------------

TITLE: Defining a Tool Structure in MCP
DESCRIPTION: This snippet outlines the JSON structure for defining a tool in the Model Context Protocol. It specifies properties such as `name` (unique identifier), `description` (human-readable), `inputSchema` (JSON Schema for parameters), and optional `annotations` for behavioral hints like `readOnlyHint` or `destructiveHint`.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
{
  name: string;          // Unique identifier for the tool
  description?: string;  // Human-readable description
  inputSchema: {         // JSON Schema for the tool's parameters
    type: "object",
    properties: { ... }  // Tool-specific parameters
  },
  annotations?: {        // Optional hints about tool behavior
    title?: string;      // Human-readable title for the tool
    readOnlyHint?: boolean;    // If true, the tool does not modify its environment
    destructiveHint?: boolean; // If true, the tool may perform destructive updates
    idempotentHint?: boolean;  // If true, repeated calls with same args have no additional effect
    openWorldHint?: boolean;   // If true, tool interacts with external entities
  }
}
```

----------------------------------------

TITLE: Creating and Using an Asynchronous MCP Client in Java
DESCRIPTION: This snippet illustrates the creation and usage of an asynchronous MCP client, leveraging reactive programming with Mono. It shows how to configure the client with capabilities and consumers for changes in tools, resources, and prompts. The example demonstrates a chained sequence of asynchronous operations including initialization, listing/calling tools, listing/reading resources, listing/getting prompts, and managing roots, ensuring the client is closed gracefully upon completion.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_1

LANGUAGE: java
CODE:
```
// Create an async client with custom configuration
McpAsyncClient client = McpClient.async(transport)
    .requestTimeout(Duration.ofSeconds(10))
    .capabilities(ClientCapabilities.builder()
        .roots(true)      // Enable roots capability
        .sampling()       // Enable sampling capability
        .build())
    .sampling(request -> Mono.just(new CreateMessageResult(response)))
    .toolsChangeConsumer(tools -> Mono.fromRunnable(() -> {
        logger.info("Tools updated: {}", tools);
    }))
    .resourcesChangeConsumer(resources -> Mono.fromRunnable(() -> {
        logger.info("Resources updated: {}", resources);
    }))
    .promptsChangeConsumer(prompts -> Mono.fromRunnable(() -> {
        logger.info("Prompts updated: {}", prompts);
    }))
    .build();

// Initialize connection and use features
client.initialize()
    .flatMap(initResult -> client.listTools())
    .flatMap(tools -> {
        return client.callTool(new CallToolRequest(
            "calculator", 
            Map.of("operation", "add", "a", 2, "b", 3)
        ));
    })
    .flatMap(result -> {
        return client.listResources()
            .flatMap(resources -> 
                client.readResource(new ReadResourceRequest("resource://uri"))
            );
    })
    .flatMap(resource -> {
        return client.listPrompts()
            .flatMap(prompts ->
                client.getPrompt(new GetPromptRequest(
                    "greeting", 
                    Map.of("name", "Spring")
                ))
            );
    })
    .flatMap(prompt -> {
        return client.addRoot(new Root("file:///path", "description"))
            .then(client.removeRoot("file:///path"));            
    })
    .doFinally(signalType -> {
        client.closeGracefully().subscribe();
    })
    .subscribe();
```

----------------------------------------

TITLE: Registering Weather Tools with MCP Server in TypeScript
DESCRIPTION: This snippet registers two weather-related tools, 'get-alerts' and 'get-forecast', with the MCP server. The 'get-alerts' tool fetches weather alerts for a given state, while 'get-forecast' retrieves the weather forecast for specified latitude and longitude coordinates. Both tools interact with an external NWS API and return structured content.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_17

LANGUAGE: TypeScript
CODE:
```
// Register weather tools
server.tool(
  "get-alerts",
  "Get weather alerts for a state",
  {
    state: z.string().length(2).describe("Two-letter state code (e.g. CA, NY)"),
  },
  async ({ state }) => {
    const stateCode = state.toUpperCase();
    const alertsUrl = `${NWS_API_BASE}/alerts?area=${stateCode}`;
    const alertsData = await makeNWSRequest<AlertsResponse>(alertsUrl);

    if (!alertsData) {
      return {
        content: [
          {
            type: "text",
            text: "Failed to retrieve alerts data",
          },
        ],
      };
    }

    const features = alertsData.features || [];
    if (features.length === 0) {
      return {
        content: [
          {
            type: "text",
            text: `No active alerts for ${stateCode}`,
          },
        ],
      };
    }

    const formattedAlerts = features.map(formatAlert);
    const alertsText = `Active alerts for ${stateCode}:\n\n${formattedAlerts.join("\n")}`;

    return {
      content: [
        {
          type: "text",
          text: alertsText,
        },
      ],
    };
  },
);

server.tool(
  "get-forecast",
  "Get weather forecast for a location",
  {
    latitude: z.number().min(-90).max(90).describe("Latitude of the location"),
    longitude: z.number().min(-180).max(180).describe("Longitude of the location"),
  },
  async ({ latitude, longitude }) => {
    // Get grid point data
    const pointsUrl = `${NWS_API_BASE}/points/${latitude.toFixed(4)},${longitude.toFixed(4)}`;
    const pointsData = await makeNWSRequest<PointsResponse>(pointsUrl);

    if (!pointsData) {
      return {
        content: [
          {
            type: "text",
            text: `Failed to retrieve grid point data for coordinates: ${latitude}, ${longitude}. This location may not be supported by the NWS API (only US locations are supported).`,
          },
        ],
      };
    }

    const forecastUrl = pointsData.properties?.forecast;
    if (!forecastUrl) {
      return {
        content: [
          {
            type: "text",
            text: "Failed to get forecast URL from grid point data",
          },
        ],
      };
    }

    // Get forecast data
    const forecastData = await makeNWSRequest<ForecastResponse>(forecastUrl);
    if (!forecastData) {
      return {
        content: [
          {
            type: "text",
            text: "Failed to retrieve forecast data",
          },
        ],
      };
    }

    const periods = forecastData.properties?.periods || [];
    if (periods.length === 0) {
      return {
        content: [
          {
            type: "text",
            text: "No forecast periods available",
          },
        ],
      };
    }

    // Format forecast periods
    const formattedForecast = periods.map((period: ForecastPeriod) =>
      [
        `${period.name || "Unknown"}:`,
        `Temperature: ${period.temperature || "Unknown"}Â°${period.temperatureUnit || "F"}`,
        `Wind: ${period.windSpeed || "Unknown"} ${period.windDirection || ""}`,
        `${period.shortForecast || "No forecast available"}`,
        "---",
      ].join("\n"),
    );

    const forecastText = `Forecast for ${latitude}, ${longitude}:\n\n${formattedForecast.join("\n")}`;

    return {
      content: [
        {
          type: "text",
          text: forecastText,
        },
      ],
    };
  },
);
```

----------------------------------------

TITLE: MCP Lifecycle Sequence Diagram (Mermaid)
DESCRIPTION: Illustrates the three main phases of the Model Context Protocol (MCP) lifecycle: Initialization, Operation, and Shutdown, showing the sequence of interactions between a client and a server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/lifecycle.mdx#_snippet_0

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Client
    participant Server

    Note over Client,Server: Initialization Phase
    activate Client
    Client->>+Server: initialize request
    Server-->>Client: initialize response
    Client--)Server: initialized notification

    Note over Client,Server: Operation Phase
    rect rgb(200, 220, 250)
        note over Client,Server: Normal protocol operations
    end

    Note over Client,Server: Shutdown
    Client--)-Server: Disconnect
    deactivate Server
    Note over Client,Server: Connection closed
```

----------------------------------------

TITLE: Registering 'get_forecast' Tool for Weather Forecast (Kotlin)
DESCRIPTION: Registers a tool named 'get_forecast' with the server, allowing it to retrieve weather forecasts based on provided latitude and longitude. The tool's input schema defines required 'latitude' and 'longitude' parameters (numbers). It utilizes the HTTP client to fetch the forecast and returns the results as text content.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_47

LANGUAGE: kotlin
CODE:
```
server.addTool(
    name = "get_forecast",
    description = """
        Get weather forecast for a specific latitude/longitude
    """.trimIndent(),
    inputSchema = Tool.Input(
        properties = buildJsonObject {
            putJsonObject("latitude") { put("type", "number") }
            putJsonObject("longitude") { put("type", "number") }
        },
        required = listOf("latitude", "longitude")
    )
) { request ->
    val latitude = request.arguments["latitude"]?.jsonPrimitive?.doubleOrNull
    val longitude = request.arguments["longitude"]?.jsonPrimitive?.doubleOrNull
    if (latitude == null || longitude == null) {
        return@addTool CallToolResult(
            content = listOf(TextContent("The 'latitude' and 'longitude' parameters are required."))
        )
    }

    val forecast = httpClient.getForecast(latitude, longitude)

    CallToolResult(content = forecast.map { TextContent(it) })
}
```

----------------------------------------

TITLE: JSON-RPC Request Message Format (TypeScript)
DESCRIPTION: Defines the structure for a JSON-RPC 2.0 request message, including the protocol version, a unique identifier, the method name to be invoked, and optional parameters.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
{
  jsonrpc: "2.0",
  id: number | string,
  method: string,
  params?: object
}
```

----------------------------------------

TITLE: Receiving LLM Generation Response from sampling/createMessage in MCP (JSON)
DESCRIPTION: This JSON object illustrates the successful response from a client to a `sampling/createMessage` request in the Model Context Protocol (MCP). It contains the generated content from the assistant, the specific model used, and the reason for stopping the generation. The `id` field matches the corresponding request for correlation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "role": "assistant",
    "content": {
      "type": "text",
      "text": "The capital of France is Paris."
    },
    "model": "claude-3-sonnet-20240307",
    "stopReason": "endTurn"
  }
}
```

----------------------------------------

TITLE: Defining JSON-RPC Request Message - TypeScript
DESCRIPTION: This snippet defines the structure for a Model Context Protocol (MCP) request message in TypeScript, adhering to JSON-RPC 2.0. Requests must include a non-null string or integer ID that is unique within the session, a method name, and optional parameters. It initiates an operation from client to server or vice versa.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/index.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
{
  jsonrpc: "2.0";
  id: string | number;
  method: string;
  params?: {
    [key: string]: unknown;
  };
}
```

----------------------------------------

TITLE: Sending Client Initialization Request in JSON
DESCRIPTION: This JSON snippet demonstrates the `initialize` request sent by the client to the server during the Model Context Protocol's initialization phase. It specifies the supported `protocolVersion`, declares client `capabilities` (e.g., `roots`, `sampling`), and provides `clientInfo` including the client's name and version, initiating the capability negotiation process.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/lifecycle.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "initialize",
  "params": {
    "protocolVersion": "2024-11-05",
    "capabilities": {
      "roots": {
        "listChanged": true
      },
      "sampling": {}
    },
    "clientInfo": {
      "name": "ExampleClient",
      "version": "1.0.0"
    }
  }
}
```

----------------------------------------

TITLE: Creating and Using a Synchronous MCP Client in Java
DESCRIPTION: This snippet demonstrates how to create and use a synchronous MCP client. It covers initializing the client with custom configurations (timeout, capabilities like roots and sampling), performing various operations such as listing and calling tools, listing and reading resources, listing and getting prompts, and managing roots. Finally, it shows how to gracefully close the client.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_0

LANGUAGE: java
CODE:
```
// Create a sync client with custom configuration
McpSyncClient client = McpClient.sync(transport)
    .requestTimeout(Duration.ofSeconds(10))
    .capabilities(ClientCapabilities.builder()
        .roots(true)      // Enable roots capability
        .sampling()       // Enable sampling capability
        .build())
    .sampling(request -> new CreateMessageResult(response))
    .build();

// Initialize connection
client.initialize();

// List available tools
ListToolsResult tools = client.listTools();

// Call a tool
CallToolResult result = client.callTool(
    new CallToolRequest("calculator", 
        Map.of("operation", "add", "a", 2, "b", 3))
);

// List and read resources
ListResourcesResult resources = client.listResources();
ReadResourceResult resource = client.readResource(
    new ReadResourceRequest("resource://uri")
);

// List and use prompts
ListPromptsResult prompts = client.listPrompts();
GetPromptResult prompt = client.getPrompt(
    new GetPromptRequest("greeting", Map.of("name", "Spring"))
);

// Add/remove roots
client.addRoot(new Root("file:///path", "description"));
client.removeRoot("file:///path");

// Close client
client.closeGracefully();
```

----------------------------------------

TITLE: Defining Image Content in MCP Sampling Messages (JSON)
DESCRIPTION: This JSON snippet defines the structure for image-based content within MCP sampling messages. It specifies the `type` as 'image', includes the `data` as a base64-encoded string of the image, and provides the `mimeType` to indicate the image format. This allows for multimodal interactions where images can be part of the prompt or response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/sampling.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  "type": "image",
  "data": "base64-encoded-image-data",
  "mimeType": "image/jpeg"
}
```

----------------------------------------

TITLE: Defining a CSV Analysis Tool (TypeScript)
DESCRIPTION: This snippet defines a tool for analyzing CSV files, including its name, description, and the JSON schema for its input. It requires a filepath and an array of operations (sum, average, count) to perform on the CSV data.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
{
  name: "analyze_csv",
  description: "Analyze a CSV file",
  inputSchema: {
    type: "object",
    properties: {
      filepath: { type: "string" },
      operations: {
        type: "array",
        items: {
          enum: ["sum", "average", "count"]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining a Tool with Input and Output Schema in JSON
DESCRIPTION: This JSON snippet illustrates the definition of a tool named 'get_weather_data', including its description, an input schema for the 'location' parameter, and a detailed output schema for validating structured results like temperature, conditions, and humidity. Servers must conform to this schema, and clients should validate against it.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#_snippet_11

LANGUAGE: JSON
CODE:
```
{
  "name": "get_weather_data",
  "description": "Get current weather data for a location",
  "inputSchema": {
    "type": "object",
    "properties": {
      "location": {
        "type": "string",
        "description": "City name or zip code"
      }
    },
    "required": ["location"]
  },
  "outputSchema": {
    "type": "object",
    "properties": {
      "temperature": {
        "type": "number",
        "description": "Temperature in celsius"
      },
      "conditions": {
        "type": "string",
        "description": "Weather conditions description"
      },
      "humidity": {
        "type": "number",
        "description": "Humidity percentage"
      }
    },
    "required": ["temperature", "conditions", "humidity"]
  }
}
```

----------------------------------------

TITLE: Running MCP Server with Stdio Transport in TypeScript
DESCRIPTION: This snippet defines the `main` function responsible for initializing and running the MCP server. It uses `StdioServerTransport` to establish a connection and logs server status or any fatal errors during startup, ensuring the server is accessible via standard I/O.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_18

LANGUAGE: TypeScript
CODE:
```
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error("Weather MCP Server running on stdio");
}

main().catch((error) => {
  console.error("Fatal error in main():", error);
  process.exit(1);
});
```

----------------------------------------

TITLE: Initializing Node.js Project for MCP Client (Bash)
DESCRIPTION: This snippet provides a sequence of bash commands to set up a new Node.js project. It covers creating the project directory, initializing npm, installing core and development dependencies, setting up TypeScript configuration, and creating essential project files like `src/client.ts` and `.env`.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
# Create project directory
mkdir mcp-client
cd mcp-client

# Initialize npm project
npm init -y

# Install dependencies
npm install @modelcontextprotocol/sdk @anthropic-ai/sdk dotenv
npm install -D typescript @types/node

# Create TypeScript config
npx tsc --init

# Create necessary files
mkdir src
touch src/client.ts
touch .env
```

----------------------------------------

TITLE: Setting Up Project Directory and Dependencies (MacOS/Linux)
DESCRIPTION: This command-line snippet for MacOS/Linux creates a new project directory, initializes an npm project, installs necessary runtime and development dependencies, and sets up the source directory and main TypeScript file.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_11

LANGUAGE: bash
CODE:
```
# Create a new directory for our project
mkdir weather
cd weather

# Initialize a new npm project
npm init -y

# Install dependencies
npm install @modelcontextprotocol/sdk zod
npm install -D @types/node typescript

# Create our files
mkdir src
touch src/index.ts
```

----------------------------------------

TITLE: Process Query with Claude and Tools - Python
DESCRIPTION: Implements the core logic for processing user queries. It interacts with the Claude API, retrieves available tools, handles tool calls based on Claude's response, and manages the conversation flow by updating messages and processing tool results.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_4

LANGUAGE: python
CODE:
```
async def process_query(self, query: str) -> str:
    """Process a query using Claude and available tools"""
    messages = [
        {
            "role": "user",
            "content": query
        }
    ]

    response = await self.session.list_tools()
    available_tools = [{
        "name": tool.name,
        "description": tool.description,
        "input_schema": tool.inputSchema
    } for tool in response.tools]

    # Initial Claude API call
    response = self.anthropic.messages.create(
        model="claude-3-5-sonnet-20241022",
        max_tokens=1000,
        messages=messages,
        tools=available_tools
    )

    # Process response and handle tool calls
    final_text = []

    assistant_message_content = []
    for content in response.content:
        if content.type == 'text':
            final_text.append(content.text)
            assistant_message_content.append(content)
        elif content.type == 'tool_use':
            tool_name = content.name
            tool_args = content.input

            # Execute tool call
            result = await self.session.call_tool(tool_name, tool_args)
            final_text.append(f"[Calling tool {tool_name} with args {tool_args}]")

            assistant_message_content.append(content)
            messages.append({
                "role": "assistant",
                "content": assistant_message_content
            })
            messages.append({
                "role": "user",
                "content": [
                    {
                        "type": "tool_result",
                        "tool_use_id": content.id,
                        "content": result.content
                    }
                ]
            })

            # Get next response from Claude
            response = self.anthropic.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=1000,
                messages=messages,
                tools=available_tools
            )

            final_text.append(response.content[0].text)

    return "\n".join(final_text)
```

----------------------------------------

TITLE: Illustrating MCP Connection Lifecycle with Mermaid
DESCRIPTION: This Mermaid sequence diagram visualizes the three phases of the Model Context Protocol (MCP) connection lifecycle: Initialization, Operation, and Shutdown. It shows the interaction flow between a client and a server, highlighting key messages like 'initialize request', 'initialize response', and 'initialized notification', and the eventual disconnection.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/lifecycle.mdx#_snippet_0

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Client
    participant Server

    Note over Client,Server: Initialization Phase
    activate Client
    Client->>+Server: initialize request
    Server-->>Client: initialize response
    Client--)Server: initialized notification

    Note over Client,Server: Operation Phase
    rect rgb(200, 220, 250)
        note over Client,Server: Normal protocol operations
    end

    Note over Client,Server: Shutdown
    Client--)-Server: Disconnect
    deactivate Server
    Note over Client,Server: Connection closed
```

----------------------------------------

TITLE: Illustrating Message Flow with Mermaid Diagram
DESCRIPTION: This Mermaid sequence diagram visualizes the core message flow within the Model Context Protocol (MCP), demonstrating interactions between a client and server for resource discovery, access, subscriptions, and update notifications.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_13

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Client
    participant Server

    Note over Client,Server: Resource Discovery
    Client->>Server: resources/list
    Server-->>Client: List of resources

    Note over Client,Server: Resource Access
    Client->>Server: resources/read
    Server-->>Client: Resource contents

    Note over Client,Server: Subscriptions
    Client->>Server: resources/subscribe
    Server-->>Client: Subscription confirmed

    Note over Client,Server: Updates
    Server--)Client: notifications/resources/updated
    Client->>Server: resources/read
    Server-->>Client: Updated contents
```

----------------------------------------

TITLE: Implementing Sampling with MCP Async API in Java
DESCRIPTION: This snippet illustrates how to create an asynchronous MCP server and define a tool that leverages client-side sampling. It shows how to check for client sampling support, build a `CreateMessageRequest` with content and model preferences, and process the asynchronous result using `Mono`.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_19

LANGUAGE: Java
CODE:
```
// Create a server
McpAsyncServer server = McpServer.async(transportProvider)
    .serverInfo("my-server", "1.0.0")
    .build();

// Define a tool that uses sampling
var calculatorTool = new McpServerFeatures.AsyncToolSpecification(
    new Tool("ai-calculator", "Performs calculations using AI", schema),
    (exchange, arguments) -> {
        // Check if client supports sampling
        if (exchange.getClientCapabilities().sampling() == null) {
            return Mono.just(new CallToolResult("Client does not support AI capabilities", false));
        }
        
        // Create a sampling request
        McpSchema.CreateMessageRequest request = McpSchema.CreateMessageRequest.builder()
            .content(new McpSchema.TextContent("Calculate: " + arguments.get("expression")))
            .modelPreferences(McpSchema.ModelPreferences.builder()
                .hints(List.of(
                    McpSchema.ModelHint.of("claude-3-sonnet"),
                    McpSchema.ModelHint.of("claude")
                ))
                .intelligencePriority(0.8)  // Prioritize intelligence
                .speedPriority(0.5)         // Moderate speed importance
                .build())
            .systemPrompt("You are a helpful calculator assistant. Provide only the numerical answer.")
            .maxTokens(100)
            .build();
        
        // Request sampling from the client
        return exchange.createMessage(request)
            .map(result -> {
                // Process the result
                String answer = result.content().text();
                return new CallToolResult(answer, false);
            });
    }
);

// Add the tool to the server
server.addTool(calculatorTool)
    .subscribe();
```

----------------------------------------

TITLE: Listing Tools Response (JSON)
DESCRIPTION: The server responds to a 'tools/list' request with a list of available tools. Each tool includes a unique 'name', a 'description', and an 'inputSchema' defining its expected parameters. The 'nextCursor' field is provided for pagination.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "tools": [
      {
        "name": "get_weather",
        "description": "Get current weather information for a location",
        "inputSchema": {
          "type": "object",
          "properties": {
            "location": {
              "type": "string",
              "description": "City name or zip code"
            }
          },
          "required": ["location"]
        }
      }
    ],
    "nextCursor": "next-page-cursor"
  }
}
```

----------------------------------------

TITLE: Creating a Synchronous MCP Server in Java
DESCRIPTION: This snippet demonstrates how to initialize and configure a synchronous Model Context Protocol (MCP) server in Java. It shows how to enable various server capabilities such as resources, tools, prompts, logging, and completions, and how to register specifications for tools, resources, and prompts. The server must be explicitly closed when no longer needed.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_0

LANGUAGE: java
CODE:
```
// Create a server with custom configuration
McpSyncServer syncServer = McpServer.sync(transportProvider)
    .serverInfo("my-server", "1.0.0")
    .capabilities(ServerCapabilities.builder()
        .resources(true)     // Enable resource support
        .tools(true)         // Enable tool support
        .prompts(true)       // Enable prompt support
        .logging()           // Enable logging support
        .completions()      // Enable completions support
        .build())
    .build();

// Register tools, resources, and prompts
syncServer.addTool(syncToolSpecification);
syncServer.addResource(syncResourceSpecification);
syncServer.addPrompt(syncPromptSpecification);

// Close the server when done
syncServer.close();
```

----------------------------------------

TITLE: Defining NWS API Helper Functions (Python)
DESCRIPTION: This Python snippet defines two asynchronous helper functions for interacting with the National Weather Service (NWS) API. `make_nws_request` handles making HTTP GET requests to the NWS API, including proper headers, error handling, and JSON parsing. `format_alert` takes a raw alert feature dictionary and formats its key properties into a human-readable string, preparing the data for presentation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_3

LANGUAGE: Python
CODE:
```
async def make_nws_request(url: str) -> dict[str, Any] | None:
    """Make a request to the NWS API with proper error handling."""
    headers = {
        "User-Agent": USER_AGENT,
        "Accept": "application/geo+json"
    }
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(url, headers=headers, timeout=30.0)
            response.raise_for_status()
            return response.json()
        except Exception:
            return None

def format_alert(feature: dict) -> str:
    """Format an alert feature into a readable string."""
    props = feature["properties"]
    return f"""
Event: {props.get('event', 'Unknown')}
Area: {props.get('areaDesc', 'Unknown')}
Severity: {props.get('severity', 'Unknown')}
Description: {props.get('description', 'No description available')}
Instructions: {props.get('instruction', 'No specific instructions provided')}
"""
```

----------------------------------------

TITLE: Integrating Tool Annotations in TypeScript Server
DESCRIPTION: This TypeScript snippet demonstrates how to integrate tool definitions, including annotations, into an MCP server using `setRequestHandler`. It defines a `calculate_sum` tool that is read-only and operates in a closed world, accepting two numbers (`a`, `b`) as input.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#_snippet_10

LANGUAGE: typescript
CODE:
```
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [{
      name: "calculate_sum",
      description: "Add two numbers together",
      inputSchema: {
        type: "object",
        properties: {
          a: { type: "number" },
          b: { type: "number" }
        },
        required: ["a", "b"]
      },
      annotations: {
        title: "Calculate Sum",
        readOnlyHint: true,
        openWorldHint: false
      }
    }]
  };
});
```

----------------------------------------

TITLE: Implementing Weather Service with Spring AI Tools in Java
DESCRIPTION: This Java class defines a `WeatherService` using Spring's `RestClient` to interact with the National Weather Service API. It exposes two methods, `getWeatherForecastByLocation` and `getAlerts`, annotated with `@Tool` to make them discoverable and callable by an MCP server, providing weather forecast and alert functionalities.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_27

LANGUAGE: Java
CODE:
```
@Service
public class WeatherService {

	private final RestClient restClient;

	public WeatherService() {
		this.restClient = RestClient.builder()
			.baseUrl("https://api.weather.gov")
			.defaultHeader("Accept", "application/geo+json")
			.defaultHeader("User-Agent", "WeatherApiClient/1.0 (your@email.com)")
			.build();
	}

  @Tool(description = "Get weather forecast for a specific latitude/longitude")
  public String getWeatherForecastByLocation(
      double latitude,   // Latitude coordinate
      double longitude   // Longitude coordinate
  ) {
      // Returns detailed forecast including:
      // - Temperature and unit
      // - Wind speed and direction
      // - Detailed forecast description
  }
	
  @Tool(description = "Get weather alerts for a US state")
  public String getAlerts(
      @ToolParam(description = "Two-letter US state code (e.g. CA, NY)" String state
  ) {
      // Returns active alerts including:
      // - Event type
      // - Affected area
      // - Severity
      // - Description
      // - Safety instructions
  }

  // ......
}
```

----------------------------------------

TITLE: Implementing a Basic Tool in Python
DESCRIPTION: This Python example illustrates how to set up an MCP server and implement a `calculate_sum` tool. It uses decorators (`@app.list_tools()`, `@app.call_tool()`) to define the tool's metadata and input schema, and to handle its execution logic, returning the sum of two numbers as text content.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#_snippet_2

LANGUAGE: Python
CODE:
```
app = Server("example-server")

@app.list_tools()
async def list_tools() -> list[types.Tool]:
    return [
        types.Tool(
            name="calculate_sum",
            description="Add two numbers together",
            inputSchema={
                "type": "object",
                "properties": {
                    "a": {"type": "number"},
                    "b": {"type": "number"}
                },
                "required": ["a", "b"]
            }
        )
    ]

@app.call_tool()
async def call_tool(
    name: str,
    arguments: dict
) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
    if name == "calculate_sum":
        a = arguments["a"]
        b = arguments["b"]
        result = a + b
        return [types.TextContent(type="text", text=str(result))]
    raise ValueError(f"Tool not found: {name}")
```

----------------------------------------

TITLE: Defining a Read-Only Web Search Tool (TypeScript)
DESCRIPTION: This snippet defines a `web_search` tool with annotations indicating it is read-only (`readOnlyHint: true`) and interacts with an 'open world' (`openWorldHint: true`). It takes a `query` string as input for web searches.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
// A read-only search tool
{
  name: "web_search",
  description: "Search the web for information",
  inputSchema: {
    type: "object",
    properties: {
      query: { type: "string" }
    },
    required: ["query"]
  },
  annotations: {
    title: "Web Search",
    readOnlyHint: true,
    openWorldHint: true
  }
}
```

----------------------------------------

TITLE: Defining a System Operation Tool
DESCRIPTION: This snippet provides an example of a tool definition for `execute_command`, designed to run shell commands. It specifies an `inputSchema` with `command` (string) and `args` (array of strings) as parameters, enabling LLMs to interact with the local system.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
{
  name: "execute_command",
  description: "Run a shell command",
  inputSchema: {
    type: "object",
    properties: {
      command: { type: "string" },
      args: { type: "array", items: { type: "string" } }
    }
  }
}
```

----------------------------------------

TITLE: Defining Protocol Layer Methods in TypeScript
DESCRIPTION: This snippet defines the `Protocol` class, which handles high-level message framing and communication patterns. It includes methods for setting request and notification handlers, and for sending requests and one-way notifications, forming the core of the MCP's protocol layer.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Protocol<Request, Notification, Result> {
    // Handle incoming requests
    setRequestHandler<T>(schema: T, handler: (request: T, extra: RequestHandlerExtra) => Promise<Result>): void

    // Handle incoming notifications
    setNotificationHandler<T>(schema: T, handler: (notification: T) => Promise<void>): void

    // Send requests and await responses
    request<T>(request: Request, schema: T, options?: RequestOptions): Promise<T>

    // Send one-way notifications
    notification(notification: Notification): Promise<void>
}
```

----------------------------------------

TITLE: Connect to MCP Server (Kotlin)
DESCRIPTION: Implements the `connectToServer` function within the `MCPClient` class. This function starts an external server process based on the script file type (.js, .py, .jar), establishes a standard I/O transport, connects the MCP client, lists available tools, and stores them.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_46

LANGUAGE: kotlin
CODE:
```
suspend fun connectToServer(serverScriptPath: String) {
    try {
        val command = buildList {
            when (serverScriptPath.substringAfterLast(".")) {
                "js" -> add("node")
                "py" -> add(if (System.getProperty("os.name").lowercase().contains("win")) "python" else "python3")
                "jar" -> addAll(listOf("java", "-jar"))
                else -> throw IllegalArgumentException("Server script must be a .js, .py or .jar file")
            }
            add(serverScriptPath)
        }

        val process = ProcessBuilder(command).start()
        val transport = StdioClientTransport(
            input = process.inputStream.asSource().buffered(),
            output = process.outputStream.asSink().buffered()
        )

        mcp.connect(transport)

        val toolsResult = mcp.listTools()
        tools = toolsResult?.tools?.map { tool ->
            ToolUnion.ofTool(
                Tool.builder()
                    .name(tool.name)
                    .description(tool.description ?: "")
                    .inputSchema(
                        Tool.InputSchema.builder()
                            .type(JsonValue.from(tool.inputSchema.type))
                            .properties(tool.inputSchema.properties.toJsonValue())
                            .putAdditionalProperty("required", JsonValue.from(tool.inputSchema.required))
                            .build()
                    )
                    .build()
            )
        } ?: emptyList()
        println("Connected to server with tools: ${tools.joinToString(", ") { it.tool().get().name() }}")
    } catch (e: Exception) {
        println("Failed to connect to MCP server: $e")
        throw e
    }
}
```

----------------------------------------

TITLE: Receiving Server Initialization Response in JSON
DESCRIPTION: This JSON snippet illustrates the server's response to the client's `initialize` request in the Model Context Protocol. It confirms the `protocolVersion`, declares the server's own `capabilities` (e.g., `logging`, `prompts`, `resources`, `tools`), and provides `serverInfo` such as its name and version, completing the capability negotiation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/lifecycle.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "protocolVersion": "2024-11-05",
    "capabilities": {
      "logging": {},
      "prompts": {
        "listChanged": true
      },
      "resources": {
        "subscribe": true,
        "listChanged": true
      },
      "tools": {
        "listChanged": true
      }
    },
    "serverInfo": {
      "name": "ExampleServer",
      "version": "1.0.0"
    }
  }
}
```

----------------------------------------

TITLE: Creating an MCP Client Manually in Java
DESCRIPTION: This snippet demonstrates how to manually create and use an McpClient in Java. It shows how to configure server parameters, establish a stdio transport, initialize the client, list available tools, call specific tools like 'getWeatherForecastByLocation' and 'getAlerts', and gracefully close the client connection.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_34

LANGUAGE: java
CODE:
```
var stdioParams = ServerParameters.builder("java")
  .args("-jar", "/ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar")
  .build();

var stdioTransport = new StdioClientTransport(stdioParams);

var mcpClient = McpClient.sync(stdioTransport).build();

mcpClient.initialize();

ListToolsResult toolsList = mcpClient.listTools();

CallToolResult weather = mcpClient.callTool(
  new CallToolRequest("getWeatherForecastByLocation",
      Map.of("latitude", "47.6062", "longitude", "-122.3321")));

CallToolResult alert = mcpClient.callTool(
  new CallToolRequest("getAlerts", Map.of("state", "NY")));

mcpClient.closeGracefully();
```

----------------------------------------

TITLE: Integrating Tool Annotations in Python Server
DESCRIPTION: This Python snippet shows how to define an MCP tool with annotations using the `FastMCP` framework. The `calculate_sum` asynchronous function is decorated with annotations for title, read-only hint, and open-world hint, demonstrating server-side tool registration.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#_snippet_11

LANGUAGE: python
CODE:
```
from mcp.server.fastmcp import FastMCP

mcp = FastMCP("example-server")

@mcp.tool(
    annotations={
        "title": "Calculate Sum",
        "readOnlyHint": True,
        "openWorldHint": False
    }
)
async def calculate_sum(a: float, b: float) -> str:
    """Add two numbers together.
    
    Args:
        a: First number to add
        b: Second number to add
    """
    result = a + b
    return str(result)
```

----------------------------------------

TITLE: Initializing and Running the MCP Server in Python
DESCRIPTION: This Python snippet demonstrates how to initialize and run the Model Context Protocol (MCP) server. It uses `mcp.run(transport='stdio')` to start the server, configured to communicate over standard I/O, typically executed when the script is run directly.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_5

LANGUAGE: python
CODE:
```
if __name__ == "__main__":
    # Initialize and run the server
    mcp.run(transport='stdio')
```

----------------------------------------

TITLE: Defining Error Message Interface in TypeScript
DESCRIPTION: This snippet defines the `Error` interface, representing a failed response to a `Request` message in the MCP. It includes a numeric `code`, a descriptive `message`, and an optional `data` field for additional error details.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
interface Error {
  code: number;
  message: string;
  data?: unknown;
}
```

----------------------------------------

TITLE: Sending Structured Log Messages (Java)
DESCRIPTION: This snippet demonstrates how to send a structured log message from the server to connected clients using the `loggingNotification` method. It allows specifying the logging level (e.g., INFO), a custom logger name, and the log data. Clients can filter messages based on their configured minimum logging level.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_7

LANGUAGE: java
CODE:
```
// Send a log message to clients
server.loggingNotification(LoggingMessageNotification.builder()
    .level(LoggingLevel.INFO)
    .logger("custom-logger")
    .data("Custom log message")
    .build());
```

----------------------------------------

TITLE: Defining Text Content in MCP Sampling Messages (JSON)
DESCRIPTION: This JSON snippet defines the structure for text-based content within MCP sampling messages. It specifies the `type` as 'text' and includes the actual `text` string that represents the message content. This format is used for both user prompts and LLM-generated responses when the content is purely textual.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/sampling.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "type": "text",
  "text": "The message content"
}
```

----------------------------------------

TITLE: Handling Protocol Errors in JSON-RPC
DESCRIPTION: This JSON snippet illustrates a standard JSON-RPC protocol error, specifically for an 'Unknown tool'. It includes the JSON-RPC version, request ID, and an error object with a numeric code and a descriptive message indicating the issue.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#_snippet_11

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 3,
  "error": {
    "code": -32602,
    "message": "Unknown tool: invalid_tool_name"
  }
}
```

----------------------------------------

TITLE: MCP Pagination Response Format (JSON)
DESCRIPTION: This JSON snippet illustrates the server's response format for paginated list operations in the Model Context Protocol (MCP). It includes the current page of results within the `resources` array and an optional `nextCursor` field, which clients use to request subsequent pages. The presence of `nextCursor` indicates that more results are available.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/pagination.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": "123",
  "result": {
    "resources": [...],
    "nextCursor": "eyJwYWdlIjogM30="
  }
}
```

----------------------------------------

TITLE: Model Context Protocol Tool Message Flow (Mermaid)
DESCRIPTION: This Mermaid sequence diagram illustrates the typical message flow for tool interaction within the Model Context Protocol. It covers tool discovery, selection by the LLM, invocation by the client, result processing, and updates to the tool list.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#_snippet_6

LANGUAGE: Mermaid
CODE:
```
sequenceDiagram
    participant LLM
    participant Client
    participant Server

    Note over Client,Server: Discovery
    Client->>Server: tools/list
    Server-->>Client: List of tools

    Note over Client,LLM: Tool Selection
    LLM->>Client: Select tool to use

    Note over Client,Server: Invocation
    Client->>Server: tools/call
    Server-->>Client: Tool result
    Client->>LLM: Process result

    Note over Client,Server: Updates
    Server--)Client: tools/list_changed
    Client->>Server: tools/list
    Server-->>Client: Updated tools
```

----------------------------------------

TITLE: Creating an Asynchronous MCP Server in Java
DESCRIPTION: This snippet illustrates how to set up and configure an asynchronous Model Context Protocol (MCP) server in Java using reactive programming patterns. It demonstrates enabling server capabilities like resources, tools, and prompts, and registering specifications for these components. The asynchronous operations are handled with doOnSuccess and subscribe, and the server is closed asynchronously.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_1

LANGUAGE: java
CODE:
```
// Create an async server with custom configuration
McpAsyncServer asyncServer = McpServer.async(transportProvider)
    .serverInfo("my-server", "1.0.0")
    .capabilities(ServerCapabilities.builder()
        .resources(true)     // Enable resource support
        .tools(true)         // Enable tool support
        .prompts(true)       // Enable prompt support
        .logging()           // Enable logging support
        .build())
    .build();

// Register tools, resources, and prompts
asyncServer.addTool(asyncToolSpecification)
    .doOnSuccess(v -> logger.info("Tool registered"))
    .subscribe();

asyncServer.addResource(asyncResourceSpecification)
    .doOnSuccess(v -> logger.info("Resource registered"))
    .subscribe();

asyncServer.addPrompt(asyncPromptSpecification)
    .doOnSuccess(v -> logger.info("Prompt registered"))
    .subscribe();

// Close the server when done
asyncServer.close()
    .doOnSuccess(v -> logger.info("Server closed"))
    .subscribe();
```

----------------------------------------

TITLE: Requesting LLM Generation with sampling/createMessage in MCP (JSON)
DESCRIPTION: This JSON object represents a `sampling/createMessage` request sent by a server to a client in the Model Context Protocol (MCP) to initiate an LLM generation. It includes user messages, model preferences (like hints and priority for intelligence/speed), an optional system prompt, and a maximum token limit for the response. The `id` field is used for correlating requests and responses.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "sampling/createMessage",
  "params": {
    "messages": [
      {
        "role": "user",
        "content": {
          "type": "text",
          "text": "What is the capital of France?"
        }
      }
    ],
    "modelPreferences": {
      "hints": [
        {
          "name": "claude-3-sonnet"
        }
      ],
      "intelligencePriority": 0.8,
      "speedPriority": 0.5
    },
    "systemPrompt": "You are a helpful assistant.",
    "maxTokens": 100
  }
}
```

----------------------------------------

TITLE: Implementing a Basic Tool in TypeScript
DESCRIPTION: This TypeScript example demonstrates how to set up an MCP server and implement a `calculate_sum` tool. It shows how to define the tool's metadata and input schema using `ListToolsRequestSchema` and how to handle the tool's execution logic for `CallToolRequestSchema`, returning the sum of two numbers.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const server = new Server({
  name: "example-server",
  version: "1.0.0"
}, {
  capabilities: {
    tools: {}
  }
});

// Define available tools
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [{
      name: "calculate_sum",
      description: "Add two numbers together",
      inputSchema: {
        type: "object",
        properties: {
          a: { type: "number" },
          b: { type: "number" }
        },
        required: ["a", "b"]
      }
    }]
  };
});

// Handle tool execution
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  if (request.params.name === "calculate_sum") {
    const { a, b } = request.params.arguments;
    return {
      content: [
        {
          type: "text",
          text: String(a + b)
        }
      ]
    };
  }
  throw new Error("Tool not found");
});
```

----------------------------------------

TITLE: MCP Session Management Sequence Diagram
DESCRIPTION: This sequence diagram illustrates the typical interaction flow between a client and a server in the Model Context Protocol (MCP), focusing on session management. It shows the initialization phase, subsequent client requests, server responses (including SSE streams), client notifications, and server-initiated requests, all utilizing the `Mcp-Session-Id` header for session continuity.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/transports.mdx#_snippet_0

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Client
    participant Server

    note over Client, Server: initialization

    Client->>+Server: POST InitializeRequest
    Server->>-Client: InitializeResponse<br>Mcp-Session-Id: 1868a90c...

    Client->>+Server: POST InitializedNotification<br>Mcp-Session-Id: 1868a90c...
    Server->>-Client: 202 Accepted

    note over Client, Server: client requests
    Client->>+Server: POST ... request ...<br>Mcp-Session-Id: 1868a90c...

    alt single HTTP response
      Server->>Client: ... response ...
    else server opens SSE stream
      loop while connection remains open
          Server-)Client: ... SSE messages from server ...
      end
      Server-)Client: SSE event: ... response ...
    end
    deactivate Server

    note over Client, Server: client notifications/responses
    Client->>+Server: POST ... notification/response ...<br>Mcp-Session-Id: 1868a90c...
    Server->>-Client: 202 Accepted

    note over Client, Server: server requests
    Client->>+Server: GET<br>Mcp-Session-Id: 1868a90c...
    loop while connection remains open
        Server-)Client: ... SSE messages from server ...
    end
    deactivate Server
```

----------------------------------------

TITLE: Prompt Messages with Embedded Resources (JSON)
DESCRIPTION: Illustrates how a dynamic prompt's response can include multiple messages, some containing plain text and others embedding external resources like logs or code files, to provide comprehensive context to an LLM.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  "messages": [
    {
      "role": "user",
      "content": {
        "type": "text",
        "text": "Analyze these system logs and the code file for any issues:"
      }
    },
    {
      "role": "user",
      "content": {
        "type": "resource",
        "resource": {
          "uri": "logs://recent?timeframe=1h",
          "text": "[2024-03-14 15:32:11] ERROR: Connection timeout in network.py:127\n[2024-03-14 15:32:15] WARN: Retrying connection (attempt 2/3)\n[2024-03-14 15:32:20] ERROR: Max retries exceeded",
          "mimeType": "text/plain"
        }
      }
    },
    {
      "role": "user",
      "content": {
        "type": "resource",
        "resource": {
          "uri": "file:///path/to/code.py",
          "text": "def connect_to_service(timeout=30):\n    retries = 3\n    for attempt in range(retries):\n        try:\n            return establish_connection(timeout)\n        except TimeoutError:\n            if attempt == retries - 1:\n                raise\n            time.sleep(5)\n\ndef establish_connection(timeout):\n    # Connection implementation\n    pass",
          "mimeType": "text/x-python"
        }
      }
    }
  ]
}
```

----------------------------------------

TITLE: Capability Negotiation Sequence Diagram - Mermaid
DESCRIPTION: This Mermaid sequence diagram illustrates the capability negotiation process between a Host, Client, and Server in the Model Context Protocol. It shows the initialization, declaration of capabilities, active session interactions (client and server requests), notifications, and session termination, highlighting how features are agreed upon.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/architecture/index.mdx#_snippet_1

LANGUAGE: Mermaid
CODE:
```
sequenceDiagram
    participant Host
    participant Client
    participant Server

    Host->>+Client: Initialize client
    Client->>+Server: Initialize session with capabilities
    Server-->>Client: Respond with supported capabilities

    Note over Host,Server: Active Session with Negotiated Features

    loop Client Requests
        Host->>Client: User- or model-initiated action
        Client->>Server: Request (tools/resources)
        Server-->>Client: Response
        Client-->>Host: Update UI or respond to model
    end

    loop Server Requests
        Server->>Client: Request (sampling)
        Client->>Host: Forward to AI
        Host-->>Client: AI response
        Client-->>Server: Response
    end

    loop Notifications
        Server--)Client: Resource updates
        Client--)Server: Status changes
    end

    Host->>Client: Terminate
    Client->>-Server: End session
    deactivate Server
```

----------------------------------------

TITLE: MCP Pagination Sequence Diagram (Mermaid)
DESCRIPTION: This Mermaid sequence diagram visualizes the typical pagination flow between a client and a server in the Model Context Protocol (MCP). It shows an initial list request without a cursor, followed by a loop where the server returns a page of results with a `nextCursor`, and the client then uses that cursor in subsequent requests until no `nextCursor` is provided, signaling the end of results.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/pagination.mdx#_snippet_2

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Client
    participant Server

    Client->>Server: List Request (no cursor)
    loop Pagination Loop
      Server-->>Client: Page of results + nextCursor
      Client->>Server: List Request (with cursor)
    end
```

----------------------------------------

TITLE: Example LLM Sampling Request (JSON)
DESCRIPTION: This JSON example demonstrates a typical `sampling/createMessage` request sent to an MCP client. It includes a single user message, a `systemPrompt` to guide the LLM, specifies `thisServer` context inclusion, and sets a `maxTokens` limit for the generated response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/sampling.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "method": "sampling/createMessage",
  "params": {
    "messages": [
      {
        "role": "user",
        "content": {
          "type": "text",
          "text": "What files are in the current directory?"
        }
      }
    ],
    "systemPrompt": "You are a helpful file system assistant.",
    "includeContext": "thisServer",
    "maxTokens": 100
  }
}
```

----------------------------------------

TITLE: Implementing an MCP Server in TypeScript
DESCRIPTION: This TypeScript example demonstrates how to set up a basic Model Context Protocol (MCP) server using the `@modelcontextprotocol/sdk`. It initializes a server, registers a request handler for `ListResourcesRequestSchema` to return example resources, and connects it to a `StdioServerTransport` for standard I/O communication. This snippet showcases the core steps for creating an MCP server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

const server = new Server({
  name: "example-server",
  version: "1.0.0"
}, {
  capabilities: {
    resources: {}
  }
});

// Handle requests
server.setRequestHandler(ListResourcesRequestSchema, async () => {
  return {
    resources: [
      {
        uri: "example://resource",
        name: "Example Resource"
      }
    ]
  };
});

// Connect transport
const transport = new StdioServerTransport();
await server.connect(transport);
```

----------------------------------------

TITLE: Creating Spring Boot MCP Server Application in Java
DESCRIPTION: This Spring Boot application class initializes the MCP server. It registers the `WeatherService` as a `ToolCallbackProvider` using `MethodToolCallbackProvider`, enabling the `@Tool` annotated methods within `WeatherService` to be exposed as callable tools to the MCP server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_28

LANGUAGE: Java
CODE:
```
@SpringBootApplication
public class McpServerApplication {

	public static void main(String[] args) {
		SpringApplication.run(McpServerApplication.class, args);
	}

	@Bean
	public ToolCallbackProvider weatherTools(WeatherService weatherService) {
		return  MethodToolCallbackProvider.builder().toolObjects(weatherService).build();
	}
}
```

----------------------------------------

TITLE: Defining MCPClient Class in TypeScript
DESCRIPTION: This TypeScript snippet defines the basic structure of the `MCPClient` class. It includes necessary imports from the Model Context Protocol SDK, Anthropic SDK, and `dotenv`. The class initializes an Anthropic client and declares private properties for the MCP client, transport, and Anthropic instance, setting the foundation for server interaction.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
import { Client } from "@modelcontextprotocol/sdk/client/index.js";
import { StdioClientTransport } from "@modelcontextprotocol/sdk/client/stdio.js";
import Anthropic from "@anthropic-ai/sdk";
import dotenv from "dotenv";
import {
  CallToolResultSchema,
  ListToolsResultSchema,
} from "@modelcontextprotocol/sdk/types.js";
import * as readline from "node:readline";

dotenv.config();

interface MCPClientConfig {
  name?: string;
  version?: string;
}

class MCPClient {
  private client: Client | null = null;
  private anthropic: Anthropic;
  private transport: StdioClientTransport | null = null;

  constructor(config: MCPClientConfig = {}) {
    this.anthropic = new Anthropic();
  }

  // Methods will go here
}
```

----------------------------------------

TITLE: Initializing MCP Server with Stdio Transport (TypeScript)
DESCRIPTION: This snippet demonstrates how to set up an MCP server instance in TypeScript and connect it to a `StdioServerTransport` for communication over standard input/output streams. It initializes the server with basic metadata and capabilities.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
const server = new Server({
  name: "example-server",
  version: "1.0.0"
}, {
  capabilities: {}
});

const transport = new StdioServerTransport();
await server.connect(transport);
```

----------------------------------------

TITLE: Requesting LLM Generation (JSON)
DESCRIPTION: This JSON request payload for 'sampling/createMessage' is sent by servers to initiate an LLM generation. It includes user messages, model preferences (hints, intelligence, and speed priorities), an optional system prompt, and a maximum token limit for the desired response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "sampling/createMessage",
  "params": {
    "messages": [
      {
        "role": "user",
        "content": {
          "type": "text",
          "text": "What is the capital of France?"
        }
      }
    ],
    "modelPreferences": {
      "hints": [
        {
          "name": "claude-3-sonnet"
        }
      ],
      "intelligencePriority": 0.8,
      "speedPriority": 0.5
    },
    "systemPrompt": "You are a helpful assistant.",
    "maxTokens": 100
  }
}
```

----------------------------------------

TITLE: Sending Log Message Notification - JSON
DESCRIPTION: This JSON-RPC notification illustrates how a server sends a structured log message to a client. It includes the `level` of the message ('error'), an optional `logger` name ('database'), and arbitrary JSON-serializable `data` providing context about the event.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/logging.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/message",
  "params": {
    "level": "error",
    "logger": "database",
    "data": {
      "error": "Connection failed",
      "details": {
        "host": "localhost",
        "port": 5432
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining a GitHub Issue Creation Tool (TypeScript)
DESCRIPTION: This snippet defines a tool for creating GitHub issues, specifying its name, description, and the JSON schema for its input parameters. It requires a title, body, and an optional array of labels for the issue.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
{
  name: "github_create_issue",
  description: "Create a GitHub issue",
  inputSchema: {
    type: "object",
    properties: {
      title: { type: "string" },
      body: { type: "string" },
      labels: { type: "array", items: { type: "string" } }
    }
  }
}
```

----------------------------------------

TITLE: Requesting Completions (Request) - JSON
DESCRIPTION: This JSON object represents a `completion/complete` request sent by a client to a server. It specifies a prompt reference (`ref/prompt`) named 'code_review' and an argument 'language' with a current value of 'py', used to obtain autocompletion suggestions.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/completion.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "completion/complete",
  "params": {
    "ref": {
      "type": "ref/prompt",
      "name": "code_review"
    },
    "argument": {
      "name": "language",
      "value": "py"
    }
  }
}
```

----------------------------------------

TITLE: Sending Client Initialized Notification in JSON
DESCRIPTION: This JSON snippet represents the `notifications/initialized` message sent by the client to the server. This notification signifies that the client has successfully processed the server's `initialize` response and is now ready to proceed with normal protocol operations, marking the transition from the initialization phase to the operation phase.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/lifecycle.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/initialized"
}
```

----------------------------------------

TITLE: Processing Queries and Tool Calls in TypeScript
DESCRIPTION: This asynchronous method handles user queries by interacting with an Anthropic AI model. It initializes messages, retrieves available tools, and iteratively processes the AI's responses, including executing tool calls and incorporating their results back into the conversation flow. It manages the state of the conversation and ensures proper tool execution.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
  async processQuery(query: string): Promise<string> {
    if (!this.client) {
      throw new Error("Client not connected");
    }

    // Initialize messages array with user query
    let messages: Anthropic.MessageParam[] = [
      {
        role: "user",
        content: query,
      },
    ];

    // Get available tools
    const toolsResponse = await this.client.request(
      { method: "tools/list" },
      ListToolsResultSchema
    );

    const availableTools = toolsResponse.tools.map((tool: any) => ({
      name: tool.name,
      description: tool.description,
      input_schema: tool.inputSchema,
    }));

    const finalText: string[] = [];
    let currentResponse = await this.anthropic.messages.create({
      model: "claude-3-5-sonnet-20241022",
      max_tokens: 1000,
      messages,
      tools: availableTools,
    });

    // Process the response and any tool calls
    while (true) {
      // Add Claude's response to final text and messages
      for (const content of currentResponse.content) {
        if (content.type === "text") {
          finalText.push(content.text);
        } else if (content.type === "tool_use") {
          const toolName = content.name;
          const toolArgs = content.input;

          // Execute tool call
          const result = await this.client.request(
            {
              method: "tools/call",
              params: {
                name: toolName,
                arguments: toolArgs,
              },
            },
            CallToolResultSchema
          );

          finalText.push(
            `[Calling tool ${toolName} with args ${JSON.stringify(toolArgs)}]`
          );

          // Add Claude's response (including tool use) to messages
          messages.push({
            role: "assistant",
            content: currentResponse.content,
          });

          // Add tool result to messages
          messages.push({
            role: "user",
            content: [
              {
                type: "tool_result",
                tool_use_id: content.id,
                content: [
                  { type: "text", text: JSON.stringify(result.content) },
                ],
              },
            ],
          });

          // Get next response from Claude with tool results
          currentResponse = await this.anthropic.messages.create({
            model: "claude-3-5-sonnet-20241022",
            max_tokens: 1000,
            messages,
            tools: availableTools,
          });

          // Add Claude's interpretation of the tool results to final text
          if (currentResponse.content[0]?.type === "text") {
            finalText.push(currentResponse.content[0].text);
          }

          // Continue the loop to process any additional tool calls
          continue;
        }
      }

      // If we reach here, there were no tool calls in the response
      break;
    }

    return finalText.join("\n");
  }
```

----------------------------------------

TITLE: Processing User Queries with Anthropic and MCP (TypeScript)
DESCRIPTION: Takes a user `query` string, sends it to the Anthropic API (Claude 3.5 Sonnet) along with available tools. It processes the API response, extracting text content and handling tool use requests. For tool use, it calls the corresponding tool via the MCP client, includes the tool result in the conversation, and potentially makes another API call with the updated messages. Returns the combined text response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_19

LANGUAGE: typescript
CODE:
```
async processQuery(query: string) {
  const messages: MessageParam[] = [
    {
      role: "user",
      content: query,
    },
  ];

  const response = await this.anthropic.messages.create({
    model: "claude-3-5-sonnet-20241022",
    max_tokens: 1000,
    messages,
    tools: this.tools,
  });

  const finalText = [];
  const toolResults = [];

  for (const content of response.content) {
    if (content.type === "text") {
      finalText.push(content.text);
    } else if (content.type === "tool_use") {
      const toolName = content.name;
      const toolArgs = content.input as { [x: string]: unknown } | undefined;

      const result = await this.mcp.callTool({
        name: toolName,
        arguments: toolArgs,
      });
      toolResults.push(result);
      finalText.push(
        `[Calling tool ${toolName} with args ${JSON.stringify(toolArgs)}]`
      );

      messages.push({
        role: "user",
        content: result.content as string,
      });

      const response = await this.anthropic.messages.create({
        model: "claude-3-5-sonnet-20241022",
        max_tokens: 1000,
        messages,
      });

      finalText.push(
        response.content[0].type === "text" ? response.content[0].text : ""
      );
    }
  }

  return finalText.join("\n");
}
```

----------------------------------------

TITLE: Processing User Queries with Anthropic and Tool Calls (Kotlin)
DESCRIPTION: Initializes Anthropic message parameters and defines a suspend function to process user queries. It sends the query to the Anthropic API, handles text responses, and processes tool use requests by calling the specified tool via the MCP client and sending the result back to the API for further processing.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_48

LANGUAGE: kotlin
CODE:
```
private val messageParamsBuilder: MessageCreateParams.Builder = MessageCreateParams.builder()
    .model(Model.CLAUDE_3_5_SONNET_20241022)
    .maxTokens(1024)

suspend fun processQuery(query: String): String {
    val messages = mutableListOf(
        MessageParam.builder()
            .role(MessageParam.Role.USER)
            .content(query)
            .build()
    )

    val response = anthropic.messages().create(
        messageParamsBuilder
            .messages(messages)
            .tools(tools)
            .build()
    )

    val finalText = mutableListOf<String>()
    response.content().forEach { content ->
        when {
            content.isText() -> finalText.add(content.text().getOrNull()?.text() ?: "")

            content.isToolUse() -> {
                val toolName = content.toolUse().get().name()
                val toolArgs =
                    content.toolUse().get()._input().convert(object : TypeReference<Map<String, JsonValue>>() {})

                val result = mcp.callTool(
                    name = toolName,
                    arguments = toolArgs ?: emptyMap()
                )
                finalText.add("[Calling tool $toolName with args $toolArgs]")

                messages.add(
                    MessageParam.builder()
                        .role(MessageParam.Role.USER)
                        .content(
                            """
                                \"type\": \"tool_result\",
                                \"tool_name\": $toolName,
                                \"result\": ${result?.content?.joinToString("\\n") { (it as TextContent).text ?: "" }}
                            """.trimIndent()
                        )
                        .build()
                )

                val aiResponse = anthropic.messages().create(
                    messageParamsBuilder
                        .messages(messages)
                        .build()
                )

                finalText.add(aiResponse.content().first().text().getOrNull()?.text() ?: "")
            }
        }
    }

    return finalText.joinToString("\n", prefix = "", postfix = "")
}
```

----------------------------------------

TITLE: Model Context Protocol Capability Negotiation Flow (Mermaid)
DESCRIPTION: This sequence diagram illustrates the capability negotiation process and subsequent interactions in the Model Context Protocol. It shows the initialization phase where client and server exchange capabilities, followed by loops for client-initiated requests, server-initiated requests, and notifications, concluding with session termination.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/architecture/index.mdx#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Host
    participant Client
    participant Server

    Host->>+Client: Initialize client
    Client->>+Server: Initialize session with capabilities
    Server-->>Client: Respond with supported capabilities

    Note over Host,Server: Active Session with Negotiated Features

    loop Client Requests
        Host->>Client: User- or model-initiated action
        Client->>Server: Request (tools/resources)
        Server-->>Client: Response
        Client-->>Host: Update UI or respond to model
    end

    loop Server Requests
        Server->>Client: Request (sampling)
        Client->>Host: Forward to AI
        Host-->>Client: AI response
        Client-->>Server: Response
    end

    loop Notifications
        Server--)Client: Resource updates
        Client--)Server: Status changes
    end

    Host->>Client: Terminate
    Client->>-Server: End session
    deactivate Server
```

----------------------------------------

TITLE: Model Context Protocol Progress Flow (Mermaid)
DESCRIPTION: This Mermaid sequence diagram visualizes the progress tracking flow within the Model Context Protocol. It depicts a `Sender` initiating a method request with a `progressToken`, followed by the `Receiver` sending multiple progress notifications back to the `Sender` during a loop, and finally, the `Receiver` sending a method response upon operation completion.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/utilities/progress.mdx#_snippet_2

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Sender
    participant Receiver

    Note over Sender,Receiver: Request with progress token
    Sender->>Receiver: Method request with progressToken

    Note over Sender,Receiver: Progress updates
    loop Progress Updates
        Receiver-->>Sender: Progress notification (0.2/1.0)
        Receiver-->>Sender: Progress notification (0.6/1.0)
        Receiver-->>Sender: Progress notification (1.0/1.0)
    end

    Note over Sender,Receiver: Operation complete
    Receiver->>Sender: Method response
```

----------------------------------------

TITLE: Creating Structured Data Elicitation Request in JSON
DESCRIPTION: Servers use `elicitation/create` to request multiple pieces of structured information from the user, such as contact details. The `requestedSchema` field uses JSON Schema to define multiple properties (e.g., name, email, age) with types, formats, and descriptions, along with required fields.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/elicitation.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "method": "elicitation/create",
  "params": {
    "message": "Please provide your contact information",
    "requestedSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Your full name"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Your email address"
        },
        "age": {
          "type": "number",
          "minimum": 18,
          "description": "Your age"
        }
      },
      "required": ["name", "email"]
    }
  }
}
```

----------------------------------------

TITLE: Defining JSON-RPC Response Structure in TypeScript
DESCRIPTION: This snippet outlines the TypeScript interface for a JSON-RPC 2.0 response message. A response must include the 'jsonrpc' version and the 'id' corresponding to the original request. It must contain either a 'result' object for successful operations or an 'error' object for failures, but never both. Error objects require a numeric 'code' and a 'message' string.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/index.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
{
  jsonrpc: "2.0";
  id: string | number;
  result?: {
    [key: string]: unknown;
  }
  error?: {
    code: number;
    message: string;
    data?: unknown;
  }
}
```

----------------------------------------

TITLE: Run Interactive Chat Loop - Python
DESCRIPTION: Provides a simple command-line interface for interactive chat. It continuously prompts the user for input, calls the `process_query` method, prints the response, and allows the user to exit by typing 'quit'. Includes basic error handling for query processing.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_5

LANGUAGE: python
CODE:
```
async def chat_loop(self):
    """Run an interactive chat loop"""
    print("\nMCP Client Started!")
    print("Type your queries or 'quit' to exit.")

    while True:
        try:
            query = input("\nQuery: ").strip()

            if query.lower() == 'quit':
                break

            response = await self.process_query(query)
            print("\n" + response)

        except Exception as e:
            print(f"\nError: {str(e)}")
```

----------------------------------------

TITLE: Connecting to MCP Server (TypeScript)
DESCRIPTION: Connects the `MCPClient` to an MCP server script specified by `serverScriptPath`. It checks if the script is a `.js` or `.py` file, determines the appropriate command (`node` or `python`), initializes a `StdioClientTransport`, connects the MCP client, lists available tools from the server, and stores them. Throws an error if the script type is invalid or connection fails.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_18

LANGUAGE: typescript
CODE:
```
async connectToServer(serverScriptPath: string) {
  try {
    const isJs = serverScriptPath.endsWith(".js");
    const isPy = serverScriptPath.endsWith(".py");
    if (!isJs && !isPy) {
      throw new Error("Server script must be a .js or .py file");
    }
    const command = isPy
      ? process.platform === "win32"
        ? "python"
        : "python3"
      : process.execPath;

    this.transport = new StdioClientTransport({
      command,
      args: [serverScriptPath],
    });
    this.mcp.connect(this.transport);

    const toolsResult = await this.mcp.listTools();
    this.tools = toolsResult.tools.map((tool) => {
      return {
        name: tool.name,
        description: tool.description,
        input_schema: tool.inputSchema,
      };
    });
    console.log(
      "Connected to server with tools:",
      this.tools.map(({ name }) => name)
    );
  } catch (e) {
    console.log("Failed to connect to MCP server: ", e);
    throw e;
  }
}
```

----------------------------------------

TITLE: Defining Embedded Resources in Model Context Protocol (JSON)
DESCRIPTION: This JSON snippet defines the structure for an embedded resource within the Model Context Protocol. It specifies the resource's "type" as "resource" and includes a nested "resource" object containing its "uri", "mimeType", and "text" content. This allows server-side content like documentation or code samples to be directly incorporated into messages. Resources must include a valid URI, MIME type, and either text or base64-encoded binary data.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/prompts.mdx#_snippet_9

LANGUAGE: json
CODE:
```
{
  "type": "resource",
  "resource": {
    "uri": "resource://example",
    "mimeType": "text/plain",
    "text": "Resource content"
  }
}
```

----------------------------------------

TITLE: Initializing MCP Client and Listing Tools - C#
DESCRIPTION: Parses command line arguments to determine the server command and arguments using a helper function. It sets up an StdioClientTransport for communication, creates the MCP client asynchronously using a factory, connects to the specified server, and then iterates through and prints the names of the available tools reported by the server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_57

LANGUAGE: csharp
CODE:
```
var (command, arguments) = GetCommandAndArguments(args);

var clientTransport = new StdioClientTransport(new()
{
    Name = "Demo Server",
    Command = command,
    Arguments = arguments,
});

await using var mcpClient = await McpClientFactory.CreateAsync(clientTransport);

var tools = await mcpClient.ListToolsAsync();
foreach (var tool in tools)
{
    Console.WriteLine($"Connected to server with tools: {tool.Name}");
}
```

----------------------------------------

TITLE: Implementing Prompts in MCP Server (TypeScript)
DESCRIPTION: This TypeScript example demonstrates how to set up an MCP server to define, list, and retrieve custom prompts. It includes the definition of 'git-commit' and 'explain-code' prompts, and handlers for ListPromptsRequestSchema and GetPromptRequestSchema to generate appropriate responses based on prompt arguments.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
import { Server } from "@modelcontextprotocol/sdk/server";
import {
  ListPromptsRequestSchema,
  GetPromptRequestSchema
} from "@modelcontextprotocol/sdk/types";

const PROMPTS = {
  "git-commit": {
    name: "git-commit",
    description: "Generate a Git commit message",
    arguments: [
      {
        name: "changes",
        description: "Git diff or description of changes",
        required: true
      }
    ]
  },
  "explain-code": {
    name: "explain-code",
    description: "Explain how code works",
    arguments: [
      {
        name: "code",
        description: "Code to explain",
        required: true
      },
      {
        name: "language",
        description: "Programming language",
        required: false
      }
    ]
  }
};

const server = new Server({
  name: "example-prompts-server",
  version: "1.0.0"
}, {
  capabilities: {
    prompts: {}
  }
});

// List available prompts
server.setRequestHandler(ListPromptsRequestSchema, async () => {
  return {
    prompts: Object.values(PROMPTS)
  };
});

// Get specific prompt
server.setRequestHandler(GetPromptRequestSchema, async (request) => {
  const prompt = PROMPTS[request.params.name];
  if (!prompt) {
    throw new Error(`Prompt not found: ${request.params.name}`);
  }

  if (request.params.name === "git-commit") {
    return {
      messages: [
        {
          role: "user",
          content: {
            type: "text",
            text: `Generate a concise but descriptive commit message for these changes:\n\n${request.params.arguments?.changes}`
          }
        }
      ]
    };
  }

  if (request.params.name === "explain-code") {
    const language = request.params.arguments?.language || "Unknown";
    return {
      messages: [
        {
          role: "user",
          content: {
            type: "text",
            text: `Explain how this ${language} code works:\n\n${request.params.arguments?.code}`
          }
        }
      ]
    };
  }

  throw new Error("Prompt implementation not found");
});
```

----------------------------------------

TITLE: Initializing MCP Client Structure (TypeScript)
DESCRIPTION: Sets up necessary imports for Anthropic SDK, MCP SDK, readline, and dotenv. It loads the `ANTHROPIC_API_KEY` from environment variables and throws an error if not found. The `MCPClient` class is defined with private properties for the MCP client, Anthropic client, transport, and tools, initializing the Anthropic and MCP clients in the constructor.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_17

LANGUAGE: typescript
CODE:
```
import { Anthropic } from "@anthropic-ai/sdk";
import {
  MessageParam,
  Tool,
} from "@anthropic-ai/sdk/resources/messages/messages.mjs";
import { Client } from "@modelcontextprotocol/sdk/client/index.js";
import { StdioClientTransport } from "@modelcontextprotocol/sdk/client/stdio.js";
import readline from "readline/promises";
import dotenv from "dotenv";

dotenv.config();

const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
if (!ANTHROPIC_API_KEY) {
  throw new Error("ANTHROPIC_API_KEY is not set");
}

class MCPClient {
  private mcp: Client;
  private anthropic: Anthropic;
  private transport: StdioClientTransport | null = null;
  private tools: Tool[] = [];

  constructor() {
    this.anthropic = new Anthropic({
      apiKey: ANTHROPIC_API_KEY,
    });
    this.mcp = new Client({ name: "mcp-client-cli", version: "1.0.0" });
  }
  // methods will go here
}
```

----------------------------------------

TITLE: Implementing Tool Error Handling
DESCRIPTION: This example demonstrates how to properly handle errors within a tool's operation, returning a structured result object with isError set to true and error details in the content array. This allows the LLM to process and potentially act upon the error.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
try {
  // Tool operation
  const result = performOperation();
  return {
    content: [
      {
        type: "text",
        text: `Operation successful: ${result}`
      }
    ]
  };
} catch (error) {
  return {
    isError: true,
    content: [
      {
        type: "text",
        text: `Error: ${error.message}`
      }
    ]
  };
}
```

LANGUAGE: python
CODE:
```
try:
    # Tool operation
    result = perform_operation()
    return types.CallToolResult(
        content=[
            types.TextContent(
                type="text",
                text=f"Operation successful: {result}"
            )
        ]
    )
except Exception as error:
    return types.CallToolResult(
        isError=True,
        content=[
            types.TextContent(
                type="text",
                text=f"Error: {str(error)}"
            )
        ]
    )
```

----------------------------------------

TITLE: Defining JSON-RPC Request Structure in TypeScript
DESCRIPTION: This snippet defines the TypeScript interface for a JSON-RPC 2.0 request message. It specifies that requests must include a 'jsonrpc' version, a unique 'id' (string or number, but not null), a 'method' name, and an optional 'params' object for arguments. The 'id' must not have been previously used by the requestor within the same session.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/index.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
{
  jsonrpc: "2.0";
  id: string | number;
  method: string;
  params?: {
    [key: string]: unknown;
  };
}
```

----------------------------------------

TITLE: Configuring Server Capabilities in Java
DESCRIPTION: This snippet demonstrates how to configure `ServerCapabilities` using its builder pattern. It enables or disables specific features like resource support (with change notifications), tool support, prompt support, and logging, allowing fine-grained control over the server's functionalities.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_6

LANGUAGE: java
CODE:
```
var capabilities = ServerCapabilities.builder()
    .resources(false, true)  // Resource support with list changes notifications
    .tools(true)            // Tool support with list changes notifications
    .prompts(true)          // Prompt support with list changes notifications
    .logging()              // Enable logging support (enabled by default with logging level INFO)
    .build();
```

----------------------------------------

TITLE: Initializing STDIO Client Transport (Java)
DESCRIPTION: This snippet demonstrates how to create an in-process client transport using `StdioClientTransport`. It configures `ServerParameters` to specify the command and arguments for launching the MCP server process, enabling communication within the same system.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_2

LANGUAGE: java
CODE:
```
ServerParameters params = ServerParameters.builder("npx")
    .args("-y", "@modelcontextprotocol/server-everything", "dir")
    .build();
McpTransport transport = new StdioClientTransport(params);
```

----------------------------------------

TITLE: Sending Log Message Notification (Python)
DESCRIPTION: This Python code demonstrates how to send a log message notification from an MCP server to the client. Using `server.request_context.session.send_log_message`, developers can provide real-time logging information, such as server initialization status, to the host application, enhancing debug visibility beyond standard error output.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/debugging.mdx#_snippet_4

LANGUAGE: python
CODE:
```
server.request_context.session.send_log_message(
  level="info",
  data="Server started successfully",
)
```

----------------------------------------

TITLE: Defining a Destructive File Deletion Tool (TypeScript)
DESCRIPTION: This snippet defines a `delete_file` tool, marked as destructive (`destructiveHint: true`) and idempotent (`idempotentHint: true`). It requires a `path` to the file to be deleted and does not interact with an 'open world'.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
// A destructive file deletion tool
{
  name: "delete_file",
  description: "Delete a file from the filesystem",
  inputSchema: {
    type: "object",
    properties: {
      path: { type: "string" }
    },
    required: ["path"]
  },
  annotations: {
    title: "Delete File",
    readOnlyHint: false,
    destructiveHint: true,
    idempotentHint: true,
    openWorldHint: false
  }
}
```

----------------------------------------

TITLE: Configuring Spring AI and MCP Client in application.yml
DESCRIPTION: Configures the Spring AI MCP client properties, enabling it, setting its name, version, type (SYNC), request timeout, stdio settings (including server configuration file location), and enabling the tool callback mechanism. Also configures the Anthropic API key using an environment variable placeholder.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_30

LANGUAGE: YAML
CODE:
```
spring:
  ai:
    mcp:
      client:
        enabled: true
        name: brave-search-client
        version: 1.0.0
        type: SYNC
        request-timeout: 20s
        stdio:
          root-change-notification: true
          servers-configuration: classpath:/mcp-servers-config.json
        toolcallback:
          enabled: true
    anthropic:
      api-key: ${ANTHROPIC_API_KEY}
```

----------------------------------------

TITLE: Reporting Tool Execution Errors in JSON-RPC Results
DESCRIPTION: This JSON snippet demonstrates how a tool execution error is reported within a JSON-RPC result. The `isError` flag is set to `true`, and the `content` array provides a text description of the failure, such as an 'API rate limit exceeded' message.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#_snippet_12

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 4,
  "result": {
    "content": [
      {
        "type": "text",
        "text": "Failed to fetch weather data: API rate limit exceeded"
      }
    ],
    "isError": true
  }
}
```

----------------------------------------

TITLE: Requesting Completions Synchronously (Java)
DESCRIPTION: This snippet illustrates how to synchronously request autocompletion suggestions from the MCP server. It constructs a `CompleteRequest` for a specific prompt and argument, then retrieves the `CompleteResult`.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_15

LANGUAGE: java
CODE:
```
CompleteRequest request = new CompleteRequest(
        new PromptReference("code_review"),
        new CompleteRequest.CompleteArgument("language", "py"));

CompleteResult result = syncMcpClient.completeCompletion(request);
```

----------------------------------------

TITLE: Requesting Completions Asynchronously (Java)
DESCRIPTION: This snippet demonstrates how to asynchronously request autocompletion suggestions. It creates a `CompleteRequest` and uses the asynchronous MCP client to obtain a `Mono<CompleteResult>` for non-blocking operations.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_16

LANGUAGE: java
CODE:
```
CompleteRequest request = new CompleteRequest(
        new PromptReference("code_review"),
        new CompleteRequest.CompleteArgument("language", "py"));

Mono<CompleteResult> result = mcpClient.completeCompletion(request);
```

----------------------------------------

TITLE: Requesting Resource Subscription (MCP)
DESCRIPTION: This JSON snippet shows a client's `resources/subscribe` request to receive updates for a specific resource. The `uri` parameter identifies the resource to which the client wishes to subscribe. This allows clients to be notified of changes without repeatedly polling the server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_11

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 4,
  "method": "resources/subscribe",
  "params": {
    "uri": "file:///project/src/main.rs"
  }
}
```

----------------------------------------

TITLE: Handling Protocol Version Mismatch Error in JSON-RPC
DESCRIPTION: This JSON-RPC error object illustrates a protocol version mismatch during initialization. It indicates that the requested protocol version is not supported, providing the supported versions and the one that was requested. This error helps clients understand why a connection failed due to incompatible protocol versions.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/lifecycle.mdx#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "error": {
    "code": -32602,
    "message": "Unsupported protocol version",
    "data": {
      "supported": ["2024-11-05"],
      "requested": "1.0.0"
    }
  }
}
```

----------------------------------------

TITLE: Defining Asynchronous Tool Specification (Java)
DESCRIPTION: This snippet demonstrates how to define an asynchronous tool specification for the Model Context Protocol server. Similar to the synchronous version, it includes a JSON schema and an asynchronous handler function that returns a `Mono<CallToolResult>`, suitable for non-blocking operations. This allows AI models to invoke custom operations asynchronously.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_9

LANGUAGE: java
CODE:
```
// Async tool specification
var schema = """
            {
              "type" : "object",
              "id" : "urn:jsonschema:Operation",
              "properties" : {
                "operation" : {
                  "type" : "string"
                },
                "a" : {
                  "type" : "number"
                },
                "b" : {
                  "type" : "number"
                }
              }
            }
            """;
var asyncToolSpecification = new McpServerFeatures.AsyncToolSpecification(
    new Tool("calculator", "Basic calculator", schema),
    (exchange, arguments) -> {
        // Tool implementation
        return Mono.just(new CallToolResult(result, false));
    }
);
```

----------------------------------------

TITLE: Processing User Queries with Anthropic and MCP Tools - C#
DESCRIPTION: Initializes an Anthropic client configured for automatic function invocation using Microsoft.Extensions.AI. It sets up chat options including the model ID, maximum output tokens, and the tools obtained from the MCP server. The code then enters an interactive loop, reading user input, sending queries to the Anthropic client, streaming the AI's response to the console, and repeating until the user types 'exit'.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_59

LANGUAGE: csharp
CODE:
```
using var anthropicClient = new AnthropicClient(new APIAuthentication(builder.Configuration["ANTHROPIC_API_KEY"]))
    .Messages
    .AsBuilder()
    .UseFunctionInvocation()
    .Build();

var options = new ChatOptions
{
    MaxOutputTokens = 1000,
    ModelId = "claude-3-5-sonnet-20241022",
    Tools = [.. tools]
};

Console.ForegroundColor = ConsoleColor.Green;
Console.WriteLine("MCP Client Started!");
Console.ResetColor();

PromptForInput();
while(Console.ReadLine() is string query && !"exit".Equals(query, StringComparison.OrdinalIgnoreCase))
{
    if (string.IsNullOrWhiteSpace(query))
    {
        PromptForInput();
        continue;
    }

    await foreach (var message in anthropicClient.GetStreamingResponseAsync(query, options))
    {
        Console.Write(message);
    }
    Console.WriteLine();

    PromptForInput();
}
```

----------------------------------------

TITLE: Implementing an MCP Server in Python
DESCRIPTION: This Python example illustrates how to implement an asynchronous Model Context Protocol (MCP) server using the `mcp.server` SDK. It defines an `app` instance, registers an asynchronous `list_resources` handler to return example resources, and sets up an `asyncio` main function to run the server with `stdio_server` for standard I/O communication. This demonstrates the basic structure for a Python-based MCP server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#_snippet_8

LANGUAGE: python
CODE:
```
import asyncio
import mcp.types as types
from mcp.server import Server
from mcp.server.stdio import stdio_server

app = Server("example-server")

@app.list_resources()
async def list_resources() -> list[types.Resource]:
    return [
        types.Resource(
            uri="example://resource",
            name="Example Resource"
        )
    ]

async def main():
    async with stdio_server() as streams:
        await app.run(
            streams[0],
            streams[1],
            app.create_initialization_options()
        )

if __name__ == "__main__":
    asyncio.run(main())
```

----------------------------------------

TITLE: Implementing Resource Support in MCP Server (TypeScript)
DESCRIPTION: This TypeScript snippet initializes an MCP server, registers request handlers for listing and reading resources, and demonstrates serving static content like application logs. It shows how to respond to ListResourcesRequestSchema with available URIs and ReadResourceRequestSchema with the content of a specific URI.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/resources.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
const server = new Server({
  name: "example-server",
  version: "1.0.0"
}, {
  capabilities: {
    resources: {}
  }
});

// List available resources
server.setRequestHandler(ListResourcesRequestSchema, async () => {
  return {
    resources: [
      {
        uri: "file:///logs/app.log",
        name: "Application Logs",
        mimeType: "text/plain"
      }
    ]
  };
});

// Read resource contents
server.setRequestHandler(ReadResourceRequestSchema, async (request) => {
  const uri = request.params.uri;

  if (uri === "file:///logs/app.log") {
    const logContents = await readLogFile();
    return {
      contents: [
        {
          uri,
          mimeType: "text/plain",
          text: logContents
        }
      ]
    };
  }

  throw new Error("Resource not found");
});
```

----------------------------------------

TITLE: Implementing LLM Sampling Capability (Java)
DESCRIPTION: This code demonstrates how to integrate LLM sampling support into an MCP client. It defines a `samplingHandler` function to process `CreateMessageRequest` and return `CreateMessageResult`, which encapsulates the LLM interaction. The client is then built with the sampling capability enabled and the handler registered.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_7

LANGUAGE: java
CODE:
```
// Configure sampling handler
Function<CreateMessageRequest, CreateMessageResult> samplingHandler = request -> {
    // Sampling implementation that interfaces with LLM
    return new CreateMessageResult(response);
};

// Create client with sampling support
var client = McpClient.sync(transport)
    .capabilities(ClientCapabilities.builder()
        .sampling()
        .build())
    .sampling(samplingHandler)
    .build();
```

----------------------------------------

TITLE: LLM Generation Response (JSON)
DESCRIPTION: This JSON response payload for 'sampling/createMessage' is returned by the client after an LLM generation. It contains the assistant's role, the generated text content, the specific model used for the generation, and the reason for stopping the generation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "role": "assistant",
    "content": {
      "type": "text",
      "text": "The capital of France is Paris."
    },
    "model": "claude-3-sonnet-20240307",
    "stopReason": "endTurn"
  }
}
```

----------------------------------------

TITLE: Managing Filesystem Roots (Java)
DESCRIPTION: This snippet illustrates how to dynamically manage filesystem roots for an MCP client. It shows methods to add a new root with a URI and description, remove an existing root by its URI, and notify the server when the list of roots has changed.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_6

LANGUAGE: java
CODE:
```
// Add a root dynamically
client.addRoot(new Root("file:///path", "description"));

// Remove a root
client.removeRoot("file:///path");

// Notify server of roots changes
client.rootsListChangedNotification();
```

----------------------------------------

TITLE: Sending a Cancellation Notification (JSON)
DESCRIPTION: This JSON object represents a `notifications/cancelled` message used to request the termination of an in-progress request. It includes the `requestId` of the request to be cancelled and an optional `reason` string for logging or display purposes.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/utilities/cancellation.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/cancelled",
  "params": {
    "requestId": "123",
    "reason": "User requested cancellation"
  }
}
```

----------------------------------------

TITLE: Defining Synchronous Resource Specification (Java)
DESCRIPTION: This snippet shows how to define a synchronous resource specification for the Model Context Protocol server. It involves defining a `Resource` with its URI, name, description, and MIME type, along with a synchronous handler function that implements the resource's read logic, returning a `ReadResourceResult`. This provides contextual data to AI models.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_10

LANGUAGE: java
CODE:
```
// Sync resource specification
var syncResourceSpecification = new McpServerFeatures.SyncResourceSpecification(
    new Resource("custom://resource", "name", "description", "mime-type", null),
    (exchange, request) -> {
        // Resource read implementation
        return new ReadResourceResult(contents);
    }
);
```

----------------------------------------

TITLE: Executing Prompts Synchronously (Java)
DESCRIPTION: This snippet shows how to synchronously list available prompt templates and execute a specific prompt with custom parameters. It uses the MCP client to interact with server-side prompt generation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_13

LANGUAGE: java
CODE:
```
// List available prompt templates
var prompts = client.listPrompts();
prompts.forEach(prompt -> System.out.println(prompt.getName()));

// Execute a prompt template with parameters
var response = client.executePrompt("echo", Map.of(
    "text", "Hello, World!"
));
```

----------------------------------------

TITLE: Defining LLM Sampling Request Message Format (TypeScript)
DESCRIPTION: This TypeScript interface defines the structure for an LLM sampling request sent from a server to a client via MCP. It includes an array of `messages` for conversation history, optional `modelPreferences` for model selection, a `systemPrompt`, `includeContext` options, and various sampling parameters like `temperature`, `maxTokens`, `stopSequences`, and `metadata`.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/sampling.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
{
  messages: [
    {
      role: "user" | "assistant",
      content: {
        type: "text" | "image",

        // For text:
        text?: string,

        // For images:
        data?: string,             // base64 encoded
        mimeType?: string
      }
    }
  ],
  modelPreferences?: {
    hints?: [{
      name?: string                // Suggested model name/family
    }],
    costPriority?: number,         // 0-1, importance of minimizing cost
    speedPriority?: number,        // 0-1, importance of low latency
    intelligencePriority?: number  // 0-1, importance of capabilities
  },
  systemPrompt?: string,
  includeContext?: "none" | "thisServer" | "allServers",
  temperature?: number,
  maxTokens: number,
  stopSequences?: string[],
  metadata?: Record<string, unknown>
}
```

----------------------------------------

TITLE: Define Basic MCP Client Class (Kotlin)
DESCRIPTION: Defines the basic structure of the `MCPClient` class in Kotlin, implementing `AutoCloseable`. It initializes Anthropic and MCP clients and includes a `close` method for resource cleanup.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_45

LANGUAGE: kotlin
CODE:
```
class MCPClient : AutoCloseable {
    private val anthropic = AnthropicOkHttpClient.fromEnv()
    private val mcp: Client = Client(clientInfo = Implementation(name = "mcp-client-cli", version = "1.0.0"))
    private lateinit var tools: List<ToolUnion>

    // methods will go here

    override fun close() {
        runBlocking {
            mcp.close()
            anthropic.close()
        }
    }

```

----------------------------------------

TITLE: Model Context Protocol (MCP) Architecture Diagram
DESCRIPTION: This Mermaid diagram illustrates the client-host-server architecture of the Model Context Protocol (MCP). It shows how a single 'Application Host Process' manages multiple 'Clients', which in turn connect to various 'Servers' (local or remote) to access different resources. The diagram highlights the isolation between clients and servers and the flow of interaction.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/architecture/index.mdx#_snippet_0

LANGUAGE: Mermaid
CODE:
```
graph LR
    subgraph "Application Host Process"
        H[Host]
        C1[Client 1]
        C2[Client 2]
        C3[Client 3]
        H --> C1
        H --> C2
        H --> C3
    end

    subgraph "Local machine"
        S1[Server 1<br>Files & Git]
        S2[Server 2<br>Database]
        R1[("Local<br>Resource A")]
        R2[("Local<br>Resource B")]

        C1 --> S1
        C2 --> S2
        S1 <--> R1
        S2 <--> R2
    end

    subgraph "Internet"
        S3[Server 3<br>External APIs]
        R3[("Remote<br>Resource C")]

        C3 --> S3
        S3 <--> R3
    end
```

----------------------------------------

TITLE: Installing uv Package Manager
DESCRIPTION: This snippet installs the `uv` package manager, a fast Python package installer and dependency manager, which is a prerequisite for setting up the project's virtual environment and dependencies. It provides platform-specific commands for MacOS/Linux and Windows.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_0

LANGUAGE: Bash
CODE:
```
curl -LsSf https://astral.sh/uv/install.sh | sh
```

LANGUAGE: PowerShell
CODE:
```
powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
```

----------------------------------------

TITLE: Configuring MCP Client for Logging in Java
DESCRIPTION: This snippet demonstrates how to configure an MCP client to receive log messages from the server. It shows how to register a logging consumer to process incoming notifications, initialize the client, and set the minimum logging level to filter messages. It also includes an example of calling a tool that is expected to send logging notifications.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_20

LANGUAGE: java
CODE:
```
var mcpClient = McpClient.sync(transport)
        .loggingConsumer(notification -> {
            System.out.println("Received log message: " + notification.data());
        })
        .build();

mcpClient.initialize();

mcpClient.setLoggingLevel(McpSchema.LoggingLevel.INFO);

// Call the tool that sends logging notifications
CallToolResult result = mcpClient.callTool(new McpSchema.CallToolRequest("logging-test", Map.of()));
```

----------------------------------------

TITLE: Illustrating Cancellation Race Conditions (Mermaid)
DESCRIPTION: This Mermaid sequence diagram visualizes the timing considerations and potential race conditions when a cancellation notification is sent. It shows a client sending a request, followed by a cancellation, and highlights that the server's processing might complete before the cancellation arrives, or it might stop processing if the cancellation arrives in time.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/utilities/cancellation.mdx#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
   participant Client
   participant Server

   Client->>Server: Request (ID: 123)
   Note over Server: Processing starts
   Client--)Server: notifications/cancelled (ID: 123)
   alt
      Note over Server: Processing may have<br/>completed before<br/>cancellation arrives
   else If not completed
      Note over Server: Stop processing
   end
```

----------------------------------------

TITLE: Executing Tools with Async API (Java)
DESCRIPTION: This snippet illustrates how to use the asynchronous API of the MCP client for tool interaction, leveraging reactive programming. It demonstrates listing available tools and executing the 'calculator' tool with parameters, both returning `Mono` or `Flux` types that require subscription to trigger execution.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_10

LANGUAGE: java
CODE:
```
// List available tools asynchronously
client.listTools()
    .doOnNext(tools -> tools.forEach(tool -> 
        System.out.println(tool.getName())))
    .subscribe();

// Execute a tool asynchronously
client.callTool("calculator", Map.of(
        "operation", "add",
        "a", 1,
        "b", 2
    ))
    .subscribe();
```

----------------------------------------

TITLE: Sending a roots/list_changed Notification in MCP (JSON)
DESCRIPTION: This JSON snippet represents a notification sent by a client to a server when the list of exposed roots has changed. This notification, `notifications/roots/list_changed`, informs the server that it should re-request the root list to get the updated information, provided the client declared the `listChanged` capability.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/roots.mdx#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/roots/list_changed"
}
```

----------------------------------------

TITLE: Response for Reading Resource Contents in MCP
DESCRIPTION: This JSON-RPC response is returned by an MCP server to a `resources/read` request. It contains the `contents` of the requested resource, including its URI, MIME type, and the actual `text` content, with newlines properly escaped.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_7

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "result": {
    "contents": [
      {
        "uri": "file:///project/src/main.rs",
        "mimeType": "text/x-rust",
        "text": "fn main() {\n    println!(\"Hello world!\");\n}"
      }
    ]
  }
}
```

----------------------------------------

TITLE: Defining JSON-RPC Response Message - TypeScript
DESCRIPTION: This snippet outlines the structure for a Model Context Protocol (MCP) response message in TypeScript, sent in reply to a request. Responses must carry the same ID as the corresponding request and include either a `result` (any JSON object) or an `error` object, but never both. Error objects must contain a numeric `code` and a `message` string.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/index.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
{
  jsonrpc: "2.0";
  id: string | number;
  result?: {
    [key: string]: unknown;
  }
  error?: {
    code: number;
    message: string;
    data?: unknown;
  }
}
```

----------------------------------------

TITLE: Defining Model Selection Preferences (JSON)
DESCRIPTION: This JSON snippet demonstrates how to define model selection preferences using hints and priorities. It specifies a preference for 'claude-3-sonnet' models, falling back to any 'claude' model, while also setting relative importance for cost, speed, and intelligence. Clients use these preferences to select an appropriate model from available options, potentially mapping hints to equivalent models from different providers.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/sampling.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  "hints": [
    { "name": "claude-3-sonnet" },
    { "name": "claude" }
  ],
  "costPriority": 0.3,
  "speedPriority": 0.8,
  "intelligencePriority": 0.5
}
```

----------------------------------------

TITLE: Initializing MCP Server in Kotlin
DESCRIPTION: This function initializes and runs an MCP server instance. It sets up a basic server with a 'weather' tool implementation, defines server capabilities, and establishes communication using standard I/O. The server connects to a transport and waits for a close signal to complete its operation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_41

LANGUAGE: kotlin
CODE:
```
// Main function to run the MCP server
fun `run mcp server`() {
    // Create the MCP Server instance with a basic implementation
    val server = Server(
        Implementation(
            name = "weather", // Tool name is "weather"
            version = "1.0.0" // Version of the implementation
        ),
        ServerOptions(
            capabilities = ServerCapabilities(tools = ServerCapabilities.Tools(listChanged = true))
        )
    )

    // Create a transport using standard IO for server communication
    val transport = StdioServerTransport(
        System.`in`.asInput(),
        System.out.asSink().buffered()
    )

    runBlocking {
        server.connect(transport)
        val done = Job()
        server.onClose {
            done.complete()
        }
        done.join()
    }
}
```

----------------------------------------

TITLE: Requesting Progress Updates in MCP (JSON)
DESCRIPTION: This JSON object demonstrates how a client requests progress updates for a long-running operation within the Model Context Protocol. It includes a `progressToken` in the `_meta` field of the `params` object, which the server will use to identify subsequent progress notifications. The `progressToken` must be a unique string or integer.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/utilities/progress.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "some_method",
  "params": {
    "_meta": {
      "progressToken": "abc123"
    }
  }
}
```

----------------------------------------

TITLE: JSON-RPC Response Message Format (TypeScript)
DESCRIPTION: Defines the structure for a JSON-RPC 2.0 response message, including the protocol version, the request identifier, and either a result object for successful calls or an error object for failures.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
{
  jsonrpc: "2.0",
  id: number | string,
  result?: object,
  error?: {
    code: number,
    message: string,
    data?: unknown
  }
}
```

----------------------------------------

TITLE: Response for Invoking a Tool (JSON)
DESCRIPTION: The server's response to a 'tools/call' request contains the result of the tool's execution. The 'content' array holds the output, which can be text, images, or other types. 'isError' indicates if the tool invocation resulted in an error.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "result": {
    "content": [
      {
        "type": "text",
        "text": "Current weather in New York:\nTemperature: 72Â°F\nConditions: Partly cloudy"
      }
    ],
    "isError": false
  }
}
```

----------------------------------------

TITLE: Receiving Resources List Response (JSON)
DESCRIPTION: This JSON snippet shows a server's response to a `resources/list` request. The `result` contains an array of `resources`, each with a `uri`, `name`, `description`, and `mimeType`. A `nextCursor` is provided for fetching subsequent pages of resources, supporting pagination.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "resources": [
      {
        "uri": "file:///project/src/main.rs",
        "name": "main.rs",
        "description": "Primary application entry point",
        "mimeType": "text/x-rust"
      }
    ],
    "nextCursor": "next-page-cursor"
  }
}
```

----------------------------------------

TITLE: Sending Initialize Request (JSON)
DESCRIPTION: Example JSON-RPC `initialize` request sent by the client to the server. It includes the supported protocol version, client capabilities, and client implementation details to initiate the connection.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/lifecycle.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "initialize",
  "params": {
    "protocolVersion": "2024-11-05",
    "capabilities": {
      "roots": {
        "listChanged": true
      },
      "sampling": {},
      "elicitation": {}
    },
    "clientInfo": {
      "name": "ExampleClient",
      "version": "1.0.0"
    }
  }
}
```

----------------------------------------

TITLE: Generating Prompt Text for Code Explanation (Python)
DESCRIPTION: This Python snippet constructs a formatted string for a prompt, designed to explain a given code snippet in a specified language. It demonstrates how to embed variables like `language` and `code` into an f-string for dynamic prompt generation. The snippet also includes an error handling mechanism for cases where a prompt implementation is not found, raising a `ValueError`.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#_snippet_10

LANGUAGE: Python
CODE:
```
text=f"Explain how this {language} code works:\n\n{code}"
                        )
                    )
                ]
            )

        raise ValueError("Prompt implementation not found")
```

----------------------------------------

TITLE: Implementing Sampling with MCP Sync API in Java
DESCRIPTION: This snippet demonstrates how to create a synchronous MCP server and define a tool that utilizes client-side sampling. It includes checking for client sampling support, constructing a `CreateMessageRequest` with model preferences and a system prompt, and processing the generated message.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_18

LANGUAGE: Java
CODE:
```
// Create a server
McpSyncServer server = McpServer.sync(transportProvider)
    .serverInfo("my-server", "1.0.0")
    .build();

// Define a tool that uses sampling
var calculatorTool = new McpServerFeatures.SyncToolSpecification(
    new Tool("ai-calculator", "Performs calculations using AI", schema),
    (exchange, arguments) -> {
        // Check if client supports sampling
        if (exchange.getClientCapabilities().sampling() == null) {
            return new CallToolResult("Client does not support AI capabilities", false);
        }
        
        // Create a sampling request
        McpSchema.CreateMessageRequest request = McpSchema.CreateMessageRequest.builder()
            .messages(List.of(new McpSchema.SamplingMessage(McpSchema.Role.USER,
                new McpSchema.TextContent("Calculate: " + arguments.get("expression"))))
            .modelPreferences(McpSchema.ModelPreferences.builder()
                .hints(List.of(
                    McpSchema.ModelHint.of("claude-3-sonnet"),
                    McpSchema.ModelHint.of("claude")
                ))
                .intelligencePriority(0.8)  // Prioritize intelligence
                .speedPriority(0.5)         // Moderate speed importance
                .build())
            .systemPrompt("You are a helpful calculator assistant. Provide only the numerical answer.")
            .maxTokens(100)
            .build();
        
        // Request sampling from the client
        McpSchema.CreateMessageResult result = exchange.createMessage(request);
        
        // Process the result
        String answer = result.content().text();
        return new CallToolResult(answer, false);
    }
);

// Add the tool to the server
server.addTool(calculatorTool);
```

----------------------------------------

TITLE: Defining Async Completion Specification in Java
DESCRIPTION: This snippet illustrates the definition of an asynchronous completion specification using McpServerFeatures.AsyncCompletionSpecification. It references a PromptReference and provides a handler function that returns Mono.just(McpSchema.CompleteResult) for reactive processing, including completion suggestions.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_16

LANGUAGE: java
CODE:
```
// Async prompt specification
var asyncCompletionSpecification = new McpServerFeatures.AsyncCompletionSpecification(
			new McpSchema.PromptReference("code_review"), (exchange, request) -> {

        // completion implementation ...

        return Mono.just(new McpSchema.CompleteResult(
            new CompleteResult.CompleteCompletion(
              List.of("python", "pytorch", "pyside"), 
              10, // total
              false // hasMore
            )));
      }
);
```

----------------------------------------

TITLE: Defining JSON-RPC 2.0 Response Structure (TypeScript)
DESCRIPTION: This snippet outlines the structure for a JSON-RPC 2.0 response in the Model Context Protocol (MCP). Responses must carry the same ID as their corresponding request and must contain either a `result` or an `error` field, but never both. Error codes are required to be integers.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/messages.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
{
  jsonrpc: "2.0";
  id: string | number;
  result?: {
    [key: string]: unknown;
  }
  error?: {
    code: number;
    message: string;
    data?: unknown;
  }
}
```

----------------------------------------

TITLE: Response for Listing Available Tools (JSON)
DESCRIPTION: The server's response to a 'tools/list' request provides an array of available tool definitions, each including a name, description, and input schema. The 'nextCursor' field is provided for paginated results, indicating the cursor for the next page.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "tools": [
      {
        "name": "get_weather",
        "description": "Get current weather information for a location",
        "inputSchema": {
          "type": "object",
          "properties": {
            "location": {
              "type": "string",
              "description": "City name or zip code"
            }
          },
          "required": ["location"]
        }
      }
    ],
    "nextCursor": "next-page-cursor"
  }
}
```

----------------------------------------

TITLE: Defining Synchronous Tool Specification (Java)
DESCRIPTION: This snippet illustrates how to define a synchronous tool specification for the Model Context Protocol server. It includes a JSON schema for tool parameters and a synchronous handler function that implements the tool's logic, returning a `CallToolResult`. This enables AI models to invoke custom operations.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_8

LANGUAGE: java
CODE:
```
// Sync tool specification
var schema = """
            {
              "type" : "object",
              "id" : "urn:jsonschema:Operation",
              "properties" : {
                "operation" : {
                  "type" : "string"
                },
                "a" : {
                  "type" : "number"
                },
                "b" : {
                  "type" : "number"
                }
              }
            }
            """;
var syncToolSpecification = new McpServerFeatures.SyncToolSpecification(
    new Tool("calculator", "Basic calculator", schema),
    (exchange, arguments) -> {
        // Tool implementation
        return new CallToolResult(result, false);
    }
);
```

----------------------------------------

TITLE: Set Anthropic API Key (Bash)
DESCRIPTION: Sets the `ANTHROPIC_API_KEY` environment variable in a bash shell. This key is required for authenticating with the Anthropic API.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_44

LANGUAGE: bash
CODE:
```
export ANTHROPIC_API_KEY='your-anthropic-api-key-here'
```

----------------------------------------

TITLE: Defining LLM Sampling Response Format (JSON)
DESCRIPTION: This JSON structure defines the expected format for a completion response returned by the client after an LLM sampling request. It specifies the `model` used, the `stopReason` for generation termination, the `role` of the generated content, and the `content` itself, which can be either text or image data.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/sampling.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "model": "string",  // Name of the model used
  "stopReason": "endTurn" | "stopSequence" | "maxTokens" | "string",
  "role": "user" | "assistant",
  "content": {
    "type": "text" | "image",
    "text": "string",
    "data": "string",
    "mimeType": "string"
  }
}
```

----------------------------------------

TITLE: Invoking a Tool Request (JSON)
DESCRIPTION: Clients invoke a specific tool by sending a 'tools/call' JSON-RPC request. The 'name' parameter specifies the tool to call, and 'arguments' is an object containing the parameters required by the tool's input schema.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "method": "tools/call",
  "params": {
    "name": "get_weather",
    "arguments": {
      "location": "New York"
    }
  }
}
```

----------------------------------------

TITLE: Defining Data Models for NWS API Responses in Kotlin
DESCRIPTION: These `@Serializable` data classes define the structure for parsing JSON responses from the National Weather Service API. `Points` is for geographical points, `Forecast` for weather predictions, and `Alert` for weather advisories, including nested properties for detailed information.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_44

LANGUAGE: kotlin
CODE:
```
@Serializable
data class Points(
    val properties: Properties
) {
    @Serializable
    data class Properties(val forecast: String)
}

@Serializable
data class Forecast(
    val properties: Properties
) {
    @Serializable
    data class Properties(val periods: List<Period>)

    @Serializable
    data class Period(
        val number: Int, val name: String, val startTime: String, val endTime: String,
        val isDaytime: Boolean, val temperature: Int, val temperatureUnit: String,
        val temperatureTrend: String, val probabilityOfPrecipitation: JsonObject,
        val windSpeed: String, val windDirection: String,
        val shortForecast: String, val detailedForecast: String,
    )
}

@Serializable
data class Alert(
    val features: List<Feature>
) {
    @Serializable
    data class Feature(
        val properties: Properties
    )

    @Serializable
    data class Properties(
        val event: String, val areaDesc: String, val severity: String,
        val description: String, val instruction: String?,
    )
}
```

----------------------------------------

TITLE: Implementing Transport Error Handling in TypeScript
DESCRIPTION: This TypeScript class demonstrates basic error handling for connection and message sending operations within a transport implementation. It catches exceptions during `start` and `send` methods, logs them using an `onerror` callback, and re-throws the error to propagate the issue.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#_snippet_13

LANGUAGE: TypeScript
CODE:
```
class ExampleTransport implements Transport {
  async start() {
    try {
      // Connection logic
    } catch (error) {
      this.onerror?.(new Error(`Failed to connect: ${error}`));
      throw error;
    }
  }

  async send(message: JSONRPCMessage) {
    try {
      // Sending logic
    } catch (error) {
      this.onerror?.(new Error(`Failed to send message: ${error}`));
      throw error;
    }
  }
}
```

----------------------------------------

TITLE: Tool Result Embedded Resource Content Type (JSON)
DESCRIPTION: This JSON object defines a 'resource' content type for tool results, allowing additional context or data to be embedded. It includes a 'type' field set to 'resource' and a 'resource' object with a URI, mimeType, and optional inline content.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#_snippet_10

LANGUAGE: JSON
CODE:
```
{
  "type": "resource",
  "resource": {
    "uri": "resource://example",
    "mimeType": "text/plain",
    "text": "Resource content"
  }
}
```

----------------------------------------

TITLE: Defining Session Class for Protocol Layer in Python
DESCRIPTION: This snippet defines the `Session` class, a Python implementation of the protocol layer. It provides asynchronous methods for sending requests and notifications, and for handling incoming requests and notifications from the other side, ensuring robust communication within the MCP.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
class Session(BaseSession[RequestT, NotificationT, ResultT]):
    async def send_request(
        self,
        request: RequestT,
        result_type: type[Result]
    ) -> Result:
        """Send request and wait for response. Raises McpError if response contains error."""
        # Request handling implementation

    async def send_notification(
        self,
        notification: NotificationT
    ) -> None:
        """Send one-way notification that doesn't expect response."""
        # Notification handling implementation

    async def _received_request(
        self,
        responder: RequestResponder[ReceiveRequestT, ResultT]
    ) -> None:
        """Handle incoming request from other side."""
        # Request handling implementation

    async def _received_notification(
        self,
        notification: ReceiveNotificationT
    ) -> None:
        """Handle incoming notification from other side."""
        # Notification handling implementation
```

----------------------------------------

TITLE: Response for Retrieving a Specific Prompt (JSON)
DESCRIPTION: This JSON object is a server's response to a 'prompts/get' request, providing the detailed content of the requested prompt. It includes an optional 'description' and a 'messages' array, where each message specifies a 'role' (e.g., 'user') and 'content' which can be of various types, such as 'text' as shown here.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "result": {
    "description": "Code review prompt",
    "messages": [
      {
        "role": "user",
        "content": {
          "type": "text",
          "text": "Please review this Python code:\ndef hello():\n    print('world')"
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Setting Up Python Environment with uv (Bash)
DESCRIPTION: Commands to initialize a new Python project directory, create and activate a virtual environment using `uv`, install required packages (`mcp`, `anthropic`, `python-dotenv`), remove boilerplate files, and create the main client script file.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
# Create project directory
uv init mcp-client
cd mcp-client

# Create virtual environment
uv venv

# Activate virtual environment
# On Windows:
.venv\Scripts\activate
# On Unix or MacOS:
source .venv/bin/activate

# Install required packages
uv add mcp anthropic python-dotenv

# Remove boilerplate files
# On Windows:
del main.py
# On Unix or MacOS:
rm main.py

# Create our main file
touch client.py
```

----------------------------------------

TITLE: Sending Resources List Changed Notification (JSON)
DESCRIPTION: This JSON snippet shows a server-initiated notification indicating that the list of available resources has changed. Servers supporting the `listChanged` capability send this notification to clients, prompting them to re-list resources if needed. This notification does not have an `id` as it's not a request-response pair.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_10

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/resources/list_changed"
}
```

----------------------------------------

TITLE: Tools List Changed Notification (JSON)
DESCRIPTION: Servers that have declared the 'listChanged' capability for tools should send this notification to clients when the list of available tools has been updated. This allows clients to re-list tools and update their understanding of available functionalities.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/tools/list_changed"
}
```

----------------------------------------

TITLE: Implementing SSE Server Transport in TypeScript
DESCRIPTION: This snippet demonstrates setting up an Express server to handle SSE connections for an MCP server. It initializes an `SSEServerTransport` and connects it to the MCP server, handling GET requests for SSE and POST requests for messages.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
import express from "express";

const app = express();

const server = new Server({
  name: "example-server",
  version: "1.0.0"
}, {
  capabilities: {}
});

let transport: SSEServerTransport | null = null;

app.get("/sse", (req, res) => {
  transport = new SSEServerTransport("/messages", res);
  server.connect(transport);
});

app.post("/messages", (req, res) => {
  if (transport) {
    transport.handlePostMessage(req, res);
  }
});

app.listen(3000);
```

----------------------------------------

TITLE: Requesting LLM Generation with sampling/createMessage (JSON)
DESCRIPTION: This JSON object represents a `sampling/createMessage` request sent by a server to a client to initiate an LLM generation. It includes the user's message, optional model preferences (hints, intelligence, and speed priorities), a system prompt to guide the model's behavior, and a maximum token limit for the response. This request is the primary way for servers to leverage LLM capabilities via MCP.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/sampling.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "sampling/createMessage",
  "params": {
    "messages": [
      {
        "role": "user",
        "content": {
          "type": "text",
          "text": "What is the capital of France?"
        }
      }
    ],
    "modelPreferences": {
      "hints": [
        {
          "name": "claude-3-sonnet"
        }
      ],
      "intelligencePriority": 0.8,
      "speedPriority": 0.5
    },
    "systemPrompt": "You are a helpful assistant.",
    "maxTokens": 100
  }
}
```

----------------------------------------

TITLE: Receiving LLM Generation Response from sampling/createMessage (JSON)
DESCRIPTION: This JSON object illustrates a successful response to a `sampling/createMessage` request. It contains the generated content from the LLM, specifying the role (e.g., 'assistant'), the content type (e.g., 'text'), the actual generated text, the specific model used for generation, and the reason the generation stopped. This is the expected output from the client after processing a sampling request.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/sampling.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "role": "assistant",
    "content": {
      "type": "text",
      "text": "The capital of France is Paris."
    },
    "model": "claude-3-sonnet-20240307",
    "stopReason": "endTurn"
  }
}
```

----------------------------------------

TITLE: Initializing MCP Server with STDIO Transport in C#
DESCRIPTION: This C# code sets up a basic Model Context Protocol (MCP) server using `Host.CreateEmptyApplicationBuilder` to prevent console output. It configures the server to use standard I/O for transport, registers tools from the assembly, and adds a singleton `HttpClient` instance for making requests to the National Weather Service API, including a custom User-Agent header.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_54

LANGUAGE: C#
CODE:
```
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using ModelContextProtocol;
using System.Net.Http.Headers;

var builder = Host.CreateEmptyApplicationBuilder(settings: null);

builder.Services.AddMcpServer()
    .WithStdioServerTransport()
    .WithToolsFromAssembly();

builder.Services.AddSingleton(_ =>
{
    var client = new HttpClient() { BaseAddress = new Uri("https://api.weather.gov") };
    client.DefaultRequestHeaders.UserAgent.Add(new ProductInfoHeaderValue("weather-tool", "1.0"));
    return client;
});

var app = builder.Build();

await app.RunAsync();
```

----------------------------------------

TITLE: Implementing Interactive Chat Loop and Cleanup (TypeScript)
DESCRIPTION: The `chatLoop` method creates a readline interface for interactive input/output. It prompts the user for queries, processes them using `processQuery`, and prints the response. The loop continues until the user types 'quit'. The `cleanup` method closes the MCP client connection, ensuring resources are properly released.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_20

LANGUAGE: typescript
CODE:
```
async chatLoop() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  try {
    console.log("\nMCP Client Started!");
    console.log("Type your queries or 'quit' to exit.");

    while (true) {
      const message = await rl.question("\nQuery: ");
      if (message.toLowerCase() === "quit") {
        break;
      }
      const response = await this.processQuery(message);
      console.log("\n" + response);
    }
  } finally {
    rl.close();
  }
}

async cleanup() {
  await this.mcp.close();
}
```

----------------------------------------

TITLE: Model Context Protocol (MCP) Architecture Diagram - Mermaid
DESCRIPTION: This Mermaid diagram illustrates the client-host-server architecture of the Model Context Protocol (MCP). It shows how a single Host process manages multiple Client instances, each connecting to different Servers that provide specialized context and capabilities, distinguishing between local machine resources (Files & Git, Database) and internet-based external APIs.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/architecture/index.mdx#_snippet_0

LANGUAGE: Mermaid
CODE:
```
graph LR
    subgraph "Application Host Process"
        H[Host]
        C1[Client 1]
        C2[Client 2]
        C3[Client 3]
        H --> C1
        H --> C2
        H --> C3
    end

    subgraph "Local machine"
        S1[Server 1<br>Files & Git]
        S2[Server 2<br>Database]
        R1[("Local<br>Resource A")]
        R2[("Local<br>Resource B")]

        C1 --> S1
        C2 --> S2
        S1 <--> R1
        S2 <--> R2
    end

    subgraph "Internet"
        S3[Server 3<br>External APIs]
        R3[("Remote<br>Resource C")]

        C3 --> S3
        S3 <--> R3
    end
```

----------------------------------------

TITLE: MCP Pagination Request Format (JSON)
DESCRIPTION: This JSON snippet demonstrates how a client continues pagination by including the `cursor` received from a previous server response in its subsequent request. The `cursor` acts as an opaque token, allowing the server to identify the next set of results for the specified method, such as `resources/list`.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/pagination.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "resources/list",
  "params": {
    "cursor": "eyJwYWdlIjogMn0="
  }
}
```

----------------------------------------

TITLE: Defining Text Content Type for Prompt Messages (JSON)
DESCRIPTION: This JSON structure defines a 'text' content type for messages within a prompt. It is the most common type, used for plain natural language interactions, and contains the actual string content of the message.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/prompts.mdx#_snippet_6

LANGUAGE: JSON
CODE:
```
{
  "type": "text",
  "text": "The text content of the message"
}
```

----------------------------------------

TITLE: Setting Anthropic API Key (Bash)
DESCRIPTION: Commands to initialize user secrets for the .NET project and set the Anthropic API key using the dotnet user-secrets tool for secure storage.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_55

LANGUAGE: bash
CODE:
```
dotnet user-secrets init
dotnet user-secrets set "ANTHROPIC_API_KEY" "<your key here>"
```

----------------------------------------

TITLE: Main Entry Point for MCP Client (TypeScript)
DESCRIPTION: This asynchronous function serves as the main entry point for the MCP client application. It checks for command-line arguments, initializes the MCPClient, connects to the specified server path, runs the chat loop, and ensures cleanup before exiting.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_21

LANGUAGE: TypeScript
CODE:
```
async function main() {
  if (process.argv.length < 3) {
    console.log("Usage: node index.ts <path_to_server_script>");
    return;
  }
  const mcpClient = new MCPClient();
  try {
    await mcpClient.connectToServer(process.argv[2]);
    await mcpClient.chatLoop();
  } finally {
    await mcpClient.cleanup();
    process.exit(0);
  }
}

main();
```

----------------------------------------

TITLE: Illustrating Message Flow with Mermaid Diagram
DESCRIPTION: This Mermaid sequence diagram visualizes the typical message flow within the Model Context Protocol. It demonstrates interactions between a Client and a Server for resource discovery, access, subscriptions, and subsequent updates, highlighting key operations like resources/list, resources/read, resources/subscribe, and notifications/resources/updated.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_13

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Client
    participant Server

    Note over Client,Server: Resource Discovery
    Client->>Server: resources/list
    Server-->>Client: List of resources

    Note over Client,Server: Resource Access
    Client->>Server: resources/read
    Server-->>Client: Resource contents

    Note over Client,Server: Subscriptions
    Client->>Server: resources/subscribe
    Server-->>Client: Subscription confirmed

    Note over Client,Server: Updates
    Server--)Client: notifications/resources/updated
    Client->>Server: resources/read
    Server-->>Client: Updated contents
```

----------------------------------------

TITLE: Creating Sync MCP Server with Completion Capabilities in Java
DESCRIPTION: This snippet demonstrates how to initialize a synchronous MCP server and enable completion capabilities. It uses McpServer.sync and configures ServerCapabilities.builder().completions() to enable the feature, then registers a SyncCompletionSpecification.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_15

LANGUAGE: java
CODE:
```
// Create a sync server with completion capabilities
var mcpServer = McpServer.sync(mcpServerTransportProvider)
  .capabilities(ServerCapabilities.builder()
    .completions() // enable completions support
      // ...
    .build())
  // ...
  .completions(new McpServerFeatures.SyncCompletionSpecification( // register completion specification
      new McpSchema.PromptReference("code_review"), syncCompletionSpecification))
  .build();
```

----------------------------------------

TITLE: Server Initialize Response - JSON
DESCRIPTION: This JSON-RPC response is sent by the server in reply to the client's `initialize` request. It includes the agreed-upon protocol version, the server's capabilities (e.g., 'logging', 'prompts', 'resources', 'tools'), server implementation information, and optional instructions for the client. This response confirms the server's readiness and negotiated features.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/lifecycle.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "protocolVersion": "2024-11-05",
    "capabilities": {
      "logging": {},
      "prompts": {
        "listChanged": true
      },
      "resources": {
        "subscribe": true,
        "listChanged": true
      },
      "tools": {
        "listChanged": true
      }
    },
    "serverInfo": {
      "name": "ExampleServer",
      "version": "1.0.0"
    },
    "instructions": "Optional instructions for the client"
  }
}
```

----------------------------------------

TITLE: Defining Main Execution Logic in TypeScript
DESCRIPTION: This code block sets up the main entry point for the MCP client application. It handles command-line arguments to connect to a server, initiates the interactive chat loop, and includes robust error handling to ensure proper cleanup and exit in case of failures. It also checks if the script is run as the main module.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#_snippet_9

LANGUAGE: typescript
CODE:
```
// Main execution
async function main() {
  if (process.argv.length < 3) {
    console.log("Usage: ts-node client.ts <path_to_server_script>");
    process.exit(1);
  }

  const client = new MCPClient();
  try {
    await client.connectToServer(process.argv[2]);
    await client.chatLoop();
  } catch (error) {
    console.error("Error:", error);
    await client.cleanup();
    process.exit(1);
  }
}

// Run main if this is the main module
if (import.meta.url === new URL(process.argv[1], "file:").href) {
  main();
}

export default MCPClient;
```

----------------------------------------

TITLE: Declaring Sampling Capability in MCP Client Initialization (JSON)
DESCRIPTION: Clients implementing the Model Context Protocol (MCP) that support sampling must declare the 'sampling' capability during their initialization process. This JSON snippet shows the required structure to include the 'sampling' object within the 'capabilities' field, signaling the client's ability to handle LLM generation requests.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "capabilities": {
    "sampling": {}
  }
}
```

----------------------------------------

TITLE: Model Context Protocol (MCP) Lifecycle Diagram - Mermaid
DESCRIPTION: This Mermaid sequence diagram illustrates the three main phases of the Model Context Protocol (MCP) lifecycle: Initialization, Operation, and Shutdown. It depicts the client initiating the connection, the exchange of initialization messages, the period of normal protocol operations, and the eventual graceful disconnection.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/lifecycle.mdx#_snippet_0

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Client
    participant Server

    Note over Client,Server: Initialization Phase
    activate Client
    Client->>+Server: initialize request
    Server-->>Client: initialize response
    Client--)Server: initialized notification

    Note over Client,Server: Operation Phase
    rect rgb(200, 220, 250)
        note over Client,Server: Normal protocol operations
    end

    Note over Client,Server: Shutdown
    Client--)-Server: Disconnect
    deactivate Server
    Note over Client,Server: Connection closed
```

----------------------------------------

TITLE: Calling Tool Response (JSON)
DESCRIPTION: The server responds to a 'tools/call' request with the result of the tool invocation. The 'content' field can contain multiple items of different types (e.g., text, image, audio), and 'isError' indicates whether the tool call resulted in an error.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "result": {
    "content": [
      {
        "type": "text",
        "text": "Current weather in New York:\nTemperature: 72Â°F\nConditions: Partly cloudy"
      }
    ],
    "isError": false
  }
}
```

----------------------------------------

TITLE: Installing Amazon Q CLI
DESCRIPTION: This snippet provides the command to install the Amazon Q CLI using Homebrew. Amazon Q CLI is an open-source, agentic coding assistant for terminals that offers full support for MCP servers, allowing users to control AWS resources and manage prompts directly from the terminal.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/clients.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
brew install amazon-q
```

----------------------------------------

TITLE: Defining a String Schema in JSON
DESCRIPTION: This snippet demonstrates how to define a string type schema, including properties for display name, description, length constraints (minLength, maxLength), a regular expression pattern, and supported formats like email, uri, date, or date-time.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/elicitation.mdx#_snippet_8

LANGUAGE: JSON
CODE:
```
{
  "type": "string",
  "title": "Display Name",
  "description": "Description text",
  "minLength": 3,
  "maxLength": 50,
  "pattern": "^[A-Za-z]+$",
  "format": "email"
}
```

----------------------------------------

TITLE: Response for Listing Prompts (JSON)
DESCRIPTION: This JSON response provides a list of available prompts, each with a `name`, `description`, and optional `arguments`. The `nextCursor` field indicates if more prompts are available and provides a cursor for the next paginated request.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "prompts": [
      {
        "name": "code_review",
        "description": "Asks the LLM to analyze code quality and suggest improvements",
        "arguments": [
          {
            "name": "code",
            "description": "The code to review",
            "required": true
          }
        ]
      }
    ],
    "nextCursor": "next-page-cursor"
  }
}
```

----------------------------------------

TITLE: Response for Getting a Prompt (TypeScript)
DESCRIPTION: Illustrates the response from a `prompts/get` request, containing the prompt's description and a list of messages, which can include text or embedded resources, ready for use by an LLM.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
// Response
{
  description: "Analyze Python code for potential improvements",
  messages: [
    {
      role: "user",
      content: {
        type: "text",
        text: "Please analyze the following Python code for potential improvements:\n\n```python\ndef calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total = total + num\n    return total\n\nresult = calculate_sum([1, 2, 3, 4, 5])\nprint(result)\n```"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Define Main Execution Entry Point - Python
DESCRIPTION: Defines the main asynchronous function that serves as the entry point for the client application. It validates command-line arguments, initializes the `MCPClient`, connects to the server using the provided script path, runs the interactive chat loop, and ensures the `cleanup` method is called in a `finally` block.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_7

LANGUAGE: python
CODE:
```
async def main():
    if len(sys.argv) < 2:
        print("Usage: python client.py <path_to_server_script>")
        sys.exit(1)

    client = MCPClient()
    try:
        await client.connect_to_server(sys.argv[1])
        await client.chat_loop()
    finally:
        await client.cleanup()
```

----------------------------------------

TITLE: Running the Model Context Protocol Server (Kotlin)
DESCRIPTION: Defines the main entry point for the application, responsible for starting and running the Model Context Protocol (MCP) server. This function initiates the server process, making it ready to handle incoming requests and execute registered tools.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_48

LANGUAGE: kotlin
CODE:
```
fun main() = `run mcp server`()
```

----------------------------------------

TITLE: Implementing Interactive Chat Loop (Kotlin)
DESCRIPTION: Creates an interactive command-line chat interface. It prompts the user for input, reads the line, checks for the 'quit' command, processes the query using the `processQuery` function, and prints the response. The loop continues until the user types 'quit'.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_49

LANGUAGE: kotlin
CODE:
```
suspend fun chatLoop() {
    println("\nMCP Client Started!")
    println("Type your queries or 'quit' to exit.")

    while (true) {
        print("\nQuery: ")
        val message = readLine() ?: break
        if (message.lowercase() == "quit") break
        val response = processQuery(message)
        println("\n$response")
    }
}
```

----------------------------------------

TITLE: Defining Elicitation Response Actions in JSON
DESCRIPTION: This snippet presents the JSON structure for elicitation responses, detailing a three-action model ('accept', 'decline', 'cancel') within the 'result' field. The 'content' field is used to carry submitted data when the action is 'accept'.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/elicitation.mdx#_snippet_12

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "action": "accept", // or "decline" or "cancel"
    "content": {
      "propertyName": "value",
      "anotherProperty": 42
    }
  }
}
```

----------------------------------------

TITLE: Standard JSON-RPC Error Response for Client Failures
DESCRIPTION: This JSON snippet illustrates a standard JSON-RPC error response structure. It includes the JSON-RPC version, a request ID, and an 'error' object containing a numeric 'code' and a human-readable 'message' to describe the specific failure, such as a user rejecting a request. Clients should return such errors for common failure cases.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#_snippet_8

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "error": {
    "code": -1,
    "message": "User rejected sampling request"
  }
}
```

----------------------------------------

TITLE: Access Token Usage - Authorization Header Example
DESCRIPTION: Demonstrates the required format for including an access token in the Authorization request header field when making requests to MCP servers, conforming to OAuth 2.1 Section 5.1.1. The token must be prefixed with 'Bearer'.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/authorization.mdx#_snippet_2

LANGUAGE: http
CODE:
```
Authorization: Bearer <access-token>
```

----------------------------------------

TITLE: Implementing AnyIO-based Transport with Error Handling in Python
DESCRIPTION: This Python `anyio` context manager provides a robust transport implementation, demonstrating error handling during initialization, message processing, and resource cleanup. It uses memory object streams for bidirectional communication and a task group for concurrent message handling, ensuring proper resource closure even on exceptions.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#_snippet_14

LANGUAGE: Python
CODE:
```
@contextmanager
async def example_transport(scope: Scope, receive: Receive, send: Send):
    try:
        # Create streams for bidirectional communication
        read_stream_writer, read_stream = anyio.create_memory_object_stream(0)
        write_stream, write_stream_reader = anyio.create_memory_object_stream(0)

        async def message_handler():
            try:
                async with read_stream_writer:
                    # Message handling logic
                    pass
            except Exception as exc:
                logger.error(f"Failed to handle message: {exc}")
                raise exc

        async with anyio.create_task_group() as tg:
            tg.start_soon(message_handler)
            try:
                # Yield streams for communication
                yield read_stream, write_stream
            except Exception as exc:
                logger.error(f"Transport error: {exc}")
                raise exc
            finally:
                tg.cancel_scope.cancel()
                await write_stream.aclose()
                await read_stream.aclose()
    except Exception as exc:
        logger.error(f"Failed to initialize transport: {exc}")
        raise exc
```

----------------------------------------

TITLE: Implementing Server Connection Method (Python)
DESCRIPTION: Python code for the asynchronous `connect_to_server` method within the `MCPClient` class. This method handles establishing a connection to an MCP server running as a subprocess via standard I/O, initializes the client session, and lists the tools available on the connected server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_3

LANGUAGE: python
CODE:
```
async def connect_to_server(self, server_script_path: str):
    """Connect to an MCP server

    Args:
        server_script_path: Path to the server script (.py or .js)
    """
    is_python = server_script_path.endswith('.py')
    is_js = server_script_path.endswith('.js')
    if not (is_python or is_js):
        raise ValueError("Server script must be a .py or .js file")

    command = "python" if is_python else "node"
    server_params = StdioServerParameters(
        command=command,
        args=[server_script_path],
        env=None
    )

    stdio_transport = await self.exit_stack.enter_async_context(stdio_client(server_params))
    self.stdio, self.write = stdio_transport
    self.session = await self.exit_stack.enter_async_context(ClientSession(self.stdio, self.write))

    await self.session.initialize()

    # List available tools
    response = await self.session.list_tools()
    tools = response.tools
    print("\nConnected to server with tools:", [tool.name for tool in tools])
```

----------------------------------------

TITLE: Requesting a Specific Prompt (TypeScript)
DESCRIPTION: Demonstrates the `prompts/get` request, where a client specifies the prompt by its `name` and provides the necessary `arguments` to retrieve the prompt's full content.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
// Request
{
  method: "prompts/get",
  params: {
    name: "analyze-code",
    arguments: {
      language: "python"
    }
  }
}
```

----------------------------------------

TITLE: Initializing MCP Client with Stdio Transport (TypeScript)
DESCRIPTION: This snippet shows how to create an MCP client in TypeScript and establish a connection using a `StdioClientTransport`. The client is configured to launch an external server process via a specified command and arguments.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
const client = new Client({
  name: "example-client",
  version: "1.0.0"
}, {
  capabilities: {}
});

const transport = new StdioClientTransport({
  command: "./server",
  args: ["--option", "value"]
});
await client.connect(transport);
```

----------------------------------------

TITLE: Example of Prompt Reference Type for Completion
DESCRIPTION: This JSON object demonstrates the `ref/prompt` type used within a `completion/complete` request's `ref` parameter. It specifies that the completion context is a prompt identified by its `name`, in this case, 'code_review'.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/completion.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{"type": "ref/prompt", "name": "code_review"}
```

----------------------------------------

TITLE: Defining Async Prompt Specification in Java
DESCRIPTION: This snippet illustrates the definition of an asynchronous prompt specification using McpServerFeatures.AsyncPromptSpecification. Similar to the sync version, it includes a Prompt object and a handler function, but this handler returns a Mono.just(GetPromptResult) for reactive processing.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_13

LANGUAGE: java
CODE:
```
// Async prompt specification
var asyncPromptSpecification = new McpServerFeatures.AsyncPromptSpecification(
    new Prompt("greeting", "description", List.of(
        new PromptArgument("name", "description", true)
    )),
    (exchange, request) -> {
        // Prompt implementation
        return Mono.just(new GetPromptResult(description, messages));
    }
);
```

----------------------------------------

TITLE: Defining Sync Prompt Specification in Java
DESCRIPTION: This snippet demonstrates how to define a synchronous prompt specification using McpServerFeatures.SyncPromptSpecification. It includes a Prompt object with a name, description, and a list of PromptArguments, along with a handler function that processes requests and returns a GetPromptResult.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_12

LANGUAGE: java
CODE:
```
// Sync prompt specification
var syncPromptSpecification = new McpServerFeatures.SyncPromptSpecification(
    new Prompt("greeting", "description", List.of(
        new PromptArgument("name", "description", true)
    )),
    (exchange, request) -> {
        // Prompt implementation
        return new GetPromptResult(description, messages);
    }
);
```

----------------------------------------

TITLE: Invoking a Tool (tools/call) in MCP
DESCRIPTION: This JSON-RPC request is sent by a client to invoke a specific tool on the server. It specifies the `name` of the tool to be called and a dictionary of `arguments` that conform to the tool's `inputSchema`. The `id` field correlates the request with its corresponding response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "method": "tools/call",
  "params": {
    "name": "get_weather",
    "arguments": {
      "location": "New York"
    }
  }
}
```

----------------------------------------

TITLE: Requesting a Specific Prompt (JSON)
DESCRIPTION: This JSON request is used by a client to retrieve the content of a specific prompt by its `name`. It can also include `arguments` to customize the prompt's content, such as providing the code for a code review prompt.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "method": "prompts/get",
  "params": {
    "name": "code_review",
    "arguments": {
      "code": "def hello():\n    print('world')"
    }
  }
}
```

----------------------------------------

TITLE: Configuring package.json for Module Type and Build Script
DESCRIPTION: This JSON snippet updates the `package.json` file to specify the module type as 'module', define a 'weather' executable, add a build script using `tsc` and `chmod`, and list the `build` directory for distribution.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_13

LANGUAGE: json
CODE:
```
{
  "type": "module",
  "bin": {
    "weather": "./build/index.js"
  },
  "scripts": {
    "build": "tsc && chmod 755 build/index.js"
  },
  "files": [
    "build"
  ]
}
```

----------------------------------------

TITLE: Requesting Completions in MCP (JSON)
DESCRIPTION: This JSON object represents a `completion/complete` request sent by a client to an MCP server. It specifies a prompt reference (`ref/prompt`) named 'code_review' and an argument 'language' with a current value of 'py'. The server uses this information to provide contextual autocompletion suggestions for the argument.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/completion.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "completion/complete",
  "params": {
    "ref": {
      "type": "ref/prompt",
      "name": "code_review"
    },
    "argument": {
      "name": "language",
      "value": "py"
    }
  }
}
```

----------------------------------------

TITLE: Adding Spring AI MCP Server Dependencies (Gradle)
DESCRIPTION: This Gradle Groovy snippet adds the necessary Spring AI MCP server and Spring Web dependencies to a Java project. These dependencies are crucial for building an MCP server using Spring Boot.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_24

LANGUAGE: groovy
CODE:
```
dependencies {
    implementation platform("org.springframework.ai:spring-ai-starter-mcp-server")
    implementation platform("org.springframework:spring-web")   
}
```

----------------------------------------

TITLE: Adding Spring AI MCP Server Dependencies (Maven)
DESCRIPTION: This Maven XML snippet adds the necessary Spring AI MCP server and Spring Web dependencies to a Java project. These dependencies are crucial for building an MCP server using Spring Boot.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_23

LANGUAGE: xml
CODE:
```
  <dependencies>
        <dependency>
            <groupId>org.springframework.ai</groupId>
            <artifactId>spring-ai-starter-mcp-server</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
        </dependency>
  </dependencies>
```

----------------------------------------

TITLE: Example JSON-RPC Error Response
DESCRIPTION: This JSON snippet provides an example of a standard JSON-RPC error response within the Model Context Protocol. It shows how a 'Resource not found' error (code -32002) is structured, including the error message and additional data like the URI of the missing resource.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_16

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 5,
  "error": {
    "code": -32002,
    "message": "Resource not found",
    "data": {
      "uri": "file:///nonexistent.txt"
    }
  }
}
```

----------------------------------------

TITLE: Requesting Resource Content (MCP)
DESCRIPTION: This JSON snippet shows a client's `resources/read` request to retrieve the contents of a specific resource. The `uri` parameter uniquely identifies the resource whose content is being requested. The `id` field correlates this request with its response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "method": "resources/read",
  "params": {
    "uri": "file:///project/src/main.rs"
  }
}
```

----------------------------------------

TITLE: Notifying of Tool List Changes (notifications/tools/list_changed) in MCP
DESCRIPTION: This JSON-RPC notification is sent by a server to clients when the list of available tools has changed. Servers that declared the `listChanged` capability should emit this notification, prompting clients to re-list tools to get the updated set. This is a one-way notification without an expected response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/tools/list_changed"
}
```

----------------------------------------

TITLE: Prompts List Changed Notification (JSON)
DESCRIPTION: This JSON notification is sent by the server to clients when the list of available prompts has changed. Clients receiving this notification should then send a `prompts/list` request to get the updated list.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/prompts/list_changed"
}
```

----------------------------------------

TITLE: Tool Result Text Content Type (JSON)
DESCRIPTION: This JSON object defines a 'text' content type for tool results. It includes a 'type' field set to 'text' and a 'text' field containing the string representation of the tool's output.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#_snippet_7

LANGUAGE: JSON
CODE:
```
{
  "type": "text",
  "text": "Tool result text"
}
```

----------------------------------------

TITLE: Accessing Resources Asynchronously (Java)
DESCRIPTION: This snippet illustrates how to asynchronously list available resources and retrieve resource content using reactive programming patterns. It utilizes the MCP client's asynchronous methods and requires a subscriber to process the results.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_12

LANGUAGE: java
CODE:
```
// List available resources asynchronously
client.listResources()
    .doOnNext(resources -> resources.forEach(resource -> 
        System.out.println(resource.getName())))
    .subscribe();

// Retrieve resource content asynchronously
client.getResource("file", Map.of(
        "path", "/path/to/file.txt"
    ))
    .subscribe();
```

----------------------------------------

TITLE: Creating Basic MCPClient Class (Python)
DESCRIPTION: Python code defining the initial structure of the `MCPClient` class. It includes necessary imports for asyncio, typing, contextlib, mcp, anthropic, and dotenv, loads environment variables, and initializes instance attributes for managing the client session and API client.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_2

LANGUAGE: python
CODE:
```
import asyncio
from typing import Optional
from contextlib import AsyncExitStack

from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

from anthropic import Anthropic
from dotenv import load_dotenv

load_dotenv()  # load environment variables from .env

class MCPClient:
    def __init__(self):
        # Initialize session and client objects
        self.session: Optional[ClientSession] = None
        self.exit_stack = AsyncExitStack()
        self.anthropic = Anthropic()
    # methods will go here
```

----------------------------------------

TITLE: Prompt Message Audio Content (JSON)
DESCRIPTION: This JSON snippet defines the structure for audio content within a `PromptMessage`. It includes the `type` as 'audio', `data` as base64-encoded audio data, and `mimeType` to specify the audio format, enabling multi-modal interactions.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#_snippet_8

LANGUAGE: JSON
CODE:
```
{
  "type": "audio",
  "data": "base64-encoded-audio-data",
  "mimeType": "audio/wav"
}
```

----------------------------------------

TITLE: Creating SSE Client Transport with HttpClient (Java)
DESCRIPTION: This code initializes an `HttpClientSseClientTransport`, providing a pure Java API for Server-Sent Events (SSE) communication. It's framework-agnostic and requires the URL of the MCP server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_3

LANGUAGE: java
CODE:
```
McpTransport transport = new HttpClientSseClientTransport("http://your-mcp-server");
```

----------------------------------------

TITLE: Declaring Full Resource Capabilities in MCP
DESCRIPTION: Servers supporting the Model Context Protocol (MCP) must declare the `resources` capability. This example shows a full declaration, enabling both `subscribe` for individual resource change notifications and `listChanged` for notifications when the overall list of available resources changes.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "capabilities": {
    "resources": {
      "subscribe": true,
      "listChanged": true
    }
  }
}
```

----------------------------------------

TITLE: Importing MCP SDK and Initializing Server Instance (TypeScript)
DESCRIPTION: This TypeScript snippet imports necessary modules from the `@modelcontextprotocol/sdk` and `zod` libraries. It then initializes an `McpServer` instance with a name, version, and empty capabilities, setting up the foundation for the server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_15

LANGUAGE: typescript
CODE:
```
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

const NWS_API_BASE = "https://api.weather.gov";
const USER_AGENT = "weather-app/1.0";

// Create server instance
const server = new McpServer({
  name: "weather",
  version: "1.0.0",
  capabilities: {
    resources: {},
    tools: {},
  },
});
```

----------------------------------------

TITLE: Requesting Available Tools (JSON)
DESCRIPTION: Clients send a 'tools/list' JSON-RPC request to discover available tools. The 'cursor' parameter is optional and used for pagination to retrieve subsequent sets of tools.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "tools/list",
  "params": {
    "cursor": "optional-cursor-value"
  }
}
```

----------------------------------------

TITLE: Requesting Autocompletion Suggestions for a Prompt (JSON-RPC)
DESCRIPTION: Clients send a `completion/complete` JSON-RPC request to the server to obtain autocompletion suggestions. The request specifies the context for completion using a `ref` object (e.g., `ref/prompt` for a named prompt) and the current `argument` being completed, including its name and partial value.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/completion.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "completion/complete",
  "params": {
    "ref": {
      "type": "ref/prompt",
      "name": "code_review"
    },
    "argument": {
      "name": "language",
      "value": "py"
    }
  }
}
```

----------------------------------------

TITLE: Defining Model Preferences with Hints and Priorities (JSON)
DESCRIPTION: This JSON snippet demonstrates how to specify model preferences using 'hints' for preferred model families and 'priorities' for characteristics like cost, speed, and intelligence. Hints allow flexible matching, while priorities guide the client's selection process based on desired trade-offs. Clients may map hints to equivalent models from different providers.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#_snippet_7

LANGUAGE: json
CODE:
```
{
  "hints": [
    { "name": "claude-3-sonnet" },
    { "name": "claude" }
  ],
  "costPriority": 0.3,
  "speedPriority": 0.8,
  "intelligencePriority": 0.5
}
```

----------------------------------------

TITLE: Accessing Resources Synchronously (Java)
DESCRIPTION: This snippet demonstrates how to synchronously list available server-side resources and retrieve the content of a specific resource using its URI template. It requires an initialized MCP client instance.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_11

LANGUAGE: java
CODE:
```
// List available resources and their names
var resources = client.listResources();
resources.forEach(resource -> System.out.println(resource.getName()));

// Retrieve resource content using a URI template
var content = client.getResource("file", Map.of(
    "path", "/path/to/file.txt"
));
```

----------------------------------------

TITLE: Defining Elicitation Request Schema in JSON
DESCRIPTION: The `requestedSchema` field within an `elicitation/create` request uses a restricted JSON Schema subset to define the structure of the expected user response. It supports flat objects with primitive properties (e.g., string, number) and allows specifying titles, descriptions, and validation rules like `minimum` and `maximum`.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/elicitation.mdx#_snippet_7

LANGUAGE: json
CODE:
```
{
  "type": "object",
  "properties": {
    "propertyName": {
      "type": "string",
      "title": "Display Name",
      "description": "Description of the property"
    },
    "anotherProperty": {
      "type": "number",
      "minimum": 0,
      "maximum": 100
    }
  },
  "required": ["propertyName"]
}
```

----------------------------------------

TITLE: Defining Text Resource Content in JSON
DESCRIPTION: This JSON snippet illustrates the structure for representing text-based resource content within the Model Context Protocol. It specifies the unique resource identifier (uri), the MIME type (mimeType) as text/plain, and the actual textual content (text) of the resource.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_14

LANGUAGE: json
CODE:
```
{
  "uri": "file:///example.txt",
  "mimeType": "text/plain",
  "text": "Resource content"
}
```

----------------------------------------

TITLE: MCP Pagination Flow Diagram - Mermaid
DESCRIPTION: Visualizes the interaction flow between a client and server during a paginated list operation in the Model Context Protocol (MCP). It shows the initial request without a cursor, followed by a loop where the server returns results with a 'nextCursor', and the client uses that cursor for subsequent requests until all results are retrieved.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/pagination.mdx#_snippet_2

LANGUAGE: Mermaid
CODE:
```
sequenceDiagram
    participant Client
    participant Server

    Client->>Server: List Request (no cursor)
    loop Pagination Loop
      Server-->>Client: Page of results + nextCursor
      Client->>Server: List Request (with cursor)
    end
```

----------------------------------------

TITLE: Declaring Resources Capability with Full Support (JSON)
DESCRIPTION: This JSON snippet demonstrates how a server declares support for the `resources` capability within the Model Context Protocol. It explicitly enables both `subscribe` for individual resource change notifications and `listChanged` for notifications when the overall list of available resources changes, indicating full feature support.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "resources": {
      "subscribe": true,
      "listChanged": true
    }
  }
}
```

----------------------------------------

TITLE: Defining Model Preferences with Hints and Priorities (JSON)
DESCRIPTION: This JSON snippet defines a set of preferences for model selection, including specific model hints and priority weights for cost, speed, and intelligence. Clients use these preferences to choose an appropriate AI model, potentially mapping hints to equivalent models from different providers based on similar capabilities.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#_snippet_6

LANGUAGE: JSON
CODE:
```
{
  "hints": [
    { "name": "claude-3-sonnet" },
    { "name": "claude" }
  ],
  "costPriority": 0.3,
  "speedPriority": 0.8,
  "intelligencePriority": 0.5
}
```

----------------------------------------

TITLE: Response for Getting a Prompt (JSON)
DESCRIPTION: This JSON response provides the detailed content of a requested prompt, including its `description` and an array of `messages`. Each message specifies a `role` (e.g., 'user') and `content`, which can be plain `text` or other media types.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "result": {
    "description": "Code review prompt",
    "messages": [
      {
        "role": "user",
        "content": {
          "type": "text",
          "text": "Please review this Python code:\ndef hello():\n    print('world')"
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Cancellation Race Condition Sequence Diagram (Mermaid)
DESCRIPTION: This Mermaid sequence diagram illustrates the timing considerations and potential race conditions when a client sends a `notifications/cancelled` message to a server. It shows that the cancellation notification might arrive after the server has already completed processing the original request, highlighting the need for both parties to handle these scenarios gracefully by potentially ignoring late cancellations or responses.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/utilities/cancellation.mdx#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
   participant Client
   participant Server

   Client->>Server: Request (ID: 123)
   Note over Server: Processing starts
   Client--)Server: notifications/cancelled (ID: 123)
   alt
      Note over Server: Processing may have<br/>completed before<br/>cancellation arrives
   else If not completed
      Note over Server: Stop processing
   end
```

----------------------------------------

TITLE: Receiving Completion Suggestions in MCP (JSON)
DESCRIPTION: This JSON object illustrates a successful response from an MCP server to a `completion/complete` request. It contains a `completion` object with an array of suggested `values` (e.g., 'python', 'pytorch'), an optional `total` count of available matches, and a `hasMore` flag indicating if further results exist beyond the current response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/completion.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "completion": {
      "values": ["python", "pytorch", "pyside"],
      "total": 10,
      "hasMore": true
    }
  }
}
```

----------------------------------------

TITLE: Requesting a List of Available Prompts (JSON)
DESCRIPTION: This JSON object represents a client's request to list available prompt templates from the server. It uses the standard JSON-RPC 2.0 format, specifying the 'prompts/list' method and including an optional 'cursor' parameter for pagination to retrieve subsequent pages of prompts.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "prompts/list",
  "params": {
    "cursor": "optional-cursor-value"
  }
}
```

----------------------------------------

TITLE: Defining JSON-RPC 2.0 Request Structure (TypeScript)
DESCRIPTION: This snippet defines the structure for a JSON-RPC 2.0 request within the Model Context Protocol (MCP). Requests must include a string or integer ID, which cannot be null and must be unique per session. It specifies the `jsonrpc` version, a `method` name, and optional `params`.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/messages.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
{
  jsonrpc: "2.0";
  id: string | number;
  method: string;
  params?: {
    [key: string]: unknown;
  };
}
```

----------------------------------------

TITLE: Declaring Tools Capability (JSON)
DESCRIPTION: Servers supporting tools must declare the 'tools' capability within their capabilities object. The 'listChanged' flag indicates whether the server will send notifications when the list of available tools changes, allowing clients to stay updated.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "capabilities": {
    "tools": {
      "listChanged": true
    }
  }
}
```

----------------------------------------

TITLE: Defining Text Content for Prompt Messages (JSON)
DESCRIPTION: This JSON snippet defines the structure for text-based content within a prompt message. It specifies the 'type' as 'text' and includes the actual 'text' string that forms the message content, commonly used for natural language interactions within the Model Context Protocol.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  "type": "text",
  "text": "The text content of the message"
}
```

----------------------------------------

TITLE: Defining Audio Content for MCP Sampling Messages (JSON)
DESCRIPTION: This JSON snippet describes the structure for audio-based content within sampling messages in the Model Context Protocol (MCP). It defines the `type` as 'audio', includes the base64-encoded audio data in the `data` field, and specifies the audio's MIME type (e.g., 'audio/wav') in `mimeType`. This enables LLMs to process and generate audio.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "type": "audio",
  "data": "base64-encoded-audio-data",
  "mimeType": "audio/wav"
}
```

----------------------------------------

TITLE: Creating STDIO Server Transport Provider in Java
DESCRIPTION: This snippet initializes an `StdioServerTransportProvider` for in-process, bidirectional JSON-RPC communication over standard I/O streams. It requires an `ObjectMapper` for message serialization/deserialization and supports non-blocking processing and graceful shutdown.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_2

LANGUAGE: java
CODE:
```
StdioServerTransportProvider transportProvider = new StdioServerTransportProvider(new ObjectMapper());
```

----------------------------------------

TITLE: Model Context Protocol Progress Flow (Mermaid)
DESCRIPTION: This Mermaid sequence diagram visualizes the interaction flow for progress tracking in the Model Context Protocol. It shows the sender initiating a method request with a `progressToken`, followed by the receiver sending multiple progress notifications, and finally, the receiver sending the method response upon operation completion.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/utilities/progress.mdx#_snippet_2

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Sender
    participant Receiver

    Note over Sender,Receiver: Request with progress token
    Sender->>Receiver: Method request with progressToken

    Note over Sender,Receiver: Progress updates
    loop Progress Updates
        Receiver-->>Sender: Progress notification (0.2/1.0)
        Receiver-->>Sender: Progress notification (0.6/1.0)
        Receiver-->>Sender: Progress notification (1.0/1.0)
    end

    Note over Sender,Receiver: Operation complete
    Receiver->>Sender: Method response
```

----------------------------------------

TITLE: Receiving Initialize Response (JSON)
DESCRIPTION: Example JSON-RPC response from the server to the client's `initialize` request. It contains the server's supported protocol version, its capabilities, server implementation information, and optional instructions.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/lifecycle.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "protocolVersion": "2024-11-05",
    "capabilities": {
      "logging": {},
      "prompts": {
        "listChanged": true
      },
      "resources": {
        "subscribe": true,
        "listChanged": true
      },
      "tools": {
        "listChanged": true
      }
    },
    "serverInfo": {
      "name": "ExampleServer",
      "version": "1.0.0"
    },
    "instructions": "Optional instructions for the client"
  }
}
```

----------------------------------------

TITLE: Read Resource Response Structure (TypeScript)
DESCRIPTION: Defines the TypeScript interface for the response received from a `resources/read` request. The response contains an array of resource contents, each specifying the resource URI, an optional MIME type, and either the UTF-8 encoded text content or base64-encoded binary content.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/resources.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
{
  contents: [
    {
      uri: string;        // The URI of the resource
      mimeType?: string;  // Optional MIME type

      // One of:
      text?: string;      // For text resources
      blob?: string;      // For binary resources (base64 encoded)
    }
  ]
}
```

----------------------------------------

TITLE: Example HTTP GET Request with Bearer Token
DESCRIPTION: Provides an example of an HTTP GET request to a /v1/contexts endpoint, demonstrating the inclusion of the Authorization header with a Bearer access token.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/authorization.mdx#_snippet_5

LANGUAGE: http
CODE:
```
GET /v1/contexts HTTP/1.1
Host: mcp.example.com
Authorization: Bearer eyJhbGciOiJIUzI1NiIs...
```

----------------------------------------

TITLE: Example MCP Request with Access Token - HTTP
DESCRIPTION: Provides an example of an HTTP GET request to an MCP server, showing how the access token is included in the 'Authorization' header. This illustrates the correct method for sending protected resource requests.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/authorization.mdx#_snippet_3

LANGUAGE: http
CODE:
```
GET /v1/contexts HTTP/1.1
Host: mcp.example.com
Authorization: Bearer eyJhbGciOiJIUzI1NiIs...
```

----------------------------------------

TITLE: Direct Resource Structure (TypeScript)
DESCRIPTION: Defines the TypeScript interface for a direct resource exposed by an MCP server via the `resources/list` endpoint. It includes a unique URI, a human-readable name, and optional fields for description and MIME type to provide additional context.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/resources.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
{
  uri: string;           // Unique identifier for the resource
  name: string;          // Human-readable name
  description?: string;  // Optional description
  mimeType?: string;     // Optional MIME type
}
```

----------------------------------------

TITLE: Initializing MCP Server with Stdio Transport (Python)
DESCRIPTION: This Python snippet illustrates how to set up an MCP server to communicate over standard I/O. It uses an asynchronous context manager to manage the stdio streams and runs the server application.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#_snippet_5

LANGUAGE: python
CODE:
```
app = Server("example-server")

async with stdio_server() as streams:
    await app.run(
        streams[0],
        streams[1],
        app.create_initialization_options()
    )
```

----------------------------------------

TITLE: Configuring MCP Servers for Claude
DESCRIPTION: This JSON configuration snippet shows how to integrate various Model Context Protocol (MCP) servers into a Claude environment. It defines server commands, arguments, and environment variables, such as a GitHub personal access token, for secure and controlled access to external tools and data sources.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/examples.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "memory": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-memory"]
    },
    "filesystem": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-filesystem", "/path/to/allowed/files"]
    },
    "github": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>"
      }
    }
  }
}
```

----------------------------------------

TITLE: Responding to Tool Invocation (tools/call) in MCP
DESCRIPTION: This JSON-RPC response delivers the result of a tool invocation to the client. The `content` array can hold multiple items of different types (e.g., text, image). The `isError` boolean indicates whether the tool execution resulted in an error, providing a clear status for the client.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "result": {
    "content": [
      {
        "type": "text",
        "text": "Current weather in New York:\nTemperature: 72Â°F\nConditions: Partly cloudy"
      }
    ],
    "isError": false
  }
}
```

----------------------------------------

TITLE: Requesting a Specific Prompt with Arguments (JSON)
DESCRIPTION: This JSON object represents a client's request to retrieve the content of a specific prompt, identified by its 'name'. It includes an 'arguments' object to provide values for the prompt's parameters, such as the 'code' for a 'code_review' prompt, allowing for dynamic content generation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "method": "prompts/get",
  "params": {
    "name": "code_review",
    "arguments": {
      "code": "def hello():\n    print('world')"
    }
  }
}
```

----------------------------------------

TITLE: Creating Async MCP Server with Completion Capabilities in Java
DESCRIPTION: This snippet demonstrates how to initialize an asynchronous MCP server and enable completion capabilities. It uses McpServer.async and configures ServerCapabilities.builder().completions() to enable the feature, then registers an AsyncCompletionSpecification.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_17

LANGUAGE: java
CODE:
```
// Create a async server with completion capabilities
var mcpServer = McpServer.async(mcpServerTransportProvider)
  .capabilities(ServerCapabilities.builder()
    .completions() // enable completions support
      // ...
    .build())
  // ...
  .completions(new McpServerFeatures.AsyncCompletionSpecification( // register completion specification
      new McpSchema.PromptReference("code_review"), asyncCompletionSpecification))
  .build();
```

----------------------------------------

TITLE: Initializing FastMCP Server and Constants (Python)
DESCRIPTION: This Python snippet imports essential libraries, including `typing` for type hints, `httpx` for asynchronous HTTP requests, and `FastMCP` from the MCP SDK. It initializes the `FastMCP` server instance with the name 'weather' and defines constants for the National Weather Service API base URL and a user agent, which are crucial for subsequent API interactions.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Any
import httpx
from mcp.server.fastmcp import FastMCP

# Initialize FastMCP server
mcp = FastMCP("weather")

# Constants
NWS_API_BASE = "https://api.weather.gov"
USER_AGENT = "weather-app/1.0"
```

----------------------------------------

TITLE: Requesting a List of Resources in MCP
DESCRIPTION: Clients send this `resources/list` JSON-RPC request to discover available resources from an MCP server. It supports pagination via an optional `cursor` parameter to retrieve subsequent pages of results.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "resources/list",
  "params": {
    "cursor": "optional-cursor-value"
  }
}
```

----------------------------------------

TITLE: Response for Listing Available Prompts (JSON)
DESCRIPTION: This JSON object is a server's response to a 'prompts/list' request, providing an array of available prompt definitions. Each prompt includes a unique 'name', an optional 'description', and a list of 'arguments' with their names, descriptions, and 'required' status. An optional 'nextCursor' is provided for pagination.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "prompts": [
      {
        "name": "code_review",
        "description": "Asks the LLM to analyze code quality and suggest improvements",
        "arguments": [
          {
            "name": "code",
            "description": "The code to review",
            "required": true
          }
        ]
      }
    ],
    "nextCursor": "next-page-cursor"
  }
}
```

----------------------------------------

TITLE: Defining Embedded Resources in JSON
DESCRIPTION: This JSON snippet demonstrates the structure for an embedded resource within a message, allowing server-side content to be directly referenced. It specifies the resource type, URI, MIME type, and the actual text content. Resources must include a valid URI, MIME type, and either text or base64-encoded blob data.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#_snippet_8

LANGUAGE: json
CODE:
```
{
  "type": "resource",
  "resource": {
    "uri": "resource://example",
    "mimeType": "text/plain",
    "text": "Resource content"
  }
}
```

----------------------------------------

TITLE: HTTP Authorization Header - OAuth 2.1
DESCRIPTION: Specifies the required format for the Authorization request header field when making resource requests, using the Bearer token type as per OAuth 2.1 Section 5.1.1.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/authorization.mdx#_snippet_4

LANGUAGE: http
CODE:
```
Authorization: Bearer <access-token>
```

----------------------------------------

TITLE: Defining Asynchronous Resource Specification (Java)
DESCRIPTION: This snippet demonstrates how to define an asynchronous resource specification for the Model Context Protocol server. It includes a `Resource` definition and an asynchronous handler function that returns a `Mono<ReadResourceResult>`, suitable for non-blocking resource access. This allows providing contextual data to AI models asynchronously.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_11

LANGUAGE: java
CODE:
```
// Async resource specification
var asyncResourceSpecification = new McpServerFeatures.AsyncResourceSpecification(
    new Resource("custom://resource", "name", "description", "mime-type", null),
    (exchange, request) -> {
        // Resource read implementation
        return Mono.just(new ReadResourceResult(contents));
    }
);
```

----------------------------------------

TITLE: Setting Up Node.js MCP Client (Windows)
DESCRIPTION: PowerShell commands to create a project directory, initialize npm, install dependencies, and create the main source file for a Node.js MCP client on Windows.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_12

LANGUAGE: powershell
CODE:
```
# Create project directory
md mcp-client-typescript
cd mcp-client-typescript

# Initialize npm project
npm init -y

# Install dependencies
npm install @anthropic-ai/sdk @modelcontextprotocol/sdk dotenv

# Install dev dependencies
npm install -D @types/node typescript

# Create source file
new-item index.ts
```

----------------------------------------

TITLE: Configuring SSE Client Transport with WebFlux (Java)
DESCRIPTION: This snippet shows how to set up a WebFlux-based SSE client transport. It uses a `WebClient.Builder` to define the base URL for the MCP server and then instantiates `WebFluxSseClientTransport`. This requires the `mcp-webflux-sse-transport` dependency.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_4

LANGUAGE: java
CODE:
```
WebClient.Builder webClientBuilder = WebClient.builder()
    .baseUrl("http://your-mcp-server");
McpTransport transport = new WebFluxSseClientTransport(webClientBuilder);
```

----------------------------------------

TITLE: Requesting to Read Resource Contents in MCP
DESCRIPTION: Clients send this `resources/read` JSON-RPC request to an MCP server to retrieve the actual content of a specific resource. The request requires the `uri` of the desired resource as a parameter.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_6

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "method": "resources/read",
  "params": {
    "uri": "file:///project/src/main.rs"
  }
}
```

----------------------------------------

TITLE: Defining JSON-RPC 2.0 Notification Structure (TypeScript)
DESCRIPTION: This snippet defines the structure for a JSON-RPC 2.0 notification within the Model Context Protocol (MCP). Notifications are distinct as they do not anticipate a response and, consequently, must not include an `id` field. They specify the `jsonrpc` version, a `method` name, and optional `params`.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/messages.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
{
  jsonrpc: "2.0";
  method: string;
  params?: {
    [key: string]: unknown;
  };
}
```

----------------------------------------

TITLE: Defining JSON-RPC Notification Structure in TypeScript
DESCRIPTION: This snippet illustrates the TypeScript interface for a JSON-RPC 2.0 notification message. Notifications are one-way messages that do not expect a response, and therefore must not include an 'id'. They include the 'jsonrpc' version, a 'method' name, and an optional 'params' object for any associated data.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/index.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
{
  jsonrpc: "2.0";
  method: string;
  params?: {
    [key: string]: unknown;
  };
}
```

----------------------------------------

TITLE: Declaring Elicitation Capability in JSON
DESCRIPTION: Clients supporting the Elicitation protocol must declare the `elicitation` capability during the initial handshake (initialization) to inform the server of their support for this feature. This capability object is typically empty, serving as a simple flag.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/elicitation.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "elicitation": {}
  }
}
```

----------------------------------------

TITLE: Resource Template Structure (TypeScript)
DESCRIPTION: Defines the TypeScript interface for a resource template, enabling clients to construct dynamic resource URIs based on RFC 6570. It specifies a URI template, a human-readable name for the resource type, and optional description and MIME type applicable to all matching resources.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/resources.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
{
  uriTemplate: string;   // URI template following RFC 6570
  name: string;          // Human-readable name for this type
  description?: string;  // Optional description
  mimeType?: string;     // Optional MIME type for all matching resources
}
```

----------------------------------------

TITLE: Defining Prompt Structure (TypeScript)
DESCRIPTION: Defines the TypeScript interface for a prompt, specifying its unique name, optional description, and an array of arguments, each with its own name, description, and required status.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
{
  name: string;              // Unique identifier for the prompt
  description?: string;      // Human-readable description
  arguments?: [              // Optional list of arguments
    {
      name: string;          // Argument identifier
      description?: string;  // Argument description
      required?: boolean;    // Whether argument is required
    }
  ]
}
```

----------------------------------------

TITLE: Example JSON-RPC Error Response
DESCRIPTION: This JSON snippet illustrates a standard JSON-RPC error response, indicating a failure case where the user rejected a sampling request. It includes the JSON-RPC version, an ID, and an error object with a specific code and a descriptive message.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#_snippet_7

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "error": {
    "code": -1,
    "message": "User rejected sampling request"
  }
}
```

----------------------------------------

TITLE: Calling Tool Request (JSON)
DESCRIPTION: Clients invoke a specific tool by sending a 'tools/call' request. This request specifies the 'name' of the tool to be called and the 'arguments' required by the tool, which must conform to the tool's defined 'inputSchema'.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "method": "tools/call",
  "params": {
    "name": "get_weather",
    "arguments": {
      "location": "New York"
    }
  }
}
```

----------------------------------------

TITLE: Tool Result Audio Content Type (JSON)
DESCRIPTION: This JSON object defines an 'audio' content type for tool results. It includes the 'type' field set to 'audio', 'data' for the base64-encoded audio, and 'mimeType' specifying the audio format.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#_snippet_9

LANGUAGE: JSON
CODE:
```
{
  "type": "audio",
  "data": "base64-encoded-audio-data",
  "mimeType": "audio/wav"
}
```

----------------------------------------

TITLE: MCP Tools Message Flow Diagram
DESCRIPTION: This Mermaid sequence diagram illustrates the typical message flow for tool interactions within the Model Context Protocol. It depicts the discovery of tools, the LLM's selection of a tool, the client's invocation of the tool on the server, the server's response, and how updates to the tool list are communicated.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#_snippet_6

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant LLM
    participant Client
    participant Server

    Note over Client,Server: Discovery
    Client->>Server: tools/list
    Server-->>Client: List of tools

    Note over Client,LLM: Tool Selection
    LLM->>Client: Select tool to use

    Note over Client,Server: Invocation
    Client->>Server: tools/call
    Server-->>Client: Tool result
    Client->>LLM: Process result

    Note over Client,Server: Updates
    Server--)Client: tools/list_changed
    Client->>Server: tools/list
    Server-->>Client: Updated tools
```

----------------------------------------

TITLE: Model Context Protocol Progress Flow (Mermaid)
DESCRIPTION: This Mermaid sequence diagram visualizes the progress tracking flow in the Model Context Protocol (MCP). It shows a sender initiating a method request with a `progressToken`, followed by the receiver sending multiple progress notifications, and finally, the receiver sending a method response upon operation completion.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/utilities/progress.mdx#_snippet_2

LANGUAGE: Mermaid
CODE:
```
sequenceDiagram
    participant Sender
    participant Receiver

    Note over Sender,Receiver: Request with progress token
    Sender->>Receiver: Method request with progressToken

    Note over Sender,Receiver: Progress updates
    loop Progress Updates
        Receiver-->>Sender: Progress notification (0.2/1.0)
        Receiver-->>Sender: Progress notification (0.6/1.0)
        Receiver-->>Sender: Progress notification (1.0/1.0)
    end

    Note over Sender,Receiver: Operation complete
    Receiver->>Sender: Method response
```

----------------------------------------

TITLE: Receiving Autocompletion Suggestions Response (JSON-RPC)
DESCRIPTION: Upon receiving a `completion/complete` request, the server responds with a JSON-RPC result containing a `completion` object. This object includes an array of `values` (suggestions), an optional `total` count of all matches, and a `hasMore` boolean indicating if further results are available beyond the maximum 100 items per response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/completion.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "completion": {
      "values": ["python", "pytorch", "pyside"],
      "total": 10,
      "hasMore": true
    }
  }
}
```

----------------------------------------

TITLE: Setting Environment Variables for API Keys
DESCRIPTION: Sets the ANTHROPIC_API_KEY and BRAVE_API_KEY environment variables, which are required for the application to authenticate with the respective services. Replace placeholders with actual keys.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_26

LANGUAGE: Bash
CODE:
```
export ANTHROPIC_API_KEY='your-anthropic-api-key-here'
export BRAVE_API_KEY='your-brave-api-key-here'
```

----------------------------------------

TITLE: Declaring Logging Capability - JSON
DESCRIPTION: This JSON snippet shows how a server declares its support for the `logging` capability within the Model Context Protocol. Servers must include this capability declaration to indicate they can emit log message notifications.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/logging.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "logging": {}
  }
}
```

----------------------------------------

TITLE: Defining Notification Message Interface in TypeScript
DESCRIPTION: This snippet defines the `Notification` interface, representing a one-way message in the MCP that does not expect a response. It includes a `method` string and an optional `params` object for associated data.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
interface Notification {
  method: string;
  params?: { ... };
}
```

----------------------------------------

TITLE: Defining Text Content Resource in JSON
DESCRIPTION: This JSON object illustrates the structure for a text-based resource within the Model Context Protocol. It includes the unique resource identifier (uri), its MIME type (mimeType), and the actual text content (text).
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_14

LANGUAGE: json
CODE:
```
{
  "uri": "file:///example.txt",
  "mimeType": "text/plain",
  "text": "Resource content"
}
```

----------------------------------------

TITLE: Sending Progress Notifications in MCP (JSON)
DESCRIPTION: This JSON snippet illustrates a progress notification sent by the server to the client in the Model Context Protocol (MCP). It includes the original `progressToken` from the request, the current `progress` value, and an optional `total` value, providing an update on the operation's status.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/utilities/progress.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/progress",
  "params": {
    "progressToken": "abc123",
    "progress": 50,
    "total": 100
  }
}
```

----------------------------------------

TITLE: Requesting Available Tools (tools/list) in MCP
DESCRIPTION: This JSON-RPC request is used by clients to discover available tools from a server. It supports pagination through the optional `cursor` parameter, allowing clients to retrieve tools in batches if the list is extensive. The `id` field is a unique identifier for the request.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "tools/list",
  "params": {
    "cursor": "optional-cursor-value"
  }
}
```

----------------------------------------

TITLE: Prompt Message Image Content (JSON)
DESCRIPTION: This JSON snippet defines the structure for image content within a `PromptMessage`. It includes the `type` as 'image', `data` as base64-encoded image data, and `mimeType` to specify the image format, enabling multi-modal interactions.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#_snippet_7

LANGUAGE: JSON
CODE:
```
{
  "type": "image",
  "data": "base64-encoded-image-data",
  "mimeType": "image/png"
}
```

----------------------------------------

TITLE: Defining Image Content in MCP Tool Results
DESCRIPTION: This JSON snippet defines an image content item within a tool result. The `type` is 'image', `data` holds the base64-encoded image binary, and `mimeType` specifies the image format (e.g., 'image/png'). This allows tools to return visual information directly.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#_snippet_8

LANGUAGE: json
CODE:
```
{
  "type": "image",
  "data": "base64-encoded-data",
  "mimeType": "image/png"
}
```

----------------------------------------

TITLE: Example JSON for Binary Resource Content
DESCRIPTION: This JSON snippet demonstrates the structure for representing binary resource content in the Model Context Protocol. It specifies the resource's URI, MIME type, and a 'blob' field containing the base64-encoded binary data, suitable for images or other non-textual files.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_15

LANGUAGE: json
CODE:
```
{
  "uri": "file:///example.png",
  "mimeType": "image/png",
  "blob": "base64-encoded-data"
}
```

----------------------------------------

TITLE: Implementing Interactive Chat Loop in TypeScript
DESCRIPTION: This section defines the `chatLoop` and `cleanup` methods for the MCP client. The `chatLoop` provides an interactive command-line interface for users to input queries, processes them using `processQuery`, and displays responses. The `cleanup` method ensures proper resource release, such as closing the transport connection, when the client exits.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
  async chatLoop(): Promise<void> {
    console.log("\nMCP Client Started!");
    console.log("Type your queries or 'quit' to exit.");

    // Using Node's readline for console input
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });

    const askQuestion = () => {
      rl.question("\nQuery: ", async (query: string) => {
        try {
          if (query.toLowerCase() === "quit") {
            await this.cleanup();
            rl.close();
            return;
          }

          const response = await this.processQuery(query);
          console.log("\n" + response);
          askQuestion();
        } catch (error) {
          console.error("\nError:", error);
          askQuestion();
        }
      });
    };

    askQuestion();
  }

  async cleanup(): Promise<void> {
    if (this.transport) {
      await this.transport.close();
    }
  }
```

----------------------------------------

TITLE: Defining Custom Transport Interface in TypeScript
DESCRIPTION: This TypeScript interface defines the contract for implementing custom MCP transports. It specifies methods for starting, sending messages, closing connections, and callbacks for connection events like `onclose`, `onerror`, and `onmessage`.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#_snippet_11

LANGUAGE: TypeScript
CODE:
```
interface Transport {
  // Start processing messages
  start(): Promise<void>;

  // Send a JSON-RPC message
  send(message: JSONRPCMessage): Promise<void>;

  // Close the connection
  close(): Promise<void>;

  // Callbacks
  onclose?: () => void;
  onerror?: (error: Error) => void;
  onmessage?: (message: JSONRPCMessage) => void;
}
```

----------------------------------------

TITLE: Requesting a List of Resource Templates in MCP
DESCRIPTION: Clients send this `resources/templates/list` JSON-RPC request to an MCP server to discover available resource templates. These templates allow for parameterized resource access using URI templates, with arguments potentially auto-completed via the completion API.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_8

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 3,
  "method": "resources/templates/list"
}
```

----------------------------------------

TITLE: Defining JSON-RPC Notification Message - TypeScript
DESCRIPTION: This snippet defines the structure for a Model Context Protocol (MCP) notification message in TypeScript. Notifications are one-way messages that do not expect a response and, consequently, must not include an `id` field. They are used for sending information without requiring an acknowledgment.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/index.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
{
  jsonrpc: "2.0";
  method: string;
  params?: {
    [key: string]: unknown;
  };
}
```

----------------------------------------

TITLE: Receiving Resources Read Response (JSON)
DESCRIPTION: This JSON snippet illustrates a server's response to a `resources/read` request. The `result` contains a `contents` array, which includes the `uri`, `mimeType`, and the actual `text` content of the requested resource. The `text` field contains the resource's data, with newlines properly escaped.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_7

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "result": {
    "contents": [
      {
        "uri": "file:///project/src/main.rs",
        "mimeType": "text/x-rust",
        "text": "fn main() {\n    println!(\"Hello world!\");\n}"
      }
    ]
  }
}
```

----------------------------------------

TITLE: Clean Up Resources - Python
DESCRIPTION: Handles the cleanup of resources used by the client, primarily closing the `AsyncExitStack` to ensure proper termination of asynchronous contexts and connections upon exiting the application.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_6

LANGUAGE: python
CODE:
```
async def cleanup(self):
    """Clean up resources"""
    await self.exit_stack.aclose()
```

----------------------------------------

TITLE: Example Protocol Error in JSON-RPC
DESCRIPTION: This JSON-RPC response demonstrates a protocol-level error, typically used for issues such as unknown tools or invalid arguments. The 'error' object contains a standard error 'code' and a descriptive 'message'.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#_snippet_10

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 3,
  "error": {
    "code": -32602,
    "message": "Unknown tool: invalid_tool_name"
  }
}
```

----------------------------------------

TITLE: Adding MCP Bill of Materials (BOM) (Gradle)
DESCRIPTION: This snippet adds the Model Context Protocol (MCP) Bill of Materials (BOM) to a Gradle project using the 'platform' dependency handler method. The BOM manages recommended versions for all MCP dependencies, simplifying version management and ensuring compatibility.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-overview.mdx#_snippet_7

LANGUAGE: Groovy
CODE:
```
dependencies {
  implementation platform("io.modelcontextprotocol.sdk:mcp-bom:0.9.0")
  //...
}
```

----------------------------------------

TITLE: Initializing MCP Client with Stdio Transport (Python)
DESCRIPTION: This Python snippet demonstrates how to configure and connect an MCP client using the stdio transport. It specifies the command and arguments for the server process and initializes a client session over the established streams.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#_snippet_6

LANGUAGE: python
CODE:
```
params = StdioServerParameters(
    command="./server",
    args=["--option", "value"]
)

async with stdio_client(params) as streams:
    async with ClientSession(streams[0], streams[1]) as session:
        await session.initialize()
```

----------------------------------------

TITLE: Building Client Capabilities (Java)
DESCRIPTION: This code demonstrates how to construct a `ClientCapabilities` object using its builder. It enables support for filesystem roots (including change notifications) and LLM sampling, allowing the client to declare its supported features to the server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_5

LANGUAGE: java
CODE:
```
var capabilities = ClientCapabilities.builder()
    .roots(true)      // Enable filesystem roots support with list changes notifications
    .sampling()       // Enable LLM sampling support
    .build();
```

----------------------------------------

TITLE: Creating Simple Text Elicitation Request in JSON
DESCRIPTION: Servers send an `elicitation/create` JSON-RPC request to prompt the user for a simple text input, such as a GitHub username. The `message` field provides the prompt, and `requestedSchema` defines the expected string input, ensuring validation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/elicitation.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "elicitation/create",
  "params": {
    "message": "Please provide your GitHub username",
    "requestedSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": ["name"]
    }
  }
}
```

----------------------------------------

TITLE: Declaring Resource Capabilities (List Changed Only) (MCP)
DESCRIPTION: This JSON snippet declares the `resources` capability, enabling only the `listChanged` feature. This indicates that the server will send notifications when the list of available resources changes, but clients cannot subscribe to updates for individual resources.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "resources": {
      "listChanged": true 
    }
  }
}
```

----------------------------------------

TITLE: Illustrating Server Metadata Discovery Flow (Mermaid)
DESCRIPTION: This sequence diagram illustrates the process of an MCP client discovering server capabilities. It shows the client attempting to retrieve metadata from the `/.well-known/oauth-authorization-server` endpoint and handling both success (using metadata) and failure (falling back to default endpoints) scenarios.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/authorization.mdx#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant C as Client
    participant S as Server

    C->>S: GET /.well-known/oauth-authorization-server
    alt Discovery Success
        S->>C: 200 OK + Metadata Document
        Note over C: Use endpoints from metadata
    else Discovery Failed
        S->>C: 404 Not Found
        Note over C: Fall back to default endpoints
    end
    Note over C: Continue with authorization flow
```

----------------------------------------

TITLE: Client Initialized Notification - JSON
DESCRIPTION: This JSON-RPC notification is sent by the client to the server after successfully receiving and processing the `initialize` response. It signals that the client is ready to proceed with normal protocol operations. Neither client nor server should send other requests before this notification is processed, except for pings or logging.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/lifecycle.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/initialized"
}
```

----------------------------------------

TITLE: Response for Listing Resource Templates in MCP
DESCRIPTION: This JSON-RPC response is returned by an MCP server to a `resources/templates/list` request. It provides a list of `resourceTemplates`, each defining a `uriTemplate` for parameterized access, along with a name, description, and MIME type.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_9

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 3,
  "result": {
    "resourceTemplates": [
      {
        "uriTemplate": "file:///{path}",
        "name": "Project Files",
        "description": "Access files in the project directory",
        "mimeType": "application/octet-stream"
      }
    ]
  }
}
```

----------------------------------------

TITLE: Requesting Resource List (MCP)
DESCRIPTION: This JSON snippet shows a client's `resources/list` request to discover available resources. It includes a `cursor` parameter for pagination, allowing clients to retrieve resources in batches. The `id` field is used to correlate the request with its corresponding response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "resources/list",
  "params": {
    "cursor": "optional-cursor-value"
  }
}
```

----------------------------------------

TITLE: Defining Image Content for Prompt Messages (JSON)
DESCRIPTION: This JSON snippet defines the structure for image-based content within a prompt message, enabling multi-modal interactions. It specifies the 'type' as 'image', includes the 'data' as a base64-encoded string of the image, and requires the 'mimeType' to indicate the image format (e.g., 'image/png').
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#_snippet_7

LANGUAGE: json
CODE:
```
{
  "type": "image",
  "data": "base64-encoded-image-data",
  "mimeType": "image/png"
}
```

----------------------------------------

TITLE: Defining Sync Completion Specification in Java
DESCRIPTION: This snippet shows how to define a synchronous completion specification using McpServerFeatures.SyncCompletionSpecification. It references a PromptReference and provides a handler function that returns McpSchema.CompleteResult with a list of completion suggestions, total count, and a hasMore flag.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_14

LANGUAGE: java
CODE:
```
// Sync completion specification
var syncCompletionSpecification = new McpServerFeatures.SyncCompletionSpecification(
			new McpSchema.PromptReference("code_review"), (exchange, request) -> {
        
        // completion implementation ...
        
        return new McpSchema.CompleteResult(
            new CompleteResult.CompleteCompletion(
              List.of("python", "pytorch", "pyside"), 
              10, // total
              false // hasMore
            ));
      }
);
```

----------------------------------------

TITLE: Responding with Available Tools (tools/list) in MCP
DESCRIPTION: This JSON-RPC response provides the list of available tools to the client. Each tool includes a `name`, `description`, and an `inputSchema` defining its expected parameters using JSON Schema. The `nextCursor` field facilitates pagination, indicating if more tools are available on subsequent requests.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "tools": [
      {
        "name": "get_weather",
        "description": "Get current weather information for a location",
        "inputSchema": {
          "type": "object",
          "properties": {
            "location": {
              "type": "string",
              "description": "City name or zip code"
            }
          },
          "required": ["location"]
        }
      }
    ],
    "nextCursor": "next-page-cursor"
  }
}
```

----------------------------------------

TITLE: Defining Text Content for MCP Sampling Messages (JSON)
DESCRIPTION: This JSON snippet defines the structure for text-based content within sampling messages in the Model Context Protocol (MCP). It specifies the `type` as 'text' and includes the actual textual content in the `text` field. This format is used for both user prompts and generated responses.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "type": "text",
  "text": "The message content"
}
```

----------------------------------------

TITLE: Request to Subscribe to a Specific Resource in MCP
DESCRIPTION: Clients send this `resources/subscribe` JSON-RPC request to an MCP server to receive notifications for changes to a specific resource. The `uri` parameter identifies the resource to which the client wishes to subscribe.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_11

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 4,
  "method": "resources/subscribe",
  "params": {
    "uri": "file:///project/src/main.rs"
  }
}
```

----------------------------------------

TITLE: Sending a Cancellation Notification (JSON)
DESCRIPTION: This JSON snippet demonstrates the structure of a `notifications/cancelled` message used to request the termination of an in-progress Model Context Protocol (MCP) request. It includes the `requestId` of the request to be cancelled and an optional `reason` string for logging or display.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/utilities/cancellation.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/cancelled",
  "params": {
    "requestId": "123",
    "reason": "User requested cancellation"
  }
}
```

----------------------------------------

TITLE: Defining Image Content for MCP Sampling Messages (JSON)
DESCRIPTION: This JSON snippet outlines the structure for image-based content within sampling messages in the Model Context Protocol (MCP). It sets the `type` to 'image', provides the base64-encoded image data in the `data` field, and specifies the image's MIME type (e.g., 'image/jpeg') in `mimeType`. This allows for multimodal interactions with LLMs.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "type": "image",
  "data": "base64-encoded-image-data",
  "mimeType": "image/jpeg"
}
```

----------------------------------------

TITLE: Tool Result Image Content Type (JSON)
DESCRIPTION: This JSON object defines an 'image' content type for tool results. It includes the 'type' field set to 'image', 'data' for the base64-encoded image, and 'mimeType' specifying the image format.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#_snippet_8

LANGUAGE: JSON
CODE:
```
{
  "type": "image",
  "data": "base64-encoded-data",
  "mimeType": "image/png"
}
```

----------------------------------------

TITLE: Embedding Resources in Model Context Protocol JSON
DESCRIPTION: This JSON snippet demonstrates how to embed a resource within the Model Context Protocol. It includes the resource's URI, MIME type, and its content, allowing clients to subscribe to or fetch the resource later.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#_snippet_10

LANGUAGE: JSON
CODE:
```
{
  "type": "resource",
  "resource": {
    "uri": "resource://example",
    "mimeType": "text/plain",
    "text": "Resource content"
  }
}
```

----------------------------------------

TITLE: Example MCP Client Roots Configuration (JSON)
DESCRIPTION: This JSON snippet demonstrates how an MCP client might expose a list of 'roots' to a server. It includes two root entries: one for a local filesystem path representing a frontend repository and another for an API endpoint, illustrating how different resource types can be logically grouped.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/roots.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "roots": [
    {
      "uri": "file:///home/user/projects/frontend",
      "name": "Frontend Repository"
    },
    {
      "uri": "https://api.example.com/v1",
      "name": "API Endpoint"
    }
  ]
}
```

----------------------------------------

TITLE: Representing a JSON-RPC Error Response
DESCRIPTION: This JSON snippet illustrates a standard JSON-RPC error response. It includes the `jsonrpc` version, an `id` for correlating with the request, and an `error` object containing a numeric `code` and a descriptive `message`. This structure is used by clients to report common failure cases, such as a user rejecting a sampling request.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/sampling.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "error": {
    "code": -1,
    "message": "User rejected sampling request"
  }
}
```

----------------------------------------

TITLE: Tool Result Text Content (JSON)
DESCRIPTION: This JSON snippet defines the structure for returning text content as part of a tool result. It specifies the 'type' as 'text' and includes the actual 'text' string, which can contain human-readable information from the tool's operation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#_snippet_7

LANGUAGE: JSON
CODE:
```
{
  "type": "text",
  "text": "Tool result text"
}
```

----------------------------------------

TITLE: Listing Tools Request (JSON)
DESCRIPTION: Clients send a 'tools/list' request to discover available tools. This operation supports pagination, allowing clients to retrieve tools in chunks using an optional 'cursor' value to request subsequent pages of results.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "tools/list",
  "params": {
    "cursor": "optional-cursor-value"
  }
}
```

----------------------------------------

TITLE: Dynamic Prompt Definition with Resource Arguments (JSON)
DESCRIPTION: Defines a dynamic prompt that accepts arguments like `timeframe` and `fileUri` to incorporate external resource context, enabling more complex and data-rich interactions.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  "name": "analyze-project",
  "description": "Analyze project logs and code",
  "arguments": [
    {
      "name": "timeframe",
      "description": "Time period to analyze logs",
      "required": true
    },
    {
      "name": "fileUri",
      "description": "URI of code file to review",
      "required": true
    }
  ]
}
```

----------------------------------------

TITLE: Sending Resources Read Request (JSON)
DESCRIPTION: This JSON snippet demonstrates a client's request to read the contents of a specific resource using the `resources/read` method. The `params` object includes the `uri` of the resource to be retrieved. The `id` field links this request to its corresponding response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "method": "resources/read",
  "params": {
    "uri": "file:///project/src/main.rs"
  }
}
```

----------------------------------------

TITLE: Requesting Available Prompts (TypeScript)
DESCRIPTION: Illustrates the request payload for the `prompts/list` endpoint, used by clients to discover all available prompt templates from the server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
// Request
{
  method: "prompts/list"
}
```

----------------------------------------

TITLE: Adding Core MCP Dependency (Maven)
DESCRIPTION: This snippet adds the core Model Context Protocol (MCP) functionality as a Maven dependency. It provides base APIs and default STDIO/SSE transport implementations without requiring external web frameworks.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-overview.mdx#_snippet_0

LANGUAGE: XML
CODE:
```
<dependency>
    <groupId>io.modelcontextprotocol.sdk</groupId>
    <artifactId>mcp</artifactId>
</dependency>
```

----------------------------------------

TITLE: Example Initialization Error Response (JSON)
DESCRIPTION: This JSON snippet demonstrates a standard error response for an unsupported protocol version during the Model Context Protocol's initialization phase. It adheres to the JSON-RPC 2.0 specification, providing an error code, a human-readable message, and specific data indicating the supported and requested protocol versions to aid in debugging and client adaptation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/lifecycle.mdx#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "error": {
    "code": -32602,
    "message": "Unsupported protocol version",
    "data": {
      "supported": ["2024-11-05"],
      "requested": "1.0.0"
    }
  }
}
```

----------------------------------------

TITLE: Notifying Server of Root List Changes (JSON)
DESCRIPTION: Clients that declare the `listChanged` capability send this JSON-RPC notification to inform the server that the list of available roots has been updated. Servers should then re-request the root list to get the latest information.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/roots.mdx#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/roots/list_changed"
}
```

----------------------------------------

TITLE: Defining Audio Content (JSON)
DESCRIPTION: This JSON snippet defines the structure for audio-based content within sampling messages. It includes the 'type' as 'audio', the base64-encoded 'data' representing the audio, and the 'mimeType' to specify the audio format (e.g., 'audio/wav').
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  "type": "audio",
  "data": "base64-encoded-audio-data",
  "mimeType": "audio/wav"
}
```

----------------------------------------

TITLE: Implementing Resource Support in MCP Server (Python)
DESCRIPTION: This Python snippet demonstrates implementing resource support in an MCP server using decorators for list_resources and read_resource functions. It shows how to define available resources and serve their content, and how to start the server using stdio_server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/resources.mdx#_snippet_5

LANGUAGE: Python
CODE:
```
app = Server("example-server")

@app.list_resources()
async def list_resources() -> list[types.Resource]:
    return [
        types.Resource(
            uri="file:///logs/app.log",
            name="Application Logs",
            mimeType="text/plain"
        )
    ]

@app.read_resource()
async def read_resource(uri: AnyUrl) -> str:
    if str(uri) == "file:///logs/app.log":
        log_contents = await read_log_file()
        return log_contents

    raise ValueError("Resource not found")

# Start server
async with stdio_server() as streams:
    await app.run(
        streams[0],
        streams[1],
        app.create_initialization_options()
    )
```

----------------------------------------

TITLE: Tool Result Audio Content (JSON)
DESCRIPTION: This JSON snippet defines the structure for returning audio content within a tool result. It specifies the 'type' as 'audio', includes the base64-encoded 'data' of the audio, and its 'mimeType' (e.g., 'audio/wav') for proper playback.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#_snippet_9

LANGUAGE: JSON
CODE:
```
{
  "type": "audio",
  "data": "base64-encoded-audio-data",
  "mimeType": "audio/wav"
}
```

----------------------------------------

TITLE: Implementing Prompts in MCP Server (Python)
DESCRIPTION: This Python example illustrates how to implement custom prompts within an MCP server. It defines 'git-commit' and 'explain-code' prompts using mcp.types.Prompt and provides asynchronous handlers for listing prompts and generating prompt-specific messages based on input arguments.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#_snippet_9

LANGUAGE: python
CODE:
```
from mcp.server import Server
import mcp.types as types

# Define available prompts
PROMPTS = {
    "git-commit": types.Prompt(
        name="git-commit",
        description="Generate a Git commit message",
        arguments=[
            types.PromptArgument(
                name="changes",
                description="Git diff or description of changes",
                required=True
            )
        ],
    ),
    "explain-code": types.Prompt(
        name="explain-code",
        description="Explain how code works",
        arguments=[
            types.PromptArgument(
                name="code",
                description="Code to explain",
                required=True
            ),
            types.PromptArgument(
                name="language",
                description="Programming language",
                required=False
            )
        ],
    )
}

# Initialize server
app = Server("example-prompts-server")

@app.list_prompts()
async def list_prompts() -> list[types.Prompt]:
    return list(PROMPTS.values())

@app.get_prompt()
async def get_prompt(
    name: str, arguments: dict[str, str] | None = None
) -> types.GetPromptResult:
    if name not in PROMPTS:
        raise ValueError(f"Prompt not found: {name}")

    if name == "git-commit":
        changes = arguments.get("changes") if arguments else ""
        return types.GetPromptResult(
            messages=[
                types.PromptMessage(
                    role="user",
                    content=types.TextContent(
                        type="text",
                        text=f"Generate a concise but descriptive commit message "
                        f"for these changes:\n\n{changes}"
                    )
                )
            ]
        )

    if name == "explain-code":
        code = arguments.get("code") if arguments else ""
        language = arguments.get("language", "Unknown") if arguments else "Unknown"
        return types.GetPromptResult(
            messages=[
                types.PromptMessage(
                    role="user",
                    content=types.TextContent(
                        type="text",

```

----------------------------------------

TITLE: Sending a roots/list Request in MCP (JSON)
DESCRIPTION: This JSON snippet shows a standard JSON-RPC request for listing available roots. Servers send this message to clients to retrieve the current set of filesystem roots they are permitted to access, identified by a unique request ID and the 'roots/list' method.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/roots.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "roots/list"
}
```

----------------------------------------

TITLE: MCP Paginated Response Example (JSON)
DESCRIPTION: This JSON snippet demonstrates the structure of a paginated response from an MCP server. It includes the current page of `resources` and an optional `nextCursor` field. The presence of `nextCursor` indicates that more results are available, prompting the client to make a subsequent request.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/pagination.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": "123",
  "result": {
    "resources": [...],
    "nextCursor": "eyJwYWdlIjogM30="
  }
}
```

----------------------------------------

TITLE: Connecting with SSE Client in Python
DESCRIPTION: This example demonstrates how to establish a client session using an SSE client in Python. It connects to the specified SSE endpoint and initializes the client session.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#_snippet_10

LANGUAGE: Python
CODE:
```
async with sse_client("http://localhost:8000/sse") as streams:
        async with ClientSession(streams[0], streams[1]) as session:
            await session.initialize()
```

----------------------------------------

TITLE: Registering 'get_alerts' Tool for Weather Alerts (Kotlin)
DESCRIPTION: Registers a tool named 'get_alerts' with the server, enabling it to fetch weather alerts for a specified US state. The tool's input schema defines a required 'state' parameter (two-letter US state code). It uses the configured HTTP client to make the API call and returns the alerts as text content.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_46

LANGUAGE: kotlin
CODE:
```
server.addTool(
    name = "get_alerts",
    description = """
        Get weather alerts for a US state. Input is Two-letter US state code (e.g. CA, NY)
    """.trimIndent(),
    inputSchema = Tool.Input(
        properties = buildJsonObject {
            putJsonObject("state") {
                put("type", "string")
                put("description", "Two-letter US state code (e.g. CA, NY)")
            }
        },
        required = listOf("state")
    )
) { request ->
    val state = request.arguments["state"]?.jsonPrimitive?.content
    if (state == null) {
        return@addTool CallToolResult(
            content = listOf(TextContent("The 'state' parameter is required."))
        )
    }

    val alerts = httpClient.getAlerts(state)

    CallToolResult(content = alerts.map { TextContent(it) })
}
```

----------------------------------------

TITLE: Declaring Tools Capability (JSON)
DESCRIPTION: Servers supporting the Model Context Protocol (MCP) tools feature must declare the 'tools' capability in their capabilities object. The 'listChanged' property indicates if the server will notify clients when the list of available tools changes.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "capabilities": {
    "tools": {
      "listChanged": true
    }
  }
}
```

----------------------------------------

TITLE: Declaring Prompts Capability (JSON)
DESCRIPTION: This JSON snippet demonstrates how a server declares its support for the `prompts` capability during initialization, indicating that it can expose prompt templates. The `listChanged` property specifies whether the server will notify clients when the list of available prompts changes.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "capabilities": {
    "prompts": {
      "listChanged": true
    }
  }
}
```

----------------------------------------

TITLE: Prompt Message Text Content (JSON)
DESCRIPTION: This JSON snippet defines the structure for text content within a `PromptMessage`. It specifies the `type` as 'text' and contains the actual plain `text` content of the message, commonly used for natural language interactions.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#_snippet_6

LANGUAGE: JSON
CODE:
```
{
  "type": "text",
  "text": "The text content of the message"
}
```

----------------------------------------

TITLE: Declaring Resource Capabilities with Subscribe Only
DESCRIPTION: This example shows an MCP server declaring the `resources` capability, specifically enabling only the `subscribe` feature. This allows clients to subscribe to individual resources and receive notifications when their content changes, but not for changes to the overall resource list.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "capabilities": {
    "resources": {
      "subscribe": true 
    }
  }
}
```

----------------------------------------

TITLE: Declaring Sampling Capability (JSON)
DESCRIPTION: This JSON snippet demonstrates how clients declare support for the 'sampling' capability during initialization within the Model Context Protocol. It indicates that the client can handle LLM sampling requests, enabling servers to send generation requests.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "sampling": {}
  }
}
```

----------------------------------------

TITLE: Defining Helper Functions and Interfaces for NWS API (TypeScript)
DESCRIPTION: This TypeScript snippet defines a helper function `makeNWSRequest` for fetching data from the National Weather Service API, handling headers and error conditions. It also declares several interfaces (`AlertFeature`, `ForecastPeriod`, `AlertsResponse`, `PointsResponse`, `ForecastResponse`) to type the expected API responses and `formatAlert` to process alert data.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_16

LANGUAGE: typescript
CODE:
```
// Helper function for making NWS API requests
async function makeNWSRequest<T>(url: string): Promise<T | null> {
  const headers = {
    "User-Agent": USER_AGENT,
    Accept: "application/geo+json",
  };

  try {
    const response = await fetch(url, { headers });
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return (await response.json()) as T;
  } catch (error) {
    console.error("Error making NWS request:", error);
    return null;
  }
}

interface AlertFeature {
  properties: {
    event?: string;
    areaDesc?: string;
    severity?: string;
    status?: string;
    headline?: string;
  };
}

// Format alert data
function formatAlert(feature: AlertFeature): string {
  const props = feature.properties;
  return [
    `Event: ${props.event || "Unknown"}`,
    `Area: ${props.areaDesc || "Unknown"}`,
    `Severity: ${props.severity || "Unknown"}`,
    `Status: ${props.status || "Unknown"}`,
    `Headline: ${props.headline || "No headline"}`,
    "---",
  ].join("\n");
}

interface ForecastPeriod {
  name?: string;
  temperature?: number;
  temperatureUnit?: string;
  windSpeed?: string;
  windDirection?: string;
  shortForecast?: string;
}

interface AlertsResponse {
  features: AlertFeature[];
}

interface PointsResponse {
  properties: {
    forecast?: string;
  };
}

interface ForecastResponse {
  properties: {
    periods: ForecastPeriod[];
  };
}
```

----------------------------------------

TITLE: Defining an Embedded Resource in JSON
DESCRIPTION: This JSON snippet illustrates the structure for an embedded resource, allowing server-side content to be directly referenced and included in messages. It requires a valid URI, MIME type, and either text or base64-encoded blob data. This mechanism facilitates the seamless integration of external materials like documentation or code samples into the conversation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#_snippet_9

LANGUAGE: json
CODE:
```
{
  "type": "resource",
  "resource": {
    "uri": "resource://example",
    "mimeType": "text/plain",
    "text": "Resource content"
  }
}
```

----------------------------------------

TITLE: Example Initialization Error Response in JSON
DESCRIPTION: This JSON snippet illustrates an example error response for a protocol version mismatch during initialization. It indicates that the requested protocol version is unsupported, providing a list of supported versions. This error helps clients understand why a connection failed to establish due to version incompatibility.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/lifecycle.mdx#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "error": {
    "code": -32602,
    "message": "Unsupported protocol version",
    "data": {
      "supported": ["2024-11-05"],
      "requested": "1.0.0"
    }
  }
}
```

----------------------------------------

TITLE: Implementing SSE Server Transport with Starlette in Python
DESCRIPTION: This snippet illustrates setting up an MCP server with `SseServerTransport` using Starlette. It defines routes for SSE connections and message handling, allowing the MCP server to run over the SSE transport.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#_snippet_9

LANGUAGE: Python
CODE:
```
from mcp.server.sse import SseServerTransport
from starlette.applications import Starlette
from starlette.routing import Route

app = Server("example-server")
sse = SseServerTransport("/messages")

async def handle_sse(scope, receive, send):
    async with sse.connect_sse(scope, receive, send) as streams:
        await app.run(streams[0], streams[1], app.create_initialization_options())

async def handle_messages(scope, receive, send):
    await sse.handle_post_message(scope, receive, send)

starlette_app = Starlette(
    routes=[
        Route("/sse", endpoint=handle_sse),
        Route("/messages", endpoint=handle_messages, methods=["POST"]),
    ]
)
```

----------------------------------------

TITLE: Response for Listing Prompts (TypeScript)
DESCRIPTION: Shows the expected response from the `prompts/list` endpoint, providing a list of available prompts, including their names, descriptions, and required arguments.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
// Response
{
  prompts: [
    {
      name: "analyze-code",
      description: "Analyze code for potential improvements",
      arguments: [
        {
          name: "language",
          description: "Programming language",
          required: true
        }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Receiving Completions (Response) - JSON
DESCRIPTION: This JSON object illustrates a successful response to a `completion/complete` request. It contains a `completion` object with an array of suggested `values` (e.g., 'python', 'pytorch'), an optional `total` count of matches, and a `hasMore` flag indicating if further results are available.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/completion.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "completion": {
      "values": ["python", "pytorch", "pyside"],
      "total": 10,
      "hasMore": true
    }
  }
}
```

----------------------------------------

TITLE: Configuring Server Logging and Level (Java)
DESCRIPTION: This snippet shows how to configure an MCP client to receive and filter server log messages. It registers a `loggingConsumer` to process incoming log notifications and sets the minimum `LoggingLevel` to `INFO`, ensuring only messages at or above this severity are received. It also includes an example of calling a tool that might generate log notifications.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_8

LANGUAGE: java
CODE:
```
var mcpClient = McpClient.sync(transport)
        .loggingConsumer(notification -> {
            System.out.println("Received log message: " + notification.data());
        })
        .build();

mcpClient.initialize();

mcpClient.setLoggingLevel(McpSchema.LoggingLevel.INFO);

// Call the tool that can sends logging notifications
CallToolResult result = mcpClient.callTool(new McpSchema.CallToolRequest("logging-test", Map.of()));
```

----------------------------------------

TITLE: Prompts List Changed Notification in MCP (JSON)
DESCRIPTION: This JSON-RPC notification is sent by the server to clients that have declared the 'listChanged' capability. It signals that the list of available prompts has been updated, prompting clients to re-list prompts to get the latest information.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/prompts.mdx#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/prompts/list_changed"
}
```

----------------------------------------

TITLE: MCP Notification for Resource List Changes
DESCRIPTION: Servers that have declared the `listChanged` capability in MCP send this `notifications/resources/list_changed` JSON-RPC notification to clients when the overall list of available resources has changed, prompting clients to re-list resources if needed.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_10

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/resources/list_changed"
}
```

----------------------------------------

TITLE: Responding to Resource Read Request (MCP)
DESCRIPTION: This JSON snippet represents a server's response to a `resources/read` request, providing the content of the requested resource. The `contents` array includes the resource's `uri`, `mimeType`, and the actual `text` content. The `text` field contains the resource's data, with newlines properly escaped.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_7

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "result": {
    "contents": [
      {
        "uri": "file:///project/src/main.rs",
        "mimeType": "text/x-rust",
        "text": "fn main() {\n    println!(\"Hello world!\");\n}"
      }
    ]
  }
}
```

----------------------------------------

TITLE: Defining Text Content (JSON)
DESCRIPTION: This JSON snippet defines the structure for text-based content within sampling messages. It specifies the content 'type' as 'text' and includes the actual 'text' message content, which can be used for user prompts or assistant responses.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  "type": "text",
  "text": "The message content"
}
```

----------------------------------------

TITLE: Requesting Progress Updates in MCP (JSON)
DESCRIPTION: This JSON snippet demonstrates how a client requests progress updates for a long-running operation within the Model Context Protocol (MCP). It includes a unique `progressToken` in the `_meta` field of the request parameters, signaling the server to send progress notifications.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/utilities/progress.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "some_method",
  "params": {
    "_meta": {
      "progressToken": "abc123"
    }
  }
}
```

----------------------------------------

TITLE: Sending Resources Subscribe Request (JSON)
DESCRIPTION: This JSON snippet demonstrates a client's request to subscribe to changes for a specific resource. The `params` object specifies the `uri` of the resource to monitor. Upon successful subscription, the client will receive `notifications/resources/updated` when the resource changes.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_11

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 4,
  "method": "resources/subscribe",
  "params": {
    "uri": "file:///project/src/main.rs"
  }
}
```

----------------------------------------

TITLE: Response for Listing Resources in MCP
DESCRIPTION: This JSON-RPC response is returned by an MCP server to a `resources/list` request. It contains an array of `resources`, each with a URI, name, description, and MIME type, along with an optional `nextCursor` for pagination.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "resources": [
      {
        "uri": "file:///project/src/main.rs",
        "name": "main.rs",
        "description": "Primary application entry point",
        "mimeType": "text/x-rust"
      }
    ],
    "nextCursor": "next-page-cursor"
  }
}
```

----------------------------------------

TITLE: Responding to Structured Data Elicitation (Accept) in JSON
DESCRIPTION: Clients respond to a structured `elicitation/create` request with an `accept` action, populating the `content` field with the user's input. The `content` object must adhere to the complex `requestedSchema` provided by the server, including all required fields and data types.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/elicitation.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "result": {
    "action": "accept",
    "content": {
      "name": "Monalisa Octocat",
      "email": "octocat@github.com",
      "age": 30
    }
  }
}
```

----------------------------------------

TITLE: Declaring Roots Capability in MCP Initialization (JSON)
DESCRIPTION: This JSON snippet demonstrates how clients declare the 'roots' capability during Model Context Protocol (MCP) initialization. The `listChanged` property indicates the client's ability to send notifications when the list of roots changes, enabling servers to stay updated on available filesystem boundaries.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/roots.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "capabilities": {
    "roots": {
      "listChanged": true
    }
  }
}
```

----------------------------------------

TITLE: Building and Running MCP Client with npm
DESCRIPTION: This bash command provides instructions on how to build the TypeScript client code using `npm run build`. It emphasizes the need to re-run the build command whenever the `client.ts` file is updated to ensure the latest changes are compiled and available for execution.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#_snippet_10

LANGUAGE: bash
CODE:
```
# Build the TypeScript code. Make sure to rerun this every time you update `client.ts`!
npm run build
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options (tsconfig.json)
DESCRIPTION: This JSON snippet defines the TypeScript compiler options in `tsconfig.json`. It sets the target ECMAScript version, module system, output directory, strictness, and other settings for consistent compilation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_14

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "Node16",
    "moduleResolution": "Node16",
    "outDir": "./build",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules"]
}
```

----------------------------------------

TITLE: Example JSON for Text Resource Content
DESCRIPTION: This JSON snippet illustrates the structure for representing text-based resource content within the Model Context Protocol. It includes the resource's URI, MIME type, and the actual text content, demonstrating how textual data is encapsulated.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_14

LANGUAGE: json
CODE:
```
{
  "uri": "file:///example.txt",
  "mimeType": "text/plain",
  "text": "Resource content"
}
```

----------------------------------------

TITLE: Convert JsonObject to JsonValue Helper (Kotlin)
DESCRIPTION: Provides a private helper extension function for `JsonObject` to convert it into an Anthropic `JsonValue` using the Jackson `ObjectMapper`. This is necessary for formatting tool input schemas.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_47

LANGUAGE: kotlin
CODE:
```
private fun JsonObject.toJsonValue(): JsonValue {
    val mapper = ObjectMapper()
    val node = mapper.readTree(this.toString())
    return JsonValue.fromJsonNode(node)
}
```

----------------------------------------

TITLE: Stdio Transport Message Exchange Diagram - Mermaid
DESCRIPTION: Illustrates the message exchange flow for the stdio transport mechanism in MCP. The client launches the server as a subprocess, communicating via stdin and stdout, with optional logging on stderr. The diagram shows the launch, a loop of message exchange, and termination.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/transports.mdx#_snippet_0

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Client
    participant Server Process

    Client->>+Server Process: Launch subprocess
    loop Message Exchange
        Client->>Server Process: Write to stdin
        Server Process->>Client: Write to stdout
        Server Process--)Client: Optional logs on stderr
    end
    Client->>Server Process: Close stdin, terminate subprocess
    deactivate Server Process
```

----------------------------------------

TITLE: Inspecting NPM Package Servers with MCP Inspector
DESCRIPTION: This command illustrates how to use the MCP Inspector to connect to and inspect an MCP server distributed as an NPM package. It uses `npx` to directly run the server package and pass arguments, such as a database connection string for `server-postgres`.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/inspector.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx -y @modelcontextprotocol/inspector npx <package-name> <args>
# For example
npx -y @modelcontextprotocol/inspector npx server-postgres postgres://127.0.0.1/testdb
```

----------------------------------------

TITLE: Defining Result Message Interface in TypeScript
DESCRIPTION: This snippet defines the `Result` interface, representing a successful response to a `Request` message in the MCP. It is a flexible object that can contain any key-value pairs as its content.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
interface Result {
  [key: string]: unknown;
}
```

----------------------------------------

TITLE: Example MCP Root Definition for Multiple Repositories (JSON)
DESCRIPTION: This JSON snippet demonstrates how multiple roots can be defined, representing separate repositories or directories. It shows an array of root objects, each with its own `uri` and `name`, allowing clients to expose distinct filesystem boundaries to servers.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/roots.mdx#_snippet_6

LANGUAGE: JSON
CODE:
```
[
  {
    "uri": "file:///home/user/repos/frontend",
    "name": "Frontend Repository"
  },
  {
    "uri": "file:///home/user/repos/backend",
    "name": "Backend Repository"
  }
]
```

----------------------------------------

TITLE: Defining a Multi-step Prompt Workflow (TypeScript)
DESCRIPTION: Shows a TypeScript example of a multi-step prompt workflow, where the `getMessages` function dynamically generates a sequence of user and assistant messages based on initial input, guiding a conversational interaction.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
const debugWorkflow = {
  name: "debug-error",
  async getMessages(error: string) {
    return [
      {
        role: "user",
        content: {
          type: "text",
          text: `Here's an error I'm seeing: ${error}`
        }
      },
      {
        role: "assistant",
        content: {
          type: "text",
          text: "I'll help analyze this error. What have you tried so far?"
        }
      },
      {
        role: "user",
        content: {
          type: "text",
          text: "I've tried restarting the service, but the error persists."
        }
      }
    ];
  }
};
```

----------------------------------------

TITLE: Response for Getting a Specific Prompt in MCP (JSON)
DESCRIPTION: This JSON-RPC response delivers the full content of a requested prompt, including its description and an array of structured messages. Each message specifies a 'role' (user/assistant) and 'content', which can be of various types like text, image, or audio.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/prompts.mdx#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "result": {
    "description": "Code review prompt",
    "messages": [
      {
        "role": "user",
        "content": {
          "type": "text",
          "text": "Please review this Python code:\ndef hello():\n    print('world')"
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Sending Log Messages from MCP Server Tool in Java
DESCRIPTION: This example illustrates how an MCP server can send structured log messages from within a tool handler function. It demonstrates using the `McpAsyncServerExchange` object to send a `LoggingMessageNotification` with a specified level, logger, and data. It also shows how to enable logging capabilities when building the MCP server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_21

LANGUAGE: java
CODE:
```
var tool = new McpServerFeatures.AsyncToolSpecification(
    new McpSchema.Tool("logging-test", "Test logging notifications", emptyJsonSchema),
    (exchange, request) -> {  

      exchange.loggingNotification( // Use the exchange to send log messages
          McpSchema.LoggingMessageNotification.builder()
            .level(McpSchema.LoggingLevel.DEBUG)
            .logger("test-logger")
            .data("Debug message")
            .build())
        .block();

      return Mono.just(new CallToolResult("Logging test completed", false));
    });

var mcpServer = McpServer.async(mcpServerTransportProvider)
  .serverInfo("test-server", "1.0.0")
  .capabilities(
    ServerCapabilities.builder()
      .logging() // Enable logging support
      .tools(true)
      .build())
  .tools(tool)
  .build();
```

----------------------------------------

TITLE: Setting up Host and Configuration - C#
DESCRIPTION: Initializes the .NET host builder for a console application. It configures the application to load settings from environment variables and user secrets, which is useful for managing sensitive information like API keys securely.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_56

LANGUAGE: csharp
CODE:
```
using Anthropic.SDK;
using Microsoft.Extensions.AI;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using ModelContextProtocol.Client;
using ModelContextProtocol.Protocol.Transport;

var builder = Host.CreateApplicationBuilder(args);

builder.Configuration
    .AddEnvironmentVariables()
    .AddUserSecrets<Program>();
```

----------------------------------------

TITLE: Model Context Protocol Sampling Message Flow (Mermaid)
DESCRIPTION: This Mermaid sequence diagram illustrates the end-to-end message flow for LLM sampling within the Model Context Protocol. It depicts the interactions between the Server, Client, User, and LLM, highlighting the critical human-in-the-loop review steps for both requests and responses.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#_snippet_3

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Server
    participant Client
    participant User
    participant LLM

    Note over Server,Client: Server initiates sampling
    Server->>Client: sampling/createMessage

    Note over Client,User: Human-in-the-loop review
    Client->>User: Present request for approval
    User-->>Client: Review and approve/modify

    Note over Client,LLM: Model interaction
    Client->>LLM: Forward approved request
    LLM-->>Client: Return generation

    Note over Client,User: Response review
    Client->>User: Present response for approval
    User-->>Client: Review and approve/modify

    Note over Server,Client: Complete request
    Client-->>Server: Return approved response
```

----------------------------------------

TITLE: Adding Maven Dependencies for MCP Client and Anthropic
DESCRIPTION: Specifies the required Maven dependencies in the pom.xml file for the Spring AI MCP client starter and the Spring AI Anthropic model starter. These dependencies enable MCP client functionality and integration with the Anthropic AI model.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_29

LANGUAGE: XML
CODE:
```
<dependency>
    <groupId>org.springframework.ai</groupId>
    <artifactId>spring-ai-starter-mcp-client</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.ai</groupId>
    <artifactId>spring-ai-starter-model-anthropic</artifactId>
</dependency>
```

----------------------------------------

TITLE: Client Request to Set Log Level (logging/setLevel)
DESCRIPTION: This JSON-RPC request is sent by a client to the server to configure the minimum log level for messages it wishes to receive. The `level` parameter specifies the desired verbosity, such as 'info', meaning the client will receive 'info' level messages and above.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/logging.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "logging/setLevel",
  "params": {
    "level": "info"
  }
}
```

----------------------------------------

TITLE: Example Root Definitions for Multiple Repositories (JSON)
DESCRIPTION: This example shows how multiple roots can be defined, representing different repositories or directories. Each entry in the array includes a `uri` and an `name` for distinct filesystem locations.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/roots.mdx#_snippet_5

LANGUAGE: JSON
CODE:
```
[
  {
    "uri": "file:///home/user/repos/frontend",
    "name": "Frontend Repository"
  },
  {
    "uri": "file:///home/user/repos/backend",
    "name": "Backend Repository"
  }
]
```

----------------------------------------

TITLE: Tools List Changed Notification (JSON)
DESCRIPTION: Servers that have declared the 'listChanged' capability should send this notification to clients when the set of available tools has been updated. This prompts clients to re-list tools to get the latest information.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/tools/list_changed"
}
```

----------------------------------------

TITLE: Setting Minimum Log Level (JSON-RPC Request)
DESCRIPTION: Clients can send a `logging/setLevel` JSON-RPC request to configure the minimum log level. The `level` parameter specifies the desired verbosity, such as 'info', 'warning', or 'error', controlling which messages the client receives.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/logging.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "logging/setLevel",
  "params": {
    "level": "info"
  }
}
```

----------------------------------------

TITLE: Declaring Resource Capabilities (Subscribe Only) (MCP)
DESCRIPTION: This JSON snippet declares the `resources` capability, specifically enabling the `subscribe` feature. This means clients can subscribe to individual resources to receive notifications when their contents change, but the server will not notify clients about changes to the overall list of available resources.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "resources": {
      "subscribe": true 
    }
  }
}
```

----------------------------------------

TITLE: Running MCP Client with Python and Node.js Servers (Bash)
DESCRIPTION: This snippet demonstrates how to run the Model Context Protocol (MCP) client using Node.js, connecting to either a Python or a Node.js server. It specifies the command-line arguments required to point the client to the respective server script.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#_snippet_11

LANGUAGE: bash
CODE:
```
node build/client.js path/to/server.py  # for Python servers
node build/client.js path/to/server.js  # for Node.js servers
```

----------------------------------------

TITLE: Declaring Roots Capability in Client Initialization (JSON)
DESCRIPTION: Clients supporting the Model Context Protocol (MCP) roots feature must declare the `roots` capability during initialization. The `listChanged` property indicates whether the client will send notifications when the list of roots changes.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/roots.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "capabilities": {
    "roots": {
      "listChanged": true
    }
  }
}
```

----------------------------------------

TITLE: Execute Main Function on Script Run - Python
DESCRIPTION: Standard Python idiom to ensure the `main` asynchronous function is executed when the script is run directly (not imported as a module). It uses `asyncio.run()` to start the asyncio event loop and run the `main` coroutine.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_8

LANGUAGE: python
CODE:
```
if __name__ == "__main__":
    import sys
    import asyncio
    asyncio.run(main())
```

----------------------------------------

TITLE: Example of Resource Reference Type for Completion
DESCRIPTION: This JSON object illustrates the `ref/resource` type, another valid value for the `ref` parameter in a `completion/complete` request. It indicates that the completion context is a resource identified by its Uniform Resource Identifier (URI), such as a file path.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/completion.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{"type": "ref/resource", "uri": "file:///{path}"}
```

----------------------------------------

TITLE: Example Root Definition for a Single Project Directory (JSON)
DESCRIPTION: This example demonstrates a single root definition for a project directory. The `uri` specifies the file system path using a `file://` URI, and `name` provides a user-friendly display name.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/roots.mdx#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "uri": "file:///home/user/projects/myproject",
  "name": "My Project"
}
```

----------------------------------------

TITLE: Inspecting PyPi Package Servers with MCP Inspector
DESCRIPTION: This command shows how to use the MCP Inspector to connect to and inspect an MCP server distributed as a PyPi package. It leverages `uvx` (likely a tool for running Python packages) to execute the server and pass necessary arguments, such as a repository path for `mcp-server-git`.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/inspector.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
npx @modelcontextprotocol/inspector uvx <package-name> <args>
# For example
npx @modelcontextprotocol/inspector uvx mcp-server-git --repository ~/code/mcp/servers.git
```

----------------------------------------

TITLE: Sending Log Message Notification (TypeScript)
DESCRIPTION: This TypeScript code illustrates how an MCP server can send a log message notification to the client. By calling `server.sendLoggingMessage`, developers can transmit structured log data, including the log level and message content, directly to the host application for improved debugging and monitoring.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/debugging.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
server.sendLoggingMessage({
  level: "info",
  data: "Server started successfully",
});
```

----------------------------------------

TITLE: Executing Prompts Asynchronously (Java)
DESCRIPTION: This snippet demonstrates how to asynchronously list prompt templates and execute a prompt using reactive methods. It allows for non-blocking interaction with the server's prompt system.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_14

LANGUAGE: java
CODE:
```
// List available prompt templates asynchronously
client.listPrompts()
    .doOnNext(prompts -> prompts.forEach(prompt -> 
        System.out.println(prompt.getName())))
    .subscribe();

// Execute a prompt template asynchronously
client.executePrompt("echo", Map.of(
        "text", "Hello, World!"
    ))
    .subscribe();
```

----------------------------------------

TITLE: MCP Notification for Resource Content Updates
DESCRIPTION: Servers send this `notifications/resources/updated` JSON-RPC notification to clients that have subscribed to a specific resource when its content has changed. The `uri` parameter indicates which resource has been updated.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_12

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/resources/updated",
  "params": {
    "uri": "file:///project/src/main.rs"
  }
}
```

----------------------------------------

TITLE: Running the MCP Client with Different Servers - Bash
DESCRIPTION: Provides command line examples demonstrating how to execute the compiled .NET MCP client application. The examples show how to specify the path to different types of MCP servers (a .NET project, a Python script, or a Node.js script) as the command line argument for the client to connect to.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_61

LANGUAGE: bash
CODE:
```
dotnet run -- path/to/server.csproj # dotnet server
dotnet run -- path/to/server.py # python server
dotnet run -- path/to/server.js # node server
```

LANGUAGE: bash
CODE:
```
dotnet run -- path/to/QuickstartWeatherServer
```

----------------------------------------

TITLE: Defining Multiple Repository Roots (JSON)
DESCRIPTION: This JSON array demonstrates how to define multiple filesystem roots, such as separate frontend and backend repositories. Each object in the array specifies a 'uri' (file:// URI) and an optional 'name' for each individual root.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/roots.mdx#_snippet_5

LANGUAGE: json
CODE:
```
[
  {
    "uri": "file:///home/user/repos/frontend",
    "name": "Frontend Repository"
  },
  {
    "uri": "file:///home/user/repos/backend",
    "name": "Backend Repository"
  }
]
```

----------------------------------------

TITLE: Declaring Tools Capability in MCP
DESCRIPTION: This JSON snippet demonstrates how a server declares its support for the 'tools' capability within the Model Context Protocol (MCP). The `listChanged` property indicates whether the server will emit notifications when the list of available tools changes, allowing clients to stay updated.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "tools": {
      "listChanged": true
    }
  }
}
```

----------------------------------------

TITLE: Executing Tools with Sync API (Java)
DESCRIPTION: This code demonstrates how to use the synchronous API of the MCP client to interact with server-side tools. It shows how to list all available tools and then execute a specific tool, 'calculator', by providing its name and a `Map` of parameters.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#_snippet_9

LANGUAGE: java
CODE:
```
// List available tools and their names
var tools = client.listTools();
tools.forEach(tool -> System.out.println(tool.getName()));

// Execute a tool with parameters
var result = client.callTool("calculator", Map.of(
    "operation", "add",
    "a", 1,
    "b", 2
));
```

----------------------------------------

TITLE: Declaring Completions Capability in MCP (JSON)
DESCRIPTION: This JSON snippet demonstrates how a server declares its support for the "completions" capability within the Model Context Protocol (MCP). Servers must include this capability in their root capabilities object to indicate they can provide autocompletion suggestions. This declaration is a prerequisite for clients to send `completion/complete` requests.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/completion.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "completions": {}
  }
}
```

----------------------------------------

TITLE: Requesting List of Roots from Client (JSON)
DESCRIPTION: Servers send this JSON-RPC request to a client to retrieve the current list of exposed filesystem roots. The `id` field is used to correlate the request with its corresponding response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/roots.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "roots/list"
}
```

----------------------------------------

TITLE: Defining Image Content Type for Prompt Messages (JSON)
DESCRIPTION: This JSON structure defines an 'image' content type for messages, enabling multi-modal interactions. It requires the image 'data' to be base64-encoded and specifies the 'mimeType' to ensure proper interpretation of the visual information.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/prompts.mdx#_snippet_7

LANGUAGE: JSON
CODE:
```
{
  "type": "image",
  "data": "base64-encoded-image-data",
  "mimeType": "image/png"
}
```

----------------------------------------

TITLE: Defining Binary Content Resource in JSON
DESCRIPTION: This JSON object demonstrates the structure for a binary resource in the Model Context Protocol. It specifies the resource's URI (uri), its MIME type (mimeType), and the base64-encoded binary data (blob).
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_15

LANGUAGE: json
CODE:
```
{
  "uri": "file:///example.png",
  "mimeType": "image/png",
  "blob": "base64-encoded-data"
}
```

----------------------------------------

TITLE: Defining Image Content (JSON)
DESCRIPTION: This JSON snippet defines the structure for image-based content within sampling messages. It includes the 'type' as 'image', the base64-encoded 'data' representing the image, and the 'mimeType' to specify the image format (e.g., 'image/jpeg').
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  "type": "image",
  "data": "base64-encoded-image-data",
  "mimeType": "image/jpeg"
}
```

----------------------------------------

TITLE: Requesting List of Prompts (JSON)
DESCRIPTION: This JSON request is sent by a client to retrieve a paginated list of available prompt templates from the server. The `cursor` parameter is optional and used for pagination to fetch subsequent pages of results.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "prompts/list",
  "params": {
    "cursor": "optional-cursor-value"
  }
}
```

----------------------------------------

TITLE: Declaring Sampling Capability in MCP Client Initialization (JSON)
DESCRIPTION: This JSON snippet demonstrates how a Model Context Protocol (MCP) client declares its support for the 'sampling' capability during the initialization phase. This declaration informs the server that the client can handle LLM generation requests. It is a prerequisite for a client to engage in sampling operations.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/sampling.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "sampling": {}
  }
}
```

----------------------------------------

TITLE: MCP Paginated Response Format - JSON
DESCRIPTION: Illustrates the JSON response structure for paginated list operations in the Model Context Protocol (MCP). It includes the current page of results within the 'resources' array and an optional 'nextCursor' field, which indicates if more results are available and provides the token for the next page.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/pagination.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": "123",
  "result": {
    "resources": [...],
    "nextCursor": "eyJwYWdlIjogM30="
  }
}
```

----------------------------------------

TITLE: Handling Tool Execution Errors in Model Context Protocol JSON
DESCRIPTION: This JSON snippet demonstrates a tool execution error, reported within the `result` field with `isError: true`. It includes a text message describing the failure, such as an API rate limit, indicating issues encountered during the tool's operation rather than protocol-level problems.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#_snippet_14

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 4,
  "result": {
    "content": [
      {
        "type": "text",
        "text": "Failed to fetch weather data: API rate limit exceeded"
      }
    ],
    "isError": true
  }
}
```

----------------------------------------

TITLE: Receiving Log Message Notification (JSON-RPC)
DESCRIPTION: Servers send log messages to clients using `notifications/message` JSON-RPC notifications. Each notification includes the `level` of the message, an optional `logger` name, and arbitrary JSON-serializable `data` providing contextual information about the log event.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/logging.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/message",
  "params": {
    "level": "error",
    "logger": "database",
    "data": {
      "error": "Connection failed",
      "details": {
        "host": "localhost",
        "port": 5432
      }
    }
  }
}
```

----------------------------------------

TITLE: Receiving a roots/list Response in MCP (JSON)
DESCRIPTION: This JSON snippet illustrates a successful JSON-RPC response to a 'roots/list' request. It contains a 'result' object with an array of 'roots', each specifying a `uri` (a file:// URI) and an optional human-readable `name` for a filesystem boundary exposed by the client.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/roots.mdx#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "roots": [
      {
        "uri": "file:///home/user/projects/myproject",
        "name": "My Project"
      }
    ]
  }
}
```

----------------------------------------

TITLE: Sending a Cancellation Notification (JSON)
DESCRIPTION: This JSON object represents a `notifications/cancelled` message used in the Model Context Protocol (MCP) to request the termination of an in-progress operation. It includes the `jsonrpc` version, the `method` name, and `params` containing the `requestId` of the request to be cancelled and an optional `reason` string for logging or display. This notification is 'fire and forget' and does not expect a response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/utilities/cancellation.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/cancelled",
  "params": {
    "requestId": "123",
    "reason": "User requested cancellation"
  }
}
```

----------------------------------------

TITLE: Responding to Simple Text Elicitation (Accept) in JSON
DESCRIPTION: Clients respond to an `elicitation/create` request with an `accept` action, providing the user's input in the `content` field. The content must conform to the `requestedSchema` provided by the server, in this case, a simple string for the 'name' property.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/elicitation.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "action": "accept",
    "content": {
      "name": "octocat"
    }
  }
}
```

----------------------------------------

TITLE: Requesting List of Prompts in MCP (JSON)
DESCRIPTION: This JSON-RPC request is sent by a client to retrieve a paginated list of available prompt templates from the server. The optional 'cursor' parameter allows for fetching subsequent pages of results, supporting efficient retrieval of large prompt collections.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/prompts.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "prompts/list",
  "params": {
    "cursor": "optional-cursor-value"
  }
}
```

----------------------------------------

TITLE: Defining Text Content in MCP Tool Results
DESCRIPTION: This JSON snippet defines a text content item within a tool result. The `type` field specifies 'text', and the `text` field contains the actual string content returned by the tool. This is a common way for tools to convey human-readable information.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#_snippet_7

LANGUAGE: json
CODE:
```
{
  "type": "text",
  "text": "Tool result text"
}
```

----------------------------------------

TITLE: Building Spring AI MCP Server with Maven in Bash
DESCRIPTION: This command builds the Spring AI MCP server project using Maven. It cleans the project and then installs the compiled JAR file, preparing it for execution.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_29

LANGUAGE: Bash
CODE:
```
./mvnw clean install
```

----------------------------------------

TITLE: Example MCP Error Response for Unsupported Roots (JSON)
DESCRIPTION: This JSON snippet illustrates a standard JSON-RPC error response when a client does not support the requested 'roots' capability. It includes an error `code` (-32601 for Method not found), a descriptive `message`, and optional `data` providing further details, such as the reason for the error.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/roots.mdx#_snippet_7

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "error": {
    "code": -32601,
    "message": "Roots not supported",
    "data": {
      "reason": "Client does not have roots capability"
    }
  }
}
```

----------------------------------------

TITLE: Example MCP Root Definition for a Project Directory (JSON)
DESCRIPTION: This JSON snippet provides an example of a single root definition representing a project directory. It specifies the `uri` as a `file://` URI pointing to the project's location and an optional human-readable `name` for display purposes, defining a specific filesystem boundary.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/roots.mdx#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "uri": "file:///home/user/projects/myproject",
  "name": "My Project"
}
```

----------------------------------------

TITLE: Sending Initialized Notification (JSON)
DESCRIPTION: Example JSON-RPC `initialized` notification sent by the client to the server after a successful `initialize` response. This signals that the client is ready to begin normal protocol operations.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/lifecycle.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/initialized"
}
```

----------------------------------------

TITLE: Specifying Server Paths for MCP Client (Bash)
DESCRIPTION: This example illustrates various ways to specify the server script path when running the MCP client, including relative, absolute, and Windows-specific paths. It highlights the flexibility in path formatting for different operating systems and project structures.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#_snippet_12

LANGUAGE: bash
CODE:
```
# Relative path
node build/client.js ./server/weather.js

# Absolute path
node build/client.js /Users/username/projects/mcp-server/weather.js

# Windows path (either format works)
node build/client.js C:/projects/mcp-server/weather.js
node build/client.js C:\\projects\\mcp-server\\weather.js
```

----------------------------------------

TITLE: Specifying Server Paths for MCP Client (bash)
DESCRIPTION: Examples demonstrating correct relative, absolute, and Windows path formats when specifying the server script for the MCP client.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_10

LANGUAGE: bash
CODE:
```
# Relative path
uv run client.py ./server/weather.py

# Absolute path
uv run client.py /Users/username/projects/mcp-server/weather.py

# Windows path (either format works)
uv run client.py C:/projects/mcp-server/weather.py
uv run client.py C:\\projects\\mcp-server\\weather.py
```

----------------------------------------

TITLE: Adding Core MCP Dependency (Gradle)
DESCRIPTION: This snippet adds the core Model Context Protocol (MCP) functionality as a Gradle dependency. It provides base APIs and default STDIO/SSE transport implementations without requiring external web frameworks.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-overview.mdx#_snippet_3

LANGUAGE: Groovy
CODE:
```
dependencies {
  implementation platform("io.modelcontextprotocol.sdk:mcp")
  //...
}
```

----------------------------------------

TITLE: Responding to Resource Templates List Request (MCP)
DESCRIPTION: This JSON snippet represents a server's response to a `resources/templates/list` request. It provides a list of `resourceTemplates`, each defining a `uriTemplate` (e.g., `file:///{path}`), a `name`, `description`, and `mimeType`. These templates allow clients to construct URIs for parameterized resources.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_9

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 3,
  "result": {
    "resourceTemplates": [
      {
        "uriTemplate": "file:///{path}",
        "name": "Project Files",
        "description": "Access files in the project directory",
        "mimeType": "application/octet-stream"
      }
    ]
  }
}
```

----------------------------------------

TITLE: Tool Result Image Content (JSON)
DESCRIPTION: This JSON snippet defines the structure for returning image content within a tool result. It specifies the 'type' as 'image', includes the base64-encoded 'data' of the image, and its 'mimeType' (e.g., 'image/png') for proper rendering.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#_snippet_8

LANGUAGE: JSON
CODE:
```
{
  "type": "image",
  "data": "base64-encoded-data",
  "mimeType": "image/png"
}
```

----------------------------------------

TITLE: Example Valid Tool Response with Structured Content in JSON
DESCRIPTION: This JSON snippet shows a valid response for a tool, demonstrating how structured content is returned alongside functionally equivalent unstructured text content. The `structuredContent` field contains the parsed data, while the `content` array provides a text representation for backwards compatibility.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#_snippet_12

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 5,
  "result": {
    "content": [
      {
        "type": "text",
        "text": "{\"temperature\": 22.5, \"conditions\": \"Partly cloudy\", \"humidity\": 65}"
      }
    ],
    "structuredContent": {
      "temperature": 22.5,
      "conditions": "Partly cloudy",
      "humidity": 65
    }
  }
}
```

----------------------------------------

TITLE: Sending Progress Notifications in MCP (JSON)
DESCRIPTION: This JSON snippet illustrates a progress notification sent by the receiver of a request. It includes the original `progressToken` to identify the associated operation, the current `progress` value (e.g., 50), an optional `total` value (e.g., 100), and an optional human-readable `message` describing the progress. The `progress` value must increase with each subsequent notification.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/utilities/progress.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/progress",
  "params": {
    "progressToken": "abc123",
    "progress": 50,
    "total": 100,
    "message": "Reticulating splines..."
  }
}
```

----------------------------------------

TITLE: Sending Resources List Request (JSON)
DESCRIPTION: This JSON snippet represents a client's request to list available resources using the `resources/list` method. It includes a `cursor` parameter for pagination, allowing clients to retrieve resources in batches. The `id` field is used to correlate the request with its corresponding response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "resources/list",
  "params": {
    "cursor": "optional-cursor-value"
  }
}
```

----------------------------------------

TITLE: Connecting with SSE Client Transport in TypeScript
DESCRIPTION: This code shows how to initialize an MCP client and connect it using an `SSEClientTransport`. It specifies the URL for the SSE endpoint to establish communication with the server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#_snippet_8

LANGUAGE: TypeScript
CODE:
```
const client = new Client({
  name: "example-client",
  version: "1.0.0"
}, {
  capabilities: {}
});

const transport = new SSEClientTransport(
  new URL("http://localhost:3000/sse")
);
await client.connect(transport);
```

----------------------------------------

TITLE: Sending a Roots List Request (JSON-RPC)
DESCRIPTION: Servers send this JSON-RPC request to clients to retrieve the current list of exposed filesystem roots. It includes the standard JSON-RPC version and a unique request ID.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/roots.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "roots/list"
}
```

----------------------------------------

TITLE: Illustrating Ping Usage Pattern (Mermaid)
DESCRIPTION: This Mermaid sequence diagram visually represents the interaction flow for the ping mechanism. It shows the 'Sender' initiating a 'ping request' to the 'Receiver', followed by the 'Receiver' sending an 'empty response' back to the 'Sender', demonstrating the basic request-response pattern.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/utilities/ping.mdx#_snippet_2

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Sender
    participant Receiver

    Sender->>Receiver: ping request
    Receiver->>Sender: empty response
```

----------------------------------------

TITLE: Configuring WebFlux SSE Server Transport in Java
DESCRIPTION: This Java configuration snippet sets up a `WebFluxSseServerTransportProvider` for reactive HTTP streaming using Spring WebFlux. It defines two beans: one for the transport provider itself, configured with an `ObjectMapper` and a message path, and another for the `RouterFunction` to handle message routing. This requires the `mcp-spring-webflux` dependency.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_3

LANGUAGE: java
CODE:
```
@Configuration
class McpConfig {
    @Bean
    WebFluxSseServerTransportProvider webFluxSseServerTransportProvider(ObjectMapper mapper) {
        return new WebFluxSseServerTransportProvider(mapper, "/mcp/message");
    }

    @Bean
    RouterFunction<?> mcpRouterFunction(WebFluxSseServerTransportProvider transportProvider) {
        return transportProvider.getRouterFunction();
    }
}
```

----------------------------------------

TITLE: Configuring MCP Weather Server for Claude Desktop (MacOS/Linux)
DESCRIPTION: This JSON snippet configures the 'weather' MCP server within Claude for Desktop on MacOS/Linux. It specifies the Node.js command and the absolute path to the server's build output.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_21

LANGUAGE: json
CODE:
```
{
    "mcpServers": {
        "weather": {
            "command": "node",
            "args": [
                "/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather/build/index.js"
            ]
        }
    }
}
```

----------------------------------------

TITLE: Declaring Logging Capability in MCP
DESCRIPTION: This JSON snippet demonstrates how a server declares its support for the `logging` capability within the Model Context Protocol (MCP). Servers emitting log messages must include this capability in their protocol declaration to inform clients of their logging functionality.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/logging.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "logging": {}
  }
}
```

----------------------------------------

TITLE: Sending Resource Templates List Request (JSON)
DESCRIPTION: This JSON snippet shows a client's request to list available resource templates using the `resources/templates/list` method. Resource templates enable servers to expose parameterized resources based on URI templates. The `id` field is used for correlating the request with its response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_8

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 3,
  "method": "resources/templates/list"
}
```

----------------------------------------

TITLE: Configuring package.json for Node.js MCP Client
DESCRIPTION: Configuration for `package.json` to set the module type to 'module' and define a build script using TypeScript.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_13

LANGUAGE: json
CODE:
```
{
  "type": "module",
  "scripts": {
    "build": "tsc && chmod 755 build/index.js"
  }
}
```

----------------------------------------

TITLE: Parsing Command Line Arguments for Server - C#
DESCRIPTION: Defines a static helper function `GetCommandAndArguments` that takes the application's command line arguments. It uses a switch expression to determine the appropriate executable command (python, node, or dotnet) and arguments based on the file extension or type of the provided server path (.py, .js, .csproj, or directory), throwing an exception for unsupported inputs.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_58

LANGUAGE: csharp
CODE:
```
static (string command, string[] arguments) GetCommandAndArguments(string[] args)
{
    return args switch
    {
        [var script] when script.EndsWith(".py") => ("python", args),
        [var script] when script.EndsWith(".js") => ("node", args),
        [var script] when Directory.Exists(script) || (File.Exists(script) && script.EndsWith(".csproj")) => ("dotnet", ["run", "--project", script, "--no-build"]),
        _ => throw new NotSupportedException("An unsupported server script was provided. Supported scripts are .py, .js, or .csproj")
    };
}
```

----------------------------------------

TITLE: Notifying Clients of Prompt List Changes (JSON)
DESCRIPTION: This JSON object represents a server-initiated notification to clients, indicating that the list of available prompts has changed. This notification, 'notifications/prompts/list_changed', is sent by servers that declared the 'listChanged' capability, prompting clients to re-list prompts to get the updated set.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/prompts/list_changed"
}
```

----------------------------------------

TITLE: Example Tool Execution Error in JSON-RPC
DESCRIPTION: This JSON-RPC response illustrates a tool-specific execution error, where the 'result' object indicates a failure. The 'isError' flag is set to true, and the 'content' array provides details about the error, such as API failures or invalid input data.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#_snippet_11

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 4,
  "result": {
    "content": [
      {
        "type": "text",
        "text": "Failed to fetch weather data: API rate limit exceeded"
      }
    ],
    "isError": true
  }
}
```

----------------------------------------

TITLE: JSON-RPC Ping Request Format
DESCRIPTION: This JSON-RPC request initiates a ping to verify the counterpart's responsiveness. It uses the 'ping' method and includes a unique 'id' for correlation, but no parameters are required.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/utilities/ping.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": "123",
  "method": "ping"
}
```

----------------------------------------

TITLE: Initiating Ping Request (JSON)
DESCRIPTION: This JSON-RPC request initiates a ping to verify connection responsiveness. It includes the JSON-RPC version, a unique request ID, and the 'ping' method with no parameters.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/utilities/ping.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": "123",
  "method": "ping"
}
```

----------------------------------------

TITLE: JSON-RPC Notification Message Format (TypeScript)
DESCRIPTION: Defines the structure for a JSON-RPC 2.0 notification message, which is a request without an 'id' and thus does not expect a response. It includes the protocol version, the method name, and optional parameters.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
{
  jsonrpc: "2.0",
  method: string,
  params?: object
}
```

----------------------------------------

TITLE: Receiving Ping Response in Model Context Protocol (JSON)
DESCRIPTION: This JSON-RPC response is sent by the receiver promptly after receiving a ping request. It is an empty response, indicated by an empty 'result' object, and uses the same 'id' as the initiating request to ensure correlation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/utilities/ping.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": "123",
  "result": {}
}
```

----------------------------------------

TITLE: Configuring Claude Desktop for MCP Server (MacOS/Linux)
DESCRIPTION: This JSON configuration snippet for Claude for Desktop defines an MCP server named 'weather' for macOS/Linux. It specifies the `uv` command and arguments, including the absolute path to the server's parent directory, to launch the Python weather server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_8

LANGUAGE: json
CODE:
```
{
    "mcpServers": {
        "weather": {
            "command": "uv",
            "args": [
                "--directory",
                "/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather",
                "run",
                "weather.py"
            ]
        }
    }
}
```

----------------------------------------

TITLE: Handling Protocol Errors in Model Context Protocol JSON
DESCRIPTION: This JSON snippet illustrates a standard JSON-RPC protocol error, specifically for an 'Unknown tool'. It includes the `jsonrpc` version, an `id` for correlation, and an `error` object containing a `code` and a descriptive `message`.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#_snippet_13

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 3,
  "error": {
    "code": -32602,
    "message": "Unknown tool: invalid_tool_name"
  }
}
```

----------------------------------------

TITLE: Responding to Resource List Request (MCP)
DESCRIPTION: This JSON snippet represents a server's response to a `resources/list` request. It contains an array of `resources`, each with a `uri`, `name`, `description`, and `mimeType`. The `nextCursor` field indicates if more resources are available and provides a cursor for the next paginated request.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "resources": [
      {
        "uri": "file:///project/src/main.rs",
        "name": "main.rs",
        "description": "Primary application entry point",
        "mimeType": "text/x-rust"
      }
    ],
    "nextCursor": "next-page-cursor"
  }
}
```

----------------------------------------

TITLE: Response for Listing Prompts in MCP (JSON)
DESCRIPTION: This JSON-RPC response provides the list of available prompts to the client, including their names, descriptions, and required arguments. The 'nextCursor' field facilitates pagination, allowing clients to request the next set of prompts if more are available.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/prompts.mdx#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "prompts": [
      {
        "name": "code_review",
        "description": "Asks the LLM to analyze code quality and suggest improvements",
        "arguments": [
          {
            "name": "code",
            "description": "The code to review",
            "required": true
          }
        ]
      }
    ],
    "nextCursor": "next-page-cursor"
  }
}
```

----------------------------------------

TITLE: Configuring Spring AI ChatClient with MCP Tools and Memory
DESCRIPTION: Builds a Spring AI ChatClient instance. It sets a default system prompt, registers MCP tools using mcpToolAdapter.toolCallbacks(), and adds a MessageChatMemoryAdvisor with InMemoryChatMemory to maintain conversation context.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_32

LANGUAGE: Java
CODE:
```
var chatClient = chatClientBuilder
    .defaultSystem("You are useful assistant, expert in AI and Java.")
    .defaultToolCallbacks((Object[]) mcpToolAdapter.toolCallbacks())
    .defaultAdvisors(new MessageChatMemoryAdvisor(new InMemoryChatMemory()))
    .build();
```

----------------------------------------

TITLE: Receiving Resource Templates List Response (JSON)
DESCRIPTION: This JSON snippet represents a server's response to a `resources/templates/list` request. The `result` contains an array of `resourceTemplates`, each defining a `uriTemplate`, `name`, `description`, and `mimeType`. These templates allow clients to construct URIs for parameterized resources.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_9

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 3,
  "result": {
    "resourceTemplates": [
      {
        "uriTemplate": "file:///{path}",
        "name": "Project Files",
        "description": "Access files in the project directory",
        "mimeType": "application/octet-stream"
      }
    ]
  }
}
```

----------------------------------------

TITLE: Opening Claude Desktop Configuration (MacOS/Linux)
DESCRIPTION: This snippet shows how to open the Claude for Desktop configuration file (`claude_desktop_config.json`) on MacOS/Linux using VS Code. This file is essential for adding and managing MCP server configurations.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_57

LANGUAGE: bash
CODE:
```
code ~/Library/Application\ Support/Claude/claude_desktop_config.json
```

----------------------------------------

TITLE: Receiving a Roots List Response (JSON-RPC)
DESCRIPTION: This JSON-RPC response provides the list of roots available to the server. The 'roots' array contains objects, each defining a root with its URI (a file:// URI) and an optional human-readable name.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/roots.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "roots": [
      {
        "uri": "file:///home/user/projects/myproject",
        "name": "My Project"
      }
    ]
  }
}
```

----------------------------------------

TITLE: Configuring tsconfig.json for Node.js MCP Client
DESCRIPTION: TypeScript compiler configuration (`tsconfig.json`) for the Node.js MCP client project, specifying target, module resolution, output directory, strict checks, and file inclusion/exclusion.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_14

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "Node16",
    "moduleResolution": "Node16",
    "outDir": "./build",
    "rootDir": "./",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["index.ts"],
  "exclude": ["node_modules"]
}
```

----------------------------------------

TITLE: Declaring Resources Capability with No Features (JSON)
DESCRIPTION: This JSON snippet shows how a server declares the `resources` capability without supporting any optional features. By providing an empty object for `resources`, the server indicates it can expose resources but will not provide subscription services or notifications for changes to the resource list.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "resources": {} 
  }
}
```

----------------------------------------

TITLE: Declaring Resources Capability with List Changed Only (JSON)
DESCRIPTION: This JSON snippet demonstrates a server declaring the `resources` capability with support only for `listChanged`. This means the server will notify clients when the list of available resources changes, but it does not support subscriptions to individual resource updates.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "resources": {
      "listChanged": true 
    }
  }
}
```

----------------------------------------

TITLE: Sending Resources Updated Notification (JSON)
DESCRIPTION: This JSON snippet represents a server-initiated notification sent to clients subscribed to a specific resource. It indicates that the resource identified by the `uri` in the `params` object has been updated. Clients can then re-read the resource to get the latest content.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_12

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/resources/updated",
  "params": {
    "uri": "file:///project/src/main.rs"
  }
}
```

----------------------------------------

TITLE: Adding MCP Bill of Materials (BOM) (Maven)
DESCRIPTION: This snippet adds the Model Context Protocol (MCP) Bill of Materials (BOM) to a Maven project. The BOM manages recommended versions for all MCP dependencies, simplifying version management and ensuring compatibility.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-overview.mdx#_snippet_6

LANGUAGE: XML
CODE:
```
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>io.modelcontextprotocol.sdk</groupId>
            <artifactId>mcp-bom</artifactId>
            <version>0.9.0</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>
```

----------------------------------------

TITLE: Declaring Roots Capability in Client Initialization (JSON)
DESCRIPTION: Clients supporting the roots protocol must declare the 'roots' capability during initialization. The 'listChanged' property indicates whether the client will send notifications when the list of roots changes, allowing servers to stay updated.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/roots.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "roots": {
      "listChanged": true
    }
  }
}
```

----------------------------------------

TITLE: Configuring MCP Weather Server for Claude Desktop on Windows
DESCRIPTION: This JSON configuration snippet defines how Claude for Desktop should launch the Spring AI MCP weather server on Windows. It specifies the server's name, the `java` command, and the arguments needed to run the server JAR file, including the absolute path.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_33

LANGUAGE: JSON
CODE:
```
{
    "mcpServers": {
      "spring-ai-mcp-weather": {
        "command": "java",
        "args": [
          "-Dspring.ai.mcp.server.transport=STDIO",
          "-jar",
          "C:\\ABSOLUTE\\PATH\\TO\\PARENT\\FOLDER\\weather\\mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar"
        ]
      }
    }
  }
```

----------------------------------------

TITLE: Example JSON-RPC Error Response
DESCRIPTION: This JSON object provides an example of a standard JSON-RPC error response within the Model Context Protocol, specifically for a 'Resource not found' scenario. It includes the JSON-RPC version, request ID, error code, human-readable message, and optional data detailing the problematic URI.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_16

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 5,
  "error": {
    "code": -32002,
    "message": "Resource not found",
    "data": {
      "uri": "file:///nonexistent.txt"
    }
  }
}
```

----------------------------------------

TITLE: Defining a Number Schema in JSON
DESCRIPTION: This snippet illustrates how to define a number or integer type schema, specifying properties for display name, description, and numerical range constraints (minimum, maximum).
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/elicitation.mdx#_snippet_9

LANGUAGE: JSON
CODE:
```
{
  "type": "number", // or "integer"
  "title": "Display Name",
  "description": "Description text",
  "minimum": 0,
  "maximum": 100
}
```

----------------------------------------

TITLE: Sending Ping Request in Model Context Protocol (JSON)
DESCRIPTION: This JSON-RPC request initiates a ping to verify the counterpart's responsiveness. It is a standard request with no parameters, identified by the 'ping' method. The 'id' field correlates the request with its corresponding response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/utilities/ping.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": "123",
  "method": "ping"
}
```

----------------------------------------

TITLE: Setting Anthropic API Key in .env (Bash)
DESCRIPTION: Creates or overwrites a `.env` file in the current directory and writes the `ANTHROPIC_API_KEY` variable with a placeholder value. This file is used to store sensitive credentials locally for the application to load.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_15

LANGUAGE: bash
CODE:
```
echo "ANTHROPIC_API_KEY=<your key here>" > .env
```

----------------------------------------

TITLE: Server Notification for Log Message (notifications/message)
DESCRIPTION: This JSON-RPC notification is sent by the server to the client to deliver a structured log message. It includes the `level` of the message (e.g., 'error'), an optional `logger` name for categorization, and arbitrary `data` containing details about the event, which must be JSON-serializable.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/logging.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/message",
  "params": {
    "level": "error",
    "logger": "database",
    "data": {
      "error": "Connection failed",
      "details": {
        "host": "localhost",
        "port": 5432
      }
    }
  }
}
```

----------------------------------------

TITLE: Building and Running MCP Client (Bash)
DESCRIPTION: These bash commands demonstrate how to build the TypeScript client using npm and then execute the compiled JavaScript file using node, providing the path to the server script as an argument. Examples show running with both Python and Node.js servers.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_22

LANGUAGE: Bash
CODE:
```
# Build TypeScript
npm run build

# Run the client
node build/index.js path/to/server.py # python server
node build/index.js path/to/build/index.js # node server
```

----------------------------------------

TITLE: Declaring Resource Capabilities with No Optional Features
DESCRIPTION: This JSON snippet demonstrates how a server declares the `resources` capability in MCP without supporting any of the optional features like `subscribe` or `listChanged`. This indicates the server can expose resources but won't notify clients of changes.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "capabilities": {
    "resources": {} 
  }
}
```

----------------------------------------

TITLE: Sending Progress Notifications in MCP (JSON)
DESCRIPTION: This JSON object illustrates a progress notification sent by the server to the client. It includes the `progressToken` from the original request, the current `progress` value, an optional `total` value, and an optional human-readable `message`. The `progress` value must monotonically increase with each notification.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/utilities/progress.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/progress",
  "params": {
    "progressToken": "abc123",
    "progress": 50,
    "total": 100,
    "message": "Reticulating splines..."
  }
}
```

----------------------------------------

TITLE: Declaring Full Resource Capabilities (MCP)
DESCRIPTION: This JSON snippet declares the `resources` capability for a server, indicating support for both `subscribe` (client can subscribe to resource changes) and `listChanged` (server notifies when the list of resources changes) features. This informs clients about the server's resource management capabilities.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "resources": {
      "subscribe": true,
      "listChanged": true
    }
  }
}
```

----------------------------------------

TITLE: Requesting Resource Templates List (MCP)
DESCRIPTION: This JSON snippet shows a client's `resources/templates/list` request to discover available resource templates. Resource templates allow servers to expose parameterized resources, which can be used to generate URIs for specific data. The `id` field correlates this request with its response.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_8

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 3,
  "method": "resources/templates/list"
}
```

----------------------------------------

TITLE: Building and Running the MCP Client (Bash)
DESCRIPTION: Provides command-line instructions for building the Kotlin project using Gradle and then running the compiled JAR file. It shows examples of how to run the client with different types of MCP servers (JVM, Python, Node.js) by specifying the server script path as an argument.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_51

LANGUAGE: bash
CODE:
```
./gradlew build

# Run the client
java -jar build/libs/<your-jar-name>.jar path/to/server.jar # jvm server
java -jar build/libs/<your-jar-name>.jar path/to/server.py # python server
java -jar build/libs/<your-jar-name>.jar path/to/build/index.js # node server
```

----------------------------------------

TITLE: Defining Embedded Resource Content in MCP Tool Results
DESCRIPTION: This JSON snippet defines an embedded resource content item within a tool result. The `type` is 'resource', and the `resource` object contains a `uri` for identification, a `mimeType`, and optionally `text` content. This allows tools to provide additional context or data that can be subscribed to or fetched later by the client.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#_snippet_9

LANGUAGE: json
CODE:
```
{
  "type": "resource",
  "resource": {
    "uri": "resource://example",
    "mimeType": "text/plain",
    "text": "Resource content"
  }
}
```

----------------------------------------

TITLE: Running Client with Server Path (Bash)
DESCRIPTION: Examples demonstrating how to run the client JAR file, specifying the server JAR file path using relative, absolute, and Windows-specific formats.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_52

LANGUAGE: bash
CODE:
```
# Relative path
java -jar build/libs/client.jar ./server/build/libs/server.jar

# Absolute path
java -jar build/libs/client.jar /Users/username/projects/mcp-server/build/libs/server.jar

# Windows path (either format works)
java -jar build/libs/client.jar C:/projects/mcp-server/build/libs/server.jar
java -jar build/libs/client.jar C:\\projects\\mcp-server\\build\\libs\\server.jar
```

----------------------------------------

TITLE: Response for Listing Roots (JSON)
DESCRIPTION: This JSON-RPC response contains the list of roots exposed by the client. Each root includes a `uri` (a `file://` URI) and an optional human-readable `name`.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/roots.mdx#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "roots": [
      {
        "uri": "file:///home/user/projects/myproject",
        "name": "My Project"
      }
    ]
  }
}
```

----------------------------------------

TITLE: Add Plugins (Gradle Groovy DSL)
DESCRIPTION: Applies the `com.github.johnrengelman.shadow` plugin to the `build.gradle` file using the Groovy DSL, which is often used for creating executable fat JARs.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_43

LANGUAGE: groovy
CODE:
```
plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}
```

----------------------------------------

TITLE: Inspecting Local TypeScript Servers with MCP Inspector
DESCRIPTION: This command demonstrates how to use the MCP Inspector to connect to and inspect a locally developed TypeScript-based MCP server. It directly invokes Node.js to run the server's main JavaScript file, allowing for inspection during local development.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/inspector.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
npx @modelcontextprotocol/inspector node path/to/server/index.js args...
```

----------------------------------------

TITLE: Inspecting Local Python Servers with MCP Inspector
DESCRIPTION: This command shows how to use the MCP Inspector to connect to and inspect a locally developed Python-based MCP server. It utilizes `uv` to run the Python package from a specified directory, providing flexibility for local development environments.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/inspector.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
npx @modelcontextprotocol/inspector \
    uv \
    --directory path/to/server \
    run \
    package-name \
    args...
```

----------------------------------------

TITLE: Implementing Custom Transport Interface in Python
DESCRIPTION: This Python snippet provides a context manager for creating a custom MCP transport. It uses `anyio` for wider compatibility, managing read and write streams for JSON-RPC messages and handling task groups for message processing, error handling, and cleanup.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#_snippet_12

LANGUAGE: Python
CODE:
```
@contextmanager
async def create_transport(
    read_stream: MemoryObjectReceiveStream[JSONRPCMessage | Exception],
    write_stream: MemoryObjectSendStream[JSONRPCMessage]
):
    """
    Transport interface for MCP.

    Args:
        read_stream: Stream to read incoming messages from
        write_stream: Stream to write outgoing messages to
    """
    async with anyio.create_task_group() as tg:
        try:
            # Start processing messages
            tg.start_soon(lambda: process_messages(read_stream))

            # Send messages
            async with write_stream:
                yield write_stream

        except Exception as exc:
            # Handle errors
            raise exc
        finally:
            # Clean up
            tg.cancel_scope.cancel()
            await write_stream.aclose()
            await read_stream.aclose()
```

----------------------------------------

TITLE: Example JSON-RPC Error Response for Resource Not Found
DESCRIPTION: This JSON snippet provides an example of a standard JSON-RPC error response, specifically for a 'Resource not found' scenario. It adheres to the JSON-RPC 2.0 specification, including the error code (-32002), a human-readable message, and optional data providing additional context, such as the URI of the missing resource.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_16

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 5,
  "error": {
    "code": -32002,
    "message": "Resource not found",
    "data": {
      "uri": "file:///nonexistent.txt"
    }
  }
}
```

----------------------------------------

TITLE: Sending a Root List Changed Notification (JSON-RPC)
DESCRIPTION: Clients that declare the 'listChanged' capability send this notification to servers when the list of available roots has changed. This prompts the server to re-request the root list to get the updated information.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/roots.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/roots/list_changed"
}
```

----------------------------------------

TITLE: Declaring Resource Capabilities (No Features) (MCP)
DESCRIPTION: This JSON snippet declares the `resources` capability without specifying `subscribe` or `listChanged` features. This indicates that the server supports the basic resource protocol but does not offer real-time notifications for individual resource updates or changes to the overall resource list.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "resources": {} 
  }
}
```

----------------------------------------

TITLE: Adding Maven Dependency for WebFlux MCP Client Starter
DESCRIPTION: Specifies the Maven dependency for the Spring AI MCP client starter based on WebFlux. This dependency provides an SSE transport implementation suitable for reactive applications and production deployments.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_36

LANGUAGE: XML
CODE:
```
<dependency>
    <groupId>org.springframework.ai</groupId>
    <artifactId>spring-ai-mcp-client-webflux-spring-boot-starter</artifactId>
</dependency>
```

----------------------------------------

TITLE: Requesting a Specific Prompt in MCP (JSON)
DESCRIPTION: This JSON-RPC request allows a client to retrieve the detailed content of a specific prompt by its 'name'. It also supports providing 'arguments' to customize the prompt's content, which can be auto-completed via the completion API.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/prompts.mdx#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "method": "prompts/get",
  "params": {
    "name": "code_review",
    "arguments": {
      "code": "def hello():\n    print('world')"
    }
  }
}
```

----------------------------------------

TITLE: Responding to Ping Request (JSON)
DESCRIPTION: This JSON-RPC response is sent by the receiver to acknowledge a ping request. It confirms the JSON-RPC version, echoes the request ID, and provides an empty 'result' object, indicating successful receipt.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/utilities/ping.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": "123",
  "result": {}
}
```

----------------------------------------

TITLE: Declaring Logging Capability (JSON)
DESCRIPTION: Servers that emit log message notifications must declare the `logging` capability within their capabilities object. This informs clients that the server supports the logging feature of the Model Context Protocol.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/logging.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "logging": {}
  }
}
```

----------------------------------------

TITLE: Ping Protocol Sequence Diagram (Mermaid)
DESCRIPTION: This Mermaid diagram illustrates the sequence of a ping request and response between a Sender and a Receiver. The Sender initiates with a 'ping request', and the Receiver responds with an 'empty response', demonstrating the basic interaction flow.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/utilities/ping.mdx#_snippet_2

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Sender
    participant Receiver

    Sender->>Receiver: ping request
    Receiver->>Sender: empty response
```

----------------------------------------

TITLE: Configuring WebMvc SSE Server Transport in Java
DESCRIPTION: This Java configuration snippet sets up a `WebMvcSseServerTransportProvider` for server-side event streaming using Spring WebMVC. It defines two beans: one for the transport provider, configured with an `ObjectMapper` and a message path, and another for the `RouterFunction` to integrate with traditional web applications. This requires the `mcp-spring-webmvc` dependency.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_4

LANGUAGE: java
CODE:
```
@Configuration
@EnableWebMvc
class McpConfig {
    @Bean
    WebMvcSseServerTransportProvider webMvcSseServerTransportProvider(ObjectMapper mapper) {
        return new WebMvcSseServerTransportProvider(mapper, "/mcp/message");
    }

    @Bean
    RouterFunction<ServerResponse> mcpRouterFunction(WebMvcSseServerTransportProvider transportProvider) {
        return transportProvider.getRouterFunction();
    }
}
```

----------------------------------------

TITLE: Declaring Completion Capability in MCP
DESCRIPTION: Servers supporting argument autocompletion via the Model Context Protocol (MCP) must declare the `completions` capability within their capabilities object. This signals to clients that the server can handle `completion/complete` requests.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/completion.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "completions": {}
  }
}
```

----------------------------------------

TITLE: Defining a Single Project Directory Root (JSON)
DESCRIPTION: This JSON object defines a single filesystem root representing a project directory. It specifies the 'uri' as a file:// URI pointing to the project's location and an optional 'name' for display purposes.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/roots.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  "uri": "file:///home/user/projects/myproject",
  "name": "My Project"
}
```

----------------------------------------

TITLE: Configuring Filesystem MCP Server (macOS/Linux)
DESCRIPTION: This JSON configuration snippet enables filesystem access for Claude for Desktop on macOS and Linux. It defines the 'filesystem' MCP server, specifying 'npx' as the command and providing arguments to run the '@modelcontextprotocol/server-filesystem' package. Users must replace 'username' with their actual system username and ensure the paths point to valid directories they wish Claude to access.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "filesystem": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "/Users/username/Desktop",
        "/Users/username/Downloads"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Declining Elicitation Request in JSON
DESCRIPTION: Clients can decline an `elicitation/create` request by sending a response with the `action` set to `decline`. This indicates that the user chose not to provide the requested information, and no content is returned.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/elicitation.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "result": {
    "action": "decline"
  }
}
```

----------------------------------------

TITLE: JSON-RPC Ping Response Format
DESCRIPTION: This JSON-RPC response is sent by the receiver in reply to a 'ping' request. It must be an empty result, indicating successful receipt and responsiveness, and correlates with the original request's 'id'.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/utilities/ping.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": "123",
  "result": {}
}
```

----------------------------------------

TITLE: Configuring Spring AI MCP Client Server Configuration (Properties)
DESCRIPTION: This properties snippet demonstrates how to configure the spring.ai.mcp.client.stdio.servers-configuration property to point to a JSON file containing MCP server configurations. This allows the Spring Boot auto-configuration to automatically create MCP clients based on the specified file.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_36

LANGUAGE: properties
CODE:
```
spring.ai.mcp.client.stdio.servers-configuration=file:PATH/TO/claude_desktop_config.json
```

----------------------------------------

TITLE: Configuring Servlet-based SSE Server Transport in Java
DESCRIPTION: This Java configuration snippet demonstrates how to set up and register an `HttpServletSseServerTransportProvider` as a Servlet bean within a Spring Web application. It provides a Servlet-based SSE server transport, included in the core `mcp` module, for asynchronous message handling and session management using the traditional Servlet API.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#_snippet_5

LANGUAGE: java
CODE:
```
@Configuration
@EnableWebMvc
public class McpServerConfig implements WebMvcConfigurer {

    @Bean
    public HttpServletSseServerTransportProvider servletSseServerTransportProvider() {
        return new HttpServletSseServerTransportProvider(new ObjectMapper(), "/mcp/message");
    }

    @Bean
    public ServletRegistrationBean customServletBean(HttpServletSseServerTransportProvider transportProvider) {
        return new ServletRegistrationBean(transportProvider);
    }
}
```

----------------------------------------

TITLE: Adding .NET Dependencies (Bash)
DESCRIPTION: Commands to add required NuGet packages (ModelContextProtocol, Anthropic.SDK, Microsoft.Extensions.Hosting) to the .NET project using the dotnet CLI.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_54

LANGUAGE: bash
CODE:
```
dotnet add package ModelContextProtocol --prerelease
dotnet add package Anthropic.SDK
dotnet add package Microsoft.Extensions.Hosting
```

----------------------------------------

TITLE: Resource Updated Notification (MCP)
DESCRIPTION: This JSON snippet shows a server-initiated `notifications/resources/updated` notification. Servers send this notification to clients that have subscribed to a specific resource when its content or metadata has changed. The `uri` parameter indicates which resource has been updated.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_12

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/resources/updated",
  "params": {
    "uri": "file:///project/src/main.rs"
  }
}
```

----------------------------------------

TITLE: Adding Optional Spring WebMVC Transport Dependency (Maven)
DESCRIPTION: This snippet adds the optional Spring WebMVC-based SSE server transport dependency for MCP. It is intended for projects using the Spring Framework, specifically Spring WebMVC, to integrate servlet-based SSE transport.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-overview.mdx#_snippet_2

LANGUAGE: XML
CODE:
```
<!-- Optional: Spring WebMVC-based SSE server transport -->
<dependency>
    <groupId>io.modelcontextprotocol.sdk</groupId>
    <artifactId>mcp-spring-webmvc</artifactId>
</dependency>
```

----------------------------------------

TITLE: Adding Optional Spring WebMVC Transport Dependency (Gradle)
DESCRIPTION: This snippet adds the optional Spring WebMVC-based SSE server transport dependency for MCP in Gradle. It is intended for projects using the Spring Framework, specifically Spring WebMVC, to integrate servlet-based SSE transport.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-overview.mdx#_snippet_5

LANGUAGE: Groovy
CODE:
```
// Optional: Spring WebMVC-based SSE server transport
dependencies {
  implementation platform("io.modelcontextprotocol.sdk:mcp-spring-webmvc")
}
```

----------------------------------------

TITLE: Creating a New Branch (Bash)
DESCRIPTION: Creates a new Git branch for making changes, following a feature branch naming convention.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/CONTRIBUTING.md#_snippet_1

LANGUAGE: bash
CODE:
```
git checkout -b feature/your-feature-name
```

----------------------------------------

TITLE: Verifying Node.js and npm Versions (Bash)
DESCRIPTION: This snippet shows how to check the installed versions of Node.js and npm using the command line. It's a prerequisite for ensuring the development environment meets the project's requirements.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_10

LANGUAGE: bash
CODE:
```
node --version
npm --version
```

----------------------------------------

TITLE: Resource List Changed Notification (MCP)
DESCRIPTION: This JSON snippet shows a server-initiated `notifications/resources/list_changed` notification. Servers that support the `listChanged` capability send this notification to clients when the overall list of available resources has been modified, prompting clients to re-list resources if needed.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_10

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "method": "notifications/resources/list_changed"
}
```

----------------------------------------

TITLE: Initializing a New Kotlin Project with Gradle
DESCRIPTION: These commands create a new directory and initialize a new Kotlin project within it using Gradle. This sets up the basic project structure for building the weather server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_38

LANGUAGE: bash
CODE:
```
# Create a new directory for our project
mkdir weather
cd weather

# Initialize a new kotlin project
gradle init
```

LANGUAGE: powershell
CODE:
```
# Create a new directory for our project
md weather
cd weather

# Initialize a new kotlin project
gradle init
```

----------------------------------------

TITLE: Using TypeScript-based MCP Servers with npx
DESCRIPTION: This command demonstrates how to quickly run a TypeScript-based Model Context Protocol (MCP) server, specifically the 'memory' server, using `npx`. It's a convenient way to test or use MCP servers without requiring a global installation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/examples.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx -y @modelcontextprotocol/server-memory
```

----------------------------------------

TITLE: Setting Up Node.js MCP Client (MacOS/Linux)
DESCRIPTION: Bash commands to create a project directory, initialize npm, install dependencies, and create the main source file for a Node.js MCP client on MacOS/Linux.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_11

LANGUAGE: bash
CODE:
```
# Create project directory
mkdir mcp-client-typescript
cd mcp-client-typescript

# Initialize npm project
npm init -y

# Install dependencies
npm install @anthropic-ai/sdk @modelcontextprotocol/sdk dotenv

# Install dev dependencies
npm install -D @types/node typescript

# Create source file
touch index.ts
```

----------------------------------------

TITLE: Building the Application with Maven Wrapper (Run)
DESCRIPTION: Executes the Maven clean and install goals using the Maven wrapper script (./mvnw) to build the project and create the executable JAR file in the target directory.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_33

LANGUAGE: Bash
CODE:
```
./mvnw clean install
```

----------------------------------------

TITLE: Defining Standard Error Codes in TypeScript
DESCRIPTION: This TypeScript enum defines standard JSON-RPC error codes used within the Model Context Protocol (MCP). These codes help standardize error reporting across different implementations and facilitate consistent error handling. SDKs and applications can extend these codes with custom values above -32000.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
enum ErrorCode {
  // Standard JSON-RPC error codes
  ParseError = -32700,
  InvalidRequest = -32600,
  MethodNotFound = -32601,
  InvalidParams = -32602,
  InternalError = -32603
}
```

----------------------------------------

TITLE: Configuring Filesystem MCP Server (Windows)
DESCRIPTION: This JSON configuration snippet enables filesystem access for Claude for Desktop on Windows. It defines the 'filesystem' MCP server, specifying 'npx' as the command and providing arguments to run the '@modelcontextprotocol/server-filesystem' package. Users must replace 'username' with their actual system username and ensure the paths point to valid directories they wish Claude to access, using Windows-style path separators.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "filesystem": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "C:\\Users\\username\\Desktop",
        "C:\\Users\\username\\Downloads"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Diagramming stdio transport flow
DESCRIPTION: This Mermaid sequence diagram illustrates the interaction flow between a client and a server using the stdio transport. The client launches the server subprocess, and they exchange messages via stdin and stdout, with optional logging on stderr. The client terminates the connection by closing stdin.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/transports.mdx#_snippet_0

LANGUAGE: Mermaid
CODE:
```
sequenceDiagram
    participant Client
    participant Server Process

    Client->>+Server Process: Launch subprocess
    loop Message Exchange
        Client->>Server Process: Write to stdin
        Server Process->>Client: Write to stdout
        Server Process--)Client: Optional logs on stderr
    end
    Client->>Server Process: Close stdin, terminate subprocess
    deactivate Server Process
```

----------------------------------------

TITLE: Handling Roots Not Supported Error (JSON-RPC)
DESCRIPTION: This JSON-RPC error response indicates that the client does not support the roots capability. It uses the standard JSON-RPC error code -32601 (Method not found) and provides additional data explaining the reason for the error.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/roots.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "error": {
    "code": -32601,
    "message": "Roots not supported",
    "data": {
      "reason": "Client does not have roots capability"
    }
  }
}
```

----------------------------------------

TITLE: Running the Application from Executable JAR
DESCRIPTION: Executes the built application by running the generated executable JAR file located in the target directory using the java -jar command.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_34

LANGUAGE: Bash
CODE:
```
java -jar ./target/ai-mcp-brave-chatbot-0.0.1-SNAPSHOT.jar
```

----------------------------------------

TITLE: Configuring MCP Weather Server (Windows)
DESCRIPTION: This JSON snippet demonstrates how to add a 'weather' MCP server configuration to `claude_desktop_config.json` for Windows. It specifies the `dotnet` command to run the server, including the absolute path to the project with Windows-style backslashes.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_60

LANGUAGE: json
CODE:
```
{
    "mcpServers": {
        "weather": {
            "command": "dotnet",
            "args": [
                "run",
                "--project",
                "C:\\ABSOLUTE\\PATH\\TO\\PROJECT",
                "--no-build"
            ]
        }
    }
}
```

----------------------------------------

TITLE: Displaying User Input Prompt - C#
DESCRIPTION: Defines a simple static helper function `PromptForInput` used within the main query processing loop. Its purpose is to print a formatted message to the console, indicating that the client is ready to receive user input and providing instructions on how to exit, using different colors for better readability.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_60

LANGUAGE: csharp
CODE:
```
static void PromptForInput()
{
    Console.WriteLine("Enter a command (or 'exit' to quit):");
    Console.ForegroundColor = ConsoleColor.Cyan;
    Console.Write("> ");
    Console.ResetColor();
}
```

----------------------------------------

TITLE: Configuring MCP Weather Server for Claude Desktop on MacOS/Linux
DESCRIPTION: This JSON configuration snippet defines how Claude for Desktop should launch the Spring AI MCP weather server on MacOS/Linux. It specifies the server's name, the `java` command, and the arguments needed to run the server JAR file, including the absolute path.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_32

LANGUAGE: JSON
CODE:
```
{
    "mcpServers": {
      "spring-ai-mcp-weather": {
        "command": "java",
        "args": [
          "-Dspring.ai.mcp.server.stdio=true",
          "-jar",
          "/ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar"
        ]
      }
    }
  }
```

----------------------------------------

TITLE: Fetching Weather Alerts with Kotlin HttpClient
DESCRIPTION: An extension function for `HttpClient` that fetches active weather alerts for a specified state from the National Weather Service API. It retrieves alert data and formats it into a list of strings, detailing event, area, severity, description, and instruction.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_43

LANGUAGE: kotlin
CODE:
```
// Extension function to fetch weather alerts for a given state
suspend fun HttpClient.getAlerts(state: String): List<String> {
    val alerts = this.get("/alerts/active/area/$state").body<Alert>()
    return alerts.features.map { feature ->
        """
            Event: ${feature.properties.event}
            Area: ${feature.properties.areaDesc}
            Severity: ${feature.properties.severity}
            Description: ${feature.properties.description}
            Instruction: ${feature.properties.instruction}
        """.trimIndent()
    }
}
```

----------------------------------------

TITLE: Checking Claude Logs for Errors (Shell)
DESCRIPTION: This command tails the last 20 lines of Claude's Model Context Protocol (MCP) log files, continuously monitoring for real-time errors or activity. It is useful for debugging server issues or tool call failures by providing immediate feedback on log entries.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_61

LANGUAGE: Shell
CODE:
```
tail -n 20 -f ~/Library/Logs/Claude/mcp*.log
```

----------------------------------------

TITLE: Requesting Progress Updates in MCP (JSON)
DESCRIPTION: This JSON snippet demonstrates how a client requests progress updates for a long-running operation within the Model Context Protocol (MCP). It shows the inclusion of a unique `progressToken` (e.g., "abc123") within the `_meta` field of the `params` object in a standard JSON-RPC request. The `progressToken` allows the receiver to associate subsequent progress notifications with this specific request.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/utilities/progress.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "some_method",
  "params": {
    "_meta": {
      "progressToken": "abc123"
    }
  }
}
```

----------------------------------------

TITLE: Running MCP Client with uv run
DESCRIPTION: Command to run the MCP client using `uv run`, specifying the path to either a Python or Node.js server script.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_9

LANGUAGE: bash
CODE:
```
uv run client.py path/to/server.py # python server
uv run client.py path/to/build/index.js # node server
```

----------------------------------------

TITLE: Fetching Weather Forecast with Kotlin HttpClient
DESCRIPTION: An extension function for `HttpClient` that retrieves detailed weather forecast information for a given latitude and longitude from the National Weather Service API. It first queries for a forecast URL and then fetches the forecast data, mapping it into a list of formatted strings.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_42

LANGUAGE: kotlin
CODE:
```
// Extension function to fetch forecast information for given latitude and longitude
suspend fun HttpClient.getForecast(latitude: Double, longitude: Double): List<String> {
    val points = this.get("/points/$latitude,$longitude").body<Points>()
    val forecast = this.get(points.properties.forecast).body<Forecast>()
    return forecast.properties.periods.map { period ->
        """
            ${period.name}:
            Temperature: ${period.temperature} ${period.temperatureUnit}
            Wind: ${period.windSpeed} ${period.windDirection}
            Forecast: ${period.detailedForecast}
        """.trimIndent()
    }
}
```

----------------------------------------

TITLE: Initializing Ktor HTTP Client for API Calls (Kotlin)
DESCRIPTION: Initializes an HTTP client using Ktor, configured to interact with the 'api.weather.gov' endpoint. It sets default headers for 'Accept' and 'User-Agent' and installs content negotiation for JSON, ignoring unknown keys during deserialization. This client is a prerequisite for the tool execution handlers.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_45

LANGUAGE: kotlin
CODE:
```
val httpClient = HttpClient {
    defaultRequest {
        url("https://api.weather.gov")
        headers {
            append("Accept", "application/geo+json")
            append("User-Agent", "WeatherApiClient/1.0")
        }
        contentType(ContentType.Application.Json)
    }
    install(ContentNegotiation) { json(Json { ignoreUnknownKeys = true }) }
}
```

----------------------------------------

TITLE: Adding Spring AI MCP Client Boot Starter Dependency (XML)
DESCRIPTION: This XML snippet shows how to add the spring-ai-starter-mcp-client dependency to a Maven or Gradle build file. This dependency enables auto-configuration for MCP clients in Spring Boot applications, simplifying client setup.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_35

LANGUAGE: xml
CODE:
```
<dependency>
    <groupId>org.springframework.ai</groupId>
    <artifactId>spring-ai-starter-mcp-client</artifactId>
</dependency>
```

----------------------------------------

TITLE: Configuring package.json for Node.js MCP Client
DESCRIPTION: This JSON snippet shows the necessary additions to the `package.json` file. It sets the project type to 'module' for ES module support and defines 'build' and 'start' scripts for compiling TypeScript and running the compiled client application, respectively.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "type": "module",
  "scripts": {
    "build": "tsc",
    "start": "node build/client.js"
  }
}
```

----------------------------------------

TITLE: Setting Environment Variables for MCP Server (JSON)
DESCRIPTION: This JSON configuration snippet for `claude_desktop_config.json` illustrates how to define custom environment variables for an MCP server. By including an `env` key within the server's configuration, specific variables like `MYAPP_API_KEY` can be set, overriding default inherited variables and providing necessary runtime context for the server application.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/debugging.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "myserver": {
    "command": "mcp-server-myapp",
    "env": {
      "MYAPP_API_KEY": "some_key"
    }
  }
}
```

----------------------------------------

TITLE: Following Real-time MCP Logs in Claude Desktop (Bash)
DESCRIPTION: This command allows users to follow the Model Context Protocol (MCP) logs in real-time from the Claude Desktop application. It displays the last 20 lines and continuously outputs new log entries, which is useful for monitoring server connection events, configuration issues, runtime errors, and message exchanges.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/debugging.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
tail -n 20 -F ~/Library/Logs/Claude/mcp*.log
```

----------------------------------------

TITLE: Ping Request/Response Interaction Flow
DESCRIPTION: This sequence diagram illustrates the basic interaction pattern for the ping mechanism, showing a 'Sender' initiating a 'ping request' and the 'Receiver' responding with an 'empty response'.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/utilities/ping.mdx#_snippet_2

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Sender
    participant Receiver

    Sender->>Receiver: ping request
    Receiver->>Sender: empty response
```

----------------------------------------

TITLE: Configuring Absolute Path for MCP Server Command (JSON)
DESCRIPTION: This JSON configuration snippet for `claude_desktop_config.json` demonstrates how to specify an absolute path for an MCP server command. Using absolute paths, such as `/Users/username/data`, ensures reliable operation by preventing issues related to an undefined working directory when the server is launched via Claude Desktop.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/debugging.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "command": "npx",
  "args": ["-y", "@modelcontextprotocol/server-filesystem", "/Users/username/data"]
}
```

----------------------------------------

TITLE: Cancelling Elicitation Request in JSON
DESCRIPTION: Clients can cancel an `elicitation/create` request by sending a response with the `action` set to `cancel`. This typically signifies that the user initiated a cancellation during the interaction, and no content is returned.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/elicitation.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 2,
  "result": {
    "action": "cancel"
  }
}
```

----------------------------------------

TITLE: Verifying Node.js Installation
DESCRIPTION: This command-line snippet is used to verify if Node.js is installed on the system and to display its version. Node.js is a prerequisite for running the Model Context Protocol (MCP) filesystem server. If Node.js is not found, the user is prompted to download it.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
node --version
```

----------------------------------------

TITLE: HTTP with SSE Transport Message Exchange Diagram - Mermaid
DESCRIPTION: Depicts the message exchange flow for the HTTP with Server-Sent Events (SSE) transport in MCP. The client opens an SSE connection to the server, receives an endpoint event, and then sends messages via HTTP POST while receiving server messages as SSE events.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/transports.mdx#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Client
    participant Server

    Client->>Server: Open SSE connection
    Server->>Client: endpoint event
    loop Message Exchange
        Client->>Server: HTTP POST messages
        Server->>Client: SSE message events
    end
    Client->>Server: Close SSE connection
```

----------------------------------------

TITLE: Defining Binary Resource Content in JSON
DESCRIPTION: This JSON snippet demonstrates the structure for representing binary resource content, such as images, within the Model Context Protocol. It includes the resource's URI (uri), its MIME type (mimeType) like image/png, and the binary data itself, which must be base64-encoded and stored in the blob field.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#_snippet_15

LANGUAGE: json
CODE:
```
{
  "uri": "file:///example.png",
  "mimeType": "image/png",
  "blob": "base64-encoded-data"
}
```

----------------------------------------

TITLE: Configuring MCP Weather Server in Claude for Desktop JSON
DESCRIPTION: This JSON configuration snippet adds a 'weather' MCP server entry to the `mcpServers` key in `claude_desktop_config.json`. It specifies the command to launch the server, which is a Java JAR file. Users must replace the placeholder path with the absolute path to their weather server JAR file.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_50

LANGUAGE: json
CODE:
```
{
    "mcpServers": {
        "weather": {
            "command": "java",
            "args": [
                "-jar",
                "/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather/build/libs/weather-0.1.0-all.jar"
            ]
        }
    }
}
```

LANGUAGE: json
CODE:
```
{
    "mcpServers": {
        "weather": {
            "command": "java",
            "args": [
                "-jar",
                "C:\\PATH\\TO\\PARENT\\FOLDER\\weather\\build\\libs\\weather-0.1.0-all.jar"
            ]
        }
    }
}
```

----------------------------------------

TITLE: Running the Application with Spring Boot Maven Plugin (Run)
DESCRIPTION: Executes the Spring Boot run goal using the Maven wrapper script (./mvnw) to start the application directly from the source code, providing an alternative way to run the application after building.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_35

LANGUAGE: Bash
CODE:
```
./mvnw spring-boot:run
```

----------------------------------------

TITLE: Configuring MCP Weather Server (MacOS/Linux)
DESCRIPTION: This JSON snippet demonstrates how to add a 'weather' MCP server configuration to `claude_desktop_config.json` for MacOS/Linux. It specifies the `dotnet` command to run the server, including the absolute path to the project.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_59

LANGUAGE: json
CODE:
```
{
    "mcpServers": {
        "weather": {
            "command": "dotnet",
            "args": [
                "run",
                "--project",
                "/ABSOLUTE/PATH/TO/PROJECT",
                "--no-build"
            ]
        }
    }
}
```

----------------------------------------

TITLE: Running the Application with Spring Boot Maven Plugin (Setup)
DESCRIPTION: Executes the Spring Boot run goal using the Maven wrapper script (./mvnw) to start the application directly from the source code.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_28

LANGUAGE: Bash
CODE:
```
./mvnw spring-boot:run
```

----------------------------------------

TITLE: Opening Claude Desktop Configuration on MacOS/Linux
DESCRIPTION: This command opens the Claude for Desktop configuration file `claude_desktop_config.json` in VS Code on MacOS or Linux. This file is used to define custom MCP servers.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_19

LANGUAGE: bash
CODE:
```
code ~/Library/Application\ Support/Claude/claude_desktop_config.json
```

----------------------------------------

TITLE: Using Python-based MCP Servers with uvx or pip
DESCRIPTION: These commands illustrate how to run Python-based Model Context Protocol (MCP) servers. `uvx` is the recommended tool for direct execution, while `pip` can be used for installation followed by executing the server as a Python module.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/examples.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
uvx mcp-server-git
```

LANGUAGE: bash
CODE:
```
pip install mcp-server-git
python -m mcp_server_git
```

----------------------------------------

TITLE: Example Error Response for Unsupported Roots (JSON)
DESCRIPTION: This JSON-RPC error response indicates that the client does not support the roots capability. The `code` field specifies the standard JSON-RPC error code for 'Method not found', and `message` provides a human-readable explanation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/roots.mdx#_snippet_6

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "error": {
    "code": -32601,
    "message": "Roots not supported",
    "data": {
      "reason": "Client does not have roots capability"
    }
  }
}
```

----------------------------------------

TITLE: Opening Claude Desktop Configuration on Windows
DESCRIPTION: This command opens the Claude for Desktop configuration file `claude_desktop_config.json` in VS Code on Windows. This file is used to define custom MCP servers.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_20

LANGUAGE: powershell
CODE:
```
code $env:AppData\Claude\claude_desktop_config.json
```

----------------------------------------

TITLE: Opening Claude Desktop Configuration (Windows)
DESCRIPTION: This snippet shows how to open the Claude for Desktop configuration file (`claude_desktop_config.json`) on Windows using VS Code. This file is essential for adding and managing MCP server configurations.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_58

LANGUAGE: powershell
CODE:
```
code $env:AppData\Claude\claude_desktop_config.json
```

----------------------------------------

TITLE: Opening Claude Desktop Config on MacOS/Linux in Bash
DESCRIPTION: This command opens the Claude for Desktop configuration file on MacOS or Linux using VS Code. This file is used to specify and register MCP servers with the Claude for Desktop application.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_30

LANGUAGE: Bash
CODE:
```
code ~/Library/Application\ Support/Claude/claude_desktop_config.json
```

----------------------------------------

TITLE: MCP Pagination Flow Sequence Diagram (Mermaid)
DESCRIPTION: This Mermaid sequence diagram visualizes the typical pagination flow between a client and an MCP server. It depicts an initial list request without a cursor, followed by a loop where the server returns a page of results with a `nextCursor`, and the client uses that cursor for subsequent requests until no `nextCursor` is provided.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/pagination.mdx#_snippet_2

LANGUAGE: Mermaid
CODE:
```
sequenceDiagram
    participant Client
    participant Server

    Client->>Server: List Request (no cursor)
    loop Pagination Loop
      Server-->>Client: Page of results + nextCursor
      Client->>Server: List Request (with cursor)
    end
```

----------------------------------------

TITLE: Defining Request Message Interface in TypeScript
DESCRIPTION: This snippet defines the `Request` interface, representing a message that expects a response from the other side in the MCP. It includes a `method` string to specify the operation and an optional `params` object for associated data.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
interface Request {
  method: string;
  params?: { ... };
}
```

----------------------------------------

TITLE: Initializing a New C# Console Project
DESCRIPTION: These commands create a new directory named 'weather', navigate into it, and then initialize a new C# console application project using `dotnet new console`. This sets up the basic file structure for a C# server application.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_52

LANGUAGE: bash
CODE:
```
# Create a new directory for our project
mkdir weather
cd weather
# Initialize a new C# project
dotnet new console
```

LANGUAGE: powershell
CODE:
```
# Create a new directory for our project
mkdir weather
cd weather
# Initialize a new C# project
dotnet new console
```

----------------------------------------

TITLE: Adding Dependencies to Kotlin Gradle Build Script
DESCRIPTION: These snippets demonstrate how to add necessary dependencies for the Kotlin MCP server, including kotlin-sdk, slf4j-nop, ktor-client-content-negotiation, and ktor-serialization-kotlinx-json. These dependencies are crucial for building the weather server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_39

LANGUAGE: kotlin
CODE:
```
val mcpVersion = "0.4.0"
val slf4jVersion = "2.0.9"
val ktorVersion = "3.1.1"

dependencies {
    implementation("io.modelcontextprotocol:kotlin-sdk:$mcpVersion")
    implementation("org.slf4j:slf4j-nop:$slf4jVersion")
    implementation("io.ktor:ktor-client-content-negotiation:$ktorVersion")
    implementation("io.ktor:ktor-serialization-kotlinx-json:$ktorVersion")
}
```

LANGUAGE: groovy
CODE:
```
def mcpVersion = '0.3.0'
def slf4jVersion = '2.0.9'
def ktorVersion = '3.1.1'

dependencies {
    implementation "io.modelcontextprotocol:kotlin-sdk:$mcpVersion"
    implementation "org.slf4j:slf4j-nop:$slf4jVersion"
    implementation "io.ktor:ktor-client-content-negotiation:$ktorVersion"
    implementation "io.ktor:ktor-serialization-kotlinx-json:$ktorVersion"
}
```

----------------------------------------

TITLE: Adding Plugins to Kotlin Gradle Build Script
DESCRIPTION: These snippets show how to apply essential plugins for the Kotlin MCP server, including the Kotlin serialization plugin and the Shadow plugin. These are crucial for handling serialization and creating a self-contained executable JAR.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_40

LANGUAGE: kotlin
CODE:
```
plugins {
    kotlin("plugin.serialization") version "your_version_of_kotlin"
    id("com.github.johnrengelman.shadow") version "8.1.1"
}
```

LANGUAGE: groovy
CODE:
```
plugins {
    id 'org.jetbrains.kotlin.plugin.serialization' version 'your_version_of_kotlin'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}
```

----------------------------------------

TITLE: Enabling Chrome DevTools for Claude Desktop (Bash)
DESCRIPTION: This command creates or overwrites the `developer_settings.json` file for Claude Desktop, setting `allowDevTools` to `true`. This enables access to Chrome's developer tools within the Claude Desktop application, allowing for client-side error inspection and network traffic analysis.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/debugging.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
echo '{"allowDevTools": true}' > ~/Library/Application\ Support/Claude/developer_settings.json
```

----------------------------------------

TITLE: Defining Audio Content Type for Prompt Messages (JSON)
DESCRIPTION: This JSON structure defines an 'audio' content type for messages, facilitating multi-modal interactions. The audio 'data' must be base64-encoded, and a valid 'mimeType' is required to correctly interpret the audio context.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/prompts.mdx#_snippet_8

LANGUAGE: JSON
CODE:
```
{
  "type": "audio",
  "data": "base64-encoded-audio-data",
  "mimeType": "audio/wav"
}
```

----------------------------------------

TITLE: Add Plugins (Gradle Kotlin DSL)
DESCRIPTION: Applies the `com.github.johnrengelman.shadow` plugin to the `build.gradle.kts` file using the Kotlin DSL, which is often used for creating executable fat JARs.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_42

LANGUAGE: kotlin
CODE:
```
plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
}
```

----------------------------------------

TITLE: Resource URI Format
DESCRIPTION: Defines the standard URI format used to identify resources within the Model Context Protocol, consisting of a protocol, host, and path. Examples include file paths, database schemas, or display identifiers.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/resources.mdx#_snippet_0

LANGUAGE: text
CODE:
```
[protocol]://[host]/[path]
```

----------------------------------------

TITLE: Setting Up Python Project Environment
DESCRIPTION: This snippet outlines the steps to initialize a new Python project directory, create and activate a virtual environment using `uv`, install necessary dependencies (`mcp[cli]` and `httpx`), and create the main server file (`weather.py`). It provides platform-specific commands for MacOS/Linux and Windows.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_1

LANGUAGE: Bash
CODE:
```
# Create a new directory for our project
uv init weather
cd weather

# Create virtual environment and activate it
uv venv
source .venv/bin/activate

# Install dependencies
uv add "mcp[cli]" httpx

# Create our server file
touch weather.py
```

LANGUAGE: PowerShell
CODE:
```
# Create a new directory for our project
uv init weather
cd weather

# Create virtual environment and activate it
uv venv
.venv\Scripts\activate

# Install dependencies
uv add mcp[cli] httpx

# Create our server file
new-item weather.py
```

----------------------------------------

TITLE: Manually Running Filesystem MCP Server (Windows)
DESCRIPTION: This command manually runs the Filesystem Model Context Protocol (MCP) server on Windows. It's used for troubleshooting server connection issues by allowing users to check for errors outside of Claude Desktop. Replace `username` with your actual username and adjust paths as needed.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
npx -y @modelcontextprotocol/server-filesystem C:\Users\username\Desktop C:\Users\username\Downloads
```

----------------------------------------

TITLE: Configuring tsconfig.json for TypeScript Compilation
DESCRIPTION: This `tsconfig.json` configuration snippet defines the TypeScript compiler options for the project. It specifies the target ECMAScript version, module system, output and root directories, enables strict type checking, ES module interop, and includes all files within the `src` directory for compilation.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "Node16",
    "moduleResolution": "Node16",
    "outDir": "./build",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*"]
}
```

----------------------------------------

TITLE: Opening Claude for Desktop Configuration File with VS Code
DESCRIPTION: This snippet demonstrates how to open the Claude for Desktop configuration file (`claude_desktop_config.json`) using VS Code on different operating systems. It's a prerequisite for configuring MCP servers. The file is located in `~/Library/Application Support/Claude/` on MacOS/Linux and `$env:AppData\Claude\` on Windows.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_49

LANGUAGE: bash
CODE:
```
code ~/Library/Application\ Support/Claude/claude_desktop_config.json
```

LANGUAGE: powershell
CODE:
```
code $env:AppData\Claude\claude_desktop_config.json
```

----------------------------------------

TITLE: Manually Running Filesystem MCP Server (macOS/Linux)
DESCRIPTION: This command manually runs the Filesystem Model Context Protocol (MCP) server on macOS or Linux. It's used for troubleshooting server connection issues by allowing users to check for errors outside of Claude Desktop. Replace `username` with your actual username and adjust paths as needed.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
npx -y @modelcontextprotocol/server-filesystem /Users/username/Desktop /Users/username/Downloads
```

----------------------------------------

TITLE: Add Dependencies (Gradle Kotlin DSL)
DESCRIPTION: Adds required dependencies for the MCP Kotlin SDK, SLF4J (No-Operation implementation), and the Anthropic Java client to the `build.gradle.kts` file using the Kotlin DSL.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_40

LANGUAGE: kotlin
CODE:
```
val mcpVersion = "0.4.0"
val slf4jVersion = "2.0.9"
val anthropicVersion = "0.8.0"

dependencies {
    implementation("io.modelcontextprotocol:kotlin-sdk:$mcpVersion")
    implementation("org.slf4j:slf4j-nop:$slf4jVersion")
    implementation("com.anthropic:anthropic-java:$anthropicVersion")
}
```

----------------------------------------

TITLE: Add Dependencies (Gradle Groovy DSL)
DESCRIPTION: Adds required dependencies for the MCP Kotlin SDK, SLF4J (No-Operation implementation), and the Anthropic Java client to the `build.gradle` file using the Groovy DSL.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_41

LANGUAGE: groovy
CODE:
```
def mcpVersion = '0.3.0'
def slf4jVersion = '2.0.9'
def anthropicVersion = '0.8.0'
dependencies {
    implementation "io.modelcontextprotocol:kotlin-sdk:$mcpVersion"
    implementation "org.slf4j:slf4j-nop:$slf4jVersion"
    implementation "com.anthropic:anthropic-java:$anthropicVersion"
}
```

----------------------------------------

TITLE: Configuring Brave Search MCP Server Command
DESCRIPTION: Defines the configuration for the "brave-search" MCP server in mcp-servers-config.json. It specifies the command (npx) and arguments to launch the server and passes the BRAVE_API_KEY as an environment variable to the server process.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_31

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "brave-search": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-brave-search"
      ],
      "env": {
        "BRAVE_API_KEY": "<PUT YOUR BRAVE API KEY>"
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining an Enum Schema in JSON
DESCRIPTION: This snippet demonstrates how to define an enumeration (enum) schema for string types, providing a list of allowed values ('enum') and their corresponding human-readable display names ('enumNames').
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/elicitation.mdx#_snippet_11

LANGUAGE: JSON
CODE:
```
{
  "type": "string",
  "title": "Display Name",
  "description": "Description text",
  "enum": ["option1", "option2", "option3"],
  "enumNames": ["Option 1", "Option 2", "Option 3"]
}
```

----------------------------------------

TITLE: Installing npx for MCP Server
DESCRIPTION: Installs the npx command-line tool globally using npm, which is required to run the MCP server from the command line.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_24

LANGUAGE: Bash
CODE:
```
npm install -g npx
```

----------------------------------------

TITLE: Opening Claude Desktop Config on Windows in PowerShell
DESCRIPTION: This command opens the Claude for Desktop configuration file on Windows using VS Code. This file is used to specify and register MCP servers with the Claude for Desktop application.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_31

LANGUAGE: PowerShell
CODE:
```
code $env:AppData\Claude\claude_desktop_config.json
```

----------------------------------------

TITLE: Configuring MCP Weather Server for Claude Desktop (Windows)
DESCRIPTION: This JSON snippet configures the 'weather' MCP server within Claude for Desktop on Windows. It specifies the Node.js command and the absolute path to the server's build output using Windows path conventions.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_22

LANGUAGE: json
CODE:
```
{
    "mcpServers": {
        "weather": {
            "command": "node",
            "args": [
                "C:\\PATH\\TO\\PARENT\\FOLDER\\weather\\build\\index.js"
            ]
        }
    }
}
```

----------------------------------------

TITLE: Third-Party Authorization Flow - Mermaid Diagram
DESCRIPTION: Visualizes the sequence of interactions between the User-Agent, MCP Client, MCP Server, and Third-Party Authorization Server during a delegated authorization flow.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/authorization.mdx#_snippet_6

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant B as User-Agent (Browser)
    participant C as MCP Client
    participant M as MCP Server
    participant T as Third-Party Auth Server

    C->>M: Initial OAuth Request
    M->>B: Redirect to Third-Party /authorize
    B->>T: Authorization Request
    Note over T: User authorizes
    T->>B: Redirect to MCP Server callback
    B->>M: Authorization code
    M->>T: Exchange code for token
    T->>M: Third-party access token
    Note over M: Generate bound MCP token
    M->>B: Redirect to MCP Client callback
    B->>C: MCP authorization code
    C->>M: Exchange code for token
    M->>C: MCP access token
```

----------------------------------------

TITLE: Configuring Claude Desktop for MCP Server (Windows)
DESCRIPTION: This JSON configuration snippet for Claude for Desktop defines an MCP server named 'weather' for Windows. It specifies the `uv` command and arguments, including the absolute path to the server's parent directory, to launch the Python weather server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_9

LANGUAGE: json
CODE:
```
{
    "mcpServers": {
        "weather": {
            "command": "uv",
            "args": [
                "--directory",
                "C:\\ABSOLUTE\\PATH\\TO\\PARENT\\FOLDER\\weather",
                "run",
                "weather.py"
            ]
        }
    }
}
```

----------------------------------------

TITLE: Setting Up Anthropic API Key (.env Bash)
DESCRIPTION: Commands to create a `.env` file to store sensitive API keys and add it to `.gitignore` to prevent accidental commits.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
# Create .env file
touch .env
```

LANGUAGE: bash
CODE:
```
ANTHROPIC_API_KEY=<your key here>
```

LANGUAGE: bash
CODE:
```
echo ".env" >> .gitignore
```

----------------------------------------

TITLE: Setting Anthropic API Key in .env (Bash)
DESCRIPTION: This snippet demonstrates how to set the `ANTHROPIC_API_KEY` environment variable in a `.env` file. This file is used to securely store sensitive information like API keys, which are then loaded by the application using the `dotenv` library.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
ANTHROPIC_API_KEY=your_key_here
```

----------------------------------------

TITLE: Defining a Boolean Schema in JSON
DESCRIPTION: This snippet shows how to define a boolean type schema, including properties for display name, description, and a default value.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/elicitation.mdx#_snippet_10

LANGUAGE: JSON
CODE:
```
{
  "type": "boolean",
  "title": "Display Name",
  "description": "Description text",
  "default": false
}
```

----------------------------------------

TITLE: Examples of Server Path Usage (Bash)
DESCRIPTION: These bash commands illustrate different ways to specify the server script path when running the MCP client, including relative paths, absolute paths, and Windows-style paths with both forward and escaped backslashes.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_23

LANGUAGE: Bash
CODE:
```
# Relative path
node build/index.js ./server/build/index.js

# Absolute path
node build/index.js /Users/username/projects/mcp-server/build/index.js

# Windows path (either format works)
node build/index.js C:/projects/mcp-server/build/index.js
node build/index.js C:\\projects\\mcp-server\\build\\index.js
```

----------------------------------------

TITLE: Monitoring Claude MCP Logs (macOS/Linux)
DESCRIPTION: This command displays the last 20 lines of Claude's Model Context Protocol (MCP) log files on macOS or Linux and continuously follows new entries. It's essential for debugging server connection failures or tool call issues by providing real-time log output.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
tail -n 20 -f ~/Library/Logs/Claude/mcp*.log
```

----------------------------------------

TITLE: Configuring APPDATA Environment Variable for MCP Server (Windows)
DESCRIPTION: This JSON snippet demonstrates how to configure the `APPDATA` environment variable within `claude_desktop_config.json` for a Model Context Protocol (MCP) server on Windows. This is crucial for resolving `ENOENT` errors when paths containing `${APPDATA}` are not correctly expanded, ensuring the server loads successfully.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#_snippet_7

LANGUAGE: json
CODE:
```
{
  "brave-search": {
    "command": "npx",
    "args": ["-y", "@modelcontextprotocol/server-brave-search"],
    "env": {
      "APPDATA": "C:\\Users\\user\\AppData\\Roaming\\",
      "BRAVE_API_KEY": "..."
    }
  }
}
```

----------------------------------------

TITLE: Decision Flow Overview - Mermaid Diagram
DESCRIPTION: Illustrates the high-level decision flow for the authentication process, covering metadata discovery, registration, and the initiation of the OAuth flow.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/authorization.mdx#_snippet_3

LANGUAGE: mermaid
CODE:
```
flowchart TD
    A[Start Auth Flow] --> B{Check Metadata Discovery}
    B -->|Available| C[Use Metadata Endpoints]
    B -->|Not Available| D[Use Default Endpoints]

    C --> G{Check Registration Endpoint}
    D --> G

    G -->|Available| H[Perform Dynamic Registration]
    G -->|Not Available| I[Alternative Registration Required]

    H --> J[Start OAuth Flow]
    I --> J

    J --> K[Generate PKCE Parameters]
    K --> L[Request Authorization]
    L --> M[User Authorization]
    M --> N[Exchange Code for Tokens]
    N --> O[Use Access Token]
```

----------------------------------------

TITLE: Validating and Generating Schema (Bash)
DESCRIPTION: Runs npm scripts to validate changes made to the TypeScript schema file (`schema.ts`) and then generate the corresponding JSON schema file (`schema.json`).
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/CONTRIBUTING.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm run validate:schema    # validate schema
npm run generate:json     # generate JSON schema
```

----------------------------------------

TITLE: Model Context Protocol Tool Message Flow (Mermaid)
DESCRIPTION: This Mermaid sequence diagram illustrates the typical message flow for tool interaction within the Model Context Protocol. It covers tool discovery, selection by the LLM, invocation by the client, and server-initiated updates to the tool list.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#_snippet_6

LANGUAGE: Mermaid
CODE:
```
sequenceDiagram
    participant LLM
    participant Client
    participant Server

    Note over Client,Server: Discovery
    Client->>Server: tools/list
    Server-->>Client: List of tools

    Note over Client,LLM: Tool Selection
    LLM->>Client: Select tool to use

    Note over Client,Server: Invocation
    Client->>Server: tools/call
    Server-->>Client: Tool result
    Client->>LLM: Process result

    Note over Client,Server: Updates
    Server--)Client: tools/list_changed
    Client->>Server: tools/list
    Server-->>Client: Updated tools
```

----------------------------------------

TITLE: Declaring Prompts Capability in Server Initialization (JSON)
DESCRIPTION: This JSON snippet demonstrates how a server declares its support for the 'prompts' capability during initialization within the Model Context Protocol. The 'listChanged' flag indicates that the server will emit notifications when the list of available prompts changes, allowing clients to stay updated.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "prompts": {
      "listChanged": true
    }
  }
}
```

----------------------------------------

TITLE: Basic Usage of MCP Inspector with npx and Arguments
DESCRIPTION: This snippet extends the basic usage by showing how to pass additional arguments to the command executed by the MCP Inspector via `npx`. This is useful for commands requiring specific parameters.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/inspector.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx @modelcontextprotocol/inspector <command> <arg1> <arg2>
```

----------------------------------------

TITLE: Cloning the Repository (Bash)
DESCRIPTION: Clones the forked Model Context Protocol repository from GitHub and navigates into the project directory.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/CONTRIBUTING.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/YOUR-USERNAME/modelcontextprotocol.git
cd modelcontextprotocol
```

----------------------------------------

TITLE: Illustrating Complete Authorization Flow (Mermaid)
DESCRIPTION: This sequence diagram outlines the complete authorization flow for MCP, including server metadata discovery, optional dynamic client registration, PKCE parameter generation, user authorization via browser, and the final token exchange and API requests using the obtained access token.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/authorization.mdx#_snippet_2

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant B as User-Agent (Browser)
    participant C as Client
    participant M as MCP Server

    C->>M: GET /.well-known/oauth-authorization-server
    alt Server Supports Discovery
        M->>C: Authorization Server Metadata
    else No Discovery
        M->>C: 404 (Use default endpoints)
    end

    alt Dynamic Client Registration
        C->>M: POST /register
        M->>C: Client Credentials
    end

    Note over C: Generate PKCE Parameters
    C->>B: Open browser with authorization URL + code_challenge
    B->>M: Authorization Request
    Note over M: User /authorizes
    M->>B: Redirect to callback with authorization code
    B->>C: Authorization code callback
    C->>M: Token Request + code_verifier
    M->>C: Access Token (+ Refresh Token)
    C->>M: API Requests with Access Token
```

----------------------------------------

TITLE: Opening Claude Desktop Config on MacOS/Linux with VS Code
DESCRIPTION: This bash command opens the Claude for Desktop configuration file on macOS or Linux using Visual Studio Code. The command targets the `claude_desktop_config.json` file located in the user's application support directory, allowing for manual server configuration.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
code ~/Library/Application\ Support/Claude/claude_desktop_config.json
```

----------------------------------------

TITLE: Setting Up Project Directory and Dependencies (Windows PowerShell)
DESCRIPTION: This command-line snippet for Windows PowerShell creates a new project directory, initializes an npm project, installs necessary runtime and development dependencies, and sets up the source directory and main TypeScript file.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_12

LANGUAGE: powershell
CODE:
```
# Create a new directory for our project
md weather
cd weather

# Initialize a new npm project
npm init -y

# Install dependencies
npm install @modelcontextprotocol/sdk zod
npm install -D @types/node typescript

# Create our files
md src
new-item src\index.ts
```

----------------------------------------

TITLE: Declaring Prompts Capability in MCP Initialization (JSON)
DESCRIPTION: This JSON snippet demonstrates how a server declares its support for the 'prompts' capability during the Model Context Protocol (MCP) initialization phase. The 'listChanged' flag indicates whether the server will send notifications when the list of available prompts changes, allowing clients to stay updated.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/prompts.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "capabilities": {
    "prompts": {
      "listChanged": true
    }
  }
}
```

----------------------------------------

TITLE: Model Context Protocol Capability Negotiation Flow - Mermaid Diagram
DESCRIPTION: This Mermaid sequence diagram illustrates the capability negotiation and interaction flow within the Model Context Protocol. It depicts the initialization phase where client and server exchange capabilities, followed by an active session showing client-initiated requests, server-initiated requests, and bidirectional notifications, concluding with session termination.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/architecture/index.mdx#_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Host
    participant Client
    participant Server

    Host->>+Client: Initialize client
    Client->>+Server: Initialize session with capabilities
    Server-->>Client: Respond with supported capabilities

    Note over Host,Server: Active Session with Negotiated Features

    loop Client Requests
        Host->>Client: User- or model-initiated action
        Client->>Server: Request (tools/resources)
        Server-->>Client: Response
        Client-->>Host: Update UI or respond to model
    end

    loop Server Requests
        Server->>Client: Request (sampling)
        Client->>Host: Forward to AI
        Host-->>Client: AI response
        Client-->>Server: Response
    end

    loop Notifications
        Server--)Client: Resource updates
        Client--)Server: Status changes
    end

    Host->>Client: Terminate
    Client->>-Server: End session
    deactivate Server
```

----------------------------------------

TITLE: Creating and Navigating .NET Project (Bash)
DESCRIPTION: Commands to create a new .NET console application project and change the current directory into the newly created project folder.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_53

LANGUAGE: bash
CODE:
```
dotnet new console -n QuickstartClient
cd QuickstartClient
```

----------------------------------------

TITLE: Initialize Kotlin Project (Bash MacOS/Linux)
DESCRIPTION: Creates a new directory for the project, navigates into it, and initializes a new Gradle project using the `gradle init` command in a bash shell on MacOS or Linux.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_38

LANGUAGE: bash
CODE:
```
# Create a new directory for our project
mkdir kotlin-mcp-client
cd kotlin-mcp-client

# Initialize a new kotlin project
gradle init
```

----------------------------------------

TITLE: Adding Optional Spring WebFlux Transport Dependency (Maven)
DESCRIPTION: This snippet adds the optional Spring WebFlux-based SSE client and server transport dependency for MCP. It is intended for projects using the Spring Framework, specifically Spring WebFlux, to integrate reactive SSE transport.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-overview.mdx#_snippet_1

LANGUAGE: XML
CODE:
```
<!-- Optional: Spring WebFlux-based SSE client and server transport -->
<dependency>
    <groupId>io.modelcontextprotocol.sdk</groupId>
    <artifactId>mcp-spring-webflux</artifactId>
</dependency>
```

----------------------------------------

TITLE: Setting Minimum Log Level Request - JSON
DESCRIPTION: This JSON-RPC request demonstrates how a client can configure the server's minimum log level. The `level` parameter specifies the desired verbosity, in this case, 'info', meaning the server should send messages at 'info' level and above.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/logging.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "logging/setLevel",
  "params": {
    "level": "info"
  }
}
```

----------------------------------------

TITLE: Initialize Kotlin Project (Powershell Windows)
DESCRIPTION: Creates a new directory for the project, navigates into it, and initializes a new Gradle project using the `gradle init` command in a Powershell on Windows.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_39

LANGUAGE: powershell
CODE:
```
# Create a new directory for our project
md kotlin-mcp-client
cd kotlin-mcp-client
# Initialize a new kotlin project
gradle init
```

----------------------------------------

TITLE: Declaring Resource Capabilities with List Changed Only
DESCRIPTION: This JSON snippet illustrates an MCP server declaring the `resources` capability, enabling only the `listChanged` feature. This means the server will notify clients when the list of available resources changes, but clients cannot subscribe to individual resource updates.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "capabilities": {
    "resources": {
      "listChanged": true 
    }
  }
}
```

----------------------------------------

TITLE: Malicious OAuth Proxy Usage (Skips User Consent) - Mermaid Diagram
DESCRIPTION: This Mermaid sequence diagram depicts a malicious OAuth proxy attack flow where user consent is bypassed. It demonstrates how an attacker can leverage an existing consent cookie to obtain an authorization code, impersonating the user to the MCP server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/security_best_practices.mdx#_snippet_1

LANGUAGE: Mermaid
CODE:
```
sequenceDiagram
    participant UA as User-Agent (Browser)
    participant M as MCP Proxy Server
    participant TAS as Third-Party Authorization Server
    participant A as Attacker


    Note over UA,A: Step 2: Attack (leveraging existing cookie, skipping consent)
    A->>M: Dynamically register malicious client, redirect_uri: attacker.com
    A->>UA: Sends malicious link
    UA->>TAS: Authorization request (client_id: mcp-proxy) + consent cookie
    rect rgba(255, 17, 0, 0.67)
    TAS->>TAS: Cookie present, consent skipped
    end

   TAS->>UA: 3P Authorization code + redirect to mcp-proxy-server.com
   UA->>M: 3P Authorization code
   Note over M,TAS: Exchange 3P code for 3P token
   Note over M: Generate MCP authorization code
   M->>UA: Redirect to attacker.com with MCP Authorization code
   UA->>A: MCP Authorization code delivered to attacker.com
   Note over M,A: Attacker exchanges MCP code for MCP token
   A->>M: Attacker impersonates user to MCP server
```

----------------------------------------

TITLE: Adding .env to .gitignore (Bash)
DESCRIPTION: This bash command appends `.env` to the `.gitignore` file. This ensures that the `.env` file, which contains sensitive API keys, is not committed to version control, maintaining security best practices.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
echo ".env" >> .gitignore
```

----------------------------------------

TITLE: Basic Usage of MCP Inspector with npx
DESCRIPTION: This snippet demonstrates the most basic way to run the MCP Inspector using `npx`, specifying a command to execute. It's used for general interaction with the Inspector's features.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/inspector.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx @modelcontextprotocol/inspector <command>
```

----------------------------------------

TITLE: Viewing Claude MCP Logs (Windows)
DESCRIPTION: This command displays the content of Claude's Model Context Protocol (MCP) log files on Windows. It's used for debugging server connection failures or tool call issues by showing recent log entries. Note that it only shows recent logs, not a continuous stream.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
type "%APPDATA%\Claude\logs\mcp*.log"
```

----------------------------------------

TITLE: Serving Documentation Locally (Bash)
DESCRIPTION: Runs an npm script to build and serve the project documentation locally, typically using Mintlify.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/CONTRIBUTING.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm run serve:docs
```

----------------------------------------

TITLE: Normal OAuth Proxy Usage (Preserves User Consent) - Mermaid Diagram
DESCRIPTION: This Mermaid sequence diagram illustrates the standard OAuth proxy flow where user consent is explicitly obtained and preserved. It shows the interaction between the User-Agent, MCP Client, MCP Proxy Server, and Third-Party Authorization Server, highlighting the initial authentication, user consent, and token exchange process.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/security_best_practices.mdx#_snippet_0

LANGUAGE: Mermaid
CODE:
```
sequenceDiagram
    participant UA as User-Agent (Browser)  
    participant MC as MCP Client
    participant M as MCP Proxy Server
    participant TAS as Third-Party Authorization Server

    Note over UA,M: Initial Auth flow completed

    Note over UA,TAS: Step 1: Legitimate user consent for Third Party Server

    M->>UA: Redirect to third party authorization server
    UA->>TAS: Authorization request (client_id: mcp-proxy)
    TAS->>UA: Authorization consent screen
    Note over UA: Review consent screen
    UA->>TAS: Approve
    TAS->>UA: Set consent cookie for client ID: mcp-proxy
    TAS->>UA: 3P Authorization code + redirect to mcp-proxy-server.com
    UA->>M: 3P Authorization code
    Note over M,TAS: Exchange 3P code for 3P token
    Note over M: Generate MCP authorization code
    M->>UA: Redirect to MCP Client with MCP authorization code

    Note over M,UA: Exchange code for token, etc.
```

----------------------------------------

TITLE: Configuring Spring Boot Application Properties
DESCRIPTION: This `application.properties` snippet configures Spring Boot to disable the banner and clear the console logging pattern. These settings are common for production or cleaner console output.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_25

LANGUAGE: properties
CODE:
```
spring.main.bannerMode=off
logging.pattern.console=
```

----------------------------------------

TITLE: Declaring Resources Capability with Subscribe Only (JSON)
DESCRIPTION: This JSON snippet illustrates a server declaring the `resources` capability with support only for `subscribe`. This configuration allows clients to subscribe to individual resources for change notifications, but the server will not emit notifications when the overall list of available resources changes.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "capabilities": {
    "resources": {
      "subscribe": true 
    }
  }
}
```

----------------------------------------

TITLE: Configuring Spring Boot Application YAML
DESCRIPTION: This `application.yml` snippet configures Spring Boot to disable the banner and clear the console logging pattern using YAML syntax. These settings are common for production or cleaner console output.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_26

LANGUAGE: yaml
CODE:
```
logging:
  pattern:
    console:
spring:
  main:
    banner-mode: off
```

----------------------------------------

TITLE: Defining Main Entry Point (Kotlin)
DESCRIPTION: Defines the main function for the client application. It requires a command-line argument specifying the path to the server script, initializes and connects an `MCPClient` instance, and then starts the interactive `chatLoop`. It uses `runBlocking` to execute the suspend functions.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_50

LANGUAGE: kotlin
CODE:
```
fun main(args: Array<String>) = runBlocking {
    if (args.isEmpty()) throw IllegalArgumentException("Usage: java -jar <your_path>/build/libs/kotlin-mcp-client-0.1.0-all.jar <path_to_server_script>")
    val serverPath = args.first()
    val client = MCPClient()
    client.use {
        client.connectToServer(serverPath)
        client.chatLoop()
    }
}
```

----------------------------------------

TITLE: Adding Optional Spring WebFlux Transport Dependency (Gradle)
DESCRIPTION: This snippet adds the optional Spring WebFlux-based SSE client and server transport dependency for MCP in Gradle. It is intended for projects using the Spring Framework, specifically Spring WebFlux, to integrate reactive SSE transport.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-overview.mdx#_snippet_4

LANGUAGE: Groovy
CODE:
```
// Optional: Spring WebFlux-based SSE client and server transport
dependencies {
  implementation platform("io.modelcontextprotocol.sdk:mcp-spring-webflux")
}
```

----------------------------------------

TITLE: Installing NPM Globally
DESCRIPTION: This command installs Node Package Manager (NPM) globally on your system. A global NPM installation is required for the `npx` command to function correctly, especially when running Model Context Protocol (MCP) servers, preventing potential failures.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
npm install -g npm
```

----------------------------------------

TITLE: Illustrating Message Flow with Mermaid Diagram
DESCRIPTION: This Mermaid sequence diagram visualizes the typical message flow between a client and a server in the Model Context Protocol. It demonstrates resource discovery, access, subscription, and update notification processes, showing the sequence of requests and responses.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#_snippet_13

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Client
    participant Server

    Note over Client,Server: Resource Discovery
    Client->>Server: resources/list
    Server-->>Client: List of resources

    Note over Client,Server: Resource Access
    Client->>Server: resources/read
    Server-->>Client: Resource contents

    Note over Client,Server: Subscriptions
    Client->>Server: resources/subscribe
    Server-->>Client: Subscription confirmed

    Note over Client,Server: Updates
    Server--)Client: notifications/resources/updated
    Client->>Server: resources/read
    Server-->>Client: Updated contents
```

----------------------------------------

TITLE: Model Context Protocol Architecture Diagram - Mermaid
DESCRIPTION: This Mermaid diagram visually represents the client-host-server architecture of the Model Context Protocol (MCP). It illustrates how an 'Application Host Process' manages multiple 'Clients', which in turn connect to various 'Servers' (local or remote) that interact with specific 'Resources'.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/architecture/index.mdx#_snippet_0

LANGUAGE: Mermaid
CODE:
```
graph LR
    subgraph "Application Host Process"
        H[Host]
        C1[Client 1]
        C2[Client 2]
        C3[Client 3]
        H --> C1
        H --> C2
        H --> C3
    end

    subgraph "Local machine"
        S1[Server 1<br>Files & Git]
        S2[Server 2<br>Database]
        R1[("Local<br>Resource A")]
        R2[("Local<br>Resource B")]

        C1 --> S1
        C2 --> S2
        S1 <--> R1
        S2 <--> R2
    end

    subgraph "Internet"
        S3[Server 3<br>External APIs]
        R3[("Remote<br>Resource C")]

        C3 --> S3
        S3 <--> R3
    end
```

----------------------------------------

TITLE: Adding NuGet Packages for MCP and Hosting
DESCRIPTION: This snippet adds necessary NuGet packages to the C# project. `ModelContextProtocol` is for the Model Context Protocol SDK, and `Microsoft.Extensions.Hosting` provides hosting capabilities for .NET applications, essential for building a server.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_53

LANGUAGE: bash
CODE:
```
# Add the Model Context Protocol SDK NuGet package
dotnet add package ModelContextProtocol --prerelease
# Add the .NET Hosting NuGet package
dotnet add package Microsoft.Extensions.Hosting
```

----------------------------------------

TITLE: MCP Roots Message Flow Diagram (Mermaid)
DESCRIPTION: This Mermaid sequence diagram visualizes the message flow for root management in the Model Context Protocol. It shows the initial discovery phase where the server requests roots, and the subsequent process for handling root list changes, where the client notifies the server, prompting a re-request for updated roots.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/roots.mdx#_snippet_4

LANGUAGE: Mermaid
CODE:
```
sequenceDiagram
    participant Server
    participant Client

    Note over Server,Client: Discovery
    Server->>Client: roots/list
    Client-->>Server: Available roots

    Note over Server,Client: Changes
    Client--)Server: notifications/roots/list_changed
    Server->>Client: roots/list
    Client-->>Server: Updated roots
```

----------------------------------------

TITLE: Opening Claude Desktop Config on Windows with VS Code
DESCRIPTION: This PowerShell command opens the Claude for Desktop configuration file on Windows using Visual Studio Code. It accesses the `claude_desktop_config.json` file located in the user's AppData directory, facilitating manual server configuration.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_7

LANGUAGE: powershell
CODE:
```
code $env:AppData\Claude\claude_desktop_config.json
```

----------------------------------------

TITLE: Building the Application with Maven Wrapper (Setup)
DESCRIPTION: Executes the Maven clean and install goals using the Maven wrapper script (./mvnw) to build the project and install dependencies. This prepares the application for running.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_27

LANGUAGE: Bash
CODE:
```
./mvnw clean install
```

----------------------------------------

TITLE: Verifying .NET SDK Installation
DESCRIPTION: This command verifies that the .NET SDK is correctly installed on the system by displaying its version. A successful output indicates that the `dotnet` command-line tool is accessible and ready for use in C# project development.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_51

LANGUAGE: bash
CODE:
```
dotnet --version
```

----------------------------------------

TITLE: Verify Java Installation (Bash)
DESCRIPTION: Executes the `java --version` command in a bash shell to confirm that Java is installed and to display its version.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_37

LANGUAGE: bash
CODE:
```
java --version
```

----------------------------------------

TITLE: Verifying Java Installation (Bash)
DESCRIPTION: This Bash command is used to verify the installed Java version. It's a prerequisite check for setting up the Kotlin weather server, ensuring Java 17 or higher is available.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_37

LANGUAGE: bash
CODE:
```
java --version
```

----------------------------------------

TITLE: Running the MCP Server via Dotnet CLI
DESCRIPTION: This Bash command executes the compiled C# Model Context Protocol (MCP) server application. Running `dotnet run` starts the server, enabling it to listen for and process incoming requests through standard input/output, as configured in the `Program.cs` file.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#_snippet_56

LANGUAGE: Bash
CODE:
```
dotnet run
```

----------------------------------------

TITLE: Cloning Spring AI Examples Repository
DESCRIPTION: Clones the spring-ai-examples GitHub repository and navigates into the specific directory for the model-context-protocol brave-chatbot example.
SOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#_snippet_25

LANGUAGE: Bash
CODE:
```
git clone https://github.com/spring-projects/spring-ai-examples.git
cd model-context-protocol/brave-chatbot
```