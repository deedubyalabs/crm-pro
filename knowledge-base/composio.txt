TITLE: Creating and Executing an AI Agent with OpenAI and Composio (Python)
DESCRIPTION: This Python snippet demonstrates how to initialize OpenAI and Composio clients, retrieve pre-configured GitHub tools, create an OpenAI assistant with specific instructions and tools, and then execute a task (starring a GitHub repository) using the assistant and handle tool calls. It requires `COMPOSIO_API_KEY` and `OPENAI_API_KEY` to be set in your environment variables.
SOURCE: https://github.com/composiohq/composio/blob/master/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from openai import OpenAI
from composio_openai import ComposioToolSet, App, Action

# Initialize OpenAI client
openai_client = OpenAI(
    api_key="{{OPENAIKEY}}"
)

# Initialize the Composio Tool Set
composio_tool_set = ComposioToolSet()

# Get GitHub tools that are pre-configured
actions = composio_tool_set.get_actions(
    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]
)

my_task = "Star a repo composiodev/composio on GitHub"

# Setup OpenAI assistant
assistant_instruction = "You are a super intelligent personal assistant"
assistant = openai_client.beta.assistants.create(
    name="Personal Assistant",
    instructions=assistant_instruction,
    model="gpt-4-turbo",
    tools=actions,
)

# Create a thread
thread = openai_client.beta.threads.create()

# Add user message to thread
message = openai_client.beta.threads.messages.create(
    thread_id=thread.id,
    role="user",
    content=my_task
)

# Execute Agent with integrations
run = openai_client.beta.threads.runs.create(
    thread_id=thread.id,
    assistant_id=assistant.id
)

# Execute Function calls
response_after_tool_calls = composio_tool_set.wait_and_handle_assistant_tool_calls(
    client=openai_client,
    run=run,
    thread=thread,
)

print(response_after_tool_calls)
```

----------------------------------------

TITLE: Validating Agent Execution Response
DESCRIPTION: This Python snippet calls `toolset.handle_tool_calls` with the `response` received from the OpenAI chat completion. This function executes the tool calls suggested by the OpenAI model and returns the result, which can then be pretty-printed for validation, confirming the successful completion of the intended task.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/openai/README.md#_snippet_4

LANGUAGE: python
CODE:
```
result = toolset.handle_tool_calls(response)
pprint(result)
```

----------------------------------------

TITLE: Full GitHub OAuth Connection and Action Execution in Python
DESCRIPTION: This comprehensive Python example demonstrates the full flow for establishing a GitHub OAuth connection and then executing an action. It covers identifying a user entity, initiating the connection, handling the OAuth redirect and waiting for connection activation, and finally, preparing for action execution. It requires `COMPOSIO_API_KEY` to be set in environment variables.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#_snippet_7

LANGUAGE: python
CODE:
```
# filename: connect_and_fetch_github.py
from composio_openai import ComposioToolSet, Action, App
from dotenv import load_dotenv
import os
import sys
import time

# Load environment variables from .env file
# Ensure COMPOSIO_API_KEY is set
load_dotenv()

def run_auth_flow():
    # --- 1. Identify User & App ---
    user_id_in_my_app = "user-quickstart-py-example" # Example user ID
    app_to_connect = App.GITHUB # Use Enum for clarity

    print(f"--- Starting GitHub connection for Entity: {user_id_in_my_app} ---")

    toolset = ComposioToolSet()
    entity = toolset.get_entity(id=user_id_in_my_app)

    active_connection = None # Initialize variable

    try:
        # --- 2. Initiate Connection ---
        print(f"Initiating {app_to_connect.value} connection...")
        # Use app_name; SDK finds appropriate integration
        connection_request = entity.initiate_connection(app_name=app_to_connect)

        # --- 3. Handle Redirect & Wait for Activation (OAuth) ---
        if connection_request.redirectUrl:
            print("\n!!! ACTION REQUIRED !!!")
            print(f"Please visit this URL to authorize the connection:\n{connection_request.redirectUrl}\n")
            print("Waiting for connection to become active (up to 120 seconds)...")

            try:
                # Poll Composio until the connection is marked active
                active_connection = connection_request.wait_until_active(
                    client=toolset.client, # Pass the underlying client
                    timeout=120
                )
                print(f"\nConnection successful! ID: {active_connection.id}")
                # In a real app, you'd store active_connection.id linked to user_id_in_my_app
            except Exception as e:
                print(f"Error waiting for connection: {e}", file=sys.stderr)
                print("Please ensure you visited the URL and approved the connection.")
                return # Exit if connection failed

        else:
            # Handle non-OAuth flows if needed (e.g., API Key where connection is instant)
            print("Connection established (non-OAuth flow). Fetching details...")
            # Fetch the connection details using the ID from the request
            active_connection = toolset.client.connected_accounts.get(connection_id=connection_request.connectedAccountId)
            if active_connection.status != "ACTIVE":
                 print(f"Connection is not active (Status: {active_connection.status}). Exiting.", file=sys.stderr)
                 return


        # --- 4. Execute Action ---
```

----------------------------------------

TITLE: Sending Task and Tools to LLM (Python/TypeScript)
DESCRIPTION: This section illustrates how to prepare and send a user's task to an LLM, along with the previously fetched Composio tools. It configures the LLM call to use a specific model (`gpt-4o-mini`) and enables automatic tool selection by the LLM based on the provided `tools` and `tool_choice="auto"`.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/introduction.mdx#_snippet_3

LANGUAGE: python
CODE:
```
task = "What is my GitHub username?"
messages = [{"role": "user", "content": task}]

print(f"Sending task to LLM: '{task}'")
response = client.chat.completions.create(
    model="gpt-4o-mini",
    messages=messages,
    tools=tools,
    tool_choice="auto" # Instruct LLM to choose if a tool is needed
)
```

LANGUAGE: typescript
CODE:
```
const task = "What is my GitHub username?";
const messages = [{ role: "user" as const, content: task }];

console.log(`Sending task to LLM: '${task}'`);
const response = await client.chat.completions.create({
    model: "gpt-4o-mini",
    messages: messages,
    tools: tools,
    tool_choice: "auto" // Instruct LLM to choose if a tool is needed
});
```

----------------------------------------

TITLE: Automating Newsletter Summarization with CrewAI and Composio (Python)
DESCRIPTION: This Python script demonstrates a complete AI agent workflow using CrewAI and Composio tools to automate newsletter processing. It defines three agents (Email Fetcher, Newsletter Summarizer, Email Sender) and corresponding tasks to fetch recent newsletter emails from Gmail, summarize their content, and then send a compiled digest to a specified recipient. It leverages `composio_crewai` for Gmail integration and `langchain_openai` for the LLM.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#_snippet_8

LANGUAGE: Python
CODE:
```
import os
from datetime import datetime, timedelta

from composio_crewai import App, ComposioToolSet
from crewai import Agent, Crew, Process, Task
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

# Load environment variables
load_dotenv()

# Initialize the language model
llm = ChatOpenAI(model="gpt-4o")

# Set up Composio tools
composio_toolset = ComposioToolSet()

# Get Gmail tools
gmail_tools = composio_toolset.get_tools(apps=[App.GMAIL])

# Get today's date and the date from 7 days ago
today = datetime.today().strftime("%Y/%m/%d")
week_ago = (datetime.today() - timedelta(days=7)).strftime("%Y/%m/%d")

# Define the Email Fetcher Agent
email_fetcher = Agent(
    role="Email Fetcher",
    goal="Fetch all newsletter emails",
    backstory="""You are an Email Fetcher specialized in finding newsletter emails.
    Your job is to identify and retrieve recent newsletter emails from the user's inbox.""",
    verbose=True,
    tools=gmail_tools,
    llm=llm
)

# Define the Email Summarizer Agent
summarizer = Agent(
    role="Newsletter Summarizer",
    goal="Create concise summaries of newsletter content",
    backstory="""You are a Newsletter Summarizer who excels at distilling information.
    You can read newsletter emails and create brief, informative summaries of their main points.""",
    verbose=True,
    llm=llm
)

# Define the Email Sender Agent
email_sender = Agent(
    role="Email Sender",
    goal="Send email with newsletter summaries",
    backstory="""You are an Email Sender who specializes in composing and sending emails.
    You take summaries and convert them into well-formatted emails before sending them to recipients.""",
    verbose=True,
    tools=gmail_tools,
    llm=llm
)

# Define tasks for each agent
fetch_task = Task(
    description=f"""Search for newsletter emails in the inbox from {week_ago} to {today}.
    Return a list of emails with their subjects, senders, and content.""",
    expected_output="A list of newsletter emails with their content",
    agent=email_fetcher
)

summarize_task = Task(
    description="""Create a concise summary of each newsletter email.
    Identify the key points, announcements, and insights from each newsletter.
    Format your summaries neatly with bullet points.""",
    expected_output="Summarized content from all newsletters",
    agent=summarizer,
    context=[fetch_task]
)

send_task = Task(
    description="""Compose an email with the newsletter summaries.
    Send it to youremail@example.com with the subject 'Weekly Newsletter Digest'.
    Format the email in a reader-friendly way with headings for each newsletter.""",
    expected_output="Confirmation that the email was sent",
    agent=email_sender,
    context=[summarize_task]
)

# Create and run the crew
crew = Crew(
    agents=[email_fetcher, summarizer, email_sender],
    tasks=[fetch_task, summarize_task, send_task],
    verbose=2,
    process=Process.sequential
)

# Execute the workflow
result = crew.kickoff()
print(f"Result: {result}")
```

----------------------------------------

TITLE: Executing GitHub Tool Call via LLM (TypeScript)
DESCRIPTION: This TypeScript code illustrates using Composio with an LLM to perform a GitHub tool call. It fetches the `GITHUB_GET_THE_AUTHENTICATED_USER` tool, prepares messages for the OpenAI chat completion, and then uses `toolset.handleToolCall` to manage the LLM's decision to use the tool and execute the corresponding action.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/quickstart.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
const tools = await toolset.getTools({ actions: ["GITHUB_GET_THE_AUTHENTICATED_USER"]})
const task = "Get my GitHub username."
const messages = [
    {"role": "system", "content": "You are a helpful assistant that can use tools."},
    {"role": "user", "content": task}
]

const response = await client.chat.completions.create({
    model: "gpt-4o-mini", // Or another capable model
    messages: messages,
    tools: tools,
    tool_choice: "auto" // Let the LLM decide whether to use a tool
});


const result = await toolset.handleToolCall(response);

console.log(result);
```

----------------------------------------

TITLE: Complete CrewAI Agent for Google Calendar - Python
DESCRIPTION: This comprehensive Python script sets up and executes a CrewAI agent to manage Google Calendar events. It imports necessary packages, loads environment variables, initializes the LLM, defines Google Calendar tools via Composio, sets up current date/timezone, and defines a todo list. The `run_crew` function configures an agent and task, then executes the crew to book calendar slots based on the todo list.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/calendar-agent.mdx#_snippet_7

LANGUAGE: python
CODE:
```
  # Import base packages
  import os
  from datetime import datetime

  from composio_crewai import App, ComposioToolSet
  from crewai import Agent, Task
  from dotenv import load_dotenv
  from langchain_openai import ChatOpenAI

  # Load environment variables
  load_dotenv()

  # Initialize the language model
  llm = ChatOpenAI(model="gpt-4o")

  # Define tools for the agents
  # We are using Google calendar tool from composio to connect to our calendar account.
  composio_toolset = ComposioToolSet()
  tools = composio_toolset.get_tools(apps=[App.GOOGLECALENDAR])

  # Retrieve the current date and time
  date = datetime.today().strftime("%Y-%m-%d")
  timezone = datetime.now().astimezone().tzinfo

  # Setup Todo
  todo = """
      1PM - 3PM -> Code,
      5PM - 7PM -> Meeting,
      9AM - 12AM -> Learn something,
      8PM - 10PM -> Game
  """

  # Create and Execute Agent.
  def run_crew():
      calendar_agent = Agent(
          role="Google Calendar Agent",
          goal="""You take action on Google Calendar using Google Calendar APIs""",
          backstory="""You are an AI agent responsible for taking actions on Google Calendar on users' behalf.\n          You need to take action on Calendar using Google Calendar APIs. Use correct tools to run APIs from the given tool-set.""",
          verbose=True,
          tools=tools,
          llm=llm,
      )
      task = Task(
          description=f"Book slots according to {todo}. Label them with the work provided to be done in that time period. Schedule it for today. Today's date is {date} (it's in YYYY-MM-DD format) and make the timezone be {timezone}.",
          agent=calendar_agent,
          expected_output="if free slot is found",
      )
      crew = Crew(agents=[calendar_agent], tasks=[task])
      result = crew.kickoff()
      print(result)
      return result

  run_crew()
```

----------------------------------------

TITLE: Complete Langchain Agent for Google Calendar - JavaScript
DESCRIPTION: This complete JavaScript example demonstrates setting up and running a Langchain agent for Google Calendar. It imports dependencies, loads environment variables, initializes the LLM, configures Composio tools for calendar actions, and retrieves current date/timezone. The `runAgent` function defines the agent, pulls a prompt, and invokes the agent executor to schedule events based on a todo list.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/calendar-agent.mdx#_snippet_8

LANGUAGE: javascript
CODE:
```
  import dotenv from 'dotenv';
  import { ChatOpenAI } from "@langchain/openai";
  import { AgentExecutor, createOpenAIFunctionsAgent } from "langchain/agents";
  import { pull } from "langchain/hub";
  import { LangchainToolSet } from "composio-core";

  dotenv.config();

  // Initialize the language model
  const llm = new ChatOpenAI({ model: "gpt-4-turbo"});

  // Define tools for the agents
  const composioToolset = new LangchainToolSet({
      apiKey: process.env.COMPOSIO_API_KEY
  });

  // Retrieve the current date and time
  const getCurrentDate = () => new Date().toISOString().split('T')[0];
  const getTimezone = () => new Date().toLocaleTimeString('en-us', { timeZoneName: 'short' }).split(' ')[2];

  const date = getCurrentDate();
  const timezone = getTimezone();

  // Setup Todo
  const todo = `
      1PM - 3PM -> Code solo
  `;

  async function runAgent() {
      const tools = await composioToolset.getTools({
      actions: ["googlecalendar_create_event", "googlecalendar_list_events"]
  });
      const prompt = await pull("hwchase17/openai-functions-agent");
      const agent = await createOpenAIFunctionsAgent({
          llm,
          tools,
          prompt
      });

  const agentExecutor = new AgentExecutor({
      agent,
      tools,
      verbose: true,
  });

  const result = await agentExecutor.invoke({
      input: `Book slots according to this todo list: ${todo}. \n              Label them with the work provided to be done in that time period. \n              Schedule it for today. Today's date is ${date} (it's in YYYY-MM-DD format) \n              and make the timezone be ${timezone}.`
  });

  console.log(result.output);
  return "Agent execution completed";
  }

  runAgent().then(console.log).catch(console.error);
```

----------------------------------------

TITLE: Setting Up GitHub Issue Creation Agent with OpenAI and Composio JS SDK
DESCRIPTION: Implements the `executeAgent` function to set up and run an OpenAI-powered agent for creating GitHub issues. It ensures the user's GitHub account is connected via Composio, retrieves the `github_issues_create` tool, constructs an instruction for the OpenAI model, and then processes the model's tool call using `toolset.handleToolCall` to execute the GitHub action. This function orchestrates the interaction between OpenAI's chat completions and Composio's tool execution.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai-js.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
async function executeAgent(repo,entityName="default") {
        const entity = toolset.client.getEntity(entityName);
        await setupUserConnectionIfNotExists(entity.id);

        const tools = await toolset.getTools({ actions: ["github_issues_create"] }, entity.id);
        const instruction = `Make an issue with sample title in the repo - ${repo}`;

        const client = new OpenAI({ apiKey: OPEN_AI_API_KEY });
        const response = await client.chat.completions.create({
            model: "gpt-4-turbo",
            messages: [{
                role: "user",
                content: instruction,
            }],
            tools: tools,
            tool_choice: "auto",
        });

        console.log(response.choices[0].message.tool_calls);
        await toolset.handleToolCall(response, entity.id);
}
```

----------------------------------------

TITLE: Discovering Required Fields for API Key Authentication (Python/TypeScript)
DESCRIPTION: This snippet demonstrates how to programmatically discover the specific credentials (e.g., api_key, token) an application requires for API Key or Bearer Token authentication using Composio. It utilizes `get_expected_params_for_user` (Python) or `apps.getRequiredParamsForAuthScheme` (TypeScript) to retrieve a list of expected input fields, which can then be used to prompt the user. The `integration_id` or `appId` and `authScheme` are required inputs.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/non-oauth.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
from composio_openai import ComposioToolSet, App

toolset = ComposioToolSet()

# Replace with your actual integration ID
YOUR_INTEGRATION_ID = "int_shopify_xxxxxxxx..."

auth_scheme_for_shopify = "API_KEY"  # Check Integration config or Tool Directory
try:
    required_info = toolset.get_expected_params_for_user(
        app=App.SHOPIFY, auth_scheme=auth_scheme_for_shopify, integration_id=YOUR_INTEGRATION_ID
    )
    field_names = [field["name"] for field in required_info["expectedInputFields"]]
    print(f"Required fields for {App.SHOPIFY.value} ({auth_scheme_for_shopify}): {field_names}")
    # Use required_info["expectedInputFields"] for descriptions to show the user
except Exception as e:
    print(f"Error fetching required params: {e}")
```

LANGUAGE: TypeScript
CODE:
```
import { OpenAIToolSet } from "composio-core";

const toolset = new OpenAIToolSet();
// Example: Find required fields for Stripe (which uses API Key)
const appKey = "SHOPIFY";
const authSchemeForShopify = "API_KEY"; // Check Integration config or Tool Directory

try {
  const requiredInfo = await toolset.client.apps.getRequiredParamsForAuthScheme(
    {
      appId: appKey,
      authScheme: authSchemeForShopify,
    }
  );
  const fieldNames = requiredInfo.required_fields;
  console.log(
    `Required fields for ${appKey} (${authSchemeForShopify}): ${fieldNames}`
  );
  // Example Output for Stripe: ['api_key']
  // Use requiredInfo.fields for descriptions to show the user
} catch (error) {
  console.error("Error fetching required params:", error);
}
```

----------------------------------------

TITLE: Defining ComposioToolSet for Framework Integration in Python
DESCRIPTION: This class extends `BaseComposioToolSet` to provide a framework-specific integration for Composio tools. It initializes the toolset with framework-specific settings, wraps Composio action schemas into framework-compatible tool objects, and retrieves a list of these tools based on specified filters like actions, apps, or tags. It serves as the core component for adapting Composio's functionality to a custom framework.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#_snippet_4

LANGUAGE: Python
CODE:
```
# Import from Composio
from composio import ActionType, AppType, TagType
from composio.tools import ComposioToolSet as BaseComposioToolSet
from composio.tools.toolset import ProcessorsType
from composio.utils.pydantic import parse_pydantic_error
from composio.utils.shared import get_signature_format_from_schema_params

class ComposioToolSet(BaseComposioToolSet):
    """
    Composio toolset for [Your Framework] integration.
    
    Add usage examples here to help users understand how to use your integration.
    """
    
    def __init__(self, *args, **kwargs):
        # Initialize with your framework-specific settings
        super().__init__(*args, **kwargs, 
                         runtime="your_framework_name",
                         description_char_limit=1024,
                         action_name_char_limit=64)
    
    def _wrap_tool(
        self,
        schema: t.Dict[str, t.Any],
        entity_id: t.Optional[str] = None,
    ) -> FrameworkTool:
        """Convert a Composio tool schema into a framework-specific tool."""
        action = schema["name"]
        description = schema["description"]
        schema_params = schema["parameters"]
        
        # Implementation specific to your framework
        # This is where you adapt the Composio schema to your framework's format
        
        # Example implementation (modify for your framework):
        tool = FrameworkTool(
            name=action,
            description=description,
            # Transform schema_params to match your framework's format
            parameters=self._adapt_parameters(schema_params),
            # Create a wrapper function that calls Composio's execute_action
            function=lambda **kwargs: self.execute_action(
                action=action,
                params=kwargs,
                entity_id=entity_id or self.entity_id,
            )
        )
        
        return tool
    
    def get_tools(
        self,
        actions: t.Optional[t.Sequence[ActionType]] = None,
        apps: t.Optional[t.Sequence[AppType]] = None,
        tags: t.Optional[t.List[TagType]] = None,
        entity_id: t.Optional[str] = None,
        *,
        processors: t.Optional[ProcessorsType] = None,
        check_connected_accounts: bool = True,
    ) -> List[FrameworkTool]:
        """
        Get Composio tools as your framework's tool objects.
        
        Args:
            actions: List of specific actions to get
            apps: List of apps to get tools from
            tags: Filter tools by tags
            entity_id: Entity ID to use for tool execution
            processors: Optional request/response processors
            check_connected_accounts: Whether to check for connected accounts
            
        Returns:
            A list of framework-compatible tools
        """
        # Validate and prepare
        self.validate_tools(apps=apps, actions=actions, tags=tags)
        if processors is not None:
            self._processor_helpers.merge_processors(processors)
        
        # Get action schemas from Composio
        tools = [
            self._wrap_tool(
                schema=tool.model_dump(exclude_none=True),
                entity_id=entity_id or self.entity_id,
            )
            for tool in self.get_action_schemas(
                actions=actions,
                apps=apps,
                tags=tags,
                check_connected_accounts=check_connected_accounts,
                _populate_requested=True,
            )
        ]
        
        return tools
```

----------------------------------------

TITLE: Initializing Composio ToolSet and OpenAI Client (Python)
DESCRIPTION: This snippet initializes the `ComposioToolSet` to interact with Composio tools and the `OpenAI` client for LLM interactions. The `ComposioToolSet` automatically picks up `COMPOSIO_API_KEY` from environment variables and uses the 'default' entity if not specified.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/quickstart.mdx#_snippet_2

LANGUAGE: python
CODE:
```
from composio_openai import ComposioToolSet, Action
from openai import OpenAI

# Initialize Composio ToolSet
# It automatically picks up COMPOSIO_API_KEY from env vars
# Uses the 'default' entity_id if not specified
toolset = ComposioToolSet()
client = OpenAI()
```

----------------------------------------

TITLE: Complete Langchain Agent for AI News Retrieval and Summarization
DESCRIPTION: This comprehensive script combines all previous steps: importing necessary modules, initializing the LLM and Composio tools, setting up the ReAct prompt, defining the agent, and executing it to find and summarize the latest AI news using SERPAPI.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#_snippet_8

LANGUAGE: python
CODE:
```
from langchain import hub
from langchain.agents import AgentExecutor, load_tools
from langchain.agents.format_scratchpad import format_log_to_str
from langchain.agents.output_parsers import (
    ReActJsonSingleInputOutputParser,
)
from langchain.tools.render import render_text_description
from langchain_community.utilities import SerpAPIWrapper
from langchain_community.llms import HuggingFaceEndpoint
from langchain_community.chat_models.huggingface import ChatHuggingFace
from composio_langchain import ComposioToolSet, Action, App


llm = HuggingFaceEndpoint(repo_id="HuggingFaceH4/zephyr-7b-beta", huggingfacehub_api_token=os.getenv("HUGGINGFACEHUB_API_TOKEN"))

chat_model = ChatHuggingFace(llm=llm)
# Import from composio_langchain


# setup tools
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.SERPAPI])

# setup ReAct style prompt
prompt = hub.pull("hwchase17/react-json")
prompt = prompt.partial(
    tools=render_text_description(tools),
    tool_names=", ".join([t.name for t in tools]),
)

# define the agent
chat_model_with_stop = chat_model.bind(stop=["\nInvalidStop"])
agent = (
    {
        "input": lambda x: x["input"],
        "agent_scratchpad": lambda x: format_log_to_str(x["intermediate_steps"]),
    }
    | prompt
    | chat_model_with_stop
    | ReActJsonSingleInputOutputParser()
)

# instantiate AgentExecutor
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True, handle_parsing_errors=True)
agent_executor.return_intermediate_steps = True
res = agent_executor.invoke(
    {
        "input": "Use SERP to find the one latest AI news, take only description of article."
    }
)

res2 = agent_executor.invoke({
    "input": res['output']+' Summarize this'
})


```

----------------------------------------

TITLE: Processing AI Instructions and Handling Errors with Composio Toolset in JavaScript
DESCRIPTION: This snippet defines AI instructions for summarizing newsletters and uses the `composioToolset.process` method to execute them. It takes a user message containing the instructions, along with `tools`, `llm`, and a `recipient`. The `try...catch` block ensures that any errors during processing are caught, logged to the console, and returned as a JSON error response with a 500 status code.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#_snippet_10

LANGUAGE: JavaScript
CODE:
```
// Process instructions for the AI
const instructions = `
              1. Search for newsletter emails in the inbox from ${weekAgo} to ${today}
              2. For each newsletter found:
                 - Read the content
                 - Create a concise summary highlighting key points
              3. Compose a single email with all summaries organized clearly
              4. Send the summary email to the specified recipient with the subject 'Weekly Newsletter Digest'
          `;
          
          // Message to process with tool calling
          const message = {
              role: "user",
              content: instructions
          };
          
          // Process the message with tool calling
          const result = await composioToolset.process({
              messages: [message],
              tools,
              llm,
              recipient: "youremail@example.com"  // Replace with actual recipient
          });
          
          return c.json({ status: "success", result });
      } catch (error) {
          console.error("Error:", error);
          return c.json({ status: "error", message: error.message }, 500);
      }
```

----------------------------------------

TITLE: Setting Up CrewAI Agent for Python Code Execution
DESCRIPTION: This Python snippet illustrates configuring a CrewAI agent to execute Python code using Composio's Code Interpreter tool. It covers environment initialization, tool loading, agent definition with a specific role, task creation for Fibonacci sequence calculation, and orchestrates the execution via a `Crew` to obtain the final result. Dependencies include `composio_crewai`, `crewai`, `dotenv`, and `langchain_openai`.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/code-execution-agent.mdx#_snippet_7

LANGUAGE: Python
CODE:
```
import os

from composio_crewai import Action, App, ComposioToolSet
from crewai import Agent, Crew, Process, Task
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

# Load environment variables
load_dotenv()

# Set up Composio tools
composio_toolset = ComposioToolSet()

# Get tools from the Code Interpreter app
tools = composio_toolset.get_tools(apps=[App.CODEINTERPRETER])

# Initialize the language model
llm = ChatOpenAI(model="gpt-4o")

# Define the Python executor agent
python_executor_agent = Agent(
    role="Python Executor",
    goal="Execute Python code to solve problems",
    backstory="""You are an expert Python developer specializing in executing code to solve various problems.
    Your job is to analyze problems, write efficient Python code to solve them, and execute the code to ensure it works correctly.""",
    verbose=True,
    allow_delegation=False,
    tools=tools,
    llm=llm
)

# Define a task for the agent
task = Task(
    description="""Write a Python function to calculate the Fibonacci sequence up to the 10th number.
                  Then, execute the code and return the result.""",
    expected_output="The Fibonacci sequence and the execution result",
    agent=python_executor_agent
)

# Create a crew with the agent and task
crew = Crew(
    agents=[python_executor_agent],
    tasks=[task],
    verbose=2,
    process=Process.sequential
)

# Execute the task
result = crew.kickoff()
print(f"Result: {result}")
```

----------------------------------------

TITLE: Implementing Newsletter Summarization API Endpoint in JavaScript
DESCRIPTION: This JavaScript snippet defines a POST endpoint `/summarize-newsletters` using Hono. It sets up a connection, retrieves Gmail tools via `composioToolset`, calculates date ranges, and then constructs AI instructions to search, summarize, and send newsletter digests. The `composioToolset.process` method orchestrates the AI interaction with the specified tools and LLM.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
app.post("/summarize-newsletters", async (c) => {
    // Set up connection
    const { ok, connectionId, error } = await setupConnection(c);
    if (!ok) return c.json({ error }, 400);

    // Get Gmail tools
    const tools = await composioToolset.getTools({
        actions: ["gmail_list_messages", "gmail_get_message", "gmail_send_email"],
        connectionId
    });

    // Get today's date and the date from 7 days ago
    const today = new Date().toLocaleDateString("en-US", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit"
    }).replace(/\//g, "/");

    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toLocaleDateString("en-US", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit"
    }).replace(/\//g, "/");

    try {
        // Process instructions for the AI
        const instructions = `
            1. Search for newsletter emails in the inbox from ${weekAgo} to ${today}
            2. For each newsletter found:
               - Read the content
               - Create a concise summary highlighting key points
            3. Compose a single email with all summaries organized clearly
            4. Send the summary email to the specified recipient with the subject 'Weekly Newsletter Digest'
        `;

        // Message to process with tool calling
        const message = {
            role: "user",
            content: instructions
        };

        // Process the message with tool calling
        const result = await composioToolset.process({
            messages: [message],
            tools,
            llm,
            recipient: "youremail@example.com"  // Replace with actual recipient
        });

        return c.json({ status: "success", result });
    } catch (error) {
        console.error("Error:", error);
        return c.json({ status: "error", message: error.message }, 500);
    }
});
```

----------------------------------------

TITLE: Registering Custom Tools with TypeScript's createAction
DESCRIPTION: This snippet illustrates how to register custom tools in TypeScript using the `createAction` method on a Composio `ToolSet` instance. It shows how to define input parameters using Zod schemas and implement the tool's logic within an asynchronous callback function, ensuring type safety and JSON-serializable results.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/custom-tools.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { OpenAIToolSet } from "composio-core"; // Or your specific framework ToolSet
import { z } from "zod";

const toolset = new OpenAIToolSet(); // Initialize ToolSet

// Define the input schema using Zod
const addSchema = z.object({
    a: z.number().describe("The first number to add"),
    b: z.number().describe("The second number to add"),
});

// Register the custom action
await toolset.createAction({
    actionName: "add_numbers", // Unique name for this tool
    description: "Adds two numbers and returns the sum.",
    inputParams: addSchema, // Provide the Zod schema
    // The callback function containing your logic
    callback: async (input) => {
        // Safely access validated input (casting based on schema)
        const params = input as z.infer<typeof addSchema>;
        console.log(`Executing add_numbers: Adding ${params.a} and ${params.b}`);
        const sum = params.a + params.b;
        // Return a JSON-serializable result
        return { result: sum };
    },
});

console.log("Custom action 'add_numbers' registered.");
```

----------------------------------------

TITLE: Automating Research and GitHub Issues with OpenAI Assistants and Composio (JavaScript)
DESCRIPTION: This snippet illustrates how to build an Express.js application that leverages OpenAI Assistants and Composio tools in JavaScript. It sets up an API endpoint to trigger a research process where an OpenAI Assistant uses SERPAPI for search and GitHub tools to create issues based on the research findings. The code initializes Composio and OpenAI clients, defines research parameters, and handles the assistant's execution, including tool calls.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#_snippet_13

LANGUAGE: javascript
CODE:
```
import express from 'express';
import { OpenAI } from "openai";
import { OpenAIToolSet, Action } from "composio-core";
import dotenv from 'dotenv';

dotenv.config();

// Create Express app
const app = express();
const PORT = process.env.PORT || 2001;

// Set research parameters
const researchTopic = "LLM agents function calling";
const targetRepo = "composiohq/composio";
const nIssues = 3;

// Configure Express
app.use(express.json());

// Initialize the Composio toolset
const toolset = new OpenAIToolSet({
    apiKey: process.env.COMPOSIO_API_KEY,
});

// Initialize OpenAI client
const client = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

// Create endpoint to trigger the research
app.get('/research', async (req, res) => {
    try {
        // Get the necessary tools for research and GitHub interaction
        const tools = await toolset.get_actions([
            Action.SERPAPI_SEARCH,
            Action.GITHUB_USERS_GET_AUTHENTICATED,
            Action.GITHUB_ISSUES_CREATE
        ]);
        
        // Create assistant
        const assistant = await client.beta.assistants.create({
            model: "gpt-4-turbo",
            description: "Research Agent that interacts with GitHub",
            instructions: "You are a helpful assistant that researches topics and creates GitHub issues",
            tools: tools,
        });
        
        // Create the research prompt
        const prompt = `Please research about \`${researchTopic}\`, organize \n            the top ${nIssues} results as ${nIssues} issues for \n            a GitHub repository, and finally raise those issues with proper \n            title, body, implementation guidance, and references in \n            the ${targetRepo} repo, as well as relevant tags and assignees as \n            the repo owner.`;
        
        // Create a thread with the user's request
        const thread = await client.beta.threads.create({
            messages: [{
                role: "user",
                content: prompt
            }]
        });
        
        // Start the assistant run
        let run = await client.beta.threads.runs.create(thread.id, {
            assistant_id: assistant.id,
        });
        
        // Handle tool calls and wait for completion
        run = await toolset.wait_and_handle_assistant_tool_calls(client, run, thread);
        
        // Check if the run completed successfully
        if (run.status === "completed") {
            const messages = await client.beta.threads.messages.list(thread.id);
            res.json({ status: 'success', messages: messages.data });
        } else {
            res.status(500).json({ status: 'error', message: 'Run did not complete', run });
        }

```

----------------------------------------

TITLE: Complete Workflow with Composio and Langchain Agents - JavaScript
DESCRIPTION: This JavaScript code illustrates a complete workflow using Composio's SQL, File, and Code Interpreter tools with Langchain agents. It includes asynchronous functions to execute SQL queries, save results, and create data visualizations, such as a bar chart, from the retrieved data.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#_snippet_10

LANGUAGE: JavaScript
CODE:
```
import dotenv from 'dotenv';
import { ChatOpenAI } from "@langchain/openai";
import { AgentExecutor, createOpenAIFunctionsAgent } from "langchain/agents";
import { ComposioToolSet } from "composio-core";
import { pull } from "langchain/hub";

dotenv.config();

// Initialize the Composio ToolSet
const composioToolset = new ComposioToolSet({
    apiKey: process.env.COMPOSIO_API_KEY
});

// Initialize the language model
const llm = new ChatOpenAI({ model: "gpt-4-turbo" });

// Function to execute SQL queries
async function executeSQLQuery(query) {
    // Get SQL and File tools
    const sqlTools = await composioToolset.getTools({ 
        apps: ["sqltool", "filetool"] 
    });
    
    // Create the agent prompt
    const prompt = await pull("hwchase17/openai-functions-agent");
    
    // Create the agent for SQL operations
    const agent = await createOpenAIFunctionsAgent({ 
        llm, 
        tools: sqlTools, 
        prompt 
    });

    // Create the agent executor
    const agentExecutor = new AgentExecutor({
        agent,
        tools: sqlTools,
        verbose: true,
    });

    // Execute the SQL query
    const result = await agentExecutor.invoke({
        input: `Connect to the SQLite database 'companydb' and execute the following query: ${query}. \n                Save the results to a file named 'query_results.txt' and return the content.`
    });

    console.log("SQL Query Result:", result.output);
    return result.output;
}

// Function to create data visualizations
async function createVisualization(data) {
    // Get all tools including code interpreter
    const allTools = await composioToolset.getTools({ 
        apps: ["sqltool", "filetool", "codeinterpreter"] 
    });
    
    // Create the agent prompt
    const prompt = await pull("hwchase17/openai-functions-agent");
    
    // Create the agent for visualization
    const agent = await createOpenAIFunctionsAgent({ 
        llm, 
        tools: allTools, 
        prompt 
    });

    // Create the agent executor
    const agentExecutor = new AgentExecutor({
        agent,
        tools: allTools,
        verbose: true,
    });

    // Execute the visualization task
    const result = await agentExecutor.invoke({
        input: `Using the following data: ${data}\n                Create a bar chart showing first_name on the x-axis and salary on the y-axis.\n                Save the visualization as 'salary_chart.png'.`
    });

    console.log("Visualization Result:", result.output);
}
```

----------------------------------------

TITLE: Initializing and Executing Langchain Agent with ComposioToolSet (TypeScript)
DESCRIPTION: This example demonstrates how to initialize a Langchain agent using ComposioToolSet to access Composio tools. It shows loading environment variables, setting up an OpenAI client, retrieving tools for a specific application (GitHub), defining a task, creating an OpenAI functions agent, and executing the task using the agent executor. It requires `dotenv`, `composio_langchain`, `langchain/agents`, `langchain_openai`, and `langchain` packages.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/frameworks_langchain.LangchainToolSet.html#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import * as dotenv from "dotenv";
import { App, ComposioToolSet } from "composio_langchain";
import { AgentExecutor, create_openai_functions_agent } from "langchain/agents";
import { ChatOpenAI } from "langchain_openai";
import { hub } from "langchain";

// Load environment variables from .env
dotenv.config();

// Pull relevant agent model.
const prompt = hub.pull("hwchase17/openai-functions-agent");

// Initialize tools.
const openai_client = new ChatOpenAI({ apiKey: process.env.OPENAI_API_KEY });
const composio_toolset = new ComposioToolSet();

// Get All the tools
const tools = composio_toolset.get_tools({ apps: [App.GITHUB] });

// Define task
const task = "Star a repo composiohq/composio on GitHub";

// Define agent
const agent = create_openai_functions_agent(openai_client, tools, prompt);
const agent_executor = new AgentExecutor({ agent, tools, verbose: true });

// Execute using agent_executor
agent_executor.invoke({ input: task });
```

----------------------------------------

TITLE: Authenticating Composio CLI
DESCRIPTION: This command initiates the Composio login process, opening a browser window for user authentication and API key generation. The retrieved API key (`COMPOSIO_API_KEY`) must be set as an environment variable for subsequent operations.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/quickstart.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
composio login
```

----------------------------------------

TITLE: Getting GitHub Username with Composio and OpenAI
DESCRIPTION: This code demonstrates how to use Composio with OpenAI to retrieve the authenticated GitHub user's username. It involves initializing the Composio ToolSet, getting the 'GITHUB_GET_THE_AUTHENTICATED_USER' tool, constructing messages for the OpenAI chat model, and then using the toolset's handler to execute the tool and get the result.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/quickstart.mdx#_snippet_6

LANGUAGE: Python
CODE:
```
from composio_openai import ComposioToolSet, Action
from openai import OpenAI

toolset = ComposioToolSet()
client = OpenAI()

tools = toolset.get_tools(actions=[Action.GITHUB_GET_THE_AUTHENTICATED_USER])
task = "Get my GitHub username."
messages = [
    {"role": "system", "content": "You are a helpful assistant that can use tools."},
    {"role": "user", "content": task},
]
response = client.chat.completions.create(
    model="gpt-4o-mini", 
    messages=messages,
    tools=tools,
    tool_choice="auto",
)
result = toolset.handle_tool_calls(response)
print(result)
```

LANGUAGE: TypeScript
CODE:
```
import { OpenAIToolSet } from "composio-core";
import { OpenAI } from "openai";

// Initialize Composio ToolSet
// It automatically picks up COMPOSIO_API_KEY from env vars
// Uses the 'default' entity_id if not specified
const toolset = new OpenAIToolSet();
const client = new OpenAI();

const tools = await toolset.getTools({ actions: ["GITHUB_GET_THE_AUTHENTICATED_USER"]})
const task = "Get my GitHub username."
const messages = [
    {"role": "system", "content": "You are a helpful assistant that can use tools."},
    {"role": "user", "content": task},
]
const response = await client.chat.completions.create({
    model: "gpt-4o-mini",
    messages: messages,
    tools: tools,
    tool_choice: "auto",
});
const result = await toolset.handleToolCall(response);
console.log(result);
```

----------------------------------------

TITLE: Complete LangChain Agent Setup for Code Execution in JavaScript
DESCRIPTION: This comprehensive JavaScript snippet outlines the full setup for a LangChain agent integrated with Composio's `codeinterpreter_execute_code` tool. It handles environment variable loading, Composio toolset configuration, OpenAI language model initialization, agent creation from a hub prompt, and defines an `executeCodeAgent` function to invoke the agent for problem-solving, demonstrated with a Fibonacci sequence calculation. Key dependencies are `dotenv`, `@langchain/openai`, `langchain/agents`, `langchain/hub`, and `composio-core`.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/code-execution-agent.mdx#_snippet_8

LANGUAGE: JavaScript
CODE:
```
import dotenv from 'dotenv';
import { ChatOpenAI } from "@langchain/openai";
import { AgentExecutor, createOpenAIFunctionsAgent } from "langchain/agents";
import { pull } from "langchain/hub";
import { LangchainToolSet } from "composio-core";

dotenv.config();

// Set up Composio tools
const composioToolset = new LangchainToolSet({
    apiKey: process.env.COMPOSIO_API_KEY
});

async function main() {
    // Get specific tools for code execution
    const tools = await composioToolset.getTools({
        actions: ["codeinterpreter_execute_code"]
    });

    // Initialize the language model
    const llm = new ChatOpenAI({ model: "gpt-4o" });

    // Create the agent
    const prompt = await pull("hwchase17/openai-functions-agent");
    const agent = await createOpenAIFunctionsAgent({
        llm,
        tools,
        prompt
    });
    
    // Set up the agent executor
    const agentExecutor = new AgentExecutor({
        agent,
        tools,
        verbose: true
    });

    // Define the code execution function
    async function executeCodeAgent(problem) {
        const result = await agentExecutor.invoke({
            input: `Write code to solve the following problem and execute it: ${problem}`
        });
        
        return result.output;
    }
    
    // Run the agent with a sample problem
    const problem = "Write a function to calculate the Fibonacci sequence up to the 10th number and display the result.";
    
    const result = await executeCodeAgent(problem);
    console.log("Result:", result);
}

main().catch(console.error);
```

----------------------------------------

TITLE: Demonstrating Composio Integration with a Framework Agent in Python
DESCRIPTION: This demonstration script illustrates how to use the Composio integration within a target framework. It initializes the `ComposioToolSet`, retrieves specific Composio tools (e.g., GitHub actions), and then integrates these tools into a framework-specific agent. The agent is then executed to perform an action using the provided tools, showcasing the end-to-end workflow of the integration.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#_snippet_6

LANGUAGE: Python
CODE:
```
"""
Example demonstrating how to use the [Your Framework] integration with Composio.
"""

import os
import dotenv

# Import from your target framework
from targetframework import Agent, Runner

# Import from your integration
from composio_yourframework import App, Action, ComposioToolSet

# Set up environment
dotenv.load_dotenv()

def main():
    # Initialize your toolset
    toolset = ComposioToolSet()
    
    # Get specific tools
    tools = toolset.get_tools(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])
    
    # Create a framework agent with the tools
    agent = Agent(
        name="Demo Agent",
        tools=tools,
        # Other framework-specific parameters
    )
    
    # Run the agent
    result = Runner.run(
        agent, 
        "Perform an action using the integrated tools"
    )
    
    print(result)

if __name__ == "__main__":
    main()
```

----------------------------------------

TITLE: Creating GitHub Issue with Composio OpenAIToolSet in TypeScript
DESCRIPTION: This TypeScript example demonstrates creating a GitHub issue using `OpenAIToolSet` and its `executeAction` method. It requires specifying the `action` (e.g., `GITHUB_CREATE_AN_ISSUE`) and `params` like `owner`, `repo`, `title`, and `body`. The asynchronous function handles the action execution, logging success with the issue URL or an error message.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/executing-tools.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// Example: Create a GitHub Issue Directly
import { OpenAIToolSet } from "composio-core";
// Assumes toolset is initialized and authenticated

const toolset = new OpenAIToolSet();

async function createIssue() {
  console.log("Creating GitHub issue directly...");
  try {
    const result = await toolset.executeAction({
      action: "GITHUB_CREATE_AN_ISSUE", // Use Enum for type safety
      params: {
        owner: "composiohq", // Replace with actual owner
        repo: "agi", // Replace with actual repo
        title: "New Issue via Composio executeAction",
        body: "This issue was created directly using the Composio SDK.",
      },
      // entityId: "your-user-id" // Optional: Specify if not 'default'
    });

    if (result.successful) {
      console.log("Successfully created issue!");
      // Issue details are often in result.data
      console.log("Issue URL:", (result.data as any)?.html_url);
    } else {
      console.error("Failed to create issue:", result.error);
    }
  } catch (error) {
    console.error("An error occurred:", error);
  }
}

createIssue();
```

----------------------------------------

TITLE: Initiating OAuth Connection with Composio (Python)
DESCRIPTION: This snippet demonstrates how to initiate an OAuth connection for a user (Entity) with a specified external application using the Composio Python SDK. It uses `toolset.initiate_connection` with an `integration_id` and `entity_id`, and checks for the `redirectUrl` which is crucial for the next step of the OAuth flow.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/oauth.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
from composio_openai import ComposioToolSet, App

# Assumes toolset is initialized
toolset = ComposioToolSet()
user_id = "your_user_unique_id"
# Get this from your Composio Integration setup
google_integration_id = "int_google_xxxxxxxx..."

entity = toolset.get_entity(id=user_id)

try:
    print(f"Initiating OAuth connection for entity {entity.id}...")
    connection_request = toolset.initiate_connection(
        integration_id=google_integration_id,
        entity_id=user_id,
        # Optionally add: redirect_url="https://yourapp.com/final-destination"
        # if you want user sent somewhere specific *after* Composio finishes.
        # Optional add: app=App.APP_NAME
    )

    # Check if a redirect URL was provided (expected for OAuth)
    if connection_request.redirectUrl:
        print(f"Received redirect URL: {connection_request.redirectUrl}")
    else:
        print("Error: Expected a redirectUrl for OAuth flow but didn't receive one.")
        # Handle error: Maybe the integration is misconfigured?

    # Store connection_request.connectedAccountId if needed for Step 3 polling
    # connection_id_in_progress = connection_request.connectedAccountId

except Exception as e:
    print(f"Error initiating connection: {e}")
```

----------------------------------------

TITLE: Installing Composio Core SDK (TypeScript)
DESCRIPTION: This command installs the foundational `composio-core` SDK for TypeScript projects. It provides the essential functionalities required to integrate Composio into your TypeScript-based applications and frameworks.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/welcome.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
npm install composio-core
```

----------------------------------------

TITLE: Handling LLM Tool Calls with Composio (Python/TypeScript)
DESCRIPTION: This snippet demonstrates how to process the LLM's response to determine if a tool call was requested. If `response_message.tool_calls` is present, Composio's `handle_tool_calls` (Python) or `handleToolCall` (TypeScript) function is invoked to execute the tool, abstracting away authentication and API interaction details. The `execution_result` then contains the outcome of the API call.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/introduction.mdx#_snippet_4

LANGUAGE: python
CODE:
```
execution_result = None
response_message = response.choices[0].message

if response_message.tool_calls:
    print("LLM requested tool use. Executing via Composio...")
    # Composio handles auth, API call execution, and returns the result
    execution_result = toolset.handle_tool_calls(response)
    print("Execution Result from Composio:", execution_result)
else:
    print("LLM responded directly (no tool used):", response_message.content)

# Now 'execution_result' holds the data returned by the GitHub API call
# You could parse it or feed it back to the LLM for a final summary.
```

LANGUAGE: typescript
CODE:
```
let executionResult: any = null;
const responseMessage = response.choices[0].message;

if (responseMessage.tool_calls) {
    console.log("LLM requested tool use. Executing via Composio...");
    // Composio handles auth, API call execution, and returns the result
    executionResult = await toolset.handleToolCall(response);
    console.log("Execution Result from Composio:", executionResult);
} else {
    console.log("LLM responded directly (no tool used):", responseMessage.content);
}

// Now 'executionResult' holds the data returned by the GitHub API call
// You could parse it or feed it back to the LLM for a final summary.
```

----------------------------------------

TITLE: Automating Research and GitHub Issues with LlamaIndex and Composio (Python)
DESCRIPTION: This snippet demonstrates how to use LlamaIndex with Composio and Arxiv tools in Python to create an LLM agent. The agent researches a given topic on Arxiv, organizes the top results, and then creates corresponding issues in a specified GitHub repository, including proper titles, bodies, and assignees. It initializes an OpenAI LLM, loads environment variables, and sets up the agent with GitHub and Arxiv tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#_snippet_12

LANGUAGE: python
CODE:
```
import os
import dotenv

from composio_llamaindex import Action, ComposioToolSet
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI
from llama_index.agent.openai import OpenAIAgent
from llama_index.tools.arxiv.base import ArxivToolSpec

# Load environment variables
dotenv.load_dotenv()

# Initialize the language model
llm = OpenAI(model="gpt-4o")

# Set research parameters
research_topic = "LLM agents function calling"
target_repo = "composiohq/composio"
n_issues = 3

def main():
    # Get Composio toolset and add ArXiv tools
    composio_toolset = ComposioToolSet()
    github_tools = composio_toolset.get_actions(actions=[Action.GITHUB_CREATE_AN_ISSUE])
    arxiv_tool = ArxivToolSpec()
    
    # Define system message
    prefix_messages = [
        ChatMessage(
            role="system",
            content=(
                "You are now a research agent, and whatever you are "
                "requested, you will try to execute utilizing your tools."
            ),
        )
    ]
    
    # Create the agent with tools
    agent = OpenAIAgent.from_tools(
        tools=github_tools + arxiv_tool.to_tool_list(),
        llm=llm,
        prefix_messages=prefix_messages,
        max_function_calls=10,
        allow_parallel_tool_calls=False,
        verbose=True,
    )
    
    # Create the research prompt
    prompt = (
        f"Please research on Arxiv about `{research_topic}`, Organize "
        f"the top {n_issues} results as {n_issues} issues for "
        f"a github repository, finally raise those issues with proper, "
        f"title, body, implementation guidance and reference in "
        f"{target_repo} repo, as well as relevant tags and assignee as "
        "the repo owner."
    )
    
    # Execute the agent
    response = agent.chat(prompt)
    
    # Print the result
    print("Response:", response)

if __name__ == "__main__":
    main()
```

----------------------------------------

TITLE: Executing Action in Composio Entity (TypeScript)
DESCRIPTION: This method executes a specified action on the Composio platform. It requires an `actionName` and accepts optional `params` (a record of string to any), `text` (a string), and `connectedAccountId` (a string). It returns a Promise that resolves to a `Record<string, any>` representing the result of the action.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk.Entity.html#_snippet_5

LANGUAGE: TypeScript
CODE:
```
execute(actionName, params?, text?, connectedAccountId?): Promise<Record<string, any>>
```

----------------------------------------

TITLE: Defining a Custom Tool Class in Python
DESCRIPTION: This Python snippet defines the main tool class, inheriting from `composio.tools.local.base.Tool`. It specifies how to import and register actions associated with the tool and provides a placeholder for defining triggers.
SOURCE: https://github.com/composiohq/composio/blob/master/python/docs/adding-local-tool.md#_snippet_1

LANGUAGE: python
CODE:
```
import typing as t
from composio.tools.local.base import Action, Tool
from .actions.<action_name> import <ActionName>  # Import your action class

class <ToolName>(Tool):
    """
    Description of your tool.
    """

    def actions(self) -> list[t.Type[Action]]:
        return [<ActionName>]

    def triggers(self) -> list:
        return []  # If applicable, define triggers here
```

----------------------------------------

TITLE: Complete Workflow with Composio and Langchain Agents - Python
DESCRIPTION: This Python code demonstrates a full workflow using Composio's SQL and File tools, and the Code Interpreter tool with Langchain agents. It connects to a SQLite database, executes a query, saves results to a file, and then generates a bar chart from the data, saving it as an image.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#_snippet_9

LANGUAGE: Python
CODE:
```
import os
import dotenv

from composio_langchain import App, ComposioToolSet
from langchain import hub
from langchain.agents import AgentExecutor, create_openai_functions_agent
from langchain_openai import ChatOpenAI

# Load environment variables
dotenv.load_dotenv()

# Initialize the language model
llm = ChatOpenAI(model="gpt-4o")

# Initialize the Composio ToolSet
composio_toolset = ComposioToolSet()

# Get tools for SQL and File operations
sql_file_tools = composio_toolset.get_tools(apps=[App.SQLTOOL, App.FILETOOL])

# Get tools for code interpreter (for plotting graphs)
code_tools = composio_toolset.get_tools(apps=[App.CODEINTERPRETER])

# Pull the prompt template for the agent
prompt = hub.pull("hwchase17/openai-functions-agent")

# Create the agent for SQL and File operations
sql_agent = create_openai_functions_agent(llm, sql_file_tools, prompt)
sql_executor = AgentExecutor(agent=sql_agent, tools=sql_file_tools, verbose=True)

# Create the agent for data visualization
visualization_agent = create_openai_functions_agent(llm, code_tools, prompt)
visualization_executor = AgentExecutor(agent=visualization_agent, tools=code_tools, verbose=True)

# Define the SQL query task
query_task = (
    "Connect to the SQLite database 'companydb' and execute the following query: "
    "SELECT * FROM MOCK_DATA ORDER BY salary DESC LIMIT 10. "
    "Save the results to a file named 'top_salaries.txt' and return the content."
)

def main():
    # First, execute SQL query
    sql_result = sql_executor.invoke({"input": query_task})
    print(f"SQL Query Result: {sql_result['output']}")
    
    # Then, create visualization
    visualization_task = (
        f"Using the following data from the top 10 highest salaries: {sql_result['output']}\n"
        "Create a bar chart showing first_name on the x-axis and salary on the y-axis. "
        "Save the visualization as 'salary_chart.png'."
    )
    visualization_result = visualization_executor.invoke({"input": visualization_task})
    print(f"Visualization Result: {visualization_result['output']}")
    
    return "Workflow completed successfully!"

if __name__ == "__main__":
    main()
```

----------------------------------------

TITLE: Executing GitHub Get Authenticated User Action (JavaScript)
DESCRIPTION: This snippet demonstrates how to execute the `GITHUB_GET_THE_AUTHENTICATED_USER` action using the Composio `toolset`. It first checks if an `activeConnection` exists and is in an 'ACTIVE' status. The `executeAction` method is then called with the action enum and `entityId` for context. The result is checked for success, logging the GitHub username or an error message.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#_snippet_10

LANGUAGE: JavaScript
CODE:
```
// --- 4. Execute Action ---
if (activeConnection && activeConnection.status === "ACTIVE") {
    console.log(`\nExecuting action using connection ID: ${activeConnection.id}`);
    console.log(`Fetching GitHub username for entity: ${userIdInMyApp}...`);

    const user_info = await toolset.executeAction({
        action: Action.GITHUB_GET_THE_AUTHENTICATED_USER, // Use Enum
        params: {},
        // Provide context via entityId (recommended)
        entityId: userIdInMyApp
        // OR precisely target the connection (if ID was stored)
        // connectedAccountId: activeConnection.id
    });

    console.log("\n--- Execution Result ---");
    if (user_info.successful) {
        const username = (user_info.data as any)?.login ?? "N/A";
        console.log(`Successfully fetched GitHub username: ${username}`);
    } else {
        console.error(`Failed to fetch user info: ${user_info.error ?? 'Unknown error'}`);
    }
    // console.log("\nFull response:");
    // console.log(JSON.stringify(user_info, null, 2));

} else {
     console.log("\nSkipping action execution as connection is not active.");
}

    } catch (error) {
        console.error("\nAn unexpected error occurred:", error);
    }
}

// Run the async function
main();
```

----------------------------------------

TITLE: Getting GitHub Repository Topics using Composio (Python)
DESCRIPTION: This Python snippet defines a custom Composio tool to fetch topics for a GitHub repository. It leverages Composio's managed GitHub authentication by associating the action with the 'github' toolname and using the `execute_request` callable injected by Composio to make API calls without explicit credential management. It expects `owner` and `repo` as input parameters and returns a dictionary containing the topics or an error.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/custom-tools.mdx#_snippet_4

LANGUAGE: Python
CODE:
```
# Python Example using execute_request
from composio import action, ComposioToolSet
import typing as t

toolset = ComposioToolSet()

@action(toolname="github") # Associate with GitHub app for auth
def get_github_repo_topics(
    owner: Annotated[str, "Repository owner username"],
    repo: Annotated[str, "Repository name"],
    execute_request: t.Callable # Injected by Composio
) -> dict:
    """Gets the topics associated with a specific GitHub repository."""
    print(f"Getting topics for {owner}/{repo} using Composio-managed GitHub auth...")
    try:
        # Call the GitHub API endpoint using the injected function
        response_data = execute_request(
            endpoint=f"/repos/{owner}/{repo}/topics", # API path relative to base URL
            method="GET"
            # Body/parameters usually not needed when relying on managed auth
        )
        # Ensure response_data is a dictionary before accessing 'names'
        if isinstance(response_data, dict):
             return {"topics": response_data.get("names", [])}
        else:
             # Handle unexpected response format
             print(f"Warning: Unexpected response format from execute_request: {type(response_data)}")
             return {"error": "Failed to parse topics", "raw_response": response_data}

    except Exception as e:
        print(f"Error executing request for topics: {e}")
        return {"error": str(e)}

# --- Example Usage ---
# You would fetch this tool like any other:
# tools = toolset.get_tools(actions=[get_github_repo_topics])
# result = toolset.execute_action(get_github_repo_topics, params={"owner": "composiohq", "repo": "composio"})
# print(result)
```

----------------------------------------

TITLE: Complete Research Agent Workflow Execution - Python
DESCRIPTION: This comprehensive snippet combines all previous steps into a single executable block. It loads environment variables, initializes the LLM, sets up Composio tools for SerpAPI, defines the `Researcher` agent, creates a research task, executes it, and prints the final result, demonstrating a full end-to-end agent workflow.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/research_assistant.ipynb#_snippet_7

LANGUAGE: python
CODE:
```
from crewai import Agent, Task, Crew, Process
from composio_langchain import ComposioToolSet, App
from langchain_openai import ChatOpenAI
import os
import dotenv

# Load environment variables
dotenv.load_dotenv()

# Initialize the language model with OpenAI API key and model name
llm = ChatOpenAI(
    openai_api_key=os.environ["OPENAI_API_KEY"],
    model_name="gpt-4o"
)

# Setup tools using ComposioToolSet
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.SERPAPI])

# Define the Researcher agent with its role, goal, and backstory
researcher = Agent(
    role='Researcher',
    goal='Search the internet for the information requested',
    backstory="""
    You are a researcher. Using the information in the task, you find out some of the most popular facts about the topic along with some of the trending aspects.
    You provide a lot of information thereby allowing a choice in the content selected for the final blog.
    """,
    verbose=True,  # Enable verbose logging for the agent
    allow_delegation=False,  # Disable delegation
    tools=tools,  # Assign the tools to the agent
    llm=llm  # Assign the language model to the agent
)

# Define the research task with its description and expected output
task1 = Task(
    description="""
    Research about open source LLMs vs closed source LLMs.
    Your final answer MUST be a full analysis report
    """, #you can add your own topic after "Research about {your topic}"
    expected_output='When the research report is ready',  # Define the expected output
    agent=researcher  # Assign the task to the researcher agent
)

# Execute the task
task1.execute()

# Print the result of the task execution
print(task1.result)
```

----------------------------------------

TITLE: Executing Agent for GitHub Repository Star
DESCRIPTION: This Python snippet defines a task to star a GitHub repository. It then uses the `openai_client` to create a chat completion, passing the fetched GitHub `actions` as tools and the task as a user message. The response contains the model's decision on how to perform the action, leveraging OpenAI Function Calling.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/openai/README.md#_snippet_3

LANGUAGE: python
CODE:
```
my_task = "Star a repo composiohq/composio on GitHub"

# Create a chat completion request to decide on the action
response = openai_client.chat.completions.create(model="gpt-4-turbo-preview",
    tools=actions, # Passing actions we fetched earlier.
    messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": my_task}
        ]
    )

pprint(response)
```

----------------------------------------

TITLE: Defining a Custom Tool Action in Python
DESCRIPTION: This Python snippet defines a custom action class, inheriting from `composio.tools.local.base.Action`. It uses Pydantic for defining request and response schemas, sets metadata like `display_name` and `_tool_name`, and provides an `execute` method for implementing the action's core logic.
SOURCE: https://github.com/composiohq/composio/blob/master/python/docs/adding-local-tool.md#_snippet_3

LANGUAGE: python
CODE:
```
from pydantic import BaseModel, Field
from composio.tools.local.base import Action

class <RequestSchema>(BaseModel):
    # Define input schema for your action
    # Example:
    # text: str = Field(..., description="Input text for the action")

class <ResponseSchema>(BaseModel):
    # Define output schema for your action
    # Example:
    # result: str = Field(..., description="Result of the action")

class <ActionName>(Action[<RequestSchema>, <ResponseSchema>]):
    """
    Description of your action.
    """

    display_name = "Friendly name of your action"
    _request_schema = <RequestSchema>
    _response_schema = <ResponseSchema>
    _tags = ["tag1", "tag2"]  # Optional tags to categorize your action
    _tool_name = "<tool_name>"  # Tool name, same as directory name

    def execute(
        self, request_data: <RequestSchema>, authorisation_data: dict = {}
    ) -> <ResponseSchema>:
        # Implement logic to process input and return output
        # Example:
        # response_data = {"result": "Processed text: " + request_data.text}
        return {"execution_details": {"executed": True}, "response_data": response_data}
```

----------------------------------------

TITLE: Initializing ComposioToolSet with Host Workspace in Python
DESCRIPTION: This snippet demonstrates how to initialize the ComposioToolSet to run local tools directly on the host machine. It configures the workspace as WorkspaceType.Host() and then uses FILETOOL_LIST_FILES to list files in the current directory, processing the response with handle_tool_calls. It requires the 'composio_openai' and 'openai' libraries.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/workspaces/workspaces.mdx#_snippet_0

LANGUAGE: python
CODE:
```
from composio_openai import ComposioToolSet, App, Action, WorkspaceType
from openai import OpenAI

client = OpenAI()

toolset = ComposioToolSet(workspace_config=WorkspaceType.Host())
entity = toolset.get_entity(id="default")
tools = toolset.get_tools(["FILETOOL_LIST_FILES"])

question = "List all files in the current directory"

response = client.chat.completions.create(
    model="gpt-4o-mini",
    max_tokens=1024,
    tools=tools,
    messages=[{"role": "user", "content": question}],
)
result = toolset.handle_tool_calls(response)
print(result)
```

----------------------------------------

TITLE: Implementing RAG Workflow with Composio and CrewAI (Python)
DESCRIPTION: This Python snippet demonstrates how to set up a RAG workflow using Composio tools within the CrewAI framework. It initializes an OpenAI language model, configures Composio's RAG toolset, defines an agent responsible for knowledge base management, and sets up two sequential tasks: one for adding factual content and another for querying the knowledge base. The workflow is then executed to add data and retrieve an answer.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#_snippet_10

LANGUAGE: python
CODE:
```
import os
import textwrap

from composio_crewai import Action, App, ComposioToolSet
from crewai import Agent, Crew, Process, Task
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

# Load environment variables
load_dotenv()

# Initialize the language model
llm = ChatOpenAI(model="gpt-4o")

# Set up Composio tools
composio_toolset = ComposioToolSet()
  
# Get tools for RAG operations
rag_tools = composio_toolset.get_tools(apps=[App.RAG])

# Define the RAG Agent
rag_agent = Agent(
    role="RAG Knowledge Base Manager",
    goal="Manage a knowledge base using RAG tools",
    backstory="""You are an expert in managing knowledge bases and retrieving information.
      Your job is to add content to the knowledge base and retrieve answers to user queries.
      You use RAG (Retrieval-Augmented Generation) tools to efficiently store and retrieve information.""",
    verbose=True,
    allow_delegation=False,
    tools=rag_tools,
    llm=llm
)

# Define task for adding content
add_content_task = Task(
    description="""Add the following information to the knowledge base:
      
      1. Paris is the capital city of France.
      2. London is the capital city of the United Kingdom.
      3. Washington D.C. is the capital city of the United States.
      4. Tokyo is the capital city of Japan.
      5. Berlin is the capital city of Germany.
      
      Make sure to confirm that each piece of information is successfully added.""",
    expected_output="Confirmation that all information was added to the knowledge base",
    agent=rag_agent
)

# Define task for querying
query_task = Task(
    description="""Query the knowledge base to answer the following question:
      "What is the capital of France?"
      
      Return the answer with any supporting information from the knowledge base.""",
    expected_output="The answer to the question based on the knowledge base",
    agent=rag_agent,
    context=[add_content_task]  # This task depends on content being added first
)

# Create a crew with the agent and tasks
crew = Crew(
    agents=[rag_agent],
    tasks=[add_content_task, query_task],
    verbose=2,
    process=Process.sequential  # Tasks must run in order
)

# Execute the workflow
result = crew.kickoff()
print(textwrap.fill(f"Final Result: {result}", width=80))
```

----------------------------------------

TITLE: Running the Autogen Agent to Star a GitHub Repository (Python)
DESCRIPTION: This snippet defines a specific task: 'Star a repo composiohq/composio on GitHub'. It then initiates a chat between the `user_proxy` and the `chatbot` with this task, allowing the Autogen agents to collaborate and execute the GitHub star operation using the registered Composio tools. The chat history is printed upon completion.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/autogen.mdx#_snippet_5

LANGUAGE: python
CODE:
```
task = "Star a repo composiohq/composio on GitHub"
response = user_proxy.initiate_chat(chatbot, message=task)
print(response.chat_history)
```

----------------------------------------

TITLE: Creating GitHub Issue with Composio ToolSet in Python
DESCRIPTION: This Python snippet demonstrates how to create a GitHub issue directly using the `ComposioToolSet` and its `execute_action` method. It requires `action` (e.g., `Action.GITHUB_CREATE_AN_ISSUE`) and `params` including `owner`, `repo`, `title`, and `body`. The code handles success and failure, printing the issue URL on success or an error message on failure.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/executing-tools.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
toolset = ComposioToolSet()

print("Creating GitHub issue directly...")
try:
    result = toolset.execute_action(
        action=Action.GITHUB_CREATE_AN_ISSUE,
        params={
            "owner": "composiohq",  # Replace with actual owner
            "repo": "agi",  # Replace with actual repo
            "title": "New Issue via Composio execute_action",
            "body": "This issue was created directly using the Composio SDK.",
            # Other optional params like 'assignees', 'labels' can be added here
        },
        # entity_id="your-user-id" # Optional: Specify if not 'default'
    )

    if result.get("successful"):
        print("Successfully created issue!")
        # Issue details are often in result['data']
        print("Issue URL:", result.get("data", {}).get("html_url"))
    else:
        print("Failed to create issue:", result.get("error"))

except Exception as e:
    print(f"An error occurred: {e}")
```

----------------------------------------

TITLE: Simplifying Gmail Send Email Schema (Schema Processor)
DESCRIPTION: This example demonstrates how to use a schema processor to modify the `GMAIL_SEND_EMAIL` tool's definition before it's presented to the LLM. The `simplify_gmail_send_schema` function removes the `recipient_email` and `attachment` parameters, making the tool simpler for the LLM to interact with, assuming these parameters are handled by the application logic.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/processing-tools.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
from composio_openai import ComposioToolSet, Action

toolset = ComposioToolSet()

def simplify_gmail_send_schema(schema: dict) -> dict:
    """Removes recipient_email and attachment params from the schema."""
    params = schema.get("parameters", {}).get("properties", {})
    params.pop("recipient_email", None)
    params.pop("attachment", None)
    # We could also modify descriptions here, e.g.:
    # schema["description"] = "Sends an email using Gmail (recipient managed separately)."
    return schema

# Get tools with the modified schema
processed_tools = toolset.get_tools(
    actions=[Action.GMAIL_SEND_EMAIL],
    processors={
        "schema": {Action.GMAIL_SEND_EMAIL: simplify_gmail_send_schema}
    }
)

# Now, when 'processed_tools' are given to an LLM, it won't see
# the 'recipient_email' or 'attachment' parameters in the schema.
# print(processed_tools[0]) # To inspect the modified tool definition
```

----------------------------------------

TITLE: Setting Up an AI Agent with Langchain and Composio for GitHub Issues
DESCRIPTION: The `executeAgent` function configures and runs an AI agent using Langchain, integrated with Composio tools. It first ensures the user's GitHub account is connected, then retrieves the `github_issues_create` tool from Composio. The agent is built with an OpenAI LLM and a predefined prompt, and finally invoked to create a GitHub issue based on provided details.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain-js.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
async function executeAgent (entityName){
        // Create entity and get tools
        const entity = toolset.client.getEntity(entityName)
        await setupUserConnectionIfNotExists(entity.id);
        const tools = await toolset.getTools({ actions: ["github_issues_create"] },entity.id);

        // Create an agent
        const prompt = await pull("hwchase17/openai-functions-agent");
        const llm = new ChatOpenAI({
            model: "gpt-4o",
            apiKey: process.env.OPEN_AI_API_KEY
        });
  
        const agent = await createOpenAIFunctionsAgent({
            llm,
            tools: tools,
            prompt,
        });
        const agentExecutor = new AgentExecutor({agent,tools,verbose: true,});

        // Invoke the agent
        const body = "TITLE: HELLO WORLD, DESCRIPTION: HELLO WORLD for the repo - himanshu-dixit/custom-repo-breaking"
        const result = await agentExecutor.invoke({
            input: "Please create another github issue with the summary and description with the following details of another issue:- , " + JSON.stringify(body)
        });

        console.log(result.output)
}
```

----------------------------------------

TITLE: Filtering Composio ToolSet by Specific Applications (Python)
DESCRIPTION: This Python snippet illustrates how to initialize a `ComposioToolSet` to limit the agent's access to a predefined set of applications, in this case, `App.ASANA` and `App.GITHUB`. This filtering mechanism helps streamline operations and enhance security by ensuring the agent only interacts with approved external services.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/crew_ai/README.md#_snippet_6

LANGUAGE: python
CODE:
```
toolsAsanaGithub = ComposioToolSet(apps=[App.ASANA, App.GITHUB])
```

----------------------------------------

TITLE: Connect Your GitHub Account to Composio
DESCRIPTION: This section provides instructions for connecting your GitHub account to Composio, either via CLI or programmatically, to enable GitHub actions for the agent.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#_snippet_2

LANGUAGE: CLI
CODE:
```
composio login
composio add github
```

LANGUAGE: Python
CODE:
```
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")
```

LANGUAGE: TypeScript
CODE:
```
const connection = await toolset.connectedAccounts.initiate({appName: "github"})
console.log(`Open this URL to authenticate: ${connection.redirectUrl}`);
```

----------------------------------------

TITLE: Wrapping Composio Tool for OpenAI Agents in Python
DESCRIPTION: This Python function `_wrap_tool` converts a Composio tool schema into an OpenAI Agents `FunctionTool` object. It defines an `execute_action_wrapper` to handle JSON parameter parsing, execute the Composio action, and serialize results back to a JSON string, ensuring consistent error handling. The function also modifies the schema to meet OpenAI's specific requirements.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#_snippet_12

LANGUAGE: Python
CODE:
```
def _wrap_tool(
    self,
    schema: t.Dict[str, t.Any],
    entity_id: t.Optional[str] = None,
) -> FunctionTool:
    """Wraps composio tool as OpenAI Agents FunctionTool object."""
    action = schema["name"]
    description = schema["description"]
    schema_params = schema["parameters"]
    
    # Create a function that accepts explicit JSON string for parameters
    def execute_action_wrapper(ctx, args_json):
        """Execute Composio action with the given arguments."""
        try:
            # Parse the args_json into a dict
            import json
            kwargs = json.loads(args_json) if args_json else {}
            
            result = self.execute_action(
                action=action,
                params=kwargs,
                entity_id=entity_id or self.entity_id,
                _check_requested_actions=True,
            )
            
            # Serialize result to JSON string for OpenAI API
            if not isinstance(result, dict):
                result_dict = {"result": result}
            else:
                result_dict = result
            
            return json.dumps(result_dict)
            
        except Exception as e:
            # Handle errors consistently
            return json.dumps({
                "successful": False, 
                "error": str(e),
                "data": None,
            })
    
    # Add required schema properties for OpenAI
    modified_schema = schema_params.copy()
    modified_schema["additionalProperties"] = False
    
    # Create a framework-specific tool
    tool = FunctionTool(
        name=action,
        description=description,
        params_json_schema=modified_schema,
        on_invoke_tool=execute_action_wrapper,
        strict_json_schema=True,
    )
    
    return tool
```

----------------------------------------

TITLE: Connecting GitHub Account with Composio
DESCRIPTION: This section demonstrates how to establish a connection between Composio and a GitHub account. It provides CLI commands for direct authentication and programmatic methods in Python and JavaScript to initiate the OAuth flow, returning a URL for user authentication.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain.mdx#_snippet_2

LANGUAGE: CLI
CODE:
```
composio login
composio add github
```

LANGUAGE: Python
CODE:
```
request = composio_toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")
```

LANGUAGE: JavaScript
CODE:
```
const connection = await toolset.connectedAccounts.initiate({appName: "github"})
console.log(`Open this URL to authenticate: ${connection.redirectUrl}`);
```

----------------------------------------

TITLE: Defining the LangGraph Workflow Graph
DESCRIPTION: This section constructs the core LangGraph workflow, defining the nodes ('agent' for LLM interaction, 'tools' for tool execution) and the conditional edges that dictate the flow of messages. This graph orchestrates the agent's behavior, from initial input to tool use and final output.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#_snippet_6

LANGUAGE: Python
CODE:
```
workflow = StateGraph(MessagesState)

workflow.add_node("agent", call_model)
workflow.add_node("tools", tool_node)
workflow.add_edge("__start__", "agent")
workflow.add_conditional_edges(
    "agent",
    should_continue,
)
workflow.add_edge("tools", "agent")

app = workflow.compile()
```

LANGUAGE: TypeScript
CODE:
```
const workflow = new StateGraph(MessagesAnnotation)
    .addNode("agent", callModal)
    .addEdge(START, "agent")
    .addNode("tools", toolNode)
    .addConditionalEdges("agent", shouldContinue)
    .addEdge("tools", "agent");

const app = workflow.compile();
```

----------------------------------------

TITLE: Defining Task and Executing the AI Agent Workflow
DESCRIPTION: This section outlines how to define a specific task for the AI agent and initiate its execution. The Python example creates a `Task` for the `python_executor_agent` to calculate the Fibonacci sequence, then sets up a `Crew` with the agent and task, and finally kicks off the process to get the result.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/code-execution-agent.mdx#_snippet_5

LANGUAGE: python
CODE:
```
# Define a task for the agent
task = Task(
    description="""Write a Python function to calculate the Fibonacci sequence up to the 10th number.
                      Then, execute the code and return the result.""",
    expected_output="The Fibonacci sequence and the execution result",
    agent=python_executor_agent
)

# Create a crew with the agent and task
crew = Crew(
    agents=[python_executor_agent],
    tasks=[task],
    verbose=2,
    process=Process.sequential
)

# Execute the task
result = crew.kickoff()
print(f"Result: {result}")
```

----------------------------------------

TITLE: Defining Custom Tools with Python's @action Decorator
DESCRIPTION: This snippet demonstrates how to define custom tools in Python using the `@action` decorator from the `composio` library. It shows how Composio infers tool schema and description from function names, docstrings, and type hints. It also illustrates how to provide a custom tool name.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/custom-tools.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
from composio import action
from typing import Annotated # Recommended for descriptions

# Define a simple function
@action # Decorate it to make it a Composio tool
def add_numbers(
    a: Annotated[int, "The first number to add"],
    b: Annotated[int, "The second number to add"]
) -> int:
    """Adds two integers and returns the result."""
    print(f"Executing add_numbers: Adding {a} and {b}")
    return a + b

# Optionally, provide a custom name for the tool
@action(toolname="calculator_multiply")
def multiply_numbers(
    a: Annotated[int, "The first number"],
    b: Annotated[int, "The second number"]
) -> int:
    """Multiplies two integers."""
    print(f"Executing multiply_numbers: Multiplying {a} by {b}")
    return a * b
```

----------------------------------------

TITLE: Executing Action with Composio SDK (TypeScript)
DESCRIPTION: This method allows users to execute a specific action provided by the Composio SDK. It requires the action name and a record of parameters, optionally accepting an entity ID. The method returns a Promise that resolves with the action's result as a key-value pair record.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/frameworks_langchain.LangchainToolSet.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
execute_action(action, params, entityId?): Promise<Record<string, any>>
```

----------------------------------------

TITLE: Defining ExecuteActionData Type in Composio SDK (TypeScript)
DESCRIPTION: This TypeScript type alias defines the structure for `ExecuteActionData`, used when executing actions. It includes `actionName` (required) and an optional `requestBody` with parameters like `appName`, `connectedAccountId`, `input` (for structured parameters), and `text` (for NLP-based input).
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.ExecuteActionData.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
ExecuteActionData: {
    actionName: string;
    requestBody?: {
        appName?: string;
        connectedAccountId?: string;
        input?: {
            [key: string]: unknown;
        };
        text?: string;
    };
}
```

----------------------------------------

TITLE: Defining CrewAI Agent, Task, and Crew for GitHub Interaction (Python)
DESCRIPTION: This code defines the core components of a CrewAI application: an `Agent` with a specific role and goal for GitHub interactions, a `Task` describing the action to be performed (starring a repository), and a `Crew` that orchestrates the agent and task. The agent is configured with the fetched GitHub tools and the initialized LLM.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/crewai.mdx#_snippet_5

LANGUAGE: python
CODE:
```
crewai_agent = Agent(
    role="GitHub Agent",
    goal="You take action on GitHub using GitHub APIs",
    backstory="You are AI agent that is responsible for taking actions on GitHub on behalf of users using GitHub APIs",
    verbose=True,
    tools=tools,
    llm=llm,
)

task = Task(
    description="Star a repo composiohq/composio on GitHub",
    agent=crewai_agent,
    expected_output="Status of the operation"
)

crew = Crew(
    agents = [crewai_agent],
    tasks = [task]
)
```

----------------------------------------

TITLE: Setting Up Composio Tools and Hono App for Email Processing (JavaScript)
DESCRIPTION: This JavaScript snippet initializes a Hono application and configures Composio tools for Gmail integration within a Cloudflare Pages environment. It sets up an endpoint to handle newsletter summarization requests, including logic for validating connection IDs and retrieving necessary Gmail actions. The snippet also calculates date ranges for email fetching.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#_snippet_9

LANGUAGE: JavaScript
CODE:
```
import { Hono } from "hono";
import { handle } from "hono/cloudflare-pages";
import { CloudflareToolSet } from "composio-core";
import { ChatOpenAI } from "@langchain/openai";
import dotenv from 'dotenv';

dotenv.config();

// Initialize the language model
const llm = new ChatOpenAI({ model: "gpt-4o" });

// Create Hono app
const app = new Hono();

// Configure Composio
const composioToolset = new CloudflareToolSet({
    apiKey: process.env.COMPOSIO_API_KEY
});

// Function to set up connected account
const setupConnection = async (c) => {
    const connectionId = c.req.headers.get("x-connection-id");
    
    if (!connectionId) {
        return { 
            ok: false, 
            error: "No connection ID provided in headers" 
        };
    }
    
    return { ok: true, connectionId };
};

app.post("/summarize-newsletters", async (c) => {
    // Set up connection
    const { ok, connectionId, error } = await setupConnection(c);
    if (!ok) return c.json({ error }, 400);
    
    // Get Gmail tools
    const tools = await composioToolset.getTools({
        actions: ["gmail_list_messages", "gmail_get_message", "gmail_send_email"],
        connectionId
    });
    
    // Get today's date and the date from 7 days ago
    const today = new Date().toLocaleDateString("en-US", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit"
    }).replace(/\//g, "/");
    
    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toLocaleDateString("en-US", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit"
    }).replace(/\//g, "/");
    
    try {

```

----------------------------------------

TITLE: Initiating and Activating GitHub Connection with Composio (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates the full OAuth connection flow for GitHub using Composio. It initializes a `ToolSet`, identifies a user and app, initiates a connection request, handles the redirect URL for user authorization, and then polls until the connection becomes active. It also includes basic error handling and a fallback for non-OAuth flows.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
// filename: connectAndFetchGithub.ts
import { OpenAIToolSet, Action, App, ConnectionRequest } from "composio-core";
import dotenv from "dotenv";

// Load environment variables from .env file
// Ensure COMPOSIO_API_KEY is set
dotenv.config();

// Helper function to introduce delay
const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

async function main() { // Renamed to main for standard practice
    // --- 1. Identify User & App ---
    const userIdInMyApp = "user-quickstart-ts-example"; // Example user ID
    const appToConnect = App.GITHUB; // Use Enum

    console.log(`--- Starting GitHub connection for Entity: ${userIdInMyApp} ---`);

    const toolset = new OpenAIToolSet(); // Initialize ToolSet
    let connectionRequest: ConnectionRequest | null = null;
    let activeConnection: any = null; // Initialize variable

    try {
        const entity = await toolset.getEntity(userIdInMyApp);

        // --- 2. Initiate Connection ---
        console.log(`Initiating ${appToConnect} connection...`);
        // Use appName; SDK finds appropriate integration
        connectionRequest = await entity.initiateConnection({
            appName: appToConnect,
        });

        // --- 3. Handle Redirect & Wait for Activation (OAuth) ---
        if (connectionRequest?.redirectUrl) {
            console.log("\n!!! ACTION REQUIRED !!!");
            console.log(`Please visit this URL to authorize the connection:\n${connectionRequest.redirectUrl}\n`);
            console.log("Waiting for connection to become active (up to 120 seconds)...");

            try {
                // Poll Composio until the connection is marked active
                activeConnection = await connectionRequest.waitUntilActive(120); // Wait up to 120 seconds
                console.log(`\nConnection successful! ID: ${activeConnection.id}`);
                // In a real app, you'd store activeConnection.id linked to userIdInMyApp
            } catch (e) {
                console.error("Error waiting for connection:", e);
                console.error("Please ensure you visited the URL and approved the connection.");
                return; // Exit if connection failed
            }
        } else if (connectionRequest?.connectedAccountId) {
             // Handle non-OAuth flows if needed
             console.log("Connection established (non-OAuth flow). Fetching details...");
             // Wait a moment for backend processing if needed, then fetch details
             await sleep(2000); // Small delay might be needed
             activeConnection = await toolset.client.connectedAccounts.get({
                 connectedAccountId: connectionRequest.connectedAccountId
             });
              if (activeConnection.status !== "ACTIVE") {
                 console.error(`Connection is not active (Status: ${activeConnection.status}). Exiting.`);
                 return;
              }
              console.log(`Connection active! ID: ${activeConnection.id}`);
        } else {
             console.error("Failed to initiate connection properly.");
             return;
```

----------------------------------------

TITLE: Creating GitHub Integration Programmatically (Python)
DESCRIPTION: This Python example illustrates how to programmatically create a GitHub integration using the `composio_openai` SDK. It configures an OAuth2 integration utilizing Composio's default OAuth application, and the resulting `integration.id` is printed. The commented section indicates where custom OAuth credentials could be provided.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/integration.mdx#_snippet_2

LANGUAGE: python
CODE:
```
from composio_openai import App, ComposioToolSet

toolset = ComposioToolSet()

integration = toolset.create_integration(
    app=App.GITHUB,
    auth_mode="OAUTH2",
    use_composio_oauth_app=True,
    # For use_composio_oauth_app=False, you can provide your own OAuth app credentials here
    # auth_config={
    #     "client_id": "123456",
    #     "client_secret": "123456"
    # }
)
print(integration.id)
```

----------------------------------------

TITLE: Configuring and Using ComposioToolSet with Fly.io Workspace (Python)
DESCRIPTION: This Python snippet demonstrates how to initialize `ComposioToolSet` with `WorkspaceType.Flyio`, configuring it with a Fly.io API token, optional Docker image, exposed ports, and environment variables. It then retrieves a specific tool (`FILETOOL_LIST_FILES`) and uses an OpenAI client to generate a response that triggers this tool, effectively listing files on the configured Fly.io instance. This setup allows AI models to interact with applications deployed on Fly.io via Composio.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/workspaces/workspaces.mdx#_snippet_6

LANGUAGE: python
CODE:
```
from composio_openai import ComposioToolSet, App, Action, WorkspaceType
from openai import OpenAI

client = OpenAI()

toolset = ComposioToolSet(workspace_config=WorkspaceType.Flyio(
    token="your_flyio_token",  # Required: Fly.io API token
    image="your-custom-image:tag",  # Optional: Docker image to use
    ports=[{  # Optional: Additional ports to expose
        "ports": [
            {
                "port": 3000,
                "handlers": ["http"]
            }
        ]
    }],
    environment={"KEY": "VALUE"}
))
tools = toolset.get_tools(["FILETOOL_LIST_FILES"])

response = client.chat.completions.create(
    model="gpt-4o-mini",
    max_tokens=1024,
    tools=tools,
    messages=[{"role": "user", "content": "List files in Fly.io instance"}],
)
result = toolset.handle_tool_calls(response)
print(result)
```

----------------------------------------

TITLE: Enabling Slack 'New Message Received' Trigger with ComposioToolSet (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to enable the 'SLACK_RECEIVE_MESSAGE' trigger. It initializes ComposioToolSet, retrieves a user entity, and then uses 'setupTrigger' to activate the trigger for the Slack application with an empty configuration.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import { ComposioToolSet } from "composio-core";
const toolset = new ComposioToolSet();

const userId = "default";

const entity = await toolset.getEntity(userId);

const trigger = await toolset.triggers.get({
  triggerId: "SLACK_RECEIVE_MESSAGE",
});

const res = await entity.setupTrigger({
  triggerName: "SLACK_RECEIVE_MESSAGE",
  app: "slack",
  config: {},
});

console.log(res.status);
```

----------------------------------------

TITLE: Installing Composio SDK (JavaScript)
DESCRIPTION: This command installs the `composio-core` package using npm, which is the Composio SDK for JavaScript. It's the first step to integrate Composio functionalities into a JavaScript project.
SOURCE: https://github.com/composiohq/composio/blob/master/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install composio-core
```

----------------------------------------

TITLE: Initializing Composio ToolSet and OpenAI Client (TypeScript)
DESCRIPTION: This snippet initializes the `OpenAIToolSet` from `composio-core` and the `OpenAI` client. Similar to the Python version, the `OpenAIToolSet` automatically uses `COMPOSIO_API_KEY` from environment variables and defaults to the 'default' entity.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/quickstart.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { OpenAIToolSet } from "composio-core";
import { OpenAI } from "openai";

// Initialize Composio ToolSet
// It automatically picks up COMPOSIO_API_KEY from env vars
// Uses the 'default' entity_id if not specified
const toolset = new OpenAIToolSet();
const client = new OpenAI();
```

----------------------------------------

TITLE: Getting GitHub Repository Topics using Composio (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates creating a custom Composio tool to retrieve GitHub repository topics. It uses Composio's `createAction` method, associating it with the 'github' tool for managed authentication. The `callback` function receives `inputParams` (owner, repo) and an `executeRequest` function, which is used to call the GitHub API endpoint. It processes the API response and returns it in Composio's expected format, handling potential errors.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/custom-tools.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
// TypeScript Example using executeRequest
import { OpenAIToolSet, App, RawExecuteRequestParam, ActionExecutionResDto, ParamPlacement } from "composio-core";
import { z } from "zod";

const toolset = new OpenAIToolSet();

await toolset.createAction({
    actionName: "get_github_repo_topics",
    toolName: "github", // Associate with GitHub app for managed auth
    description: "Gets the topics associated with a specific GitHub repository.",
    inputParams: z.object({
        owner: z.string().describe("Repository owner username"),
        repo: z.string().describe("Repository name"),
    }),
    // Callback receives input, credentials (usually undefined here), and executeRequest
    callback: async (inputParams, _authCredentials, executeRequest): Promise<ActionExecutionResDto> => {
         // Type assertion for validated input
         const { owner, repo } = inputParams as { owner: string, repo: string };
         console.log(`Getting topics for ${owner}/${repo} using Composio-managed GitHub auth...`);
         try {
             // Call executeRequest - Composio injects auth for 'github'
             const response = await executeRequest({
                 endpoint: `/repos/${owner}/${repo}/topics`, // API path
                 method: "GET",
                 // No body/parameters needed for standard managed auth GET request
             });

             // Process response and return in Composio's expected format
             // Assuming response directly contains the API data structure
             const topics = (response as any)?.names ?? []; // Safely extract topics
             return { successful: true, data: { topics: topics } };

         } catch (e) {
             console.error("Error calling executeRequest for topics:", e);
             // Return error in Composio's expected format
             return { successful: false, error: String(e) };
         }
    }
});

// --- Example Usage ---
// You would fetch this tool like any other:
// const tools = await toolset.getTools({ actions: ["get_github_repo_topics"] });
// const result = await toolset.executeAction({ action: "get_github_repo_topics", params: { owner: "composiohq", repo: "composio" } });
// console.log(result);
```

----------------------------------------

TITLE: Applying Processors to Composio Tools (Conceptual)
DESCRIPTION: This snippet illustrates the conceptual structure for integrating custom processor functions (schema, pre, post) with Composio's `get_tools` method. It shows how to map different processing stages and specific `Action` types to user-defined Python functions, providing a high-level overview of the processor mechanism.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/processing-tools.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
# Conceptual structure for applying processors

def my_schema_processor(schema: dict) -> dict: ...
def my_preprocessor(inputs: dict) -> dict: ...
def my_postprocessor(result: dict) -> dict: ...

tools = toolset.get_tools(
    actions=[Action.SOME_ACTION],
    processors={
        # Applied BEFORE the LLM sees the schema
        "schema": {Action.SOME_ACTION: my_schema_processor},

        # Applied BEFORE the tool executes
        "pre": {Action.SOME_ACTION: my_preprocessor},

        # Applied AFTER the tool executes, BEFORE the result is returned
        "post": {Action.SOME_ACTION: my_postprocessor}
    }
)
```

----------------------------------------

TITLE: Defining the RAG Knowledge Base Agent
DESCRIPTION: This snippet defines the RAG agent. The Python version uses `crewai.Agent` to create a 'RAG Knowledge Base Manager' with a specific role, goal, backstory, and assigned RAG tools and LLM. The JavaScript version asynchronously creates an agent using `createOpenAIFunctionsAgent` from `langchain/agents` and `pull` from `langchain/hub`, then sets up an `AgentExecutor` to run it with the specified tools and LLM.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#_snippet_3

LANGUAGE: Python
CODE:
```
# Define the RAG Agent
rag_agent = Agent(
    role="RAG Knowledge Base Manager",
    goal="Manage a knowledge base using RAG tools",
    backstory="""You are an expert in managing knowledge bases and retrieving information.
    Your job is to add content to the knowledge base and retrieve answers to user queries.
    You use RAG (Retrieval-Augmented Generation) tools to efficiently store and retrieve information.""",
    verbose=True,
    allow_delegation=False,
    tools=rag_tools,
    llm=llm
)
```

LANGUAGE: JavaScript
CODE:
```
// Create the agent
const createAgent = async (tools) => {
    const prompt = await pull("hwchase17/openai-functions-agent");
    const agent = await createOpenAIFunctionsAgent({
        llm,
        tools,
        prompt
    });
    
    // Set up the agent executor
    return new AgentExecutor({
        agent,
        tools,
        verbose: true
    });
};
```

----------------------------------------

TITLE: Fetching Specific Actions with OpenAIToolSet in TypeScript
DESCRIPTION: This snippet illustrates how to initialize OpenAIToolSet and asynchronously fetch a specific tool by its string equivalent action name. It demonstrates retrieving the schema for a single, precisely identified action, such as starring a GitHub repository.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import { OpenAIToolSet } from "composio-core";

// Initialize ToolSet (assuming API key is in env)
const toolset = new OpenAIToolSet();

async function fetchSpecificTool() {
    // Fetch only the tool for starring a GitHub repo
    const githubStarTool = await toolset.getTools({
        actions: ["GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"]
    });

    console.log(githubStarTool);
    // Output will contain the schema for the specified action.
}

fetchSpecificTool();
```

----------------------------------------

TITLE: Defining Query Task for RAG System (Python)
DESCRIPTION: This Python snippet defines a `Task` object for querying the knowledge base. It specifies the exact question to be asked and the expected format of the output. The task is configured to depend on the `add_content_task`, ensuring that content is available before a query is attempted.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#_snippet_6

LANGUAGE: python
CODE:
```
# Define task for querying
query_task = Task(
    description="""Query the knowledge base to answer the following question:
    "What is the capital of France?"
    
    Return the answer with any supporting information from the knowledge base.""",
    expected_output="The answer to the question based on the knowledge base",
    agent=rag_agent,
    context=[add_content_task]  # This task depends on content being added first
)
```

----------------------------------------

TITLE: Connecting GitHub Account with Composio
DESCRIPTION: This step details how to establish a connection between Composio and your GitHub account, which is a prerequisite for interacting with GitHub repositories. It provides options for both CLI-based and programmatic authentication flows, guiding users to obtain the necessary redirect URL for authorization.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
composio login
composio add github
```

LANGUAGE: Python
CODE:
```
request = composio_toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")
```

LANGUAGE: TypeScript
CODE:
```
const connection = await composioToolset.connectedAccounts.initiate({appName: "github"})
console.log(`Open this URL to authenticate: ${connection.redirectUrl}`);
```

----------------------------------------

TITLE: Linking GitHub Account to Composio
DESCRIPTION: This command links a GitHub account to the default Composio Entity, handling the OAuth flow. Users must follow terminal and browser prompts to authorize Composio for GitHub access.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/quickstart.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
composio add github
```

----------------------------------------

TITLE: Exposing Research Agent via Express.js API
DESCRIPTION: This JavaScript snippet sets up an Express.js GET endpoint `/research` to trigger the research agent. It demonstrates fetching necessary tools, creating an assistant, constructing a dynamic prompt, initiating a thread and run with the assistant, handling tool calls, and finally returning the results or an error. It also includes the server startup logic.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#_snippet_11

LANGUAGE: javascript
CODE:
```
// Create endpoint to trigger the research
app.get('/research', async (req, res) => {
    try {
        // Get the tools
        const tools = await getTools();
        
        // Create assistant
        const assistant = await createAssistant(tools);
        
        // Create the research prompt
        const prompt = `Please research about \`${researchTopic}\`, organize \n                  the top ${nIssues} results as ${nIssues} issues for \n                  a GitHub repository, and finally raise those issues with proper \n                  title, body, implementation guidance, and references in \n                  the ${targetRepo} repo, as well as relevant tags and assignees as \n                  the repo owner.`;
        
        // Create a thread with the user's request
        const thread = await client.beta.threads.create({
            messages: [{
                role: "user",
                content: prompt
            }]
        });
        
        // Start the assistant run
        let run = await client.beta.threads.runs.create(thread.id, {
            assistant_id: assistant.id,
        });
        
        // Handle tool calls and wait for completion
        run = await toolset.wait_and_handle_assistant_tool_calls(client, run, thread);
        
        // Check if the run completed successfully
        if (run.status === "completed") {
            const messages = await client.beta.threads.messages.list(thread.id);
            res.json({ status: 'success', messages: messages.data });
        } else {
            res.status(500).json({ status: 'error', message: 'Run did not complete', run });
        }
    } catch (error) {
        console.error(error);
        res.status(500).json({ status: 'error', message: error.message });
    }
});

// Start the Express server
app.listen(PORT, () => {
    console.log(`Research Agent server is running on port ${PORT}`);
});
```

----------------------------------------

TITLE: Filtering Composio Tools for Specific Apps (Python)
DESCRIPTION: This Python snippet shows how to limit the Google AI model's access to tools from only specified applications. It configures the `ComposioToolset` to include tools exclusively from Asana and GitHub, preventing interaction with other connected apps.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/google.mdx#_snippet_6

LANGUAGE: python
CODE:
```
# To restrict models from using all tools, filter specific tools 
actions = composio_toolset.get_tool(apps=[App.ASANA, App.GITHUB]) 
```

----------------------------------------

TITLE: Creating and Executing an AI Agent with OpenAI and Composio (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to initialize OpenAI and Composio SDKs, retrieve pre-configured GitHub tools, create an OpenAI assistant, and then execute a task (starring a GitHub repository) using the assistant and handle tool calls. It requires `COMPOSIO_API_KEY` and `OPENAI_API_KEY` to be set as environment variables.
SOURCE: https://github.com/composiohq/composio/blob/master/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import { OpenAIToolSet } from "composio-core";
import OpenAI from "openai";

const toolset = new OpenAIToolSet({ apiKey: process.env.COMPOSIO_API_KEY });
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const tools = await toolset.getTools({ 
  actions: ["GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"] 
});

async function createGithubAssistant(openai, tools) {
  return await openai.beta.assistants.create({
    name: "Github Assistant",
    instructions: "You're a GitHub Assistant, you can do operations on GitHub",
    tools: tools,
    model: "gpt-4o"
  });
}

async function executeAssistantTask(openai, toolset, assistant, task) {
  const thread = await openai.beta.threads.create();
  
  const run = await openai.beta.threads.runs.create(thread.id, {
    assistant_id: assistant.id,
    instructions: task,
    tools: tools,
    model: "gpt-4o",
    stream: false
  });
  
  const call = await toolset.waitAndHandleAssistantToolCalls(openai, run, thread);
  console.log(call);
}

(async () => {
  const githubAssistant = await createGithubAssistant(openai, tools);
  
  await executeAssistantTask(
    openai,
    toolset,
    githubAssistant,
    "Star the repository 'composiohq/composio'"
  );
})();
```

----------------------------------------

TITLE: Executing RAG Workflow with Crew (Python)
DESCRIPTION: This Python code orchestrates the complete RAG workflow using a `Crew` object. It initializes the crew with the RAG agent and a sequence of tasks (add content, then query). The `process=Process.sequential` ensures tasks run in order, and `crew.kickoff()` executes the entire workflow, printing the final result.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#_snippet_8

LANGUAGE: python
CODE:
```
# Create a crew with the agent and tasks
crew = Crew(
    agents=[rag_agent],
    tasks=[add_content_task, query_task],
    verbose=2,
    process=Process.sequential  # Tasks must run in order
)

# Execute the workflow
result = crew.kickoff()
print(textwrap.fill(f"Final Result: {result}", width=80))
```

----------------------------------------

TITLE: Create Endpoint and Interact with GitHub Tools via AI
DESCRIPTION: Defines a POST endpoint that fetches GitHub-specific tools using 'CloudflareToolSet'. It constructs a user instruction to star a repository, prepares messages for the AI model, and then invokes the Cloudflare AI service ('c.env.AI.run') with the specified model, messages, and tools. The response from the AI, which includes tool calls, is then handled by 'toolset.handleToolCall', with error handling included.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/cloudflare.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
app.post('/', async (c) => {
    const toolset = new CloudflareToolSet();

    try {
        const tools = await toolset.getTools({ apps: ['github'] });
        const instruction = 'Star the repository "composiohq/composio"';    

        let messages = [
            { role: 'system', content: '' },
            { role: 'user', content: instruction }
        ];

        const config = {
            model: '@hf/nousresearch/hermes-2-pro-mistral-7b'
        };

        const toolCallResp = await c.env.AI.run(config.model, {
            messages,
            tools
        });

        await toolset.handleToolCall(toolCallResp, entity.id);
        return c.json({ messages: "Your issue has been created" });
    } catch (err) {
        console.log(err);
        return c.text('Something went wrong', 500);
    }

    export default app;
});
```

----------------------------------------

TITLE: Running Complete RAG Workflow (JavaScript)
DESCRIPTION: This main asynchronous JavaScript function executes the full RAG workflow. It first retrieves necessary tools and creates an agent executor. It then sequentially calls `addContent` to populate the knowledge base and `queryKnowledgeBase` to retrieve information, demonstrating an end-to-end RAG process. Error handling is included for robustness.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
// Main function to run the RAG workflow
(async () => {
          try {
              const tools = await getTools();
              const agentExecutor = await createAgent(tools);
              
              // Add content first
              await addContent(agentExecutor);
              
              // Then query the knowledge base
              await queryKnowledgeBase(agentExecutor);
              
              console.log("RAG workflow completed successfully");
          } catch (error) {
              console.error("Error:", error);
          }
      })();
```

----------------------------------------

TITLE: Handling Incoming Webhook Requests with Express - TypeScript
DESCRIPTION: This TypeScript Express application creates a `/webhook` endpoint to handle incoming webhook requests. It uses `body-parser` to parse JSON payloads, logs the received data, and sends a success response. This server demonstrates how to set up a webhook receiver for Composio events.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_11

LANGUAGE: TypeScript
CODE:
```
import express from 'express';
import type { Request, Response } from 'express';
import bodyParser from 'body-parser';

const app = express();
app.use(bodyParser.json());

app.post('/webhook', async (req: Request, res: Response) => {
    const payload = req.body;
    console.log('Received webhook payload:');
    console.log(JSON.stringify(payload, null, 2));
    res.status(200).json({ status: 'success', message: 'Webhook received' });
});

const PORT = process.env.PORT || 8000;

app.listen(PORT, () => {
    console.log(`Server is running on http://0.0.0.0:${PORT}`);
});
```

----------------------------------------

TITLE: Defining User Connection Method for GitHub with Composio
DESCRIPTION: This asynchronous function, `setupUserConnectionIfNotExists`, manages user connections to applications like GitHub via Composio. It checks if an entity (user) already has a connection; if not, it initiates a new connection, provides a redirect URL for authentication, and waits for the connection to become active. This ensures the agent has the necessary permissions to interact with the user's accounts.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain-js.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
const toolset = new LangchainToolSet({ apiKey: process.env.COMPOSIO_API_KEY, });

async function setupUserConnectionIfNotExists(entityId) {
        const entity = toolset.client.getEntity(entityId);
        const connection = await entity.getConnection({ appName: "GITHUB" });

        if (!connection) {
            // If this entity/user hasn't already connected the account
            const connection = await entity.initiateConnection({appName: appName});
            console.log("Log in via: ", connection.redirectUrl);
           return connection.waitUntilActive(60);
        }

       return connection;
}
```

----------------------------------------

TITLE: Executing GitHub Tool Call via LLM (Python)
DESCRIPTION: This Python code demonstrates how to use Composio with an LLM to execute a GitHub tool call. It retrieves the `GITHUB_GET_THE_AUTHENTICATED_USER` tool, constructs messages for the OpenAI chat completion API, and then uses `toolset.handle_tool_calls` to process the LLM's tool usage decision and execute the action.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/quickstart.mdx#_snippet_4

LANGUAGE: python
CODE:
```
# Directly execute the action to get the authenticated user's info
# Composio uses the connection linked via 'composio add github'
tools = toolset.get_tools(actions=[Action.GITHUB_GET_THE_AUTHENTICATED_USER])

task = "Get my GitHub username."
messages = [
    {"role": "system", "content": "You are a helpful assistant that can use tools."},
    {"role": "user", "content": task}
]

response = client.chat.completions.create(
    model="gpt-4o-mini", # Or another capable model
    messages=messages,
    tools=tools,    # The tools we prepared earlier
    tool_choice="auto" # Let the LLM decide whether to use a tool
)

result = toolset.handle_tool_calls(response)

print(result)
```

----------------------------------------

TITLE: Initializing Google AI Model with Composio Toolset (Python)
DESCRIPTION: This Python snippet imports necessary packages, loads environment variables, initializes the `ComposioToolset`, retrieves pre-configured GitHub tools, and initializes the Google AI Gemini model with these tools. Replace `{google_api_key}` with your actual API key. This sets up the environment for the AI model to interact with GitHub.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/google.mdx#_snippet_1

LANGUAGE: python
CODE:
```
import dotenv
from composio_google import App, ComposioToolset
from vertexai.generative_models import GenerativeModel

# Load environment variables from .env
dotenv.load_dotenv()

# Initialize the Composio Toolset
composio_toolset = ComposioToolset()

# Get GitHub tools that are pre-configured
tool = composio_toolset.get_tool(apps=[App.GITHUB])

# Initialize the Google AI Gemini model
model = GenerativeModel("gemini-1.5-pro", tools=[tool])
```

----------------------------------------

TITLE: Defining LangChain Agent with Composio Tools
DESCRIPTION: This step defines a LangChain agent using the `create_openai_functions_agent` function, integrating the initialized LLM and the fetched GitHub tools. It pulls a pre-defined prompt from LangChain Hub and sets up an `AgentExecutor` for verbose execution.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain.mdx#_snippet_4

LANGUAGE: Python
CODE:
```
prompt = hub.pull("hwchase17/openai-functions-agent")
agent = create_openai_functions_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)
```

LANGUAGE: JavaScript
CODE:
```
const prompt = await pull(
    "hwchase17/openai-functions-agent"
);
const agent = await createOpenAIFunctionsAgent({
    llm,
    tools: tools,
    prompt,
});
const agentExecutor = new AgentExecutor({ agent, tools, verbose: true });
```

----------------------------------------

TITLE: Get All GitHub Tools for Composio Agent in Python
DESCRIPTION: This snippet demonstrates how to retrieve all available GitHub tools from the ComposioToolSet. It also mentions the possibility of filtering for specific actions using use cases and tags for more granular control.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#_snippet_3

LANGUAGE: Python
CODE:
```
tools = toolset.get_tools(apps=[App.GITHUB])
```

----------------------------------------

TITLE: Executing Tasks with Pydantic-AI Agent (Python)
DESCRIPTION: This snippet demonstrates how to define a specific task for the Pydantic-AI agent and execute it synchronously using the `run_sync` method. It then prints the result data returned by the agent and the complete message trace, which is useful for debugging and understanding the agent's decision-making process.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/pydanticai/README.md#_snippet_4

LANGUAGE: python
CODE:
```
# Define task
task = "Star a repo composiohq/composio on GitHub"

# Run the agent synchronously
result = agent.run_sync(task)
print("Result:", result.data)
print("Trace:\n\n", result.all_messages())
```

----------------------------------------

TITLE: Importing Core Libraries for SQL Agent
DESCRIPTION: This section imports essential libraries for the SQL agent. Python imports `os`, `dotenv`, `ComposioToolSet`, `App` from `composio_langchain`, `hub`, `AgentExecutor`, `create_openai_functions_agent` from `langchain`, and `ChatOpenAI`. JavaScript imports `dotenv`, `ChatOpenAI`, `AgentExecutor`, `createOpenAIFunctionsAgent`, `ComposioToolSet`, and `pull`. Environment variables are loaded in both.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
import os
import dotenv

from composio_langchain import App, ComposioToolSet
from langchain import hub
from langchain.agents import AgentExecutor, create_openai_functions_agent
from langchain_openai import ChatOpenAI

# Load environment variables
dotenv.load_dotenv()
```

LANGUAGE: JavaScript
CODE:
```
import dotenv from 'dotenv';
import { ChatOpenAI } from "@langchain/openai";
import { AgentExecutor, createOpenAIFunctionsAgent } from "langchain/agents";
import { ComposioToolSet } from "composio-core";
import { pull } from "langchain/hub";

dotenv.config();
```

----------------------------------------

TITLE: Initializing LangChain LLM and Composio ToolSet
DESCRIPTION: This snippet imports essential libraries for LangChain agents and Composio integration, then initializes the `ChatOpenAI` Large Language Model and the `ComposioToolSet` (Python) or `LangchainToolSet` (JavaScript) for interacting with external applications.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain import hub
from langchain_openai import ChatOpenAI
from composio_langchain import ComposioToolSet, App

llm = ChatOpenAI()
composio_toolset = ComposioToolSet()
```

LANGUAGE: JavaScript
CODE:
```
import { ChatOpenAI } from "@langchain/openai";
import { createOpenAIFunctionsAgent, AgentExecutor } from "langchain/agents";
import { LangchainToolSet } from "composio-core";
import { pull } from "langchain/hub";

const llm = new ChatOpenAI();
const toolset = new LangchainToolSet();
```

----------------------------------------

TITLE: Fetching Specific Actions with ComposioToolSet in Python
DESCRIPTION: This snippet demonstrates how to initialize ComposioToolSet and fetch a specific tool by providing its Action enum. It shows how to retrieve the schema for a single, precisely identified action, such as starring a GitHub repository.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#_snippet_0

LANGUAGE: python
CODE:
```
from composio_openai import ComposioToolSet, Action

# Initialize ToolSet (assuming API key is in env)
toolset = ComposioToolSet()

# Fetch only the tool for starring a GitHub repo
github_star_tool = toolset.get_tools(
    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]
)

print(github_star_tool)
# Output will contain the schema for the specified action.
```

----------------------------------------

TITLE: Invoking the GitHub Issue Creation Agent
DESCRIPTION: Demonstrates how to invoke the previously defined `executeAgent` function. This line of code triggers the agent to create a sample issue in the specified GitHub repository, completing the end-to-end flow of using Composio and OpenAI for automated GitHub interactions.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai-js.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
executeAgent("himanshu-dixit/custom-repo-breaking")
```

----------------------------------------

TITLE: Define the LlamaIndex Function Calling Agent for GitHub
DESCRIPTION: This section defines a FunctionCallingAgentWorker from LlamaIndex, configuring it as a GitHub agent with a system message, the previously fetched tools, and an LLM, preparing it for task execution.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#_snippet_4

LANGUAGE: Python
CODE:
```
prefix_messages = [
    ChatMessage(
        role="system",
        content=(
            "You are a Github Agent, and you can use tools to perform actions on Github."
        ),
    )
]

agent = FunctionCallingAgentWorker(
    tools=tools,
    llm=llm,
    prefix_messages=prefix_messages,
    max_function_calls=10,
    allow_parallel_tool_calls=False,
    verbose=True,
).as_agent()
```

----------------------------------------

TITLE: Creating New Integration in Composio (TypeScript)
DESCRIPTION: This method allows clients to create a new integration in the Composio platform. It accepts a `data` object containing details like `appId`, `name`, `authConfig`, `authScheme`, and `useComposioAuth`. It returns a `CancelablePromise` that resolves to the `CreateIntegrationResponse` upon successful creation.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk_models_integrations.Integrations.html#_snippet_2

LANGUAGE: TypeScript
CODE:
```
create(data?: { appId?: string; authConfig?: { api_key?: string; base_url?: string; client_id?: string; client_secret?: string; consumer_key?: string; consumer_secret?: string; [key: string]: unknown; }; authScheme?: AuthScheme; name?: string; useComposioAuth?: boolean; }): CancelablePromise<CreateIntegrationResponse>
```

----------------------------------------

TITLE: Executing Newsletter Workflow with CrewAI in Python
DESCRIPTION: This Python snippet initializes a `Crew` object, assembling the defined agents (`email_fetcher`, `summarizer`, `email_sender`) and tasks (`fetch_task`, `summarize_task`, `send_task`). It configures the process as sequential and then executes the entire workflow using `crew.kickoff()`, printing the final result.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#_snippet_6

LANGUAGE: python
CODE:
```
# Create and run the crew
crew = Crew(
    agents=[email_fetcher, summarizer, email_sender],
    tasks=[fetch_task, summarize_task, send_task],
    verbose=2,
    process=Process.sequential
)

# Execute the workflow
result = crew.kickoff()
print(f"Result: {result}")
```

----------------------------------------

TITLE: Advanced Composio Tool Configuration (Python)
DESCRIPTION: This section showcases advanced methods for configuring Composio tools, including retrieving multiple actions simultaneously, filtering tools based on specific tags (e.g., 'github', 'repository'), and selecting tools by application (e.g., `App.GITHUB`), all while allowing for custom retry settings.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/pydanticai/README.md#_snippet_5

LANGUAGE: python
CODE:
```
# Using multiple tools
tools = composio_toolset.get_tools(
    actions=[
        Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER,
        Action.GITHUB_CREATE_REPOSITORY
    ],
    max_retries={
        Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER: 5,
        Action.GITHUB_CREATE_REPOSITORY: 2
    }
)

# Filtering tools by tags
tools = composio_toolset.get_tools(
    tags=["github", "repository"],
    default_max_retries=3
)

# Using app-specific tools
tools = composio_toolset.get_tools(
    apps=[App.GITHUB],
    max_retries={
        Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER: 5
    }
)
```

----------------------------------------

TITLE: Executing the OpenAI Agent with Composio
DESCRIPTION: This step demonstrates how to execute the defined OpenAI Assistant, showing how to initiate a run and handle tool calls, with examples for both streaming and non-streaming responses in JavaScript, and printing the final response in Python. This is the final step where the assistant performs the desired action using the integrated Composio tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai.mdx#_snippet_5

LANGUAGE: Python
CODE:
```
print(response_after_tool_calls)
```

LANGUAGE: JavaScript
CODE:
```
//With Streaming
async function executeAssistantTask(openai, toolset, assistant, task) {
    const thread = await openai.beta.threads.create();
    const run = await openai.beta.threads.runs.create(thread.id, {
        assistant_id: assistant.id,
        instructions: task,
        tools: tools,
        model: "gpt-4o-mini",
        stream: true
    });

    for await (const result of toolset.waitAndHandleAssistantStreamToolCalls(openai, run, thread)) {
        console.log(result);
    }
}

// Without Streaming
async function executeAssistantTask(openai, toolset, assistant, task) {
    const thread = await openai.beta.threads.create();
    const run = await openai.beta.threads.runs.create(thread.id, {
        assistant_id: assistant.id,
        instructions: task,
        tools: tools,
        model: "gpt-4o-mini",
        stream: false
    });
    const call = await toolset.waitAndHandleAssistantToolCalls(openai, run, thread);
    console.log(call);
}

(async() => {
    const githubAssistant = await createGithubAssistant(openai, tools);
    await executeAssistantTask(
        openai,
        toolset,
        githubAssistant,
        "Star the repository 'composiohq/composio'"
    );
})();
```

----------------------------------------

TITLE: Modifying JSON Schema for Framework Compatibility (Python)
DESCRIPTION: This Python snippet demonstrates how to modify a JSON schema, specifically by adding `"additionalProperties": False`, to align with a framework's expectations (e.g., OpenAI-compatible frameworks). This resolves schema format differences between Composio and the target framework.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#_snippet_9

LANGUAGE: python
CODE:
```
# Adding additionalProperties: false for OpenAI-compatible frameworks
modified_schema = schema_params.copy()
modified_schema["additionalProperties"] = False
```

----------------------------------------

TITLE: Fetching Custom and Built-in Tools in Python
DESCRIPTION: This snippet demonstrates how to fetch both custom-defined and built-in Composio tools in Python. It shows how to reference custom tools by their function object or by their custom tool name string, allowing them to be passed to an LLM or framework alongside other tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/custom-tools.mdx#_snippet_2

LANGUAGE: Python
CODE:
```
# Fetch custom and built-in tools together
tools = toolset.get_tools(
    actions=[
        Action.GITHUB_GET_THE_AUTHENTICATED_USER, # Built-in
        add_numbers,                         # Custom (by function object)
        "calculator_multiply"                # Custom (by toolname string)
    ]
)
# Pass 'tools' to your LLM or framework
```

----------------------------------------

TITLE: Generating Snarky Responses with GPT-4.5 and Slack Preprocessor (Python)
DESCRIPTION: Defines an asynchronous function `generate_response` that processes Slack payloads, prevents duplicate responses, and includes a `slack_send_message_preprocessor`. This preprocessor automatically injects `thread_ts`, `channel`, and `mrkdwn=False` into Slack message inputs, ensuring correct message formatting and threading for generated responses.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_14

LANGUAGE: python
CODE:
```
async def generate_response(payload: Dict[str, Any]):
    ts = payload.get("data", {}).get("ts", "")
    thread_ts = payload.get("data", {}).get("thread_ts", ts)
    channel = payload.get("data", {}).get("channel", "")
    
    # Skip if already responded
    if thread_ts in responded_threads:
        return
    
    responded_threads.add(thread_ts);
    
    # Preprocessor to automatically inject Slack-specific parameters
    def slack_send_message_preprocessor(inputs: Dict[str, Any]) -> Dict[str, Any]:
        inputs["thread_ts"] = ts          # Ensure reply goes to the correct thread
        inputs["channel"] = channel       # Target the specific channel
        inputs["mrkdwn"] = False         # Disable markdown for greentext formatting
        return inputs
```

----------------------------------------

TITLE: Setting Up Data Visualization Agent in Python
DESCRIPTION: This Python snippet illustrates the setup of an OpenAI functions agent specifically for data visualization. It defines a task to create a bar chart from provided SQL query results, specifying the axes and output file, and then executes this task using the agent executor.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#_snippet_5

LANGUAGE: Python
CODE:
```
# Create the agent for data visualization
visualization_agent = create_openai_functions_agent(llm, code_tools, prompt)
visualization_executor = AgentExecutor(agent=visualization_agent, tools=code_tools, verbose=True)

# Define the visualization task
visualization_task = (
    f"Using the following data from the top 10 highest salaries: {sql_result['output']}\n"
    "Create a bar chart showing first_name on the x-axis and salary on the y-axis. "
    "Save the visualization as 'salary_chart.png'."
)

# Execute the visualization task
visualization_result = visualization_executor.invoke({"input": visualization_task})
print(f"Visualization Result: {visualization_result['output']}")
```

----------------------------------------

TITLE: Executing Tool Calls with ComposioToolSet in Python
DESCRIPTION: This code executes the tool calls identified and prepared by the LiteLLM router. The `handle_tool_calls` method of the `ComposioToolSet` takes the router's `response` (which contains the tool call details) and performs the actual action, such as starring a GitHub repository. The `result` variable will hold the outcome of the executed tool call.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/litellm.mdx#_snippet_6

LANGUAGE: python Python
CODE:
```
result = toolset.handle_tool_calls(response=response)
print(result)
```

----------------------------------------

TITLE: Initializing Composio Tools for Smol Agent (Python)
DESCRIPTION: This Python snippet demonstrates how to initialize the `ComposioToolSet` and retrieve specific GitHub tools. It configures the toolset to fetch the `GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER` action, enabling the agent to interact with GitHub's star functionality. Retry configurations can also be applied here.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/smolagent/README.md#_snippet_2

LANGUAGE: python
CODE:
```
# Initialize toolset
composio_toolset = ComposioToolSet()

# Get GitHub tools with retry configuration
tools = composio_toolset.get_tools(
    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER],
)
```

----------------------------------------

TITLE: Executing Agent to Star GitHub Repository - Python
DESCRIPTION: This Python snippet defines a task to 'Star a repo composiohq/composio on GitHub' and sends this message to the initialized model (represented by `chat`). This demonstrates how to instruct the agent to perform a specific action using conversational instructions.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/google/README.md#_snippet_3

LANGUAGE: python
CODE:
```
# Define task
task = "Star a repo composiohq/composio on GitHub"

# Send a message to the model
response = chat.send_message(task)
```

----------------------------------------

TITLE: Using ComposioToolSet with OpenAI Agents for GitHub
DESCRIPTION: This Python code demonstrates how to initialize the Composio toolset, retrieve a specific GitHub action (starring a repository), create an OpenAI Agent with this tool, and then run the agent to perform the action. It requires `asyncio`, `dotenv`, `agents`, and `composio_openai_agents` to be installed and environment variables loaded.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/openai_agents/README.md#_snippet_1

LANGUAGE: python
CODE:
```
import asyncio
import dotenv
from agents import Agent, Runner

from composio_openai_agents import Action, ComposioToolSet

# Load environment variables from .env
dotenv.load_dotenv()

# Initialize Composio toolset
composio_toolset = ComposioToolSet()

# Get all the tools
tools = composio_toolset.get_tools(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])

# Create an agent with the tools
agent = Agent(
    name="GitHub Agent",
    instructions="You are a helpful assistant that helps users with GitHub tasks.",
    tools=tools,
)

# Run the agent
async def main():
    result = await Runner.run(agent, "Star the repository composiohq/composio on GitHub")
    print(result.final_output)

asyncio.run(main())
```

----------------------------------------

TITLE: Automating GitHub Repository Star with OpenAI and Composio - Python
DESCRIPTION: This Python script demonstrates how to use Composio with OpenAI to create an AI agent capable of starring a GitHub repository. It initializes an OpenAI client, sets up Composio tools for GitHub actions, creates an OpenAI assistant, and executes a task to star a specified repository.
SOURCE: https://github.com/composiohq/composio/blob/master/python/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from openai import OpenAI
from composio_openai import ComposioToolSet, App, Action

openai_client = OpenAI(
    api_key="{{OPENAIKEY}}"
)

# Initialise the Composio Tool Set

composio_tool_set = ComposioToolSet()

# Get GitHub tools that are pre-configured
actions = composio_tool_set.get_actions(
    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]
)

my_task = "Star a repo composiodev/composio on GitHub"

# Setup openai assistant
assistant_instruction = "You are a super intelligent personal assistant"

assistant = openai_client.beta.assistants.create(
    name="Personal Assistant",
    instructions=assistant_instruction,
    model="gpt-4-turbo",
    tools=actions,
)

# create a thread
thread = openai_client.beta.threads.create()

message = openai_client.beta.threads.messages.create(
    thread_id=thread.id,
    role="user",
    content=my_task
)

# Execute Agent with integrations
run = openai_client.beta.threads.runs.create(
    thread_id=thread.id,
    assistant_id=assistant.id
)


# Execute Function calls
response_after_tool_calls = composio_tool_set.wait_and_handle_assistant_tool_calls(
    client=openai_client,
    run=run,
    thread=thread,
)

print(response_after_tool_calls)
```

----------------------------------------

TITLE: Import Libraries & Initialize ComposioToolSet & LLM in Python
DESCRIPTION: This snippet imports required libraries from LlamaIndex and Composio, then initializes the ComposioToolSet and an OpenAI LLM instance, setting up the core components for agent interaction.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
from llama_index.llms.openai import OpenAI
from llama_index.core.llms import ChatMessage
from llama_index.core.agent import FunctionCallingAgentWorker
from composio_llamaindex import App, ComposioToolSet

toolset = ComposioToolSet()
llm = OpenAI()
```

----------------------------------------

TITLE: Importing Libraries and Initializing ComposioToolSet - Python
DESCRIPTION: This code imports required classes from `composio_livekit` and `livekit.agents`, along with various LiveKit plugins for speech-to-text, language models, and text-to-speech. It then initializes an instance of `ComposioToolSet`, which is used to manage and access Composio's integrated tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/livekit.mdx#_snippet_2

LANGUAGE: python
CODE:
```
from composio_livekit import Action, ComposioToolSet
from livekit import agents
from livekit.agents.voice import Agent, AgentSession, room_io
from livekit.plugins import (
    cartesia,
    deepgram,
    noise_cancellation,
    openai,
    silero,
    turn_detector,
)

toolset = ComposioToolSet()
```

----------------------------------------

TITLE: Connect GitHub Account via Composio CLI
DESCRIPTION: This snippet demonstrates how to connect your GitHub account using the Composio Command Line Interface. It first logs into Composio and then adds the GitHub integration, which is a prerequisite for using GitHub-related tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/smolagents.mdx#_snippet_2

LANGUAGE: shell
CODE:
```
composio login
composio add github
```

----------------------------------------

TITLE: Executing Composio Action with entityId in TypeScript
DESCRIPTION: This TypeScript example shows how to pass the `entityId` parameter to the `executeAction` method. This is essential for multi-user applications to ensure that the action is performed using the credentials associated with the specified user.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/executing-tools.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
// Direct Execution with entityId
await toolset.executeAction({
    action: "GITHUB_CREATE_AN_ISSUE",
    params: {...},
    entityId: "user-from-my-db-123"
});
```

----------------------------------------

TITLE: Executing GitHub Tool Automatically with Vercel AI SDK (TypeScript)
DESCRIPTION: This snippet illustrates how to automatically execute a Composio tool (specifically `GITHUB_GET_THE_AUTHENTICATED_USER`) using the Vercel AI SDK. It demonstrates fetching the tool definition via `VercelAIToolSet`, integrating it with the `generateText` function from `@ai-sdk/openai`, and allowing the framework to handle the internal execution logic. It requires `composio-core`, `ai`, and `@ai-sdk/openai` as dependencies. The expected output includes the results from the tool execution and any generated text from the LLM.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/executing-tools.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
// Conceptual illustration within Vercel AI SDK context
import { VercelAIToolSet } from "composio-core";
import { generateText } from 'ai';
import { openai } from '@ai-sdk/openai';

const toolset = new VercelAIToolSet(); // Gets API key from env

async function runVercelExample() {
  const { tool } = await import('ai'); // Vercel AI SDK tool definition type

  // 1. Fetch tool - Composio formats it for Vercel, including an 'execute' function
  const tools = await toolset.getTools({ actions: ["GITHUB_GET_THE_AUTHENTICATED_USER"] });

  // 2. Use the tool with the framework's function (e.g., generateText)
  const { text, toolResults } = await generateText({
    model: openai('gpt-4o-mini'),
    prompt: 'Get my GitHub username',
    tools: tools // Provide the Composio-generated tool definitions
  });

  // 3. Framework internally calls the 'execute' method on the chosen tool.
  //    Composio's wrapper inside 'execute' handles the actual API call.
  console.log("Tool Results:", toolResults);
  console.log("Final Text:", text);
}
```

----------------------------------------

TITLE: Defining the LLM Calling Function
DESCRIPTION: This function serves as an intermediary to process messages through the Language Model (LLM) and return its response. It's a crucial component in the LangGraph agent, allowing the agent to interact with the LLM for generating responses or tool calls.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#_snippet_4

LANGUAGE: Python
CODE:
```
def call_model(state: MessagesState):
    """
    Process messages through the LLM and return the response
    """
    messages = state["messages"]
    response = model_with_tools.invoke(messages)
    return {"messages": [response]}
```

LANGUAGE: TypeScript
CODE:
```
async function callModal(state) {
    const { messages } = state;
    const response = await model.invoke(messages);
    return { messages: [response] };
}
```

----------------------------------------

TITLE: Setting Up and Executing SQL Query Agent
DESCRIPTION: This step demonstrates creating and executing an agent specifically for SQL and file operations. In Python, `create_openai_functions_agent` is used with the LLM, tools, and prompt, then executed via `AgentExecutor` to connect to a SQLite database, query data, and save results to a file. The JavaScript snippet shows the asynchronous function to set up the agent and executor for SQL operations.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#_snippet_3

LANGUAGE: Python
CODE:
```
# Create the agent for SQL and File operations
sql_agent = create_openai_functions_agent(llm, sql_file_tools, prompt)
sql_executor = AgentExecutor(agent=sql_agent, tools=sql_file_tools, verbose=True)

# Define the SQL query task
query_task = (
    "Connect to the SQLite database 'companydb' and execute the following query: "
    "SELECT * FROM MOCK_DATA ORDER BY salary DESC LIMIT 10. "
    "Save the results to a file named 'top_salaries.txt' and return the content."
)

# Execute the SQL query task
sql_result = sql_executor.invoke({"input": query_task})
print(f"SQL Query Result: {sql_result['output']}")
```

LANGUAGE: JavaScript
CODE:
```
// Function to execute SQL queries
async function executeSQLQuery(query) {
    // Get SQL and File tools
    const sqlTools = await getSQLTools();
    
    // Create the agent prompt
    const prompt = await pull("hwchase17/openai-functions-agent");
    
    // Create the agent for SQL operations
    const agent = await createOpenAIFunctionsAgent({ 
        llm, 
        tools: sqlTools, 
        prompt 
    });

    // Create the agent executor
    const agentExecutor = new AgentExecutor({
        agent,
        tools: sqlTools,
        verbose: true,
    });

```

----------------------------------------

TITLE: Executing GitHub Action with Entity ID in Python
DESCRIPTION: This snippet demonstrates how to fetch the authenticated GitHub user's information by executing an action using a user's `entity_id`. Composio automatically resolves the correct connection associated with the specified entity. It prints the GitHub username upon success or an error message if the action fails.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#_snippet_3

LANGUAGE: python
CODE:
```
print(f"\nFetching GitHub username for entity: {user_id_in_my_app}")
user_info = toolset.execute_action(
    action=Action.GITHUB_GET_THE_AUTHENTICATED_USER,
    params={},
    entity_id=user_id_in_my_app # Specify the user context
)

if user_info.get("successful"):
    print("GitHub username:", user_info.get("data", {}).get("login"))
else:
    print("Failed to fetch user:", user_info.get("error"))
```

----------------------------------------

TITLE: Configuring Julep Agent with Composio GitHub Tools (Python)
DESCRIPTION: This code initializes the `ComposioToolSet` and registers the GitHub application's tools. It then creates and configures a Julep agent named 'Jessica' with specific settings, including the retrieved Composio tools, enabling it to interact with GitHub.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#_snippet_2

LANGUAGE: python
CODE:
```
# Initialise the Composio Tool Set
composio_toolset = ComposioToolSet()

# Register the GitHub app with the right settings

tools = composio_toolset.get_tools(apps=[App.GITHUB])

# Create and configure the Julep agent

agent = julep_client.agents.create(
name="Jessica",
about="Tech entrepreneur with a focus on sustainability and AI.",
default_settings={
"temperature": 0.7,
"top_p": 1,
"min_p": 0.01,
"presence_penalty": 0,
"frequency_penalty": 0,
"length_penalty": 1.0,
"max_tokens": 150
},
model="gpt-4-turbo",
tools=tools,
)
```

----------------------------------------

TITLE: Preparing Griptape Agent with Composio Tools (Python)
DESCRIPTION: This code initializes the ComposioToolSet, retrieves GitHub-specific tools using the 'App.GITHUB' enum, and then configures a Griptape Agent instance with these retrieved tools to enable interaction with GitHub.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/griptape.mdx#_snippet_2

LANGUAGE: python
CODE:
```
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps = [App.GITHUB])

agent = Agent(
  tools=tools
)
```

----------------------------------------

TITLE: Fetching and Formatting Composio GitHub Tools for PraisonAI (Python)
DESCRIPTION: This Python code fetches specific GitHub actions (starring a repository) using `ComposioToolSet` and formats them into a string (`tool_section_str`) suitable for inclusion in the PraisonAI `agents.yml` configuration. This enables Praison Agents to utilize Composio's GitHub functionalities.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/praisonai/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from composio_praisonai import Action, ComposioToolSet

composio_toolset = ComposioToolSet()
tools = composio_toolset.get_actions(
    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]
)

tool_section_str = composio_toolset.get_tools_section(tools)
print(tool_section_str)
```

----------------------------------------

TITLE: Creating GitHub Issue with Custom Bearer Token in TypeScript
DESCRIPTION: This TypeScript snippet illustrates how to create a GitHub issue using the Composio toolset.executeAction method. It shows how to pass a custom bearer token directly through the auth parameters, enabling the use of externally managed authentication for API calls.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/executing-tools.mdx#_snippet_8

LANGUAGE: TypeScript
CODE:
```
// Example: Create GitHub Issue with a provided Bearer token
import { ComposioToolSet, Action, ParamPlacement } from "composio-core";

const bearerToken = "gho_YourTemporaryOrManagedToken";
const toolset = new ComposioToolSet(); // Init ToolSet

async function createWithCustomAuth() {
    try {
        const result = await toolset.executeAction({
            action: Action.GITHUB_CREATE_ISSUE,
            params: {
                owner: "target-owner",
                repo: "target-repo",
                title: "Issue via Custom Auth",
                body": "Using a provided Bearer token."
            },
            // Provide auth details directly
            auth: {
                parameters: [
                    { name: "Authorization", value: `Bearer ${bearerToken}`, in: ParamPlacement.Header }
                ]
                // 'baseUrl' can be added if needed
                // 'body' can be added if needed
            }
        });
        console.log(result);
    } catch (error) {
        console.error("An error occurred:", error);
    }
}

createWithCustomAuth();
```

----------------------------------------

TITLE: Defining the OpenAI Assistant with Composio Tools
DESCRIPTION: This step details the process of defining an OpenAI Assistant, including setting instructions, model, and integrating the fetched Composio tools. It also shows how to create a thread and initial message for the assistant in Python, and a helper function for creating a GitHub assistant in JavaScript.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai.mdx#_snippet_4

LANGUAGE: Python
CODE:
```
assistant_instruction = "You are a super intelligent personal assistant"

assistant = openai_client.beta.assistants.create(
  name="Personal Assistant",
  instructions=assistant_instruction,
  model="gpt-4-turbo-preview",
  tools=tools,
)

thread = openai_client.beta.threads.create()
my_task = "Star a repo composiohq/composio on GitHub"
message = openai_client.beta.threads.messages.create(thread_id=thread.id,role="user",content=my_task)

run = openai_client.beta.threads.runs.create(thread_id=thread.id,assistant_id=assistant.id)

response_after_tool_calls = composio_toolset.wait_and_handle_assistant_tool_calls(
    client=openai_client,
    run=run,
    thread=thread,
)
```

LANGUAGE: JavaScript
CODE:
```
async function createGithubAssistant(openai, tools) {
    return await openai.beta.assistants.create({
        name: "Github Assistant",
        instructions: "You're a GitHub Assistant, you can do operations on GitHub",
        tools: tools,
        model: "gpt-4o-mini"
    });
}
```

----------------------------------------

TITLE: Injecting Gmail Recipient Email (Pre-processor)
DESCRIPTION: This snippet illustrates a pre-processor function that injects a fixed `recipient_email` into the inputs for the `GMAIL_SEND_EMAIL` tool just before execution. This is particularly useful when the `recipient_email` parameter has been hidden from the LLM via schema processing (as shown in the previous example), ensuring the tool receives the necessary data from the application's context. It also sets a default subject if none is provided.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/processing-tools.mdx#_snippet_2

LANGUAGE: Python
CODE:
```
def inject_gmail_recipient(inputs: dict) -> dict:
    """Injects a fixed recipient email into the inputs."""
    # Get the recipient from app logic, context, or hardcode it
    inputs["recipient_email"] = "fixed.recipient@example.com"
    # Ensure subject exists, providing a default if necessary
    inputs["subject"] = inputs.get("subject", "No Subject Provided")
    return inputs

# Combine schema processing and preprocessing
processed_tools = toolset.get_tools(
    actions=[Action.GMAIL_SEND_EMAIL],
    processors={
        "schema": {Action.GMAIL_SEND_EMAIL: simplify_gmail_send_schema},
        "pre": {Action.GMAIL_SEND_EMAIL: inject_gmail_recipient}
    }
)

# Now, when the LLM calls this tool (without providing recipient_email),
# the 'inject_gmail_recipient' function will run automatically
# before Composio executes the action, adding the correct email.
```

----------------------------------------

TITLE: Initializing OpenAI Client
DESCRIPTION: This Python snippet imports the `OpenAI` class from the `openai` library and initializes an `OpenAI` client instance. This client is essential for making API calls to OpenAI services, such as creating chat completions, which will be used to interact with Composio tools.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/openai/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from openai import OpenAI

# Initialize OpenAI client
openai_client = OpenAI()
```

----------------------------------------

TITLE: Fetching All Tools for a Specific App (Python)
DESCRIPTION: This Python snippet shows an alternative way to fetch tools by specifying an entire application, rather than individual actions. By passing `App.GITHUB` to `composio_toolset.get_tools()`, all available tools for the GitHub application are retrieved, providing comprehensive access to its functionalities.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/smolagent/README.md#_snippet_6

LANGUAGE: python
CODE:
```
# Using app-specific tools
tools = composio_toolset.get_tools(
    apps=[App.GITHUB],
)
```

----------------------------------------

TITLE: Setting Up a LiveKit Agent Session with Plugins (Python)
DESCRIPTION: This snippet illustrates a complete setup for a `LiveKit AgentSession`, integrating various LiveKit plugins for speech-to-text (Deepgram), large language models (OpenAI), text-to-speech (Cartesia), voice activity detection (Silero), and turn detection. It demonstrates how to configure and start an agent session within a LiveKit room context.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/livekit/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from livekit.agents.voice import AgentSession
from livekit.plugins import (
    openai,
    cartesia,
    deepgram,
    silero,
    turn_detector,
)

async def setup_agent_session():
    session = AgentSession(
        stt=deepgram.STT(),
        llm=openai.LLM(model="gpt-4o"),
        tts=cartesia.TTS(),
        vad=silero.VAD.load(),
        turn_detection=turn_detector.EOUModel(),
    )
    
    await session.start(
        room=ctx.room,
        agent=Assistant(),
    )
```

----------------------------------------

TITLE: Creating and Executing the Google Calendar Agent (Python)
DESCRIPTION: This snippet defines and configures the CrewAI agent responsible for interacting with Google Calendar. It sets the agent's role, goal, backstory, and integrates the previously defined tools and language model. A task is then created to instruct the agent to book calendar slots based on the provided to-do list, including current date and timezone information.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/calendar-agent.mdx#_snippet_4

LANGUAGE: Python
CODE:
```
# Create and Execute Agent.
def run_crew():
  calendar_agent = Agent(
      role="Google Calendar Agent",
      goal="""You take action on Google Calendar using Google Calendar APIs""",
      backstory="""You are an AI agent responsible for taking actions on Google Calendar on users' behalf. 
      You need to take action on Calendar using Google Calendar APIs. Use correct tools to run APIs from the given tool-set.""",
      verbose=True,
      tools=tools,
      llm=llm,
  )
  task = Task(
      description=f"Book slots according to {todo}. Label them with the work provided to be done in that time period. Schedule it for today. Today's date is {date} (it's in YYYY-MM-DD format) and make the timezone be {timezone}.",
      agent=calendar_agent,
      expected_output="if free slot is found",
```

----------------------------------------

TITLE: Generating Authentication Key - Composio SDK - TypeScript
DESCRIPTION: This static method generates an authentication key for the Composio SDK. It optionally accepts a base URL and returns a Promise that resolves to a string representing the generated key. This key is crucial for subsequent authentication processes.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk.Composio.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
generateAuthKey(baseUrl?): Promise<string>
```

----------------------------------------

TITLE: Executing Lyzr Agent to Star GitHub Repository with Composio (Python)
DESCRIPTION: This Python code defines a Lyzr agent with a specific role and persona for GitHub actions. It then configures a `ComposioToolSet` to enable the agent to star a GitHub repository, creates a `Task` with instructions, and executes it using a `LinearSyncPipeline`.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/lyzr.mdx#_snippet_2

LANGUAGE: python
CODE:
```
lyzr_agent = Agent(
    role="Github Agent",
    prompt_persona="You are AI agent that is responsible for taking actions on Github on users behalf. You need to take action on Github using Github APIs",
)

composio_toolset = ComposioToolSet().get_lyzr_tool(Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER)

task = Task(
    name="Github Starring",
    agent=lyzr_agent,
    tool=composio_toolset,
    model=open_ai_text_completion_model,
    instructions="Star a repo composiohq/composio on GitHub",
)

LinearSyncPipeline(name="Composio Lyzr", completion_message="Task completed",tasks=[task]).run()
```

----------------------------------------

TITLE: Executing Composio Action with connectedAccountId in TypeScript
DESCRIPTION: This TypeScript example illustrates how to provide `connectedAccountId` to `executeAction` for precise control over which specific connection is used. This is particularly relevant when an `entityId` is linked to multiple active accounts for the same service, allowing the developer to select the exact one.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/executing-tools.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
// Direct Execution targeting a specific connection
await toolset.executeAction({
    action: "GMAIL_SEND_EMAIL",
    params: {...},
    connectedAccountId: "conn_abc123xyz" // The specific Gmail connection
});
```

----------------------------------------

TITLE: Defining LiveKit Voice AI Agent with Composio Tools - Python
DESCRIPTION: This comprehensive snippet defines the `Assistant` class as a LiveKit voice agent, configured with instructions and the retrieved Composio tools. It also sets up the `entrypoint` function, which connects to a LiveKit room, initializes the `AgentSession` with various AI plugins (STT, LLM, TTS, VAD, turn detection), and starts the agent to interact with users.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/livekit.mdx#_snippet_6

LANGUAGE: python
CODE:
```
class Assistant(Agent):
    def __init__(self) -> None:
        super().__init__(
            instructions="You are a helpful voice AI assistant.", tools=tools
        )

async def entrypoint(ctx: agents.JobContext):
    await ctx.connect()

    session = AgentSession(
        stt=deepgram.STT(),
        llm=openai.LLM(model="gpt-4o"),
        tts=cartesia.TTS(),
        vad=silero.VAD.load(),
        turn_detection=turn_detector.EOUModel(),
    )

    await session.start(
        room=ctx.room,
        agent=Assistant(),
        room_input_options=room_io.RoomInputOptions(
            noise_cancellation=noise_cancellation.BVC(),
        ),
    )

    await session.generate_reply()

if __name__ == "__main__":
    agents.cli.run_app(agents.WorkerOptions(entrypoint_fnc=entrypoint))
```

----------------------------------------

TITLE: Defining CreateIntegrationData Type Alias in TypeScript
DESCRIPTION: This TypeScript type alias defines the structure for data used to create a new integration. It includes an optional `requestBody` which can contain an `appId`, a `name`, and a `useComposioAuth` boolean. The `authConfig` object within `requestBody` allows for various authentication parameters like `api_key`, `base_url`, `client_id`, `client_secret`, `consumer_key`, and `consumer_secret`, depending on the `authScheme` (e.g., API_KEY, OAUTH2, OAUTH1).
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.CreateIntegrationData.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
CreateIntegrationData: {
  requestBody?: {
    appId?: string;
    authConfig?: {
      api_key?: string;
      base_url?: string;
      client_id?: string;
      client_secret?: string;
      consumer_key?: string;
      consumer_secret?: string;
      [key: string]: unknown;
    };
    authScheme?: AuthScheme;
    name?: string;
    useComposioAuth?: boolean;
  };
}
```

----------------------------------------

TITLE: Implementing RAG Workflow with Composio and LangChain (JavaScript)
DESCRIPTION: This JavaScript snippet illustrates a RAG workflow using Composio tools and the LangChain.js library. It initializes an OpenAI language model, configures Composio's `LangchainToolSet` for RAG operations, and creates an `AgentExecutor`. The code then proceeds to add multiple pieces of information to a knowledge base and subsequently queries it to retrieve a specific answer, demonstrating the end-to-end RAG process.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#_snippet_11

LANGUAGE: javascript
CODE:
```
import dotenv from 'dotenv';
import { LangchainToolSet } from "composio-core";
import { ChatOpenAI } from "@langchain/openai";
import { AgentExecutor, createOpenAIFunctionsAgent } from "langchain/agents";
import { pull } from "langchain/hub";

dotenv.config();

// Initialize the language model
const llm = new ChatOpenAI({ model: "gpt-4-turbo" });

// Setup Composio tools with workspace environment
const composioToolset = new LangchainToolSet({
    apiKey: process.env.COMPOSIO_API_KEY,
    workspace: {
        type: "docker"
    }
});

// Main function to run the RAG workflow
(async () => {
    try {
        // Get tools for RAG operations
        const tools = await composioToolset.getTools({
            actions: ["rag_add_content", "rag_get_content", "rag_query"]
        });
        
        // Create the agent
        const prompt = await pull("hwchase17/openai-functions-agent");
        const agent = await createOpenAIFunctionsAgent({
            llm,
            tools,
            prompt
        });
        
        // Set up the agent executor
        const agentExecutor = new AgentExecutor({
            agent,
            tools,
            verbose: true
        });
        
        // Add content to the knowledge base
        const content = `
              1. Paris is the capital city of France.
              2. London is the capital city of the United Kingdom.
              3. Washington D.C. is the capital city of the United States.
              4. Tokyo is the capital city of Japan.
              5. Berlin is the capital city of Germany.
          `;
        
        const addResult = await agentExecutor.invoke({
            input: `Add the following information to the knowledge base: ${content}`
        });
        
        console.log("Content Added:", addResult.output);
        
        // Query the knowledge base
        const query = "What is the capital of France?";
        
        const queryResult = await agentExecutor.invoke({
            input: `Query the knowledge base to answer the following question: "${query}"`
        });
        
        console.log("Query Result:", queryResult.output);
        console.log("RAG workflow completed successfully");
    } catch (error) {
        console.error("Error:", error);
    }
})();
```

----------------------------------------

TITLE: Connecting GitHub Account Programmatically with Composio (Python)
DESCRIPTION: This Python code shows how to programmatically initiate a connection to your GitHub account using the `ComposioToolSet`. It generates a redirect URL that users must open in their browser to complete the authentication process, enabling the agent to interact with GitHub.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/crewai.mdx#_snippet_3

LANGUAGE: python
CODE:
```
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")
```

----------------------------------------

TITLE: Connect GitHub Account Programmatically with Python
DESCRIPTION: This Python snippet initiates the connection process for the GitHub application using the `ComposioToolSet`. It prints a URL that the user must open in a browser to authenticate their GitHub account, enabling programmatic access.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/smolagents.mdx#_snippet_3

LANGUAGE: python
CODE:
```
request = composio_toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")
```

----------------------------------------

TITLE: Fetching Tools by Application with OpenAIToolSet in TypeScript
DESCRIPTION: This snippet demonstrates how to asynchronously fetch a collection of default tools for a connected application, like GitHub, by specifying its string identifier. It notes that this method retrieves 'important' tools by default to manage the LLM's context window.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
async function fetchAppTools() {
  // Fetch default tools for the connected GitHub app
  const githubTools = await toolset.getTools({ apps: ["github"] });

  console.log(`Fetched ${githubTools.length} tools for GitHub.`);
  // Output contains schemas for 'important' GitHub tools.
}

fetchAppTools();
```

----------------------------------------

TITLE: Initializing and Binding Tools to OpenAI Chat Model (Python)
DESCRIPTION: This Python snippet initializes a `ChatOpenAI` language model with a temperature of 0 and streaming enabled. It then binds the previously obtained tools (represented by the `functions` variable) to the model, preparing it to use these tools for function calling within the LangGraph workflow.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langgraph/README.md#_snippet_3

LANGUAGE: python
CODE:
```
model = ChatOpenAI(temperature=0, streaming=True)
model_with_tools = model.bind_tools(functions)
```

----------------------------------------

TITLE: Creating Gmail Integration Programmatically (TypeScript)
DESCRIPTION: This TypeScript example demonstrates how to create a Gmail integration using the `composio-core` SDK. It sets up a new integration with a specified name and unique key, forcing a new instance and utilizing Composio's default authentication. The `integration.id` is then logged to the console.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/integration.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { OpenAIToolSet } from "composio-core";

const composioToolset = new OpenAIToolSet();

const integration = await composioToolset.integrations.create({
    name: "gmail_integration",
    appUniqueKey: "gmail",
    useComposioAuth: true,
    forceNewIntegration: true,
})

console.log(integration.id)
```

----------------------------------------

TITLE: Setting Up the OpenAI Language Model
DESCRIPTION: This section details the initialization of the language model that will power the AI agent. Both Python and JavaScript examples use `ChatOpenAI` with the 'gpt-4o' model, which is essential for the agent's code generation and execution capabilities.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/code-execution-agent.mdx#_snippet_3

LANGUAGE: python
CODE:
```
# Initialize the language model
llm = ChatOpenAI(model="gpt-4o")
```

LANGUAGE: javascript
CODE:
```
// Initialize the language model
const llm = new ChatOpenAI({ model: "gpt-4o" });
```

----------------------------------------

TITLE: Import Base PraisonAI and Composio Packages
DESCRIPTION: This snippet prepares your Python environment by importing essential modules from PraisonAI and Composio, including `PraisonAI` for agent interaction and `Action`, `ComposioToolSet` for integrating Composio tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/praisonai.mdx#_snippet_1

LANGUAGE: python
CODE:
```
import os
import yaml
from praisonai import PraisonAI

from composio_praisonai import Action, ComposioToolSet
```

----------------------------------------

TITLE: Initializing OpenAI Language Model - Python
DESCRIPTION: This code loads environment variables, retrieves the OpenAI API key, and initializes the `ChatOpenAI` language model with the specified API key and model name (`gpt-4o`). It includes a check to ensure the API key is set.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/research_assistant.ipynb#_snippet_3

LANGUAGE: python
CODE:
```
dotenv.load_dotenv()
openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    raise ValueError("The OPENAI_API_KEY environment variable is not set.")
llm = ChatOpenAI(openai_api_key=openai_api_key, model_name="gpt-4o")
```

----------------------------------------

TITLE: Creating GitHub Issue with Custom Bearer Token (Python)
DESCRIPTION: This snippet demonstrates how to execute the `GITHUB_CREATE_ISSUE` action using a custom bearer token. It initializes `ComposioToolSet`, defines a `CustomAuthParameter` to inject the token into the 'Authorization' header, and then calls `execute_action` with the specified parameters, bypassing Composio's default connection management.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/injecting-credentials.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
# Python example providing a custom Bearer token
from composio_openai import ComposioToolSet, Action, App
from composio.client.collections import CustomAuthParameter

toolset = ComposioToolSet()
bearer_token = "ghp_YourPersonalAccessToken..."  # Replace with your actual token

toolset.add_auth(
    app=App.GITHUB,
    parameters=[
        CustomAuthParameter(
            name="Authorization",
            in_="header",
            value=bearer_token,
        )
    ],
)


print("Creating issue using custom auth...")
try:
    result = toolset.execute_action(
        action=Action.GITHUB_CREATE_ISSUE,
        params={
            "owner": "your-username",
            "repo": "test-repo",
            "title": "Issue Created with Custom Token",
            "body": "This issue uses an externally provided auth token.",
        },
    )
    print(result)
except Exception as e:
    print(f"An error occurred: {e}")
```

----------------------------------------

TITLE: Executing Julep Agent for GitHub Repository Interaction (Python)
DESCRIPTION: This code configures a user and a session for the Julep agent, setting up a conversational context. It then sends a user message to the agent, prompting it to interact with a GitHub repository (e.g., starring it), and prints the agent's response, demonstrating the agent's ability to process and act on conversational commands.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/julep/README.md#_snippet_3

LANGUAGE: python
CODE:
```
about = """
Sawradip, a software developer, is passionate about impactful tech. 
At the tech fair, he seeks investors and collaborators for his project.
"""
user = client.users.create(
    name="Sawradip",
    about=about,
)

situation_prompt = """You are Jessica, a key figure in the tech community, always searching for groundbreaking technologies. At a tech fair filled with innovative projects, your goal is to find and support the next big thing.

Your journey through the fair is highlighted by encounters with various projects, from groundbreaking to niche. You believe in the power of unexpected innovation.

Recent Tweets
1. 'Amazed by the tech fair's creativity. The future is bright. #TechInnovation'
2. 'Met a developer with a transformative tool for NGOs. This is the
"""

session = client.sessions.create(
    user_id=user.id, agent_id=agent.id, situation=situation_prompt
)

user_msg = "Hi, I am presenting my project, hosted at github repository composiohq/composio. If you like it, adding a star would be helpful "

# user_msg = "What do you like about tech?"

response = client.sessions.chat(
    session_id=session.id,
    messages=[
        {
            "role": "user",
            "content": user_msg,
            "name": "Sawradip"
        }
    ],
    recall=True,
    remember=True,
)

pprint(response)
```

----------------------------------------

TITLE: Executing Task via Julep Agent to Star GitHub Repository (Python)
DESCRIPTION: This snippet demonstrates how to create a user, set up a Julep session with a specific situation prompt, and then send a user message to the agent. The agent is prompted to star a GitHub repository, initiating the interaction.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#_snippet_3

LANGUAGE: python
CODE:
```
about = """
Sam, a software developer, is passionate about impactful tech.
At the tech fair, he seeks investors and collaborators for his project.
"""
user = julep_client.users.create(
    name="Sam",
    about=about,
)

situation_prompt = "You are at a tech fair seeking innovative projects."
session = julep_client.sessions.create(user_id=user.id, agent_id=agent.id, situation=situation_prompt)

user_msg = "Could you star the GitHub repository composiohq/composio?"

response = julep_client.sessions.chat(
    session_id=session.id,
    messages=[
        {"role": "user", "content": user_msg, "name": "Sam"}
    ],
    recall=True,
    remember=True
)
```

----------------------------------------

TITLE: Subscribing to Trigger Events via Websockets - Python
DESCRIPTION: This Python snippet demonstrates how to create a WebSocket listener using the Composio SDK. It defines a callback function, `handle_slack_message`, that is executed when a message matching the 'SLACK_RECEIVE_MESSAGE' filter is received. The `listener.wait_forever()` call keeps the listener active.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_8

LANGUAGE: Python
CODE:
```
listener = toolset.create_trigger_listener()

@listener.callback(
    filters={
        "trigger_name": "SLACK_RECEIVE_MESSAGE",
    }
)
def handle_slack_message(event):
    print(event)

listener.wait_forever()
```

----------------------------------------

TITLE: Handling Incoming Webhook Requests with FastAPI - Python
DESCRIPTION: This Python FastAPI application sets up a `/webhook` endpoint to receive and process incoming webhook payloads. It parses the JSON payload from the request body, logs it, and returns a success response. This server can be used as a target for Composio webhook events.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_10

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from typing import Dict, Any
import uvicorn
import json

app = FastAPI(title="Webhook Demo")

@app.post("/webhook")
async def webhook_handler(request: Request):
    # Get the raw payload
    payload = await request.json()
    
    # Log the received webhook data
    print("Received webhook payload:")
    print(json.dumps(payload, indent=2))
    
    # Return a success response
    return {"status": "success", "message": "Webhook received"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

----------------------------------------

TITLE: Creating FastAPI Webhook Handler for Slack Messages (Python)
DESCRIPTION: Implements a FastAPI POST endpoint `/webhook` to receive incoming Slack messages. It filters for `slack_receive_message` type and a specific channel ID, then calls `generate_response` to process the message. Finally, it starts the Uvicorn server to listen for incoming requests.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_16

LANGUAGE: python
CODE:
```
@app.post("/webhook")
async def webhook_handler(request: Request):
    payload = await request.json()
    if payload.get("type") == "slack_receive_message":
        channel = payload.get("data", {}).get("channel")
        if channel == "YOUR_CHANNEL_ID":  # Replace with your channel ID
            await generate_response(payload)
    return {"status": "success", "message": "Webhook received"}

uvicorn.run(app, host="0.0.0.0", port=8000)
```

----------------------------------------

TITLE: Executing LangChain Agent to Star GitHub Repository
DESCRIPTION: This snippet demonstrates how to invoke the defined LangChain agent to perform a specific task, in this case, starring a GitHub repository. The agent processes the input task and uses the integrated Composio tools to execute the action.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain.mdx#_snippet_5

LANGUAGE: Python
CODE:
```
task = "Star a repo composiohq/composio on GitHub"
agent_executor.invoke({"input": task})
```

LANGUAGE: JavaScript
CODE:
```
const response = await agentExecutor.invoke({ input: "Star a repo composiohq/composio on GitHub" });
console.log(response);
```

----------------------------------------

TITLE: Running Combined SQL and Visualization Workflow in JavaScript
DESCRIPTION: This JavaScript `runSQLAgent` function defines and executes a full workflow. It first performs an SQL query to get data, then passes that data to the `createVisualization` function to generate a chart, handling potential errors throughout the process.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#_snippet_8

LANGUAGE: JavaScript
CODE:
```
async function runSQLAgent() {
    try {
        // Define the SQL query
        const query = "SELECT * FROM MOCK_DATA ORDER BY salary DESC LIMIT 10";
        
        // Execute the SQL query
        const queryResult = await executeSQLQuery(query);
        
        // Create visualization based on query results
        const visualizationResult = await createVisualization(queryResult);
        
        console.log("SQL Agent workflow completed successfully!");
        return {
            queryResult,
            visualizationResult
        };
    } catch (error) {
        console.error("An error occurred:", error);
        throw error;
    }
}

// Execute the workflow
runSQLAgent().catch(error => console.error("SQL Agent failed:", error));
```

----------------------------------------

TITLE: Defining the Researcher Agent with CrewAI - Python
DESCRIPTION: This code defines a `Researcher` agent using CrewAI, specifying its role, goal, and backstory. It also assigns the previously initialized tools and the language model (`llm`) to the agent, enabling it to perform web research.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/research_assistant.ipynb#_snippet_5

LANGUAGE: python
CODE:
```
researcher = Agent(
     role='Researcher',
     goal='Search the internet for the information requested',
     backstory="""
     You are a researcher. Using the information in the task, you find out some of the most popular facts about the topic along with some of the trending aspects.
     You provide a lot of information thereby allowing a choice in the content selected for the final blog.
     """,
     verbose=True,
     allow_delegation=False,
     tools=tools,
     llm=llm
 )
```

----------------------------------------

TITLE: Installing Composio Core SDK with OpenAI Helper (Python)
DESCRIPTION: This command installs the core Composio SDK along with the `composio_openai` helper package for Python. The helper package facilitates seamless integration with OpenAI's agent functionalities, enabling your AI agents to utilize Composio's tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/welcome.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
pip install composio_core composio_openai # Example for OpenAI
```

----------------------------------------

TITLE: Creating the AI Agent for Code Generation and Execution
DESCRIPTION: This step defines the AI agent responsible for generating and executing code. The Python example uses CrewAI to define a 'Python Executor' agent with a specific role, goal, and backstory, integrating the previously set up tools and language model. The JavaScript example uses Langchain to create an agent and an agent executor, pulling a pre-defined prompt.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/code-execution-agent.mdx#_snippet_4

LANGUAGE: python
CODE:
```
# Define the Python executor agent
python_executor_agent = Agent(
    role="Python Executor",
    goal="Execute Python code to solve problems",
    backstory="""You are an expert Python developer specializing in executing code to solve various problems.
Your job is to analyze problems, write efficient Python code to solve them, and execute the code to ensure it works correctly.""",
    verbose=True,
    allow_delegation=False,
    tools=tools,
    llm=llm
)
```

LANGUAGE: javascript
CODE:
```
// Create the agent
const prompt = await pull("hwchase17/openai-functions-agent");
const agent = await createOpenAIFunctionsAgent({
    llm,
    tools,
    prompt
});

// Set up the agent executor
const agentExecutor = new AgentExecutor({
    agent,
    tools,
    verbose: true
});
```

----------------------------------------

TITLE: Configuring API Keys (Environment Variables)
DESCRIPTION: This snippet illustrates how to set up environment variables for the Composio and OpenAI API keys within a .env file. These keys are essential for the agent to authenticate and interact with the respective services, enabling its core functionality.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/reddit-research/readme.md#_snippet_2

LANGUAGE: bash
CODE:
```
COMPOSIO_API_KEY=YOUR_COMPOSIO_API_KEY
OPENAI_API_KEY=YOUR_OPENAI_API_KEY
```

----------------------------------------

TITLE: Creating the JavaScript OpenAI Assistant
DESCRIPTION: This snippet initializes the OpenAI client with an API key. It then defines an asynchronous function `createAssistant` that uses the client to create an OpenAI Assistant, specifying its model, description, instructions, and the set of tools it will utilize for research and GitHub interaction.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#_snippet_9

LANGUAGE: JavaScript
CODE:
```
// Initialize OpenAI client
const client = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

// Create an OpenAI Assistant with the tools
const createAssistant = async (tools) => {
    return await client.beta.assistants.create({
        model: "gpt-4-turbo",
        description: "Research Agent that interacts with GitHub",
        instructions: "You are a helpful assistant that researches topics and creates GitHub issues",
        tools: tools,
    });
};
```

----------------------------------------

TITLE: Define GetActionResponse Type Alias TypeScript
DESCRIPTION: This TypeScript type alias defines the structure for `GetActionResponse`, representing the detailed metadata and schema for an action. It includes optional properties such as `appId`, `appName`, `description`, `parameters` (for input schema), and `response` (for output schema), providing a comprehensive definition of an action's capabilities and data types.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.GetActionResponse.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
{
    appId?: string;
    appKey?: string;
    appName?: string;
    description?: string;
    display_name?: string;
    enabled?: boolean;
    logo?: string;
    name?: string;
    parameters?: {
        properties?: {
            [key: string]: unknown;
        };
        required?: string[];
        title?: string;
        type?: string;
    };
    response?: {
        properties?: {
            [key: string]: unknown;
        };
        required?: string[];
        title?: string;
        type?: string;
    };
}[]
```

----------------------------------------

TITLE: Installing Composio LLM Framework Plugins (Python)
DESCRIPTION: Installs specific Composio plugins for Python-based LLM frameworks such as CrewAI or LangChain. Users should choose the plugin relevant to their LLM framework. This enables seamless integration with the chosen framework.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/installation.mdx#_snippet_1

LANGUAGE: pip
CODE:
```
pip install composio_crewai      # For CrewAI
pip install composio_langchain   # For LangChain
```

LANGUAGE: uv
CODE:
```
uv add composio_crewai      # For CrewAI
uv add composio_langchain   # For LangChain
```

----------------------------------------

TITLE: Installing Composio SDK using npm
DESCRIPTION: This command installs the Composio SDK core package using npm, which is the first step to integrate Composio's functionalities into your project. It adds the `composio-core` dependency to your Node.js application.
SOURCE: https://github.com/composiohq/composio/blob/master/js/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install composio-core
```

----------------------------------------

TITLE: Importing Libraries and Initializing ComposioToolSet & LLM (Python)
DESCRIPTION: This code imports necessary classes from `autogen` and `composio_autogen`, then initializes `ComposioToolSet` with a user's API key. It also configures the `llm_config` dictionary, specifying the language model (`gpt-4o-mini`) and its API key for Autogen's use.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/autogen.mdx#_snippet_1

LANGUAGE: python
CODE:
```
from autogen import AssistantAgent, UserProxyAgent
from composio_autogen import ComposioToolSet, App

toolset = ComposioToolSet(api_key="<your-composio-api-key>")
llm_config = {
    "config_list": [
        {
            "model": "gpt-4o-mini",
            "api_key": "<your-api-key>"
        }
    ]
}
```

----------------------------------------

TITLE: Initializing FastAPI Server with Composio and OpenAI (Python)
DESCRIPTION: Sets up a FastAPI application, initializes OpenAI and Composio clients, and loads environment variables. It prepares the basic infrastructure for the webhook handler and tool interactions, allowing the application to interact with external services.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_12

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Request
from openai import OpenAI
from composio_openai import ComposioToolSet, App, Action
from dotenv import load_dotenv
import uvicorn

load_dotenv()
app = FastAPI()
client = OpenAI()
toolset = ComposioToolSet()
entity = toolset.get_entity(id="default")
```

----------------------------------------

TITLE: Installing Composio Autogen and Connecting GitHub (Bash)
DESCRIPTION: This snippet provides the necessary commands to install the `composio-autogen` package using pip and to connect a GitHub account via the `composio-cli`. It also includes a command to verify supported applications.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/autogen/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-autogen
composio-cli add github  # Connect your GitHub account
composio-cli show-apps   # Check all supported apps
```

----------------------------------------

TITLE: Enabling Slack 'New Message Received' Trigger with ComposioToolSet (Python)
DESCRIPTION: This snippet demonstrates how to enable the 'SLACK_RECEIVE_MESSAGE' trigger for a specific user entity using the ComposioToolSet in Python. It retrieves the user entity and then calls 'enable_trigger' with the application name, trigger name, and an empty configuration object.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_0

LANGUAGE: python
CODE:
```
from composio_openai import ComposioToolSet

toolset = ComposioToolSet()

user_id = "default" # User ID referencing an entity retrieved from application logic
entity = toolset.get_entity(id=user_id)
triggers = toolset.get_trigger("SLACK_RECEIVE_MESSAGE")

res = entity.enable_trigger(
    app=App.SLACK,
    trigger_name="SLACK_RECEIVE_MESSAGE",
    config={}
)

print(res["status"])
```

----------------------------------------

TITLE: Initializing Google AI Python Client - Python
DESCRIPTION: This Python snippet imports the `GenerativeModel` class from `vertexai.generative_models` and initializes a Google AI Python client using the 'gemini-pro' model. This sets up the environment for interacting with Gemini models and preparing for function calling.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/google/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from vertexai.generative_models import GenerativeModel

# Initialize Google AI Python client
model = GenerativeModel("gemini-pro")
```

----------------------------------------

TITLE: Initiating a New Connection in Composio SDK (TypeScript)
DESCRIPTION: This method initiates a new connection for a specified application. It requires the `appName` and can optionally take `authMode`, `authConfig`, `redirectUrl`, and `integrationId` to configure the connection process. It returns a Promise that resolves to a `ConnectionRequest` object, detailing the status of the connection initiation.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk.Entity.html#_snippet_9

LANGUAGE: TypeScript
CODE:
```
initiateConnection(appName: string, authMode?: AuthScheme, authConfig?: {
  [key: string]: any;
}, redirectUrl?: string, integrationId?: string): Promise<ConnectionRequest>
```

----------------------------------------

TITLE: Retrieving Single Action Details - Composio SDK - TypeScript
DESCRIPTION: This method retrieves comprehensive details for a specific action registered in the Composio platform. It requires an object containing the action's name and returns a Promise that resolves to an object with properties like appId, appName, description, display_name, enabled status, logo, name, and detailed schemas for input parameters and expected responses.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk_models_actions.Actions.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
get(data): Promise<{
    appId?: string;
    appKey?: string;
    appName?: string;
    description?: string;
    display_name?: string;
    enabled?: boolean;
    logo?: string;
    name?: string;
    parameters?: {
        properties?: {
            [key: string]: unknown;
        };
        required?: string[];
        title?: string;
        type?: string;
    };
    response?: {
        properties?: {
            [key: string]: unknown;
        };
        required?: string[];
        title?: string;
        type?: string;
    };
}>
```

----------------------------------------

TITLE: Importing Libraries and Initializing Clients
DESCRIPTION: This step demonstrates how to import the required libraries and initialize the OpenAI client and ComposioToolSet for both Python and JavaScript. This sets up the core components necessary for interacting with OpenAI's API and Composio's integration capabilities.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
from openai import OpenAI
from composio_openai import ComposioToolSet, Action

openai_client = OpenAI()
composio_toolset = ComposioToolSet()
```

LANGUAGE: JavaScript
CODE:
```
import { OpenAIToolSet } from "composio-core";
import OpenAI from "openai";

const toolset = new OpenAIToolSet();
const openai = new OpenAI();
```

----------------------------------------

TITLE: Creating the Python OpenAI Agent
DESCRIPTION: This code creates an `OpenAIAgent` instance, combining GitHub and ArXiv tools. It configures the agent with the initialized language model, system messages, a maximum of 10 function calls, and disables parallel tool calls for sequential execution, enabling verbose output.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#_snippet_8

LANGUAGE: Python
CODE:
```
# Create the agent with tools
agent = OpenAIAgent.from_tools(
    tools=github_tools + arxiv_tool.to_tool_list(),
    llm=llm,
    prefix_messages=prefix_messages,
    max_function_calls=10,
    allow_parallel_tool_calls=False,
    verbose=True,
)
```

----------------------------------------

TITLE: Executing CAMEL-AI Agent with a GitHub Star Task
DESCRIPTION: This Python snippet demonstrates how to execute the configured CAMEL-AI agent with a specific user prompt to star a GitHub repository. It creates a user message from the prompt, prints it, and then calls `agent.step()` to process the request. The agent's responses are then iterated and animatedly printed to the console, showing the outcome of the task execution.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/camelai.mdx#_snippet_4

LANGUAGE: python
CODE:
```
prompt = (
        "I have created a new GitHub Repo,"
        "Please star my github repository: camel-ai/camel"
    )
    user_msg = BaseMessage.make_user_message(role_name="User", content=prompt)
    print(Fore.YELLOW + f"User prompt:\n{prompt}\n")

    response = agent.step(user_msg)
    for msg in response.msgs:
        print_text_animated(Fore.GREEN + f"Agent response:\n{msg.content}\n")
```

----------------------------------------

TITLE: Run PraisonAI Agents to Execute Task
DESCRIPTION: This code initializes the PraisonAI instance using the defined `agent_yaml` configuration and then executes the agent's main task. The result of the agent's operation, such as starring a GitHub repository, is then printed to the console.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/praisonai.mdx#_snippet_4

LANGUAGE: python
CODE:
```
# Create a PraisonAI instance with the agent_yaml content
praison_ai = PraisonAI(agent_yaml=agent_yaml)

# Run PraisonAI
result = praison_ai.main()

# Print the result
print(result)
```

----------------------------------------

TITLE: Executing GitHub Action with Entity ID in TypeScript
DESCRIPTION: This TypeScript snippet shows how to asynchronously fetch the authenticated GitHub user's details using `entityId`. It utilizes `toolset.executeAction` to perform the `GITHUB_GET_THE_AUTHENTICATED_USER` action, handling both successful data retrieval and error scenarios with appropriate console logging.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
console.log(`\nFetching GitHub username for entity: ${userIdInMyApp}`);
try {
    const user_info = await toolset.executeAction({
        action: Action.GITHUB_GET_THE_AUTHENTICATED_USER,
        params: {},
        entityId: userIdInMyApp // Specify the user context
        // Or use connectionId if you have it and need precision:
        // connectedAccountId: activeConnection?.id
    });

    if (user_info.successful) {
        console.log("GitHub username:", (user_info.data as any)?.login);
    } else {
        console.error("Failed to fetch user:", user_info.error);
    }
} catch (error) {
    console.error("Error during execution:", error);
}
```

----------------------------------------

TITLE: Configuring and Executing CrewAI Agent for GitHub Actions (Python)
DESCRIPTION: This Python snippet defines and executes a CrewAI agent. It configures the agent with a specific role, goal, backstory, and sets `verbose` to true for detailed output. The agent is equipped with the previously initialized `ComposioToolSet` (`tools`) and the `ChatOpenAI` language model (`llm`). A `Task` is then defined for the agent to star a GitHub repository, and the task is executed, demonstrating the agent's ability to perform external actions.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/crew_ai/README.md#_snippet_3

LANGUAGE: python
CODE:
```
crewai_agent = Agent(
    role='Github Agent',
    goal="You take action on Github using Github APIs",
    backstory="You are an AI agent responsible for taking actions on Github on users' behalf using Github APIs",
    verbose=True,
    tools=tools,
    llm=llm
)

# Define the task
task = Task(
    description="Star a repo composiohq/composio on GitHub",
    agent=crewai_agent,
    expected_output="if the star happened"
)

# Execute the task
task.execute()
```

----------------------------------------

TITLE: Executing SQL Agent Workflow in JavaScript
DESCRIPTION: This snippet defines and executes an asynchronous SQL Agent workflow. It involves defining a SQL query, executing it via `executeSQLQuery`, processing the results to create a visualization using `createVisualization`, and logging the completion or any errors. It demonstrates a complete data processing pipeline.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#_snippet_11

LANGUAGE: JavaScript
CODE:
```
// Main function to run the SQL Agent workflow
async function runSQLAgent() {
    try {
        // Define the SQL query
        const query = "SELECT * FROM MOCK_DATA ORDER BY salary DESC LIMIT 10";
        
        // Execute the SQL query
        const queryResult = await executeSQLQuery(query);
        
        // Create visualization based on query results
        const visualizationResult = await createVisualization(queryResult);
        
        console.log("SQL Agent workflow completed successfully!");
        return {
            queryResult,
            visualizationResult
        };
    } catch (error) {
        console.error("An error occurred:", error);
        throw error;
    }
}

// Execute the workflow
runSQLAgent().catch(error => console.error("SQL Agent failed:", error));
```

----------------------------------------

TITLE: Subscribing to Trigger Events via Websockets - TypeScript
DESCRIPTION: This TypeScript snippet shows how to subscribe to trigger events using the Composio SDK's `triggers.subscribe` method. It provides a callback function to log the received data and filters events by `triggerName: 'SLACK_RECEIVE_MESSAGE'`.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
const listener = toolset.triggers.subscribe(
    (data) => {
        console.log(data);
    },
    {
        triggerName: "SLACK_RECEIVE_MESSAGE"
    }
)
```

----------------------------------------

TITLE: Defining Method for GitHub Account Connection with Composio JS SDK
DESCRIPTION: Defines an asynchronous function `setupUserConnectionIfNotExists` to manage user connections for the 'github' application using the Composio SDK. It checks for an existing connection and initiates a new one if none is found, providing a redirect URL for user authentication and waiting for the connection to become active. This ensures the agent has the necessary permissions to interact with GitHub.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai-js.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import { OpenAI } from "openai";
import { OpenAIToolSet } from "composio-core";

const COMPOSIO_API_KEY = "<your-composio-api-key>";
const OPEN_AI_API_KEY = "<your-openai-api-key>";
const toolset = new OpenAIToolSet({apiKey: COMPOSIO_API_KEY,});

const appName = 'github';

async function setupUserConnectionIfNotExists(entityId) {
        const entity = toolset.client.getEntity(entityId);
        const connection = await entity.getConnection({ appName: appName });

        if (!connection) {
            const connection = await entity.initiateConnection({appName: appName});
            console.log("Log in via: ", connection.redirectUrl);
            return connection.waitUntilActive(60);
        }

        return connection;
}
```

----------------------------------------

TITLE: Initializing Composio Tools with Retry Configuration (Python)
DESCRIPTION: This snippet demonstrates how to initialize the `ComposioToolSet` and configure retry attempts for specific GitHub actions, such as starring a repository and creating a repository. It also sets a default maximum retry count for any tools not explicitly listed in the `max_retries` dictionary.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/pydanticai/README.md#_snippet_2

LANGUAGE: python
CODE:
```
# Initialize toolset
composio_toolset = ComposioToolSet()

# Configure max retries for specific tools
max_retries = {
    Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER: 5,    # More retries for starring
    Action.GITHUB_CREATE_REPOSITORY: 2   # Fewer retries for creation
}

# Get GitHub tools with retry configuration
tools = composio_toolset.get_tools(
    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER],
    max_retries=max_retries,
    default_max_retries=3  # Default retries for tools not specified in max_retries
)
```

----------------------------------------

TITLE: Configuring CAMEL-AI Chat Agent with Composio Tools
DESCRIPTION: This Python snippet configures a CAMEL-AI `ChatAgent` by setting up its model (GPT-3.5 Turbo) with a low temperature and integrating the previously fetched Composio tools. It defines the assistant's system message, establishing its role as a GitHub-experienced programmer capable of using available tools to execute instructions. The agent is then initialized and reset.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/camelai.mdx#_snippet_3

LANGUAGE: python
CODE:
```
assistant_model_config = ChatGPTConfig(
        temperature=0.0,
        tools=tools,
    )

    model = ModelFactory.create(
        model_platform=ModelPlatformType.OPENAI,
        model_type=ModelType.GPT_3_5_TURBO,
        model_config_dict=assistant_model_config.__dict__,
    )


    # set up agent
    assistant_sys_msg = BaseMessage.make_assistant_message(
        role_name="Developer",
        content=(
            "You are a programmer as well an experienced github user. "
            "When asked given a instruction, "
            "you try to use available tools, and execute it"
        ),
    )

    agent = ChatAgent(
        assistant_sys_msg,
        model,
        tools=tools,
    )
    agent.reset()
```

----------------------------------------

TITLE: Initializing Language Model and Composio RAG Tools
DESCRIPTION: This snippet initializes the `ChatOpenAI` language model and sets up Composio tools for RAG operations. The Python version uses `ComposioToolSet` to get all RAG-specific tools, while the JavaScript version configures `LangchainToolSet` with an API key and Docker workspace, then asynchronously fetches specific RAG actions like `rag_add_content`, `rag_get_content`, and `rag_query`.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#_snippet_2

LANGUAGE: Python
CODE:
```
load_dotenv()

# Initialize the language model
llm = ChatOpenAI(model="gpt-4o")

# Set up Composio tools
composio_toolset = ComposioToolSet()

# Get tools for RAG operations
rag_tools = composio_toolset.get_tools(apps=[App.RAG])
```

LANGUAGE: JavaScript
CODE:
```
// Initialize the language model
const llm = new ChatOpenAI({ model: "gpt-4-turbo" });

// Setup Composio tools with workspace environment
const composioToolset = new LangchainToolSet({
    apiKey: process.env.COMPOSIO_API_KEY,
    workspace: {
        type: "docker"
    }
});

// Get tools for RAG operations
const getTools = async () => {
    return await composioToolset.getTools({
        actions: ["rag_add_content", "rag_get_content", "rag_query"]
    });
};
```

----------------------------------------

TITLE: Retrieving GitHub Tools from Composio
DESCRIPTION: This step shows how to retrieve all available tools for a specific application, such as GitHub, using ComposioToolSet in both Python and JavaScript. These tools will be provided to the OpenAI Assistant to enable it to interact with GitHub.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai.mdx#_snippet_3

LANGUAGE: Python
CODE:
```
tools = composio_toolset.get_tools(apps=[App.GITHUB])
```

LANGUAGE: JavaScript
CODE:
```
const tools = await toolset.getTools({ apps: ["github"] });
```

----------------------------------------

TITLE: Configuring LlamaIndex FunctionCallingAgentWorker
DESCRIPTION: Configures a `FunctionCallingAgentWorker` with the fetched GitHub tools and the initialized OpenAI LLM. It sets a system message as a prefix, limits function calls, disables parallel tool calls, and enables verbose output, preparing the agent to execute integration tasks.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/llamaindex/README.md#_snippet_3

LANGUAGE: python
CODE:
```
prefix_messages = [
    ChatMessage(
        role="system",
        content=(
            "You are now a integration agent, and what  ever you are requested, you will try to execute utilizing your toools."
        ),
    )
]

agent = FunctionCallingAgentWorker(
    tools=tools,
    llm=llm,
    prefix_messages=prefix_messages,
    max_function_calls=10,
    allow_parallel_tool_calls=False,
    verbose=True,
).as_agent()
```

----------------------------------------

TITLE: Integrating GitHub Tools with Composio for Gemini - Python
DESCRIPTION: This snippet demonstrates how to fetch and integrate specific GitHub tools provided by Composio into the Google AI Python environment. It initializes a `ComposioToolSet`, retrieves the action for starring a GitHub repository, and configures the `GenerateContentConfig` for the Gemini client with these tools.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/gemini/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from google.genai import types

from composio_gemini import Action, ComposioToolSet

# Create composio client
toolset = ComposioToolSet()

# Create tools
tools = toolset.get_tools(
    actions=[
        Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER,
    ]
)

# Create genai client config
config = types.GenerateContentConfig(
    tools=tools  # type: ignore    
)
```

----------------------------------------

TITLE: Integrating GitHub Tools with Composio (Python)
DESCRIPTION: This Python snippet demonstrates how to fetch and integrate GitHub-specific tools from Composio using `ComposioToolSet`. These tools extend LangChain operations, allowing Claude to interact with GitHub functionalities.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/claude/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from composio_claude import App, ComposioToolSet

toolset = ComposioToolSet()
actions = toolset.get_tools(tools=App.GITHUB)
```

----------------------------------------

TITLE: Initializing OpenAI and Composio Clients (Python)
DESCRIPTION: This snippet initializes the OpenAI client and the Composio toolset in Python. It assumes API keys are loaded from a .env file. The ComposioToolSet() constructor uses a default entity_id.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/introduction.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
from composio_openai import ComposioToolSet, App, Action
from openai import OpenAI
# Assumes .env file with API keys is loaded

client = OpenAI()
toolset = ComposioToolSet() # Uses default entity_id
```

----------------------------------------

TITLE: Fetching Tools by Application with ComposioToolSet in Python
DESCRIPTION: This snippet shows how to fetch a collection of default tools associated with a specific application, such as GitHub, using the App enum. It highlights that this method returns 'important' tools by default to prevent context window overload.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#_snippet_2

LANGUAGE: python
CODE:
```
# Fetch default tools for the connected GitHub app
github_tools = toolset.get_tools(apps=[App.GITHUB])

print(f"Fetched {len(github_tools)} tools for GitHub.")
# Output contains schemas for 'important' GitHub tools.
```

----------------------------------------

TITLE: Importing Packages and Initializing Autogen Agents (Python)
DESCRIPTION: This Python snippet imports essential Autogen and Composio packages, configures the language model with an OpenAI API key, and initializes both an `AssistantAgent` (chatbot) and a `UserProxyAgent`. The `UserProxyAgent` is configured for automated termination and code execution without Docker.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/autogen/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from autogen import AssistantAgent, UserProxyAgent
from composio_autogen import ComposioToolSet, App, Action
import os

# Configuration for the language model
llm_config = {"config_list": [{"model": "gpt-4-turbo", "api_key": os.environ["OPENAI_API_KEY"]}]}

# Initialize the AssistantAgent
chatbot = AssistantAgent(
    "chatbot",
    system_message="Reply TERMINATE when the task is done or when user's content is empty",
    llm_config=llm_config,
)

# Initialize the UserProxyAgent
user_proxy = UserProxyAgent(
    "user_proxy",
    is_termination_msg=lambda x: x.get("content", "") and "TERMINATE" in x.get("content", ""),
    human_input_mode="NEVER",  # Don't take input from User
    code_execution_config={"use_docker": False}
)
```

----------------------------------------

TITLE: Configuring FlyIO Workspace with Custom Image and Port Mapping (Python)
DESCRIPTION: This example details how to initialize a FlyIO workspace with a custom Docker image and advanced port configurations. This allows for specific application images and complex networking setups for deployment or development on FlyIO machines.
SOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#_snippet_10

LANGUAGE: Python
CODE:
```
from composio import ComposioToolSet, WorkspaceType

composio_toolset = ComposioToolSet(
    workspace_config=WorkspaceType.FlyIO(
        image="composio/composio",
        ports=[
            {
                "ports": [
                    {"port": 443, "handlers": ["tls", "http"]},
                ],
                "internal_port": 80,
                "protocol": "tcp",
            }
        ],
    )
)
```

----------------------------------------

TITLE: Retrieving Connections in Composio SDK (TypeScript)
DESCRIPTION: This method asynchronously retrieves a list of all active connections associated with the Composio SDK. It returns a Promise that resolves to an array of connection objects, each containing details like app name, connection parameters (e.g., access token, base URL), connector ID, creation/update timestamps, and status.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk.Entity.html#_snippet_8

LANGUAGE: TypeScript
CODE:
```
getConnections(): Promise<undefined | {
  appName?: string;
  connectionParams?: {
    access_token?: string;
    base_url?: string;
    bot_id?: string;
    client_id?: string;
    client_secret?: string;
    created_at?: number;
    duplicated_template_id?: string;
    expires_in?: number;
    organization?: string;
    owner?: string | {
      type?: string;
      user?: {
        avatar_url?: (...) | (...);
        id?: (...) | (...);
        name?: (...) | (...);
        object?: (...) | (...);
        person?: (...) | (...);
        type?: (...) | (...);
      };
    };
    refresh_token?: string;
    request_id?: string;
    scope?: string;
    token_type?: string;
    workspace_icon?: string;
    workspace_id?: string;
    workspace_name?: string;
  };
  connectorId?: string;
  createdAt?: string;
  id?: string;
  logo?: string;
  status?: "FAILED" | "INITIATED" | "ACTIVE";
  updatedAt?: string;
}[]>
```

----------------------------------------

TITLE: Getting Composio Entity Object for User (Python)
DESCRIPTION: This snippet demonstrates how to retrieve a Composio `Entity` object for a specific end-user using their unique `entity_id`. This `entity` object is crucial for initiating connections and performing actions on behalf of that user. The `user_identifier_from_my_app` should map to a unique ID from your application's database or UUID system.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/connection.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
from composio_openai import ComposioToolSet, Action, App

toolset = ComposioToolSet()
user_identifier_from_my_app = "user_7a9f3b_db_id" # Example

# Get the Composio Entity object for your user
entity = toolset.get_entity(id=user_identifier_from_my_app)
# Use this 'entity' object to initiate connections
```

----------------------------------------

TITLE: Handling Tool Calls from Google AI Model (Python)
DESCRIPTION: This Python snippet processes the response received from the Google AI model using `composio_toolset.handle_response()`. This function executes any tool calls suggested by the model, such as starring a GitHub repository, and then prints the result of that function call.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/google.mdx#_snippet_4

LANGUAGE: python
CODE:
```
result = composio_toolset.handle_response(response)
print("Function call result:")
print(result)
```

----------------------------------------

TITLE: Setting Up Python Composio and ArXiv Tools
DESCRIPTION: This code initializes the Composio toolset, retrieves the GitHub 'create issue' action, and instantiates the ArXiv tool. It also defines a system message to guide the agent's behavior as a research agent utilizing its available tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#_snippet_6

LANGUAGE: Python
CODE:
```
# Get Composio toolset and add ArXiv tools
composio_toolset = ComposioToolSet()
github_tools = composio_toolset.get_actions(actions=[Action.GITHUB_CREATE_AN_ISSUE])
arxiv_tool = ArxivToolSpec()

# Define system message
prefix_messages = [
    ChatMessage(
        role="system",
        content=(
            "You are now a research agent, and whatever you are "
            "requested, you will try to execute utilizing your tools."
        ),
    )
]
```

----------------------------------------

TITLE: Initializing LLM and Defining Composio Tools
DESCRIPTION: This step initializes the `ChatOpenAI` language model and sets up `ComposioToolSet`. It demonstrates how to retrieve specific tools for SQL and File operations (`App.SQLTOOL`, `App.FILETOOL`), code interpretation (`App.CODEINTERPRETER`), and a combination of all. A prompt template is also pulled from LangChain Hub for the agent.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#_snippet_2

LANGUAGE: Python
CODE:
```
# Initialize the language model
llm = ChatOpenAI(model="gpt-4o")

# Initialize the Composio ToolSet
composio_toolset = ComposioToolSet()

# Get tools for SQL and File operations
sql_file_tools = composio_toolset.get_tools(apps=[App.SQLTOOL, App.FILETOOL])

# Get tools for code interpreter (for plotting graphs)
code_tools = composio_toolset.get_tools(apps=[App.CODEINTERPRETER])

# Get all tools combined
all_tools = composio_toolset.get_tools(apps=[App.SQLTOOL, App.FILETOOL, App.CODEINTERPRETER])

# Pull the prompt template for the agent
prompt = hub.pull("hwchase17/openai-functions-agent")
```

LANGUAGE: JavaScript
CODE:
```
// Initialize the Composio ToolSet
const composioToolset = new ComposioToolSet({
    apiKey: process.env.COMPOSIO_API_KEY
});

// Initialize the language model
const llm = new ChatOpenAI({ model: "gpt-4-turbo" });

// Function to get SQL and File tools
const getSQLTools = async () => {
    return await composioToolset.getTools({ 
        apps: ["sqltool", "filetool"] 
    });
};

// Function to get all tools including code interpreter
const getAllTools = async () => {
    return await composioToolset.getTools({ 
        apps: ["sqltool", "filetool", "codeinterpreter"] 
    });
};
```

----------------------------------------

TITLE: Filtering Composio ToolSet for Specific GitHub Actions (Python)
DESCRIPTION: This Python snippet demonstrates how to configure `ComposioToolSet` to allow only a specific action, in this case, `GITHUB_CREATE_ISSUE`. This is useful for limiting the agent's capabilities to a predefined set of operations for security or scope control.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langchain/README.md#_snippet_5

LANGUAGE: python
CODE:
```
# Filter to only allow creating issues on GitHub
toolsGithubCreateIssue = ComposioToolSet(actions=[Action.GITHUB_CREATE_ISSUE])
```

----------------------------------------

TITLE: Executing GitHub Action with Composio (Python)
DESCRIPTION: This snippet demonstrates how to execute a GitHub action using the Composio `toolset` after an active connection is established. It fetches the authenticated user's GitHub username, handling both successful and failed execution outcomes. It relies on a pre-existing `active_connection` and `toolset` instance.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#_snippet_8

LANGUAGE: Python
CODE:
```
              if active_connection and active_connection.status == "ACTIVE":
                  print(f"\nExecuting action using connection ID: {active_connection.id}")
                  print(f"Fetching GitHub username for entity: {user_id_in_my_app}...")

                  user_info = toolset.execute_action(
                      action=Action.GITHUB_GET_THE_AUTHENTICATED_USER,
                      params={},
                      # Provide context via entity_id (recommended)
                      entity_id=user_id_in_my_app
                      # OR precisely target the connection (if ID was stored)
                      # connected_account_id=active_connection.id
                  )

                  print("\n--- Execution Result ---")
                  if user_info.get("successful"):
                      username = user_info.get("data", {}).get("login", "N/A")
                      print(f"Successfully fetched GitHub username: {username}")
                  else:
                      print(f"Failed to fetch user info: {user_info.get('error', 'Unknown error')}")
                  # import json
                  # print("\nFull response:")
                  # print(json.dumps(user_info, indent=2))
              else:
                   print("\nSkipping action execution as connection is not active.")


          except Exception as e:
              print(f"\nAn unexpected error occurred: {e}", file=sys.stderr)

      if __name__ == "__main__":
          run_auth_flow()
```

----------------------------------------

TITLE: Adding Slack Integration with Composio CLI
DESCRIPTION: This command demonstrates how to add a Slack integration using the Composio CLI. It initiates an interactive setup process, typically defaulting to Composio's shared OAuth app for simplicity. The CLI will guide through authentication and output the `integration_id` upon successful completion.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/integration.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
composio add slack
```

----------------------------------------

TITLE: Fetching All GitHub Tools with Composio Python
DESCRIPTION: This line of code retrieves all available tools for the GitHub application from the initialized `ComposioToolSet`. The `tools` variable will then contain a list of callable functions that represent various GitHub actions, which can be passed to the LiteLLM router.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/litellm.mdx#_snippet_4

LANGUAGE: python Python
CODE:
```
tools = toolset.get_tools(apps=[App.GITHUB])
```

----------------------------------------

TITLE: Setting Up JavaScript Composio Tools for Research
DESCRIPTION: This snippet initializes the Composio `OpenAIToolSet` using an API key. It then defines an asynchronous function `getTools` to retrieve specific actions, including SerpAPI search, GitHub user authentication, and GitHub issue creation, for the agent's use.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#_snippet_7

LANGUAGE: JavaScript
CODE:
```
// Initialize the Composio toolset
const toolset = new OpenAIToolSet({
    apiKey: process.env.COMPOSIO_API_KEY,
});

// Get the necessary tools for research and GitHub interaction
const getTools = async () => {
    return await toolset.get_actions([
        Action.SERPAPI_SEARCH,
        Action.GITHUB_USERS_GET_AUTHENTICATED,
        Action.GITHUB_ISSUES_CREATE
    ]);
};
```

----------------------------------------

TITLE: Adapting Composio Parameters to Framework Format (Python)
DESCRIPTION: This Python function `_adapt_parameters` is a placeholder for converting Composio's parameter schema into a format expected by a specific framework. It addresses type compatibility issues, which are a common source of bugs in integrations.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#_snippet_8

LANGUAGE: python
CODE:
```
def _adapt_parameters(self, schema_params):
    """Convert Composio parameter schema to framework-specific format"""
    # Implement type conversions here
    return converted_schema
```

----------------------------------------

TITLE: Defining Langchain ReAct Agent Logic
DESCRIPTION: This code defines the core logic of the ReAct agent, chaining together input processing, scratchpad formatting, prompt application, LLM interaction with a stop sequence, and output parsing using `ReActJsonSingleInputOutputParser`.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#_snippet_6

LANGUAGE: python
CODE:
```
chat_model_with_stop = chat_model.bind(stop=["\nInvalidStop"])
agent = (
{
"input": lambda x: x["input"],
"agent_scratchpad": lambda x: format_log_to_str(x["intermediate_steps"]),
}
| prompt
| chat_model_with_stop
| ReActJsonSingleInputOutputParser()
)
```

----------------------------------------

TITLE: Initializing Composio ToolSet for GitHub (Python)
DESCRIPTION: This Python snippet demonstrates how to fetch GitHub-specific tools using `ComposioToolSet`. It imports `ComposioToolSet`, `Action`, and `App` from `composio_langchain` and initializes the toolset, limiting it to GitHub functionalities for the agent.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langchain/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from composio_langchain import ComposioToolSet, Action, App

# Initialize the toolset for GitHub
tools = ComposioToolSet(apps=[App.GITHUB])
```

----------------------------------------

TITLE: Initiating GitHub Connection Programmatically with Composio Python
DESCRIPTION: This Python snippet programmatically initiates the connection process for the GitHub application using the `ComposioToolSet`. It returns a `redirectUrl` that the user must open in a browser to complete the OAuth authentication flow for GitHub.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/litellm.mdx#_snippet_3

LANGUAGE: python Python
CODE:
```
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")
```

----------------------------------------

TITLE: Filtering Composio Tools by Specific Actions
DESCRIPTION: This command demonstrates how to restrict the agent's capabilities by fetching only specific actions from a toolset, rather than all available actions for a given application.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/groq.mdx#_snippet_5

LANGUAGE: python
CODE:
```
# To restrict agents from using all the actions, filter specific actions
tools = composio_toolset.get_tools(apps=[App.GITHUB])
```

----------------------------------------

TITLE: Initializing Language Model and Defining Google Calendar Tools
DESCRIPTION: This snippet initializes the OpenAI language model (gpt-4o/gpt-4-turbo) and sets up the necessary tools for the agents. It specifically integrates Google Calendar functionalities via Composio, enabling the agents to create and list events. It also retrieves the current date and timezone for scheduling purposes.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/calendar-agent.mdx#_snippet_2

LANGUAGE: Python
CODE:
```
load_dotenv()

# Initialize the language model
llm = ChatOpenAI(model="gpt-4o")

# Define tools for the agents
# We are using Google calendar tool from composio to connect to our calendar account.
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.GOOGLECALENDAR])

# Retrieve the current date and time
date = datetime.today().strftime("%Y-%m-%d")
timezone = datetime.now().astimezone().tzinfo
```

LANGUAGE: JavaScript
CODE:
```
// Initialize the language model
const llm = new ChatOpenAI({ model: "gpt-4-turbo" });

// Define tools for the agents
// We are using Google calendar tool from composio to connect to our calendar account.
const composioToolset = new LangchainToolSet({
    apiKey: process.env.COMPOSIO_API_KEY
});
const tools = await composioToolset.getTools({
    actions: ["googlecalendar_create_event", "googlecalendar_list_events"]
});

// Retrieve the current date and time
const getCurrentDate = () => new Date().toISOString().split('T')[0];
const getTimezone = () => new Date().toLocaleTimeString('en-us', { timeZoneName: 'short' }).split(' ')[2];

const date = getCurrentDate();
const timezone = getTimezone();
```

----------------------------------------

TITLE: Implementing Postprocessing for GMAIL_FETCH_EMAILS in Python
DESCRIPTION: This snippet demonstrates how to define and apply a postprocessor function to filter the results of the `GMAIL_FETCH_EMAILS` action. The `filter_email_results` function extracts only the sender and subject from email data, reducing the payload size for LLMs. It shows how to register this function with the `toolset` using the `processors` argument for the "post" stage.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/processing-tools.mdx#_snippet_3

LANGUAGE: Python
CODE:
```
import json # For pretty printing example output

def filter_email_results(result: dict) -> dict:
    """Filters email list to only include sender and subject."""
    # Pass through errors or unsuccessful executions unchanged
    if not result.get("successful") or "data" not in result:
        return result

    original_messages = result["data"].get("messages", [])
    if not isinstance(original_messages, list):
        return result # Return if data format is unexpected

    filtered_messages = []
    for email in original_messages:
        filtered_messages.append({
            "sender": email.get("sender"),
            "subject": email.get("subject")
        })

    # Construct the new result dictionary
    processed_result = {
        "successful": True,
        # Use a clear key for the filtered data
        "data": {"summary": filtered_messages},
        "error": None
    }
    return processed_result

# Get tools with the postprocessor
processed_tools = toolset.get_tools(
    actions=[Action.GMAIL_FETCH_EMAILS],
    processors={
        "post": {Action.GMAIL_FETCH_EMAILS: filter_email_results}
    }
)

# --- Simulate Execution and Postprocessing ---
# Assume 'raw_execution_result' is the large dictionary returned by
# executing GMAIL_FETCH_EMAILS without postprocessing.
# raw_execution_result = toolset.execute_action(Action.GMAIL_FETCH_EMAILS, params={...})

# Apply the postprocessor manually to see the effect (handle_tool_calls does this automatically)
# filtered_result = filter_email_results(raw_execution_result)
# print("Filtered Result (much smaller for LLM):")
# print(json.dumps(filtered_result, indent=2))
```

----------------------------------------

TITLE: Invoking the Configured AI Agent
DESCRIPTION: This snippet demonstrates how to execute the previously defined `executeAgent` function. By calling it with an entity name, the agent initiates the process of connecting the user's GitHub account (if needed) and then proceeds to create a GitHub issue as configured in the agent setup. This is the final step to trigger the agent's functionality.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain-js.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
executeAgent("himanshu")
```

----------------------------------------

TITLE: Defining Subdomain Custom Field in YAML
DESCRIPTION: This YAML snippet defines a custom field named `subdomain`, often used for services like PostHog. It specifies the field's display name, description, data type (string), indicates it's required, and provides a default value of 'app' for the subdomain.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/add-your-app.mdx#_snippet_4

LANGUAGE: yaml
CODE:
```
fields:
  - name: subdomain
    display_name: Sub Domain
    description: "Your PostHog subdomain (e.g., 'app' for app.posthog.com)."
    type: string
    required: true
    default: "app"
```

----------------------------------------

TITLE: Validating Composio Tool Execution Response (Python)
DESCRIPTION: This Python snippet validates the response received from the agent execution. It uses `toolset.handle_tool_calls` to process the tool calls made by Claude, ensuring the intended task, like starring a GitHub repository, was successfully completed.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/claude/README.md#_snippet_4

LANGUAGE: python
CODE:
```
result = toolset.handle_tool_calls(response)
pprint(result)
```

----------------------------------------

TITLE: Connecting GitHub Account to Composio (Bash)
DESCRIPTION: This command connects your GitHub account to Composio, enabling the AI agent to interact with GitHub. It's a prerequisite for using GitHub-related tools and should be run in your terminal.
SOURCE: https://github.com/composiohq/composio/blob/master/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
composio add github # Run this in terminal
```

----------------------------------------

TITLE: Installing Composio and Connecting GitHub (Bash)
DESCRIPTION: This snippet provides instructions for installing the `composio-camel` package using pip and connecting a GitHub account via the `composio-cli`. It also shows how to view available applications.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/camel/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-camel

composio-cli add github

composio-cli show-apps
```

----------------------------------------

TITLE: Creating and Executing Langchain Agent - JavaScript
DESCRIPTION: This asynchronous function `runAgent` creates and executes an OpenAI functions agent using Langchain. It pulls a pre-trained prompt, initializes the agent with an LLM and tools, and then invokes the agent executor with a detailed input prompt to book calendar slots. The output is logged to the console.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/calendar-agent.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
      // Create and Execute Agent.
      async function runAgent() {
          const prompt = await pull("hwchase17/openai-functions-agent");
          const agent = await createOpenAIFunctionsAgent({
              llm,
              tools,
              prompt
          });

          const agentExecutor = new AgentExecutor({
              agent,
              tools,
              verbose: true,
          });

          const result = await agentExecutor.invoke({
              input: `Book slots according to this todo list: ${todo}. \n                      Label them with the work provided to be done in that time period. \n                      Schedule it for today. Today's date is ${date} (it's in YYYY-MM-DD format) \n                      and make the timezone be ${timezone}.`
          });

          console.log(result.output);
          return "Agent execution completed";
      }

      runAgent().then(console.log).catch(console.error);
```

----------------------------------------

TITLE: Import Libraries and Initialize ComposioToolSet
DESCRIPTION: This snippet imports required libraries such as `ComposioToolSet`, `Action`, `App` from `composio_smol`, `CodeAgent`, `HfApiModel` from `smolagents`, and `load_dotenv`. It then loads environment variables and initializes the `ComposioToolSet` for subsequent operations.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/smolagents.mdx#_snippet_1

LANGUAGE: python
CODE:
```
from composio_smol import ComposioToolSet, Action, App
from smolagents import CodeAgent, HfApiModel
from dotenv import load_dotenv

load_dotenv()

composio_toolset = ComposioToolSet()
```

----------------------------------------

TITLE: Configuring Smol Agent with Composio Tools (Python)
DESCRIPTION: This Python snippet shows how to create an instance of `CodeAgent` from `smolagents`. The agent is initialized with the previously fetched Composio tools and configured to use `HfApiModel` as its underlying model, preparing it for task execution.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/smolagent/README.md#_snippet_3

LANGUAGE: python
CODE:
```
# Create an agent with the tools
agent = CodeAgent(
    tools=tools,
    model=HfApiModel()
)
```

----------------------------------------

TITLE: Setting up ComposioToolSet with E2B Workspace in Python
DESCRIPTION: This snippet demonstrates how to initialize ComposioToolSet for tool execution in an E2B code sandbox. It requires an E2B API key and allows optional configuration of a template ID, port, and environment variables, then uses FILETOOL_LIST_FILES to interact with the E2B sandbox. An active E2B API key is a prerequisite for this configuration.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/workspaces/workspaces.mdx#_snippet_4

LANGUAGE: python
CODE:
```
from composio_openai import ComposioToolSet, App, Action, WorkspaceType
from openai import OpenAI

client = OpenAI()

toolset = ComposioToolSet(workspace_config=WorkspaceType.E2B(
    api_key="your_e2b_api_key",  # Required: E2B API Key
    template="2h9ws7lsk32jyow50lqz",  # Optional: Template ID for creating the sandbox
    port=8000,  # Optional: Port for launching the toolserver (default: 8000)
    environment={"KEY": "VALUE"}  # Optional: Environment variables
))
tools = toolset.get_tools(["FILETOOL_LIST_FILES"])

response = client.chat.completions.create(
    model="gpt-4o-mini",
    max_tokens=1024,
    tools=tools,
    messages=[{"role": "user", "content": "List files in E2B sandbox"}],
)
result = toolset.handle_tool_calls(response)
print(result)
```

----------------------------------------

TITLE: Retrieving GitHub Star Repository Action - Python
DESCRIPTION: This code retrieves a specific GitHub action, `GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER`, from the initialized `ComposioToolSet`. This action will be provided to the LiveKit agent, allowing it to perform the 'star a repository' operation.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/livekit.mdx#_snippet_5

LANGUAGE: python
CODE:
```
tools = toolset.get_tools(
    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]
)
```

----------------------------------------

TITLE: Waiting for Connection Activation - TypeScript
DESCRIPTION: This TypeScript example shows how to asynchronously wait for a Composio connection to become active using waitUntilActive. It includes a timeout parameter and a try-catch block to handle potential errors, such as the connection not activating within the given timeframe.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/oauth.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
console.log("Waiting for user authorization and connection activation...");
try {
    // Poll Composio until the status is ACTIVE
    const activeConnection = await connectionRequest.waitUntilActive(180); // Wait up to 3 minutes

    console.log(`Success! Connection is ACTIVE. ID: ${activeConnection.id}`);
    // Store activeConnection.id associated with your user (entityId)
    // Now ready for Step 4.
} catch (error) {
    console.error("Connection did not become active within timeout or failed:", error);
    // Implement retry logic or inform the user
}
```

----------------------------------------

TITLE: Filtering Composio ToolSet by Specific GitHub Action (Python)
DESCRIPTION: This Python snippet demonstrates how to initialize a `ComposioToolSet` to expose only a very specific action, `Action.GITHUB_CREATE_ISSUE`. This advanced configuration allows developers to restrict the agent's capabilities for security or to streamline its operational focus, ensuring it can only perform the specified GitHub action.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/crew_ai/README.md#_snippet_5

LANGUAGE: python
CODE:
```
toolsGithubCreateIssue = ComposioToolSet(actions=[Action.GITHUB_CREATE_ISSUE])
```

----------------------------------------

TITLE: Executing Gemini Agent to Star GitHub Repository - Python
DESCRIPTION: This snippet initializes a chat session with the Gemini model, configured with the GitHub tools. It then sends a message instructing the agent to star a specific GitHub repository and prints the agent's response, demonstrating the tool's execution.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/gemini.mdx#_snippet_5

LANGUAGE: python
CODE:
```
chat = client.chats.create(model="gemini-2.0-flash", config=config)

response = chat.send_message(
    "Can you star composiohq/composio repository on github",
)

print(response.text)
```

----------------------------------------

TITLE: Executing a Mastra Agent to Star a GitHub Repository in JavaScript
DESCRIPTION: This snippet demonstrates the execution of a Mastra agent configured with Composio tools. It defines an agent with specific instructions and a model, then streams its response to star a specified GitHub repository, showing how to interact with external applications.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/mastra.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
const mcp = new MCPConfiguration({
    servers: {
        github: {
        url: new URL("https://mcp.composio.dev/github/[private-url-path]"),
        },
    },
});

const agent = new Agent({
    name: "CLI Assistant",
    instructions: "You help users star GitHub repositories",
    model: openai("gpt-4o-mini"),
    tools: await mcp.getTools(),
});

const stream = await agent.stream("Please star the repository 'composiohq/composio'");

for await (const chunk of stream.textStream) {
    process.stdout.write(chunk);
}
```

----------------------------------------

TITLE: Fetching GitHub User Info Tool (Python/TypeScript)
DESCRIPTION: This snippet demonstrates how to retrieve a specific tool from the Composio `toolset` for interacting with GitHub. It uses `Action.GITHUB_GET_THE_AUTHENTICATED_USER` to fetch the tool necessary for getting the authenticated user's information, making it available for the LLM to use.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/introduction.mdx#_snippet_2

LANGUAGE: python
CODE:
```
tools = toolset.get_tools(actions=[Action.GITHUB_GET_THE_AUTHENTICATED_USER])
print(f"Fetched {len(tools)} tool(s) for the LLM.")
```

LANGUAGE: typescript
CODE:
```
const tools = await toolset.getTools({ actions: ["GITHUB_GET_THE_AUTHENTICATED_USER"] });
console.log(`Fetched ${tools.length} tool(s) for the LLM.`);
```

----------------------------------------

TITLE: Getting Connection Details in Composio Entity (TypeScript)
DESCRIPTION: This method fetches details for a connected account. It can optionally filter by `app` name or `connectedAccountId`. The method returns a Promise that resolves to a `GetConnectedAccountResponse` object if a matching connection is found, or `null` otherwise.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk.Entity.html#_snippet_7

LANGUAGE: TypeScript
CODE:
```
getConnection(app?, connectedAccountId?): Promise<null | GetConnectedAccountResponse>
```

----------------------------------------

TITLE: Initiating Composio Auth Connection (Python/TypeScript)
DESCRIPTION: This snippet shows how to initiate an OAuth connection using Composio. It involves getting an `Entity` object for the user and calling `initiate_connection` (Python) or `initiateConnection` (TypeScript) with the application name. Composio returns a `redirectUrl` that the user must visit to authorize the connection.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
from composio_openai import ComposioToolSet, Action # Or framework-specific ToolSet

toolset = ComposioToolSet()
entity = toolset.get_entity(id=user_id_in_my_app) # Get Entity object

print(f"Initiating GitHub connection for entity: {entity.id}")
# Initiate connection using the app's Integration and the user's Entity ID
connection_request = entity.initiate_connection(app_name=app_to_connect)

# Composio returns a redirect URL for OAuth flows
if connection_request.redirectUrl:
    print(f"Please direct the user to visit: {connection_request.redirectUrl}")
```

LANGUAGE: TypeScript
CODE:
```
import { OpenAIToolSet } from "composio-core"; // Or framework-specific ToolSet

// Assume GITHUB_INTEGRATION_ID is fetched from config/env
const GITHUB_INTEGRATION_ID = "int_xxxxxxxx...";
const toolset = new OpenAIToolSet(); // Or other ToolSet

async function initiate() {
    const entity = await toolset.getEntity(userIdInMyApp); // Get Entity object

    console.log(`Initiating GitHub connection for entity: ${entity.id}`);
    // Initiate connection using the app's Integration and the user's Entity ID
    const connectionRequest = await entity.initiateConnection({
        appName: appToConnect
    });

    // Composio returns a redirect URL for OAuth flows
    if (connectionRequest.redirectUrl) {
        console.log(`Please direct the user to visit: ${connectionRequest.redirectUrl}`);
    }
}

initiate();
```

----------------------------------------

TITLE: Invoking Application with Human Message in JavaScript
DESCRIPTION: This snippet demonstrates how to use the `app.invoke` method to send a human message to an application and log the content of the last message in the response stream. It shows a basic interaction pattern for sending commands or queries to an AI/automation system.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#_snippet_8

LANGUAGE: JavaScript
CODE:
```
const stream = await app.invoke({
    messages: [
        new HumanMessage("Star the GitHub Repository composiohq/composio")
    ]
});

console.log(stream.messages[stream.messages.length - 1].content);
```

----------------------------------------

TITLE: Configuring Python Environment and Research Parameters
DESCRIPTION: This code loads environment variables, initializes the OpenAI language model (`gpt-4o`), and defines key research parameters such as the `research_topic`, the `target_repo` for GitHub issues, and the number of `n_issues` to create.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#_snippet_4

LANGUAGE: Python
CODE:
```
# Load environment variables
dotenv.load_dotenv()

# Initialize the language model
llm = OpenAI(model="gpt-4o")

# Set research parameters
research_topic = "LLM agents function calling"
target_repo = "composiohq/composio"
n_issues = 3
```

----------------------------------------

TITLE: Configuring Pydantic-AI Agent with Composio Tools (Python)
DESCRIPTION: This code illustrates the creation and configuration of a Pydantic-AI agent. It specifies the AI model to be used (e.g., 'openai:gpt-4-turbo'), assigns the previously initialized Composio tools to the agent, and defines a system prompt to guide the agent's behavior for GitHub interactions.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/pydanticai/README.md#_snippet_3

LANGUAGE: python
CODE:
```
# Create an agent with the tools
agent = Agent(
    model="openai:gpt-4-turbo",  # Using a known model name
    tools=tools,
    system_prompt="""You are an AI agent that helps users interact with GitHub.
    You can perform various GitHub operations using the available tools.
    When given a task, analyze it and use the appropriate tool to complete it.""",
)
```

----------------------------------------

TITLE: Executing Combined SQL and Visualization Workflow in Python
DESCRIPTION: This Python `main` function orchestrates a complete workflow. It first executes an SQL query using an agent, then uses the output of that query to define and execute a data visualization task, printing the results of both steps.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#_snippet_7

LANGUAGE: Python
CODE:
```
def main():
    # First, execute SQL query
    sql_result = sql_executor.invoke({"input": query_task})
    print(f"SQL Query Result: {sql_result['output']}")
    
    # Then, create visualization
    visualization_task = (
        f"Using the following data from the top 10 highest salaries: {sql_result['output']}\n"
        "Create a bar chart showing first_name on the x-axis and salary on the y-axis. "
        "Save the visualization as 'salary_chart.png'."
    )
    visualization_result = visualization_executor.invoke({"input": visualization_task})
    print(f"Visualization Result: {visualization_result['output']}")
    
    return "Workflow completed successfully!"

if __name__ == "__main__":
    main()
```

----------------------------------------

TITLE: Defining Autogen Assistant and Registering Composio Tools (Python)
DESCRIPTION: This code defines an `AssistantAgent` (`chatbot`) and a `UserProxyAgent` (`user_proxy`) for Autogen, setting up their roles and termination conditions. It then registers all available Composio tools for the GitHub application with these agents, enabling them to use GitHub functionalities.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/autogen.mdx#_snippet_4

LANGUAGE: python
CODE:
```
chatbot = AssistantAgent(
    "chatbot",
    system_message="Reply TERMINATE when the task is done or when user's content is empty",
    llm_config=llm_config,
)

user_proxy = UserProxyAgent(
    name="User",
    is_termination_msg=lambda x: x.get("content", "")
    and "TERMINATE" in x.get("content", ""),
    human_input_mode="NEVER",
    code_execution_config={"use_docker": False},
)

toolset.register_tools(apps=[App.GITHUB], caller=chatbot, executor=user_proxy)
```

----------------------------------------

TITLE: Executing Gemini Agent to Star GitHub Repository - Python
DESCRIPTION: This snippet illustrates how to configure and execute the Gemini agent to perform an action, specifically starring a GitHub repository. It creates a chat interface using the specified model and configuration, then sends a conversational message to trigger the tool execution, and finally prints the agent's response.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/gemini/README.md#_snippet_3

LANGUAGE: python
CODE:
```
# Use the chat interface.
chat = client.chats.create(model="gemini-2.0-flash", config=config)
response = chat.send_message(
    "Can you star composiohq/composio repository on github",
)
print(response.text)
```

----------------------------------------

TITLE: Executing Agent for GitHub Repository Star - Python
DESCRIPTION: This Python snippet configures and executes the agent to perform a specific task, such as starring a GitHub repository. It uses the Together AI client to create a chat completion request, passing the fetched GitHub actions as tools to guide the model's decision-making process.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/togetherai/README.md#_snippet_3

LANGUAGE: python
CODE:
```
my_task = "Star a repo composiohq/composio on GitHub"

# Create a chat completion request to decide on the action
response = client.chat.completions.create(model="gpt-4o",
    tools=actions, # Passing actions we fetched earlier.
    messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": my_task}
        ]
    )

print(response)
```

----------------------------------------

TITLE: Initiating Composio Connection (Python)
DESCRIPTION: This Python snippet demonstrates initiating a connection for a specific user. It uses `toolset.get_entity` to retrieve the user's entity and then calls `initiate_connection`, providing the app name, auth mode, and crucially, a custom `redirect_url` where the user will be sent after completing the OAuth process.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/white-labelling.mdx#_snippet_3

LANGUAGE: python
CODE:
```
user_id = "00000000-0000-0000-0000-000000000000"
entity = toolset.get_entity(user_id)

thread_id = "12345678"
redirect_url = "https://yourapp.com/thread/{thread_id}" # Example redirect URL

conn_req = entity.initiate_connection(
    app_name=App.GOOGLECALENDAR,
    auth_mode="OAUTH2",
    use_composio_auth=False,
    redirect_url=redirect_url
)

print(conn_req.redirect_url)
```

----------------------------------------

TITLE: Initiating Composio Connection (TypeScript)
DESCRIPTION: This conceptual snippet illustrates how to initiate a connection using the `initiate` method on `toolset.connectedAccounts`, providing an `integrationId`. It also shows an example of executing an action like `GITHUB_CREATE_AN_ISSUE` after a connection is conceptually established. The specific details of connection initiation depend on the authentication type (OAuth or API Key).
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/connection.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
// Conceptual initiation - details depend on auth type
const connectionRequest = await toolset.connectedAccounts.initiate({
  integrationId: YOUR_INTEGRATION_ID,
});
// or
// const connectionRequest = await entity.initiateConnection({ appName: "github" });

toolset.executeAction({
  action: "GITHUB_CREATE_AN_ISSUE",
  params: {},
  entityId: userIdentifierFromMyApp
});
```

----------------------------------------

TITLE: Executing Assistant to Star GitHub Repository
DESCRIPTION: This code configures and executes the PhiData assistant, providing it with the integrated GitHub tools. The assistant then processes a conversational instruction to star a specified GitHub repository, demonstrating how LLMs can automate external application interactions.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/phidata/README.md#_snippet_3

LANGUAGE: python
CODE:
```
my_task = "Star a repo composiohq/composio on GitHub"

# Create a chat completion request to decide on the action
assistant = Assistant(tools=composio_tools, show_tool_calls=True)

assistant.print_response("Can you star ComposioHQ/composio repo?")
```

----------------------------------------

TITLE: Defining Newsletter Summarization and Sending Tasks in Python
DESCRIPTION: This Python snippet defines two `Task` objects: `summarize_task` for generating concise summaries of newsletter emails, and `send_task` for composing and sending an email containing these summaries. Each task specifies its purpose, expected output, the agent responsible, and its dependencies within a sequential workflow.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#_snippet_4

LANGUAGE: python
CODE:
```
          description="""Create a concise summary of each newsletter email.
          Identify the key points, announcements, and insights from each newsletter.
          Format your summaries neatly with bullet points.""",
          expected_output="Summarized content from all newsletters",
          agent=summarizer,
          context=[fetch_task]
      )

      send_task = Task(
          description="""Compose an email with the newsletter summaries.
          Send it to youremail@example.com with the subject 'Weekly Newsletter Digest'.
          Format the email in a reader-friendly way with headings for each newsletter.""",
          expected_output="Confirmation that the email was sent",
          agent=email_sender,
          context=[summarize_task]
      )
```

----------------------------------------

TITLE: Executing Langchain Agent for News Retrieval and Summarization
DESCRIPTION: This snippet instantiates and executes the `AgentExecutor` with the defined agent and tools. It first invokes the agent to find the latest AI news description using SERP, then uses that output as input for a second invocation to summarize it.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#_snippet_7

LANGUAGE: python
CODE:
```
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True, handle_parsing_errors=True)
agent_executor.return_intermediate_steps = True
res = agent_executor.invoke(
    {
        "input": "Use SERP to find the one latest AI news, take only description of article."
    }
)

res2 = agent_executor.invoke({
    "input": res['output']+' Summarize this'
})
```

----------------------------------------

TITLE: Filtering Composio Tools by Application and Tags (Python)
DESCRIPTION: This snippet illustrates how to refine tool selection by filtering based on both the application (e.g., Asana) and specific tags (e.g., `ASANA_TASKS`). This provides granular control over the actions an agent can perform within an app.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#_snippet_8

LANGUAGE: python
CODE:
```
actions = toolset.get_tools(apps=[App.ASANA], tags=[Tag.ASANA_TASKS])
```

----------------------------------------

TITLE: Initializing Composio Toolset for Code Interpreter
DESCRIPTION: This step demonstrates how to set up the Composio toolset, which provides access to the code interpreter functionality. For Python, it initializes the ComposioToolSet and retrieves tools specifically for the Code Interpreter app. For JavaScript, it initializes LangchainToolSet with an API key and fetches the 'codeinterpreter_execute_code' action.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/code-execution-agent.mdx#_snippet_2

LANGUAGE: python
CODE:
```
load_dotenv()

# Set up Composio tools
composio_toolset = ComposioToolSet()

# Get tools from the Code Interpreter app
tools = composio_toolset.get_tools(apps=[App.CODEINTERPRETER])
```

LANGUAGE: javascript
CODE:
```
// Set up Composio tools
const composioToolset = new LangchainToolSet({
    apiKey: process.env.COMPOSIO_API_KEY
});

// Get specific tools for code execution
const tools = await composioToolset.getTools({
    actions: ["codeinterpreter_execute_code"]
});
```

----------------------------------------

TITLE: Querying RAG Knowledge Base (JavaScript)
DESCRIPTION: The `queryKnowledgeBase` function in JavaScript performs a query against the RAG system. It takes an `agentExecutor` and a specific question, then invokes the agent to retrieve the answer from the knowledge base. The result is logged to the console, demonstrating the retrieval capability.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
// Function to query the knowledge base
const queryKnowledgeBase = async (agentExecutor) => {
          const query = "What is the capital of France?";
          
          const result = await agentExecutor.invoke({
              input: `Query the knowledge base to answer the following question: "${query}"`
          });
          
          console.log("Query Result:", result.output);
          return result;
      };
```

----------------------------------------

TITLE: Starting a Chat Session with Google AI Model (Python)
DESCRIPTION: This Python snippet initializes a chat session with the previously configured Google AI Gemini model. This session is used to send natural language commands to the model and receive responses.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/google.mdx#_snippet_2

LANGUAGE: python
CODE:
```
# Start a chat session
chat = model.start_chat()
```

----------------------------------------

TITLE: Identifying User Entity and Application for Composio Auth (Python/TypeScript)
DESCRIPTION: This snippet demonstrates how to define a unique user identifier (`entity_id`) from your application and the target application key (`app_to_connect`) for Composio Auth. These variables are crucial for initiating secure connections on behalf of a specific user.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
# User identifier from your application
user_id_in_my_app = "user-alice-456"    # Can be UUID from DB
app_to_connect = "github" # The app key
```

LANGUAGE: TypeScript
CODE:
```
// User identifier from your application
const userIdInMyApp = "user-alice-456"; // Can be UUID from DB
const appToConnect = "github"; // The app key
```

----------------------------------------

TITLE: Executing LangChain Agent to Star GitHub Repository (Python)
DESCRIPTION: This Python snippet configures and executes a LangChain agent to perform a specific task: starring a GitHub repository. It defines the task, creates an OpenAI functions agent with the initialized LLM, tools, and prompt, and then invokes the agent executor with the input task.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langchain/README.md#_snippet_3

LANGUAGE: python
CODE:
```
task = "Star a repo composiohq/composio on GitHub"

# Create and set up the agent
agent = create_openai_functions_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

# Execute the task
agent_executor.invoke({"input": task})
```

----------------------------------------

TITLE: Executing Agent to Star GitHub Repo (Python)
DESCRIPTION: This Python snippet configures and executes the Claude agent to perform a specific task, such as starring a GitHub repository. It uses the `client.beta.tools.messages.create` method with the integrated GitHub tools to generate a response based on a user prompt.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/claude/README.md#_snippet_3

LANGUAGE: python
CODE:
```
my_task = "Star a repo composiohq/composio on GitHub"

# Create a chat completion request to decide on the action
response = client.beta.tools.messages.create(
    model="claude-3-opus-20240229",
    max_tokens=1024,
    tools= actions,
    messages=[{"role": "user", "content": "Star me composiohq/composio repo in github."}]
)
pprint(response)
```

----------------------------------------

TITLE: Connecting GitHub Account via Composio CLI
DESCRIPTION: These CLI commands are used to authenticate with Composio and add the GitHub integration. `composio login` initiates the authentication flow, and `composio add github` specifically registers the GitHub application with Composio, enabling access to GitHub tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/litellm.mdx#_snippet_2

LANGUAGE: shell CLI
CODE:
```
composio login 
composio add github
```

----------------------------------------

TITLE: Initiating GitHub Connection Programmatically - Python
DESCRIPTION: This Python snippet demonstrates how to programmatically initiate the GitHub connection process using the `ComposioToolSet`. It prints a redirect URL that the user must open in a browser to complete the authentication and authorization flow for GitHub.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/livekit.mdx#_snippet_4

LANGUAGE: python
CODE:
```
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")
```

----------------------------------------

TITLE: Importing LangChain and OpenAI Components (Python)
DESCRIPTION: This Python snippet initializes the LangChain environment by importing necessary classes like `create_openai_functions_agent`, `AgentExecutor`, `hub`, and `ChatOpenAI`. It sets up the OpenAI chat model and pulls a pre-configured agent prompt from LangChain hub, preparing the foundation for agent creation.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langchain/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain import hub
from langchain_openai import ChatOpenAI

# Initialize LangChain OpenAI Chat
llm = ChatOpenAI()

# Pull the agent prompt configuration
prompt = hub.pull("hwchase17/openai-functions-agent")
```

----------------------------------------

TITLE: Waiting for Connection Activation - Python
DESCRIPTION: This snippet demonstrates how to poll the Composio service until a connection request transitions to an 'ACTIVE' status. It uses the wait_until_active method, passing the Composio client and a timeout. Error handling is included for cases where the connection does not activate within the specified time.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/oauth.mdx#_snippet_2

LANGUAGE: python
CODE:
```
print("Waiting for user authorization and connection activation...")
try:
    # Poll Composio until the status is ACTIVE
    active_connection = connection_request.wait_until_active(
        client=toolset.client, # Pass the Composio client instance
        timeout=180 # Wait up to 3 minutes (adjust as needed)
    )
    print(f"Success! Connection is ACTIVE. ID: {active_connection.id}")
    # Store active_connection.id associated with your user (entity_id)
    # Now ready for Step 4.
except Exception as e: # Catches TimeoutError, etc.
    print(f"Connection did not become active within timeout or failed: {e}")
    # Implement retry logic or inform the user
```

----------------------------------------

TITLE: Waiting for Composio Auth Connection Activation (Python/TypeScript)
DESCRIPTION: This snippet demonstrates how to programmatically wait for an initiated Composio OAuth connection to become active. It uses `wait_until_active` (Python) or `waitUntilActive` (TypeScript) to poll the connection status, ensuring the user has completed the authorization flow in their browser. A timeout is included to prevent indefinite waiting.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#_snippet_2

LANGUAGE: Python
CODE:
```
# Wait for the user to complete the OAuth flow in their browser
print("Waiting for connection to become active...")
try:
    # This polls until the connection status is ACTIVE or timeout occurs
    active_connection = connection_request.wait_until_active(
        client=toolset.client, # Pass the underlying client
        timeout=120 # Wait for up to 2 minutes
    )
    print(f"Connection successful! ID: {active_connection.id}")
    # Store active_connection.id associated with user_id_in_my_app
except Exception as e:
    print(f"Connection timed out or failed: {e}")
```

LANGUAGE: TypeScript
CODE:
```
async function waitForActive(connectionRequest: ConnectionRequest) { // Assuming connectionRequest from step 2
    console.log("Waiting for connection to become active...");
    try {
        // This polls until the connection status is ACTIVE or timeout occurs
        const activeConnection = await connectionRequest.waitUntilActive(120); // Wait up to 2 minutes
        console.log(`Connection successful! ID: ${activeConnection.id}`);
        // Store activeConnection.id associated with userIdInMyApp
    } catch (e) {
        console.error("Connection timed out or failed:", e);
    }
}

// You would call waitForActive after the user interaction is expected
// Example call (needs connectionRequest object from previous step):
waitForActive(connectionRequest);
```

----------------------------------------

TITLE: Filtering Composio Actions by Tags (Python)
DESCRIPTION: This Python snippet illustrates how to filter Composio actions by specific tags within a given application. It retrieves tools from the Asana app that are specifically tagged as `ASANA_TASKS`, allowing fine-grained control over the actions the model can perform.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/google.mdx#_snippet_7

LANGUAGE: python
CODE:
```
actions = composio_toolset.get_tool(apps=[App.ASANA], tags=[Tag.ASANA_TASKS]) 
```

----------------------------------------

TITLE: Running Research Agent in Python
DESCRIPTION: This Python snippet defines the `main` function to execute the research agent. It constructs a dynamic prompt using f-strings to specify the research topic, number of issues, and target GitHub repository. The agent's `chat` method is then called with this prompt, and the response is printed to the console.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#_snippet_10

LANGUAGE: python
CODE:
```
# Define main function to run the agent
def main():
    # Create the research prompt
    prompt = (
        f"Please research on Arxiv about `{research_topic}`, Organize "
        f"the top {n_issues} results as {n_issues} issues for "
        f"a github repository, finally raise those issues with proper, "
        f"title, body, implementation guidance and reference in "
        f"{target_repo} repo, as well as relevant tags and assignee as "
        "the repo owner."
    )
    
    # Execute the agent
    response = agent.chat(prompt)
    
    # Print the result
    print("Response:", response)
    
# Run the main function
if __name__ == "__main__":
    main()
```

----------------------------------------

TITLE: Retrieving Active Triggers in Composio Entity (TypeScript)
DESCRIPTION: This method retrieves a list of all active triggers configured for the entity. It returns a Promise that resolves to an array of trigger objects, each potentially containing details like connection ID, timestamps, ID, state, configuration, data, and name, or `undefined` if no active triggers are found.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk.Entity.html#_snippet_6

LANGUAGE: TypeScript
CODE:
```
getActiveTriggers(): Promise<undefined | {  \n    connectionId?: string;  \n    createdAt?: string;  \n    disabledAt?: string;  \n    id?: string;  \n    state?: {  \n        [key: string]: unknown;  \n    };  \n    triggerConfig?: {  \n        [key: string]: unknown;  \n    };  \n    triggerData?: string;  \n    triggerName?: string;  \n    updatedAt?: string;  \n}[]>
```

----------------------------------------

TITLE: Initializing ComposioToolSet with E2B Sandbox Workspace (Python)
DESCRIPTION: This snippet demonstrates how to configure the ComposioToolSet to utilize an E2B Sandbox for execution. E2B provides a cloud-based isolated environment, requiring an E2B API key for authentication.
SOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#_snippet_8

LANGUAGE: Python
CODE:
```
from composio import ComposioToolSet, WorkspaceType

toolset = ComposioToolSet(
    workspace_config=WorkspaceType.E2B(),
)
```

----------------------------------------

TITLE: Importing Libraries and Initializing ComposioToolSet and LLM (Python)
DESCRIPTION: This code imports essential classes from `composio_crewai`, `crewai`, and `langchain_openai`. It then initializes the `ComposioToolSet` with your Composio API key and `ChatOpenAI` with your OpenAI API key, setting up the core components for tool access and language model interaction.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/crewai.mdx#_snippet_1

LANGUAGE: python
CODE:
```
from composio_crewai import ComposioToolSet, App
from crewai import Agent, Task, Crew
from langchain_openai import ChatOpenAI

toolset = ComposioToolSet(api_key="<your-composio-api-key>")
llm = ChatOpenAI(api_key="<your-openai-api-key>")
```

----------------------------------------

TITLE: Executing a Task with Smol Agent (Python)
DESCRIPTION: This Python snippet demonstrates how to run a specific task using the configured Smol agent. The `agent.run()` method takes a natural language instruction, which the agent then processes using its available tools to perform the requested action, in this case, starring a GitHub repository.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/smolagent/README.md#_snippet_4

LANGUAGE: python
CODE:
```
# Define task
agent.run("Star the composiohq/composio repo")
```

----------------------------------------

TITLE: Creating Chat Completion with Together AI and Composio Tools (Python)
DESCRIPTION: This Python snippet creates a chat completion request using the Together AI client, integrating the previously fetched GitHub tools. It instructs the model to 'Star the repo 'composiohq/composio'', and then uses `toolset.handle_tool_calls()` to execute the tool call suggested by the model, printing the result.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/together.mdx#_snippet_4

LANGUAGE: python
CODE:
```
response = client.chat.completions.create(
    tools=tools,
    model="mistralai/Mixtral-8x7B-Instruct-v0.1",
    messages=[
        {
            "role": "user",
            "content": "Star the repo 'composiohq/composio'"
        }
    ]
)

res = toolset.handle_tool_calls(response)
print(res)
```

----------------------------------------

TITLE: Installing Composio Core SDK (TypeScript)
DESCRIPTION: Installs the core Composio SDK for TypeScript. This is the foundational step for developing with Composio in a TypeScript environment. Requires NodeJS 16+.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/installation.mdx#_snippet_3

LANGUAGE: npm
CODE:
```
npm install composio-core
```

LANGUAGE: pnpm
CODE:
```
pnpm add composio-core
```

LANGUAGE: bun
CODE:
```
bun add composio-core
```

----------------------------------------

TITLE: Registering Custom Tool in Composio Local Tools
DESCRIPTION: This Python snippet demonstrates how to register a newly created custom tool by importing its class and adding it to the `TOOLS` list within the `composio/tools/local/__init__.py` file, making it available to the Composio framework.
SOURCE: https://github.com/composiohq/composio/blob/master/python/docs/adding-local-tool.md#_snippet_5

LANGUAGE: python
CODE:
```
from pathlib import Path
from composio.tools.local.filetool import FileTool
from composio.tools.local.greptile import Greptile
from composio.tools.local.<tool_name> import <ToolName> # Import your tool class

TOOLS_PATH = Path(__file__).parent
TOOLS = [
    FileTool,
    Greptile,
    <ToolName>, # Add your tool here
]
```

----------------------------------------

TITLE: Initializing OpenAI and Composio Clients (TypeScript)
DESCRIPTION: This snippet initializes the OpenAI client and the Composio toolset in TypeScript. It assumes API keys are loaded from a .env file. The OpenAIToolSet() constructor uses a default entityId.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/introduction.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { OpenAIToolSet, App, Action } from "composio-core";
import { OpenAI } from "openai";
// Assumes .env file with API keys is loaded

const client = new OpenAI();
const toolset = new OpenAIToolSet(); // Uses default entityId
```

----------------------------------------

TITLE: Defining AI Agent to Star GitHub Repository with Vercel AI SDK - JavaScript
DESCRIPTION: This code defines an AI agent using generateText from the Vercel AI SDK. It configures the agent to use the gpt-4o-mini model, disables streaming, provides the fetched tools, and sets a prompt to 'Star the repository "composiohq/composio"'. maxToolRoundtrips limits the number of tool calls.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/vercel.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
const output = await generateText({
    model: openai("gpt-4o-mini"),
    streamText: false,
    tools,
    prompt: 'Star the repository "composiohq/composio"',
    maxToolRoundtrips: 5,
});
```

----------------------------------------

TITLE: Configure Cloudflare Worker with wrangler.toml
DESCRIPTION: Sets up the 'wrangler.toml' configuration file for a Cloudflare Worker. It defines the worker's name, main script entry point, compatibility date, and enables Node.js compatibility. Crucially, it configures environment variables like 'COMPOSIO_API_KEY' and binds the 'AI' service for AI model interactions.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/cloudflare.mdx#_snippet_1

LANGUAGE: toml
CODE:
```
name = "github-agent"
main = "worker.js"
compatibility_date = "2024-09-23"
compatibility_flags = ["nodejs_compat"]

[vars]
COMPOSIO_API_KEY = "<your-composio-api-key>"

[ai]
binding = "AI"
```

----------------------------------------

TITLE: Filtering App Tools by Tags in TypeScript
DESCRIPTION: This snippet demonstrates how to asynchronously refine the tools fetched for a specific application, like Jira, by applying a tags filter. It enables focusing on a subset of actions, such as those related to 'Issues', and emphasizes that tag names are case-sensitive.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
async function fetchTaggedTools() {
  // Fetch only Jira tools related to 'Issues'
  const jiraIssueTools = await toolset.getTools({
      apps: [App.JIRA],
      tags: ["Issues"] // Tag names are case-sensitive
  });

  console.log(`Fetched ${jiraIssueTools.length} Jira tools tagged with 'Issues'.`);
}

fetchTaggedTools();
```

----------------------------------------

TITLE: Defining Conditional Edges and Compiling LangGraph Workflow (Python)
DESCRIPTION: This Python snippet defines the workflow logic for a LangGraph agent. It includes a `should_continue` function to conditionally route the workflow based on whether the last message contains tool calls, and then initializes a `StateGraph`, adds `agent` and `tools` nodes, defines the start edge, conditional edges from the agent, and a return edge from tools to the agent, finally compiling the workflow into an executable application.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langgraph/README.md#_snippet_5

LANGUAGE: python
CODE:
```
def should_continue(state: MessagesState) -> Literal["tools", "__end__"]:
    messages = state["messages"]
    last_message = messages[-1]
    if last_message.tool_calls:
        return "tools"
    return "__end__"


workflow = StateGraph(MessagesState)

# Define the two nodes we will cycle between
workflow.add_node("agent", call_model)
workflow.add_node("tools", tool_node)

workflow.add_edge("__start__", "agent")
workflow.add_conditional_edges(
    "agent",
    should_continue,
)
workflow.add_edge("tools", "agent")

app = workflow.compile()
```

----------------------------------------

TITLE: Installing Composio LangChain and Connecting GitHub (Bash)
DESCRIPTION: This snippet provides commands to install the `composio-claude` package, connect a GitHub account using `composio-cli`, and view available applications. These steps are prerequisites for utilizing Composio's functionalities with Claude.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/claude/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Install Composio LangChain package
pip install composio-claude

# Connect your GitHub account
composio-cli add github

# View available applications you can connect with
composio-cli show-apps
```

----------------------------------------

TITLE: Configuring Composio Tools with Slack Preprocessor and GPT-4.5 (Python)
DESCRIPTION: Configures Composio tools, specifically for sending Slack messages, by attaching the `slack_send_message_preprocessor`. This ensures that all messages sent via this tool automatically include the correct thread, channel, and markdown settings. It then calls GPT-4.5 to generate a snarky response and handles the tool calls.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_15

LANGUAGE: python
CODE:
```
# Configure tools with the preprocessor to handle Slack-specific parameters
tools = toolset.get_tools(
    [Action.SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL],
    processors={
        "pre": {
            Action.SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL: slack_send_message_preprocessor
        }
    }
)

response = client.chat.completions.create(
    model="gpt-4.5-preview",
    messages=[
        {"role": "system", "content": "Given a slack text. Generate a snarky greentext response mocking the user. Render the response in ``` codeblocks"},
        {"role": "user", "content": payload.get("data", {}).get("text")}
    ],
    tools=tools,
    tool_choice="required"
)
toolset.handle_tool_calls(response, entity_id="default")
```

----------------------------------------

TITLE: Initiating Shopify Connection with API Key in TypeScript
DESCRIPTION: This TypeScript snippet illustrates how to initiate a Shopify connection using the `toolset.connectedAccounts.initiate` method. It takes the integration ID, an entity ID, and the user's Shopify API key for 'API_KEY' authentication. The connection is expected to become 'ACTIVE' immediately without further authorization steps.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/non-oauth.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const userId = "user_shopify_456";
// Assume user provided this value securely via your UI
const userProvidedShopifyKey = "sk_live_xxxxxxxxxxxxxxx";

try {
    console.log(`Initiating Shopify connection for entity ${userId}...`);
    const connectionRequest = await toolset.connectedAccounts.initiate({
        integrationId: "int_shopify_yyyyyyyy...",
        authMode: "API_KEY", // Must match the integration's config
        // Pass the user-provided key(s) here
        connectionParams: {
            api_key: userProvidedShopifyKey
            // Add other fields if the app requires more
        }
    });
    console.log("Connection initiation response:", connectionRequest);
    // Status should be ACTIVE almost immediately
    // const connectionId = connectionRequest.connectedAccountId;
} catch (error) {
    console.error("Error initiating connection:", error);
}
```

----------------------------------------

TITLE: Initiating Shopify Connection with API Key in Python
DESCRIPTION: This Python snippet demonstrates how to initiate a Shopify connection using the `toolset.initiate_connection` method. It requires the Shopify integration ID, a user entity ID, and the user-provided API key for authentication. The connection status is expected to be 'ACTIVE' immediately upon successful initiation.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/non-oauth.mdx#_snippet_2

LANGUAGE: Python
CODE:
```
# entity = toolset.get_entity(id="user_stripe_456")
SHOPIFY_INTEGRATION_ID = "int_shopify_yyyyyyyy..."

try:
    print(f"Initiating Shopify connection for entity {user_id}...")
    connection_request = toolset.initiate_connection(
        integration_id=SHOPIFY_INTEGRATION_ID, # Or app_name=App.SHOPIFY
        entity_id=user_id,
        auth_scheme="API_KEY", # Must match the integration's config
        # Pass the user-provided key(s) here
        connected_account_params={
            "api_key": user_provided_shopify_key
            # Add other fields if the app requires more (e.g., account_id)
        },
    )
    print("Connection initiation response:", connection_request)
    # Status should be ACTIVE almost immediately
    # connection_id = connection_request.connectedAccountId

except Exception as e:
    print(f"Error initiating connection: {e}")
```

----------------------------------------

TITLE: Initiating OAuth Connection with Composio (TypeScript)
DESCRIPTION: This snippet illustrates how to initiate an OAuth connection for a user (Entity) with a specified external application using the Composio TypeScript SDK. It calls `toolset.connectedAccounts.initiate` with `integrationId` and `entityId`, and verifies the presence of `redirectUrl` which is essential for redirecting the user for authorization.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/oauth.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { OpenAIToolSet } from "composio-core";

// Assumes toolset is initialized
const toolset = new OpenAIToolSet();
const userId = "your_user_unique_id";
// Get this from your Composio Integration setup
const googleIntegrationId = "int_google_xxxxxxxx...";

console.log(`Initiating OAuth connection for entity ${userId}...`);
const connectionRequest = await toolset.connectedAccounts.initiate({
    integrationId: googleIntegrationId,
    entityId: userId,
    // Optionally add: redirectUri: "https://yourapp.com/final-destination"
    // if you want user sent somewhere specific *after* Composio finishes.
});

// Check if a redirect URL was provided (expected for OAuth)
if (connectionRequest?.redirectUrl) {
    console.log(`Received redirect URL: ${connectionRequest.redirectUrl}`);
    // Proceed to Step 2: Redirect the user
    // Return or pass connectionRequest to the next stage
} else {
    console.error("Error: Expected a redirectUrl for OAuth flow but didn't receive one.");
    // Handle error
}
```

----------------------------------------

TITLE: Fetching GitHub Tools with ComposioToolSet for LangGraph (Python)
DESCRIPTION: This Python snippet demonstrates how to initialize `ComposioToolSet` to obtain specific GitHub actions for use with LangGraph. It fetches `GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER` and `GITHUB_USERS_GET_AUTHENTICATED` actions and then creates a `ToolNode` with these tools, making them available to the agent.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langgraph/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from composio_langgraph import Action, ComposioToolSet

# Initialize the toolset for GitHub
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_actions(
    actions=[
        Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER,
        Action.GITHUB_USERS_GET_AUTHENTICATED,
    ])
tool_node = ToolNode(tools)
```

----------------------------------------

TITLE: Configuring API Key Authentication Proxy in YAML
DESCRIPTION: This YAML snippet defines the proxy configuration for an API Key authentication scheme. It sets the `base_url` dynamically and includes an `Authorization` header that uses the `api_key` placeholder, which will be replaced with the actual API key during runtime.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/add-your-app.mdx#_snippet_0

LANGUAGE: yaml
CODE:
```
proxy:
  base_url: "{{base_url}}"
  headers:
    Authorization: "{{api_key}}"
```

----------------------------------------

TITLE: Finding and Fetching Composio Tools by Use Case (Python)
DESCRIPTION: This Python snippet demonstrates how to find relevant action enums for a given use case using `toolset.find_actions_by_use_case`, optionally scoping the search to specific applications like Notion. It then fetches the actual tool schemas for the discovered actions using `toolset.get_tools`, which can be subsequently used in an agent.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#_snippet_8

LANGUAGE: Python
CODE:
```
relevant_actions = toolset.find_actions_by_use_case(
    use_case=query,
    apps=[App.NOTION] # Optionally scope the search to specific apps
    # advanced=True # Use for complex queries needing multiple tools
)

print(f"Found relevant actions: {relevant_actions}")

# Fetch the actual tool schemas for the found actions
if relevant_actions:
    notion_tools = toolset.get_tools(actions=relevant_actions)
    print(f"Fetched {len(notion_tools)} tool(s) for the use case.")
else:
    print("No relevant actions found for the use case.")
```

----------------------------------------

TITLE: Filtering App Tools by Tags in Python
DESCRIPTION: This snippet shows how to refine the tools fetched for a specific application, like Jira, by applying a tags filter. It allows focusing on a subset of actions, such as those related to 'Issues', and notes that tag names are case-sensitive.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#_snippet_6

LANGUAGE: python
CODE:
```
# Fetch only Jira tools related to 'Issues'
jira_issue_tools = toolset.get_tools(
    apps=[App.JIRA],
    tags=["Issues"] # Tag names are case-sensitive
)

print(f"Fetched {len(jira_issue_tools)} Jira tools tagged with 'Issues'.")
```

----------------------------------------

TITLE: Getting Composio Entity Object for User (TypeScript)
DESCRIPTION: This snippet demonstrates how to retrieve a Composio `Entity` object for a specific end-user using their unique `entity_id`. This `entity` object is crucial for initiating connections and performing actions on behalf of that user. The `userIdentifierFromMyApp` should map to a unique ID from your application's database or UUID system.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/connection.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { OpenAIToolSet } from "composio-core";

const toolset = new OpenAIToolSet();
const userIdentifierFromMyApp = "user_7a9f3b_db_id"; // Example

// Get the Composio Entity object for your user
const entity = await toolset.getEntity(userIdentifierFromMyApp);
// Use this 'entity' object to initiate connections
```

----------------------------------------

TITLE: Defining ListActiveTriggersResponse Type in TypeScript
DESCRIPTION: This TypeScript type alias defines the expected structure for a response containing a list of active triggers. It includes optional `pageInfo` for pagination details (current page, items per page, total pages) and an array of `triggers`, each representing a trigger with properties such as `connectionId`, `createdAt`, `id`, `state`, `triggerConfig`, `triggerData`, `triggerName`, and `updatedAt`.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.ListActiveTriggersResponse.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
ListActiveTriggersResponse: {
    pageInfo?: {
        currentPage?: number;
        perPage?: number;
        totalPages?: number;
    };
    triggers?: {
        connectionId?: string;
        createdAt?: string;
        disabledAt?: string;
        id?: string;
        state?: {
            [key: string]: unknown;
        };
        triggerConfig?: {
            [key: string]: unknown;
        };
        triggerData?: string;
        triggerName?: string;
        updatedAt?: string;
    }[];
}
```

----------------------------------------

TITLE: Initializing ComposioToolSet and LiteLLM Router in Python
DESCRIPTION: This snippet imports required classes, initializes the `ComposioToolSet` for managing application integrations, and configures a LiteLLM `Router` with a specified language model (e.g., Anthropic Claude) to handle model requests and tool routing. It sets up the core components for interacting with both Composio and LiteLLM.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/litellm.mdx#_snippet_1

LANGUAGE: python
CODE:
```
from composio_openai import ComposioToolSet, App
from litellm.router import Router

toolset = ComposioToolSet()

router = Router(
    model_list=[
        {
            "model_name": "anthropic/claude-3-5",
            "litellm_params": {
                "model": "claude-3-opus-20240229",
                "api_key": "<your-anthropic-api-key>"
            }
        }
    ]
)
```

----------------------------------------

TITLE: Fetching and Binding GitHub Tools
DESCRIPTION: This section explains how to retrieve specific GitHub tools from the ComposioToolSet and bind them to the language model. This process enables the LLM to utilize GitHub actions, such as starring a repository, within the LangGraph workflow.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#_snippet_3

LANGUAGE: Python
CODE:
```
tools = composio_toolset.get_tools(
    apps=[App.GITHUB]
)
tool_node = ToolNode(tools)
model = ChatOpenAI(temperature=0, streaming=True)
model_with_tools = model.bind_tools(tools)
```

LANGUAGE: TypeScript
CODE:
```
const tools = await composioToolset.getTools({
    apps: ["github"],
});

const toolNode = new ToolNode(tools);

const model = new ChatOpenAI({ temperature: 0, apiKey:""}).bindTools(tools);
```

----------------------------------------

TITLE: Initiating Composio Connection (Python)
DESCRIPTION: This conceptual snippet illustrates how to initiate a connection using the `initiate_connection` method on the `toolset` object, providing either an `integration_id` or an `app_name` along with the `entity_id`. It also shows examples of executing actions like `GITHUB_CREATE_AN_ISSUE` after a connection is conceptually established. The specific details of connection initiation depend on the authentication type (OAuth or API Key).
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/connection.mdx#_snippet_2

LANGUAGE: Python
CODE:
```
# Conceptual initiation - details depend on auth type
connection_request = toolset.initiate_connection(
    integration_id=YOUR_INTEGRATION_ID, entity_id=user_identifier_from_my_app
)
# or
connection_request = toolset.initiate_connection(
    app_name=App.GITHUB, entity_id=user_identifier_from_my_app
)

toolset.execute_action(
    action=Action.GITHUB_CREATE_AN_ISSUE, params={...}, entity_id=user_identifier_from_my_app
)

toolset.execute_action(
    action=Action.GITHUB_CREATE_AN_ISSUE,
    params={...},
    entity_id=user_identifier_from_my_app
)
```

----------------------------------------

TITLE: Configuring API Keys - Dotenv
DESCRIPTION: This snippet shows the required environment variables to be added to the `.env` file. It includes placeholders for your OpenAI API key and an optional Composio API key, essential for the AI agent's functionality.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/agents-sdk/README.md#_snippet_2

LANGUAGE: dotenv
CODE:
```
OPENAI_API_KEY=your_openai_api_key
COMPOSIO_API_KEY=your_composio_api_key # Optional, depending on tools used
```

----------------------------------------

TITLE: Setting Up a Trigger in Composio SDK (TypeScript)
DESCRIPTION: This method configures and sets up a new trigger for a specific application and trigger name. It requires the `app` name, `triggerName`, and a `config` object containing key-value pairs for trigger-specific settings. It returns a Promise that resolves to a `SetupTriggerResponse` object, indicating the success or failure of the trigger setup.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk.Entity.html#_snippet_10

LANGUAGE: TypeScript
CODE:
```
setupTrigger(app: string, triggerName: string, config: {
  [key: string]: any;
}): Promise<SetupTriggerResponse>
```

----------------------------------------

TITLE: Preparing User Credentials for Connection (Python)
DESCRIPTION: This snippet illustrates how to prepare the `user_id` and the `user_provided_shopify_key` (or other credentials) that will be used to initiate a connection with an external application. It assumes these values are securely collected from the user via the application's UI and are prerequisites for the subsequent `initiate_connection` call.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/non-oauth.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
user_id = "user_shopify_456"

# Assume user provided this value securely via your UI
user_provided_shopify_key = "sk_live_xxxxxxxxxxxxxxx"

# Assume entity and integration ID are known
```

----------------------------------------

TITLE: Integrating GitHub Star Repository Tool with Composio (Python)
DESCRIPTION: This Python snippet imports `ComposioToolSet` and `Action` from `composio_agno`. It then initializes a `ComposioToolSet` and retrieves a specific GitHub action, `GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER`, to enable the agent to star repositories. This prepares the necessary tools for the agent's operations.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/agno/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from composio_agno import ComposioToolSet, Action

toolset = ComposioToolSet()
composio_tools = toolset.get_actions(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])
```

----------------------------------------

TITLE: Listing Active Triggers in Composio (TypeScript)
DESCRIPTION: This method retrieves a paginated list of all active triggers in the Composio platform. It returns a promise that resolves to an array of trigger objects, each containing details like name, description, input parameters, and associated app information. The optional `data` parameter allows for request customization, such as pagination.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk_models_activeTriggers.ActiveTriggers.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
list(data?: ListActiveTriggersData): CancelablePromise<ListActiveTriggersResponse>
```

----------------------------------------

TITLE: Disabling Trigger in Composio Entity (TypeScript)
DESCRIPTION: This method allows disabling an active trigger associated with the entity. It takes a `triggerId` as a string parameter and returns a Promise that resolves to a `PatchUpdateActiveTriggerStatusResponse`, indicating the outcome of the disable operation.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk.Entity.html#_snippet_4

LANGUAGE: TypeScript
CODE:
```
disableTrigger(triggerId): Promise<PatchUpdateActiveTriggerStatusResponse>
```

----------------------------------------

TITLE: Executing the LangGraph Workflow
DESCRIPTION: This final step demonstrates how to execute the compiled LangGraph workflow with a specific human message. It streams the output, allowing observation of the agent's interaction with the LLM and its use of tools to fulfill the request, such as starring a GitHub repository.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#_snippet_7

LANGUAGE: Python
CODE:
```
for chunk in app.stream(
    {
        "messages": [
            (
                "human",
                "Star the GitHub Repository composiohq/composio",
            )
        ]
    },
    stream_mode="values",
):
    chunk["messages"][-1].pretty_print()
```

----------------------------------------

TITLE: Importing Dependencies for Langchain and Composio
DESCRIPTION: This snippet imports essential modules for building an AI agent. It includes `ChatOpenAI`, `createOpenAIFunctionsAgent`, `AgentExecutor`, and `pull` from Langchain for agent creation and management, along with `LangchainToolSet` from `composio-core` to integrate Composio's tool capabilities.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain-js.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import { ChatOpenAI } from "@langchain/openai";
import { createOpenAIFunctionsAgent, AgentExecutor } from "langchain/agents";
import { pull } from "langchain/hub";
import { LangchainToolSet } from "composio-core";
```

----------------------------------------

TITLE: Defining Agents and Tasks for Newsletter Summarization
DESCRIPTION: This section defines the roles, goals, and backstories for the Email Fetcher, Newsletter Summarizer, and Email Sender agents, along with their assigned tools and language models. It also initiates the task definitions for fetching emails.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#_snippet_3

LANGUAGE: Python
CODE:
```
# Define the Email Fetcher Agent
email_fetcher = Agent(
    role="Email Fetcher",
    goal="Fetch all newsletter emails",
    backstory="""You are an Email Fetcher specialized in finding newsletter emails.
Your job is to identify and retrieve recent newsletter emails from the user's inbox.""",
    verbose=True,
    tools=gmail_tools,
    llm=llm
)

# Define the Email Summarizer Agent
summarizer = Agent(
    role="Newsletter Summarizer",
    goal="Create concise summaries of newsletter content",
    backstory="""You are a Newsletter Summarizer who excels at distilling information.
You can read newsletter emails and create brief, informative summaries of their main points.""",
    verbose=True,
    llm=llm
)

# Define the Email Sender Agent
email_sender = Agent(
    role="Email Sender",
    goal="Send email with newsletter summaries",
    backstory="""You are an Email Sender who specializes in composing and sending emails.
You take summaries and convert them into well-formatted emails before sending them to recipients.""",
    verbose=True,
    tools=gmail_tools,
    llm=llm
)

# Define tasks for each agent
fetch_task = Task(
    description=f"""Search for newsletter emails in the inbox from {week_ago} to {today}.
Return a list of emails with their subjects, senders, and content.""",
    expected_output="A list of newsletter emails with their content",
    agent=email_fetcher
)

summarize_task = Task(
```

----------------------------------------

TITLE: Importing Libraries and Initializing Clients (Python)
DESCRIPTION: This Python snippet imports the `ComposioToolSet` and `App` enums from `composio_togetherai`, and the `Together` client. It then initializes instances of the `Together` client and `ComposioToolSet` for subsequent API interactions.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/together.mdx#_snippet_1

LANGUAGE: python
CODE:
```
from composio_togetherai import ComposioToolSet, App
from together import Together

client = Together()
toolset = ComposioToolSet()
```

----------------------------------------

TITLE: Defining LLM Call Node for LangGraph Workflow (Python)
DESCRIPTION: This Python function defines a `call_model` node for a LangGraph workflow. It takes the current `MessagesState`, invokes the `model_with_tools` with the messages from the state, and returns the response as an updated state, representing the LLM's turn in the conversation.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langgraph/README.md#_snippet_4

LANGUAGE: python
CODE:
```
def call_model(state: MessagesState):
    messages = state["messages"]
    response = model_with_tools.invoke(messages)
    return {"messages": [response]}
```

----------------------------------------

TITLE: Fetching GitHub Tools via Composio ToolSet
DESCRIPTION: This step demonstrates how to import ComposioToolSet and App from composio_langchain (Python) or initialize LangchainToolSet (JavaScript) to retrieve specific GitHub tools for use with the Langchain agent.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/groq.mdx#_snippet_2

LANGUAGE: python
CODE:
```
# Import from composio_langchain
from composio_langchain import ComposioToolSet, Action, App

# Get All the tools

composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.GITHUB])
```

LANGUAGE: javascript
CODE:
```
// Initialize the LangchainToolSet with the API key from environment variables
const toolset = new LangchainToolSet({ apiKey: process.env.COMPOSIO_API_KEY});
  
// Fetch tools configured for GitHub applications
const tools = await toolset.getTools({ apps: ["github"] });
```

----------------------------------------

TITLE: Importing Libraries and Initializing Composio & Gemini Clients - Python
DESCRIPTION: This snippet imports necessary libraries from `google.genai` and `composio_gemini` and then initializes the `genai.Client` for Gemini and `ComposioToolSet` for Composio, requiring respective API keys for authentication.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/gemini.mdx#_snippet_1

LANGUAGE: python
CODE:
```
from google.genai import types
from google import genai
from composio_gemini import Action, ComposioToolSet, App

client = genai.Client(api_key="<gemini-api-key>")
toolset = ComposioToolSet(api_key="<composio-api-key>")
```

----------------------------------------

TITLE: Configuring API Keys in .env File (Shell)
DESCRIPTION: This snippet shows the required environment variables to be set in a `.env` file. `COMPOSIO_API_KEY` is for authenticating with the Composio platform, and `OPENAI_API_KEY` is for accessing OpenAI's services, both crucial for the agent's functionality.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/report-template-generator-agent/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
COMPOSIO_API_KEY=YOUR_COMPOSIO_API_KEY
OPENAI_API_KEY=YOUR_OPENAI_API_KEY
```

----------------------------------------

TITLE: Installing Experimental V3 Python SDK
DESCRIPTION: This snippet provides the command to install the experimental V3 Python SDK using pip. This SDK offers foundational access to the V3 API endpoints for the Composio platform.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/changelogs/overview.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-client
```

----------------------------------------

TITLE: Importing Libraries and Initializing ComposioToolSet & LLM - JavaScript
DESCRIPTION: This code imports required libraries such as openai from @ai-sdk/openai, VercelAIToolSet from composio-core, and generateText from ai. It then initializes an instance of VercelAIToolSet, which is essential for interacting with Composio's tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/vercel.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import { openai } from "@ai-sdk/openai";
import { VercelAIToolSet } from "composio-core";
import { generateText } from "ai";

const toolset = new VercelAIToolSet();
```

----------------------------------------

TITLE: Starting Ollama Server and Pulling Mistral Model
DESCRIPTION: This command starts the Ollama server in the background and then pulls the 'mistral' large language model. This setup is crucial for the bot to utilize local models for its operations, such as PR reviews.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_ollama/readme.md#_snippet_1

LANGUAGE: sh
CODE:
```
ollama serve & ollama pull mistral
```

----------------------------------------

TITLE: Integrating GitHub Tools with Composio
DESCRIPTION: This Python snippet imports `App` and `ComposioToolSet` from `composio_openai`. It then initializes `ComposioToolSet` and uses `get_tools` to fetch GitHub-specific actions, making them available for use with OpenAI function calls. This enables the OpenAI model to interact with GitHub functionalities.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/openai/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from composio_openai import App, ComposioToolSet

toolset = ComposioToolSet()
actions = toolset.get_tools(apps=[App.GITHUB])
```

----------------------------------------

TITLE: Integrating GitHub Tools with Composio for LangChain
DESCRIPTION: This snippet demonstrates how to initialize the `ComposioToolSet` and retrieve specific GitHub actions, such as starring a repository, to be used as tools within a LangChain-powered application. This enables the LLM to perform GitHub operations.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/phidata/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from composio_phidata import ComposioToolSet, Action

toolset = ComposioToolSet()
composio_tools = toolset.get_actions(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])
```

----------------------------------------

TITLE: Configuring Docker Workspace with Custom Environment Variables (Python)
DESCRIPTION: This snippet demonstrates how to pass additional environment variables to a Docker workspace configuration for ComposioToolSet. This is crucial for injecting sensitive information like API tokens or custom settings required by the agent within its isolated environment.
SOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#_snippet_11

LANGUAGE: Python
CODE:
```
composio_toolset = ComposioToolSet(
    workspace_config=WorkspaceType.Docker(
        environment={
            "SOME_API_TOKEN": "<SOME_API_TOKEN>",
        }
    )
)
```

----------------------------------------

TITLE: Validating Authentication Session - Composio SDK - TypeScript
DESCRIPTION: This static method validates an authentication session using a provided key and code. It optionally accepts a base URL and returns a Promise that resolves to a string, typically indicating the session's validity or a session token. This is used to confirm the authenticity of a user's session.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk.Composio.html#_snippet_2

LANGUAGE: TypeScript
CODE:
```
validateAuthSession(key, code, baseUrl?): Promise<string>
```

----------------------------------------

TITLE: Initiating GitHub Connection Programmatically - Python
DESCRIPTION: This snippet demonstrates how to programmatically initiate a GitHub connection using the `ComposioToolSet` in Python. It returns a `redirectUrl` that the user must open in a browser to complete the authentication process.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/gemini.mdx#_snippet_3

LANGUAGE: python
CODE:
```
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")
```

----------------------------------------

TITLE: Importing LlamaIndex and Initializing OpenAI LLM
DESCRIPTION: Demonstrates importing necessary classes from `llama_index.llms.openai`, `llama_index.core.llms`, `llama_index.core.agent`, and `llama_index.core.tools`. It also loads environment variables using `dotenv` and initializes an OpenAI language model (`gpt-4-turbo`).
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/llamaindex/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from llama_index.llms.openai import OpenAI
from llama_index.core.llms import ChatMessage
from llama_index.core.agent import FunctionCallingAgentWorker

import dotenv
from llama_index.core.tools import FunctionTool

# Load environment variables from .env
dotenv.load_dotenv()

llm = OpenAI(model="gpt-4-turbo")
```

----------------------------------------

TITLE: Executing Composio Action with entity_id in Python
DESCRIPTION: This Python snippet illustrates how to specify the `entity_id` when executing a Composio action. The `entity_id` parameter is crucial for multi-tenant applications, allowing Composio to use the correct user's credentials for the authenticated action instead of the default.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/executing-tools.mdx#_snippet_3

LANGUAGE: Python
CODE:
```
# Direct Execution with entity_id
toolset.execute_action(
    action=Action.GITHUB_CREATE_AN_ISSUE,
    params={...},
    entity_id="user-from-my-db-123"
)
```

----------------------------------------

TITLE: Fetching All GitHub Tools with Composio (Python)
DESCRIPTION: This snippet illustrates how to retrieve all available tools for the GitHub application using the `toolset.get_tools()` method. These tools are then passed to the CrewAI agent, allowing it to perform various actions on GitHub. The method also supports filtering for specific actions based on use case or tags.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/crewai.mdx#_snippet_4

LANGUAGE: python
CODE:
```
tools = toolset.get_tools(apps=[App.GITHUB])
```

----------------------------------------

TITLE: Initializing DescopeAuth for Composio (Python)
DESCRIPTION: This example shows how to integrate Descope authentication with Composio. It initializes `DescopeAuth` using a project ID and management key, then uses `descope.get_auth` to generate and add authentication parameters for a specific application (e.g., GitHub) and user, including required scopes, simplifying token management.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/injecting-credentials.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
from composio.utils.descope import DescopeAuth

# Initialize DescopeAuth with your credentials
descope = DescopeAuth(
    project_id="your_project_id",    # Or uses DESCOPE_PROJECT_ID env var
    management_key="your_management_key"  # Or uses DESCOPE_MANAGEMENT_KEY env var
)

toolset = ComposioToolSet()

# Add authentication using DescopeAuth
toolset.add_auth(
    app=App.GITHUB,
    parameters=descope.get_auth(
        app=App.GITHUB,
        user_id="your_user_id",
        scopes=["user", "public_repo"]  # Permissions for the token
    )
)
```

----------------------------------------

TITLE: Finding and Fetching Composio Tools by Use Case (TypeScript)
DESCRIPTION: This TypeScript snippet illustrates how to asynchronously find relevant action enums for a specified use case using `toolset.client.actions.findActionEnumsByUseCase`, with an option to filter by application. It then proceeds to fetch the corresponding tool schemas using `toolset.getTools` if actions are found, preparing them for use within an agent.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
async function fetchToolsByUseCase() {
  // Describe the task
  const query = "create a new page in notion";

  // Find relevant action ENUMS
  const relevantActions = await toolset.client.actions.findActionEnumsByUseCase({
      useCase: query,
      apps: [App.NOTION] // Optionally scope the search
      // advanced: true // Use for complex queries needing multiple tools
  });

  console.log("Found relevant action enums:", relevantActions);

  // Fetch the actual tool schemas for the found actions
  if (relevantActions && relevantActions.length > 0) {
      const notionTools = await toolset.getTools({ actions: relevantActions });
      console.log(`Fetched ${notionTools.length} tool(s) for the use case.`);
  } else {
      console.log("No relevant actions found for the use case.");
  }
}

// Use the `notionTools` in your agent

fetchToolsByUseCase();
```

----------------------------------------

TITLE: Starring GitHub Repository with Lyzr Agent and Composio (Python)
DESCRIPTION: This Python snippet demonstrates how to configure a Lyzr agent to star a GitHub repository using Composio. It initializes an OpenAI model, defines a GitHub agent persona, retrieves the `GITHUB_STAR_REPO` tool from Composio, and sets up a task within a `LinearSyncPipeline` to execute the star action based on natural language instructions.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/lyzr/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from  lyzr_automata  import  Task, Agent
from lyzr_automata.ai_models.openai import OpenAIModel
from lyzr_automata.tasks.task_literals import InputType, OutputType
from lyzr_automata.pipelines.linear_sync_pipeline import LinearSyncPipeline

import os
import dotenv
dotenv.load_dotenv()
from composio_lyzr import ComposioToolSet, App, Action

open_ai_text_completion_model = OpenAIModel(
    api_key=os.environ["OPENAI_API_KEY"],
    parameters={
        "model": "gpt-4-turbo-preview",
        "temperature": 0.2,
        "max_tokens": 1500,
    },
)


lyzr_agent = Agent(
        role="Github Agent",
        prompt_persona="You are AI agent that is responsible for taking actions on Github on users behalf. You need to take action on Github using Github APIs"
    )

composio_toolset = ComposioToolSet()
composio_tool = composio_toolset.get_lyzr_tool(Action.GITHUB_STAR_REPO)

task = Task(
        name="Github Starring",
        agent=lyzr_agent,
        tool=composio_tool,
        output_type=OutputType.TEXT,
        input_type=InputType.TEXT,
        model=open_ai_text_completion_model,
        instructions="Star a repo composiohq/composio on GitHub",
        log_output=True,
        enhance_prompt=False,
)

lyzr_output = LinearSyncPipeline(
    name="Composio Lyzr",
		# completion message after pipeline completes
    completion_message="Task completed",
    tasks=[
				# tasks are instance of Task class
        task,
    ],
).run()

print(lyzr_output)
```

----------------------------------------

TITLE: Configuring JavaScript Server for Cloudflare Pages and Local Testing
DESCRIPTION: This JavaScript snippet exports a default object with a `fetch` handler, typically for deployment on Cloudflare Pages. It also includes a conditional block for local development, using `Bun.serve` to start the server on port 8787, allowing for easy testing of the application locally.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
// Set up Cloudflare Pages handler
export default {
    fetch: handle(app)
};

// For local testing
if (import.meta.main) {
    console.log("Starting server on http://localhost:8787");
    Bun.serve({
        fetch: app.fetch,
        port: 8787
    });
}
```

----------------------------------------

TITLE: Retrieving GitHub Tools and Configuring Gemini - Python
DESCRIPTION: This snippet retrieves all available tools for the GitHub application using `toolset.get_tools()` and then creates a `types.GenerateContentConfig` object for Gemini, associating the retrieved tools to enable tool-calling capabilities.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/gemini.mdx#_snippet_4

LANGUAGE: python
CODE:
```
tools = toolset.get_tools(
    apps=[
        App.GITHUB
    ]
)

config = types.GenerateContentConfig(tools=tools)
```

----------------------------------------

TITLE: Defining Workflow Routing Decision Function
DESCRIPTION: This function determines the next step in the LangGraph workflow based on the LLM's last message. It checks for tool calls to decide whether to proceed to tool execution or conclude the conversation, enabling dynamic routing within the agent.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#_snippet_5

LANGUAGE: Python
CODE:
```
def should_continue(state: MessagesState) -> Literal["tools", "__end__"]:
    """
    Determine if the conversation should continue to tools or end
    Returns:
        - "tools" if the last message contains tool calls
        - "__end__" otherwise
    """
    messages = state["messages"]
    last_message = messages[-1]
    if last_message.tool_calls:
        return "tools"
    return "__end__"
```

LANGUAGE: TypeScript
CODE:
```
async function shouldContinue(state) {
    const { messages } = state;
    const lastMessage = messages[messages.length - 1];

    if (lastMessage.additional_kwargs.tool_calls) {
        return "tools";
    } else {
        return END;
    }
}
```

----------------------------------------

TITLE: Initializing HuggingFace LLM and Chat Model
DESCRIPTION: This code loads environment variables and initializes a `HuggingFaceEndpoint` LLM with a specified model (`HuggingFaceH4/zephyr-7b-beta`) and then wraps it in a `ChatHuggingFace` model for chat-based interactions.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#_snippet_4

LANGUAGE: python
CODE:
```
dotenv.load_dotenv()
llm = HuggingFaceEndpoint(repo_id="HuggingFaceH4/zephyr-7b-beta", huggingfacehub_api_token=os.getenv("HUGGINGFACEHUB_API_TOKEN"))
chat_model = ChatHuggingFace(llm=llm)
```

----------------------------------------

TITLE: Configuring LLM and Composio Tools
DESCRIPTION: This step involves setting up the language model, initializing Composio toolsets, and retrieving specific tools like Gmail. It also includes date calculations for email filtering in Python, and Hono app creation and connection setup in JavaScript.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#_snippet_2

LANGUAGE: Python
CODE:
```
load_dotenv()

# Initialize the language model
llm = ChatOpenAI(model="gpt-4o")

# Set up Composio tools
composio_toolset = ComposioToolSet()

# Get Gmail tools
gmail_tools = composio_toolset.get_tools(apps=[App.GMAIL])

# Get today's date and the date from 7 days ago
today = datetime.today().strftime("%Y/%m/%d")
week_ago = (datetime.today() - timedelta(days=7)).strftime("%Y/%m/%d")
```

LANGUAGE: JavaScript
CODE:
```
// Initialize the language model
const llm = new ChatOpenAI({ model: "gpt-4o" });

// Create Hono app
const app = new Hono();

// Configure Composio
const composioToolset = new CloudflareToolSet({
    apiKey: process.env.COMPOSIO_API_KEY
});

// Function to set up connected account
const setupConnection = async (c) => {
    const connectionId = c.req.headers.get("x-connection-id");
    
    if (!connectionId) {
        return { 
            ok: false, 
            error: "No connection ID provided in headers" 
        };
    }
    
    return { ok: true, connectionId };
};
```

----------------------------------------

TITLE: Importing Lyzr and Composio Packages, Initializing OpenAI Model (Python)
DESCRIPTION: This Python snippet imports the core classes required for building Lyzr agents and integrating Composio toolsets. It also initializes an `OpenAIModel` instance, which serves as the AI backend for the agent, requiring an API key.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/lyzr.mdx#_snippet_1

LANGUAGE: python
CODE:
```
from lyzr_automata import Task, Agent
from lyzr_automata.ai_models.openai import OpenAIModel
from composio_lyzr import ComposioToolSet, App, Action
from lyzr_automata.pipelines.linear_sync_pipeline import LinearSyncPipeline


open_ai_text_completion_model = OpenAIModel( api_key="sk-...", parameters={"model": "gpt-4-turbo"})
```

----------------------------------------

TITLE: Defining Instance URL Custom Field in YAML
DESCRIPTION: This YAML snippet defines a custom field named `instanceUrl`, typically used for integrations like Salesforce. It specifies the field's display name, description, data type (string), and indicates that it is required and expected from the customer to provide the base URL for API requests.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/add-your-app.mdx#_snippet_3

LANGUAGE: yaml
CODE:
```
fields:
  - name: instanceUrl
    display_name: Instance URL
    description: "The base URL for your instance, used for API requests."
    type: string
    required: true
    expected_from_customer: true
```

----------------------------------------

TITLE: Executing PraisonAI Agent to Perform Task (Python)
DESCRIPTION: This Python code initializes a `PraisonAI` instance using the previously defined `agent_yaml` configuration. It then executes the agent's main function, triggering the defined tasks, such as starring a GitHub repository, and prints the result of the execution.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/praisonai/README.md#_snippet_4

LANGUAGE: python
CODE:
```
# Create a PraisonAI instance with the agent_yaml content
praison_ai = PraisonAI(agent_yaml=agent_yaml)

# Run PraisonAI
result = praison_ai.main()

# Print the result
print(result)
```

----------------------------------------

TITLE: Starting Griptape Agent Chat for Task Execution (Python)
DESCRIPTION: This Python snippet initiates a chat interface for the configured Griptape agent, allowing users to interact conversationally to trigger tasks such as starring a GitHub repository. This is the final step to execute the agent's capabilities.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/griptape/README.md#_snippet_3

LANGUAGE: python
CODE:
```
Chat(agent).start()
```

----------------------------------------

TITLE: Fetching Custom and Built-in Tools in TypeScript
DESCRIPTION: This snippet demonstrates how to fetch both custom-defined and built-in Composio tools in TypeScript. It shows how to reference custom tools by their `actionName` string, enabling them to be passed to an LLM or framework alongside other tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/custom-tools.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
// Fetch custom and built-in tools together
const tools = await toolset.getTools({
    actions: [
        "GITHUB_GET_THE_AUTHENTICATED_USER", // Built-in
        "add_numbers"                        // Custom (by actionName string)
    ]
});
// Pass 'tools' to your LLM or framework
```

----------------------------------------

TITLE: Importing Libraries and Configuring MCP for Composio in JavaScript
DESCRIPTION: This snippet imports necessary libraries (`@mastra/mcp`, `@mastra/core/agent`, `@ai-sdk/openai`) and initializes `MCPConfiguration`. It sets up the server URL for GitHub integration, allowing Mastra agents to connect to Composio's tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/mastra.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
import { MCPConfiguration } from "@mastra/mcp";
import { Agent } from "@mastra/core/agent";
import { openai } from "@ai-sdk/openai";

const mcp = new MCPConfiguration({
  servers: {
      github: {
        url: new URL("https://mcp.composio.dev/github/[private-url-path]"),
      },
  },
});
```

----------------------------------------

TITLE: Fetching GitHub Tools for LlamaIndex via ComposioToolSet
DESCRIPTION: Shows how to import `App`, `Action`, and `ComposioToolSet` from `composio_llamaindex`. It then initializes `ComposioToolSet` and retrieves specific GitHub tools, such as `GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER`, for use with LlamaIndex agents.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/llamaindex/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from composio_llamaindex import App, Action, ComposioToolSet

# Get All the tools
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_actions(
    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]
)
print(tools)
```

----------------------------------------

TITLE: Integrating GitHub Tools with Composio for Griptape (Python)
DESCRIPTION: This Python snippet demonstrates how to initialize `ComposioToolSet` and retrieve GitHub-specific tools using `App.GITHUB`. These tools are then passed to a Griptape `Agent` instance, enabling the agent to interact with GitHub functionalities via Composio.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/griptape/README.md#_snippet_2

LANGUAGE: python
CODE:
```
composio_toolset = ComposioToolSet()
composio_tools = composio_toolset.get_tools(tools = App.GITHUB)

agent = Agent(
    tools=composio_tools
)
```

----------------------------------------

TITLE: Importing Core Python Libraries for Research Agent
DESCRIPTION: This snippet imports essential Python libraries. It includes `os` and `dotenv` for environment management, `composio_llamaindex` for Composio tools, and various `llama_index` components for LLM interaction, agent creation, and ArXiv tool integration.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#_snippet_2

LANGUAGE: Python
CODE:
```
import os
import dotenv

from composio_llamaindex import Action, ComposioToolSet
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI
from llama_index.agent.openai import OpenAIAgent
from llama_index.tools.arxiv.base import ArxivToolSpec
```

----------------------------------------

TITLE: Exporting Composio Components in Python `__init__.py`
DESCRIPTION: This `__init__.py` file defines the public API for the `composio_yourframework` package. It imports core Composio components and the custom `ComposioToolSet` class, then exposes them via the `__all__` variable, making them directly accessible when the package is imported. This setup ensures proper module structure and discoverability of the integration's key classes and functions.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#_snippet_5

LANGUAGE: Python
CODE:
```
from composio import Action, App, Tag, Trigger, WorkspaceType, action

from composio_yourframework.toolset import ComposioToolSet

__all__ = (
    "Action",
    "App",
    "Tag",
    "Trigger",
    "WorkspaceType",
    "action",
    "ComposioToolSet",
)
```

----------------------------------------

TITLE: Importing Composio and Pydantic-AI Components (Python)
DESCRIPTION: This code block imports essential modules for setting up the environment, including `load_dotenv` and `os` for environment variable management, `Action` from `composio` for defining actions, `ComposioToolSet` for tool management, and `Agent` from `pydantic_ai` for creating the AI agent.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/pydanticai/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from dotenv import load_dotenv
import os

from composio import Action
from composio_pydanticai import ComposioToolSet
from pydantic_ai import Agent
```

----------------------------------------

TITLE: Import Libraries & Initialize ComposioToolSet
DESCRIPTION: Imports required classes from `agno.agent` and `composio_agno` libraries, then initializes the `ComposioToolSet` to manage application integrations.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/agno.mdx#_snippet_1

LANGUAGE: python
CODE:
```
from agno.agent.agent import Agent
from composio_agno import Action, App, ComposioToolSet

toolset = ComposioToolSet()
```

----------------------------------------

TITLE: Integrating GitHub Tools with Composio for Julep Agents (Python)
DESCRIPTION: This snippet demonstrates how to integrate GitHub tools using `ComposioToolSet` and `App.GITHUB` within the Julep framework. It then creates a Julep agent, assigning it the retrieved Composio GitHub tools, enabling the agent to perform GitHub-related actions.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/julep/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from composio_julep import App, ComposioToolSet
    
toolset = ComposioToolSet()
composio_tools = toolset.get_tools(tools=App.GITHUB)


agent = client.agents.create(
    name=name,
    about=about,
    default_settings=default_settings,
    model="gpt-4-turbo",
    tools=composio_tools,
)
```

----------------------------------------

TITLE: Configuring LiteLLM Router for Tool Calling in Python
DESCRIPTION: This snippet configures the LiteLLM router to handle a user request, specifically to "Star the repository composiohq/composio on github". It passes the previously fetched GitHub `tools` to the router, allowing the language model to automatically select and prepare the appropriate tool call based on the user's intent.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/litellm.mdx#_snippet_5

LANGUAGE: python Python
CODE:
```
response = router.completion(
    model="anthropic/claude-3-5",
    messages=[
        {"role": "user", "content": "Star the repository composiohq/composio on github"}
    ],
    tools=tools,
    tool_choice="auto"
)
```

----------------------------------------

TITLE: Initializing Composio ToolSet for GitHub (Python)
DESCRIPTION: This Python snippet demonstrates how to import `ComposioToolSet`, `Action`, and `App` from `composio_crewai`. It then initializes a `ComposioToolSet` instance, specifically configuring it to enable tools for the GitHub application, which allows the CrewAI agent to interact with GitHub APIs.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/crew_ai/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from composio_crewai import ComposioToolSet, Action, App

# Initialize the toolset with GitHub application
tools = ComposioToolSet(apps=[App.GITHUB])
```

----------------------------------------

TITLE: Connecting GitHub Account with Composio (CLI & Python)
DESCRIPTION: This section provides two methods to connect your GitHub account with Composio. The CLI commands `composio login` and `composio add github` facilitate direct authentication. Alternatively, the Python snippet initiates an OAuth flow, providing a URL for user authentication to establish the GitHub integration. An active GitHub integration and API keys are prerequisites.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/together.mdx#_snippet_2

LANGUAGE: shell
CODE:
```
composio login
composio add github
```

LANGUAGE: python
CODE:
```
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")
```

----------------------------------------

TITLE: Define GetConnectedAccountResponse Type (TypeScript)
DESCRIPTION: This TypeScript type alias defines the structure for a `GetConnectedAccountResponse` object. It includes optional `connectionParams` for authentication details, along with metadata such as `createdAt`, `id`, `updatedAt`, and a mandatory `integrationId`, plus a `status` field indicating the connection state.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.GetConnectedAccountResponse.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
GetConnectedAccountResponse: {
    connectionParams?: {
        access_token?: string;
        base_url?: string;
        client_id?: string;
        client_secret?: string;
        scope?: string;
        token_type?: string;
    };
    createdAt?: string;
    id?: string;
    integrationId: string;
    status?: "ACTIVE" | "INITIATED" | "FAILED";
    updatedAt?: string;
}
```

----------------------------------------

TITLE: Fetching Multiple Composio Tools for Smol Agent (Python)
DESCRIPTION: This Python snippet illustrates how to retrieve multiple specific GitHub actions using `composio_toolset.get_tools()`. It fetches both `GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER` and `GITHUB_CREATE_REPOSITORY` actions, allowing the agent to perform a wider range of GitHub operations.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/smolagent/README.md#_snippet_5

LANGUAGE: python
CODE:
```
# Using multiple tools
tools = composio_toolset.get_tools(
    actions=[
        Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER,
        Action.GITHUB_CREATE_REPOSITORY
    ],
)
```

----------------------------------------

TITLE: Importing Essential Libraries for Agent Setup - Python
DESCRIPTION: This snippet imports all the necessary modules from `os`, `dotenv`, `crewai`, `composio_langchain`, and `langchain_openai` to configure the environment, define agents, tasks, and integrate tools and LLMs.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/research_assistant.ipynb#_snippet_2

LANGUAGE: python
CODE:
```
import os
import dotenv
from crewai import Agent, Task, Crew, Process
from composio_langchain import ComposioToolSet, Action, App
from langchain_openai import ChatOpenAI
```

----------------------------------------

TITLE: Listing User Connections (Python)
DESCRIPTION: This snippet demonstrates how to retrieve and list all active connections associated with a specific `entity_id` using `toolset.get_connected_accounts`. It shows how to iterate through the returned connections and print their details, including the app name, ID, and status. Error handling is included for robust fetching.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/connection.mdx#_snippet_4

LANGUAGE: Python
CODE:
```
user_identifier_from_my_app = "user_7a9f3b_db_id"  # Example
entity = toolset.get_entity(id=user_identifier_from_my_app)
try:
    connections = toolset.get_connected_accounts(entity_id=user_identifier_from_my_app) # Returns list of active connections
    print(f"Found {len(connections)} active connections for {entity.id}:")
    for conn in connections:
        print(f"- App: {conn.appName}, ID: {conn.id}, Status: {conn.status}")
    # You can also filter directly via the client:
    # connections = toolset.client.connected_accounts.get(entity_ids=[entity.id], active=True)
except Exception as e:
    print(f"Error fetching connections: {e}")
```

----------------------------------------

TITLE: Initializing and Registering GitHub Tools with Composio (Python)
DESCRIPTION: This snippet initializes the `ComposioToolSet` and registers all available GitHub tools with the previously defined `chatbot` (AssistantAgent) and `user_proxy` (UserProxyAgent) for execution. This enables the agents to interact with GitHub functionalities.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/autogen/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from composio_autogen import ComposioToolSet, App, Action

# Initialize Composio Toolset
composio_tools = ComposioToolSet()

# Register tools with appropriate executors
composio_tools.register_tools(tools=[App.GITHUB], caller=chatbot, executor=user_proxy)
```

----------------------------------------

TITLE: Creating GitHub Issue with Custom Bearer Token in Python
DESCRIPTION: This Python snippet demonstrates how to create a GitHub issue using the Composio toolset.execute_action method. It highlights the process of providing a custom bearer token directly within the auth parameters, allowing for external authentication management rather than relying on Composio's default authentication.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/executing-tools.mdx#_snippet_7

LANGUAGE: Python
CODE:
```
bearer_token = "gho_YourTemporaryOrManagedToken"

try:
    result = toolset.execute_action(
        action=Action.GITHUB_CREATE_ISSUE,
        params={
            "owner": "target-owner",
            "repo": "target-repo",
            "title": "Issue via Custom Auth",
            "body": "Using a provided Bearer token."
        },
        # Provide auth details directly
        auth={
            "parameters": [
                {"name": "Authorization", "value": f"Bearer {bearer_token}", "in_": "header"}
            ]
            # 'base_url' can be added if needed for self-hosted instances
            # 'body' can be added for auth methods requiring it
        }
    )
    print(result)
except Exception as e:
    print(f"An error occurred: {e}")
```

----------------------------------------

TITLE: Invoking LangGraph Workflow and Streaming Response (Python)
DESCRIPTION: This Python snippet demonstrates how to invoke the compiled LangGraph workflow (`app`) with an initial human message. It streams the response values, printing each chunk's last message in a pretty-printed format, allowing observation of the agent's interaction and tool usage.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langgraph/README.md#_snippet_6

LANGUAGE: python
CODE:
```
for chunk in app.stream(
    {
        "messages": [
            (
                "human",
                # "Star the Github Repository composiohq/composio",
                "Get my information.",
            )
        ]
    },
    stream_mode="values",
):
    chunk["messages"][-1].pretty_print()
```

----------------------------------------

TITLE: Executing Groq Agent for GitHub Interaction
DESCRIPTION: This step shows how to create a React agent using the LLM and fetched tools, initialize an AgentExecutor, and then invoke it with a user task to perform actions like starring a GitHub repository.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/groq.mdx#_snippet_3

LANGUAGE: python
CODE:
```
task = "Star a repo composiohq/composio on GitHub"

agent = create_react_agent(llm, tools)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

# Execute using agent_executor
inputs = {"messages": [("user",  task)]}
agent_executor.invoke(input=inputs)
```

LANGUAGE: javascript
CODE:
```
// Create an OpenAI functions agent with the provided LLM, tools, and prompt
const agent = await createReactAgent({
        llm,
        tools: tools,
    });

// Initialize the agent executor with verbosity enabled
const agentExecutor = new AgentExecutor({ agent, tools, verbose: true });

// Invoke the agent to perform the task of starring a GitHub repository
const response = await agentExecutor.invoke({"messages": [("user",  task)]});

// Output the response from the agent execution
console.log(response);
```

----------------------------------------

TITLE: Defining Task to Add Content to RAG System
DESCRIPTION: This snippet defines a task for adding content to the RAG knowledge base. The Python version uses `crewai.Task` to specify a detailed description of the content to be added (capital cities), the expected output (confirmation of successful addition), and assigns it to the `rag_agent`.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#_snippet_4

LANGUAGE: Python
CODE:
```
# Define task for adding content
add_content_task = Task(
    description="""Add the following information to the knowledge base:
    
    1. Paris is the capital city of France.
    2. London is the capital city of the United Kingdom.
    3. Washington D.C. is the capital city of the United States.
    4. Tokyo is the capital city of Japan.
    5. Berlin is the capital city of Germany.
    
    Make sure to confirm that each piece of information is successfully added.""",
    expected_output="Confirmation that all information was added to the knowledge base",
    agent=rag_agent
)
```

----------------------------------------

TITLE: Constructing Entity Class in TypeScript
DESCRIPTION: This constructor initializes a new instance of the `Entity` class. It requires a `client` object of type `Composio` for API interactions and accepts an optional `id` string, which defaults to 'DEFAULT_ENTITY_ID' if not provided, to uniquely identify the entity.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk.Entity.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
new Entity(client, id?): Entity
```

----------------------------------------

TITLE: Installing Composio LangGraph and Connecting GitHub Account (Bash)
DESCRIPTION: This snippet provides commands to install the `composio-langgraph` package using pip, connect a GitHub account via `composio-cli add github`, and view available applications with `composio-cli show-apps`. These steps are prerequisites for using Composio with LangGraph.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langgraph/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-langgraph

composio-cli add github

composio-cli show-apps
```

----------------------------------------

TITLE: Execute Agent to Star a GitHub Repository
DESCRIPTION: This snippet defines the task for the `CodeAgent` to star the `composiohq/composio` repository on GitHub. It then executes the agent with this task, leveraging the configured tools to perform the specified action autonomously.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/smolagents.mdx#_snippet_6

LANGUAGE: python
CODE:
```
task = "Star a repo composiohq/composio on GitHub"
agent.run(task)
```

----------------------------------------

TITLE: Creating Composio MCP Server using cURL
DESCRIPTION: This snippet demonstrates how to create a new Composio MCP server by sending a POST request to the `/api/v3/mcp/servers` endpoint. It requires an API key for authentication and a JSON payload specifying the server's name, associated applications, and an optional authentication configuration ID. The server will expose tools from the specified applications.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/mcp/introduction.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
curl -X POST https://backend.composio.dev/api/v3/mcp/servers \
  -H "x-api-key: <YOUR_API_KEY>" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Gmail",
    "apps": [
      "gmail"
    ],
    "auth_config_id": {}
  }'
```

----------------------------------------

TITLE: Validating Agent Execution Response - Python
DESCRIPTION: This Python snippet uses `composio_toolset.handle_response(response)` to process the response received from the agent's execution. It then prints the `result`, allowing validation of whether the intended task, such as starring a GitHub repository, was successfully completed.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/google/README.md#_snippet_4

LANGUAGE: python
CODE:
```
result = composio_toolset.handle_response(response)
print("Function call result:", result)
```

----------------------------------------

TITLE: Creating Composio Integration (TypeScript)
DESCRIPTION: This TypeScript example illustrates how to create a Composio integration using `OpenAIToolSet`. It configures the integration for OAuth2, explicitly setting `useComposioAuth` to `false` and providing custom `client_id`, `client_secret`, and `redirect_uri` for white-labelling.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/white-labelling.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import { OpenAIToolSet } from "composio-core";
const composioToolset = new OpenAIToolSet();

const integration = await composioToolset.integrations.create({
  appUniqueKey: "googlecalendar",
  name: "Google Calendar",
  authScheme: "OAUTH2",
  useComposioAuth: false,
  authConfig: {
    client_id: "12345678",
    client_secret: "12345678",
    redirect_uri: "https://yourapp.com/redirect",
  },
});
```

----------------------------------------

TITLE: Initializing Claude Client (Python)
DESCRIPTION: This Python snippet imports the `anthropic` library and initializes the Claude client. This client is essential for making API calls to Claude models, enabling interaction and function calls.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/claude/README.md#_snippet_1

LANGUAGE: python
CODE:
```
import anthropic

# Initialize Claude client
client = anthropic.Anthropic()
```

----------------------------------------

TITLE: Fetching Multiple Specific Tools by Action Name in Python
DESCRIPTION: This snippet illustrates how to fetch multiple specific tools by providing a list of Action enums. It allows for precise selection of several tools, such as retrieving the authenticated user and listing repositories for GitHub.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#_snippet_4

LANGUAGE: python
CODE:
```
# Fetch specific tools by action name
github_tools = toolset.get_tools(
    actions=[
        Action.GITHUB_GET_THE_AUTHENTICATED_USER,
        Action.GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER
    ]
)

print(f"Fetched {len(github_tools)} tools.")
# Output contains schemas for the specified actions.
```

----------------------------------------

TITLE: Connecting GitHub Account via Composio CLI
DESCRIPTION: This snippet demonstrates how to connect your GitHub account using the Composio Command Line Interface (CLI). It involves logging into Composio and then adding the GitHub integration, which is a prerequisite for the agent to perform GitHub actions.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/crewai.mdx#_snippet_2

LANGUAGE: shell
CODE:
```
composio login 
composio add github
```

----------------------------------------

TITLE: Specifying GitHub Pull Request Trigger Configuration (Python)
DESCRIPTION: This Python snippet demonstrates how to enable the 'GITHUB_PULL_REQUEST_EVENT' trigger while providing specific configuration parameters, such as the 'owner' and 'repo' for the GitHub repository.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_6

LANGUAGE: python
CODE:
```
response = entity.enable_trigger(
    app=App.GITHUB,
    trigger_name="GITHUB_PULL_REQUEST_EVENT",
    config={"owner": "composiohq", "repo": "composio"},
)
```

----------------------------------------

TITLE: Fetching Multiple Specific Tools by Action Name in TypeScript
DESCRIPTION: This snippet demonstrates how to asynchronously fetch multiple specific tools by providing a list of their string action names. It enables the precise selection of several tools, such as retrieving the authenticated user and listing repositories for GitHub.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
async function fetchSpecificTools() {
  // Fetch specific tools by action name
  const githubTools = await toolset.getTools({
      actions: ["GITHUB_GET_THE_AUTHENTICATED_USER", "GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER"]
  });

  console.log(`Fetched ${githubTools.length} tools.`);
  // Output contains schemas for the specified actions.
}

fetchSpecificTools();
```

----------------------------------------

TITLE: Integrating GitHub Tools with Composio - Python
DESCRIPTION: This Python snippet demonstrates how to fetch and integrate GitHub-specific tools using `ComposioToolSet`. It enables the agent to access and utilize GitHub functionalities through the Composio framework for LangChain operations.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/togetherai/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from composio_togetherai import Action, ComposioToolSet, App


toolset = ComposioToolSet()
actions = toolset.get_tools(apps=[App.GITHUB])
```

----------------------------------------

TITLE: Initiating Composio Connection (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to initiate a connection for a user after an integration has been created. It retrieves the user's entity and then calls `initiateConnection`, passing the `integrationId` and a custom `redirectUri` to control the post-authentication redirection.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/white-labelling.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
const user_id = "00000000-0000-0000-0000-000000000000";
const entity = await composioToolset.getEntity(user_id);

const thread_id = "12345678"; 
const redirect_url = `https://yourapp.com/thread/${thread_id}`; // Example redirect URL

const connectionRequest = await entity.initiateConnection({
  integrationId: integration.id,
  useComposioAuth: false,
  redirectUri: redirect_url,
});

console.log(connectionRequest.redirectUrl);
```

----------------------------------------

TITLE: Initializing Composio Tools for SerpAPI - Python
DESCRIPTION: This snippet initializes the `ComposioToolSet` and retrieves specific tools, in this case, `SERPAPI_SEARCH`, which allows the agent to perform web searches. These tools are then assigned to the agent for its operations.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/research_assistant.ipynb#_snippet_4

LANGUAGE: python
CODE:
```
# Composio tool for serpapi
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(actions=[Action.SERPAPI_SEARCH])
```

----------------------------------------

TITLE: Importing Base Packages for Groq Agent
DESCRIPTION: This step imports essential modules for building a Langchain agent with Groq, including AgentExecutor, ChatGroq, and create_react_agent, and initializes the LLM and pulls a prompt template.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/groq.mdx#_snippet_1

LANGUAGE: python
CODE:
```
# Initialise imports
from langchain.agents import AgentExecutor
from langchain import hub
from langchain_groq import ChatGroq
from langgraph.prebuilt import create_react_agent

llm = ChatGroq(model="mixtral-8x7b-32768", temperature=0)

prompt = hub.pull("hwchase17/react")
```

LANGUAGE: javascript
CODE:
```
// Importing necessary modules from langchain and composio-core packages
import dotenv from 'dotenv';
dotenv.config();

import { ChatGroq } from "@langchain/groq";
import { AgentExecutor, createReactAgent } from "langchain/agents";
import { LangchainToolSet } from "composio-core";
import { pull } from "langchain/hub";


// Creating an instance of ChatGroq with specific model and temperature settings
const llm = new ChatGroq({
  model: "mixtral-8x7b-32768",
  temperature: 0,
});

// Pulling a chat prompt template asynchronously using the pull function
const prompt = await pull<ChatPromptTemplate>(
"hwchase17/react"
);
```

----------------------------------------

TITLE: Creating a GitHub Agent with Letta
DESCRIPTION: This step illustrates how to create a new agent using the Letta client, configuring its name, memory, model, embedding, and associated tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/letta.mdx#_snippet_4

LANGUAGE: Python
CODE:
```
agent = client.agents.create(
    name="GitHub Agent",
    memory_blocks=[
        {"label": "persona", "value": "I am a helpful assistant"}
    ],
    model="openai/gpt-4o",
    embedding="openai/text-embedding-ada-002", 
    tool_ids=[tool.id]
)
```

LANGUAGE: JavaScript
CODE:
```
const agent = await client.agents.create({
    name: "GitHub Agent",
    memoryBlocks: [
        {
            value: "I am a helpful assistant",
            label: "persona"
        }
    ],
    model: "openai/gpt-4o",
    embedding: "openai/text-embedding-ada-002",
    toolIds: [tool.id]
});
```

----------------------------------------

TITLE: Adding Content to RAG Knowledge Base (JavaScript)
DESCRIPTION: This JavaScript asynchronous function `addContent` is responsible for ingesting a predefined set of factual information into the RAG system's knowledge base. It uses an `agentExecutor` to invoke the content addition process, logging the output upon completion. This serves as a prerequisite for subsequent queries.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
const addContent = async (agentExecutor) => {
          const content = `
              1. Paris is the capital city of France.
              2. London is the capital city of the United Kingdom.
              3. Washington D.C. is the capital city of the United States.
              4. Tokyo is the capital city of Japan.
              5. Berlin is the capital city of Germany.
          `;
          
          const result = await agentExecutor.invoke({
              input: `Add the following information to the knowledge base: ${content}`
          });
          
          console.log("Content Added:", result.output);
          return result;
      };
```

----------------------------------------

TITLE: Write Praison-supported Composio Tools
DESCRIPTION: This code fetches specific GitHub tools from Composio, such as starring a repository, and formats them for use within PraisonAI agents. The `tool_section_str` variable will contain the tool definitions ready to be embedded in the `agents.yml` configuration.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/praisonai.mdx#_snippet_2

LANGUAGE: python
CODE:
```
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(
    actions=[Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER]
)
tool_section_str = composio_toolset.get_tools_section(tools)
print(tool_section_str)
```

----------------------------------------

TITLE: Configuring Basic Authentication Proxy Headers in YAML
DESCRIPTION: This YAML snippet illustrates how to configure proxy headers for Basic Authentication. It directly uses `username` and `password` placeholders within the `headers` section, which will be populated with the user's credentials for authentication.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/add-your-app.mdx#_snippet_1

LANGUAGE: yaml
CODE:
```
proxy:
  headers:
    username: "{{username}}"
    password: "{{password}}"
```

----------------------------------------

TITLE: Importing Composio and Smol Agent Packages (Python)
DESCRIPTION: This Python snippet imports necessary modules for setting up the environment. It includes `load_dotenv` and `os` for environment variable management, `Action` from `composio` for defining tool actions, `ComposioToolSet` from `composio_smol` for tool management, and `HfApiModel`, `CodeAgent` from `smolagents` for agent creation.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/smolagent/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from dotenv import load_dotenv
import os

from composio import Action
from composio_smol import ComposioToolSet
from smolagents import HfApiModel, CodeAgent
```

----------------------------------------

TITLE: Validating Agent Execution Response - Python
DESCRIPTION: This Python snippet validates the response from the agent's execution, ensuring that the intended task has been successfully completed. It uses the `toolset.handle_tool_calls` method to process the response and `pprint` to display the result.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/togetherai/README.md#_snippet_4

LANGUAGE: python
CODE:
```
result = toolset.handle_tool_calls(response)
pprint(result)
```

----------------------------------------

TITLE: Defining and Executing a Research Task - Python
DESCRIPTION: This snippet defines `task1`, a research task for the `researcher` agent, specifying its description and expected output. It then immediately executes the task, initiating the agent's research process.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/research_assistant.ipynb#_snippet_6

LANGUAGE: python
CODE:
```
task1 = Task( description="""Research about open source LLMs vs
    closed source LLMs. Your final answer MUST be a full analysis report""", #You can add your own topic to research about change the topic, edit the text after 'Research about' in the description parameter of task1 
    expected_output='When the research report is ready',
    agent=researcher
)
task1.execute()
```

----------------------------------------

TITLE: Initializing Composio Toolset for SERPAPI
DESCRIPTION: This snippet initializes the `ComposioToolSet` and retrieves specific tools, in this case, the `SERPAPI` tool, which will be used by the agent for external data retrieval.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#_snippet_3

LANGUAGE: python
CODE:
```
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.SERPAPI])
```

----------------------------------------

TITLE: Retrieving Available Actions from Composio SDK (TypeScript)
DESCRIPTION: This method retrieves a sequence of available dynamic structured tools, which represent actions, from the Composio SDK. It can be optionally filtered by specific action names and an entity ID. The function returns a Promise resolving to a sequence of `DynamicStructuredTool` objects.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/frameworks_langchain.LangchainToolSet.html#_snippet_2

LANGUAGE: TypeScript
CODE:
```
get_actions(filters?, entityId?): Promise<Sequence<DynamicStructuredTool<ZodObject<any, any, any, any, {}>>>>
```

----------------------------------------

TITLE: Connecting SerpAPI Account via Composio CLI - Bash
DESCRIPTION: These commands use the Composio CLI to log in and add the SerpAPI integration. This step is crucial for enabling the agent to perform web searches using SerpAPI.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/research_assistant.ipynb#_snippet_1

LANGUAGE: bash
CODE:
```
%composio login
%composio add serpapi
```

----------------------------------------

TITLE: Fetching GitHub Tools from Composio
DESCRIPTION: This snippet shows how to retrieve all available tools for the GitHub application from the Composio ToolSet. These tools can then be used by a LangChain agent to perform actions on GitHub, with options to filter for specific actions or use cases.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain.mdx#_snippet_3

LANGUAGE: Python
CODE:
```
tools = composio_toolset.get_tools(apps=[App.GITHUB])
```

LANGUAGE: JavaScript
CODE:
```
const tools = await toolset.getTools({ apps: ["github"] });
```

----------------------------------------

TITLE: Configuring ReAct Prompt Template with Langchain Hub
DESCRIPTION: This snippet pulls a pre-defined ReAct JSON prompt template from Langchain Hub and partially populates it with the descriptions and names of the available tools, preparing it for agent interaction.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#_snippet_5

LANGUAGE: python
CODE:
```
#We use Langchain Hub for the Prompt Template
prompt = hub.pull("hwchase17/react-json")
#prompt.partial assigns values to some parameters defined within the prompt template
prompt = prompt.partial(
tools=render_text_description(tools),
tool_names=", ".join([t.name for t in tools]),
)
```

----------------------------------------

TITLE: Executing Agent to Star GitHub Repository (Python)
DESCRIPTION: This Python snippet configures and executes the Agno agent. It initializes an `Agent` instance with the previously integrated `composio_tools` and enables `show_tool_calls`. The agent then processes a conversational instruction to star the 'ComposioHQ/composio' repository, demonstrating its ability to perform actions based on natural language input.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/agno/README.md#_snippet_3

LANGUAGE: python
CODE:
```
# Create a chat completion request to decide on the action
agent = Agent(tools=composio_tools, show_tool_calls=True)

agent.print_response("Can you star ComposioHQ/composio repo?")
```

----------------------------------------

TITLE: Re-initiating Connection - Python SDK
DESCRIPTION: This Python snippet demonstrates how to re-initiate a user's connection to an application like Gmail. It uses the initiate_connection method with the same parameters as the initial connection, guiding the user to re-authenticate via the provided redirectUrl.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/oauth.mdx#_snippet_4

LANGUAGE: python
CODE:
```
# Create the connection using the same parameters.
user_id = "alice" 
entity = toolset.get_entity(user_id)
connection_req = entity.initiate_connection(
    app_name=App.GMAIL,
    entity_id=user_id,
    # You can use integration_id as well
    # integration_id=GMAIL_INTEGRATION_ID,
    # Add redirect_url if needed for your app flow
    # redirect_url="https://yourapp.com/post-auth" 
)

print(f"Please re-authenticate your Gmail account: {connection_req.redirectUrl}")
print(f"Initial status: {connection_req.connectionStatus}") # Will likely be INITIATED
```

----------------------------------------

TITLE: Integrating GitHub Star Repository Tool with Composio (Python)
DESCRIPTION: This Python snippet initializes the `ComposioToolSet` and retrieves specific GitHub actions, in this case, `GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER`. This makes the specified GitHub functionality available for use by Camel agents.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/camel/README.md#_snippet_2

LANGUAGE: python
CODE:
```
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_actions(
    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]
)
```

----------------------------------------

TITLE: Installing Composio LangChain Package and Connecting GitHub (Bash)
DESCRIPTION: This snippet demonstrates how to install the `composio-agno` package using pip, connect a GitHub account using the `composio add github` command, and view available applications with `composio apps`. These steps are prerequisites for utilizing GitHub functionalities with Composio.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/agno/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-agno

composio add github

composio apps
```

----------------------------------------

TITLE: Installing Composio and CAMEL-AI Packages and Connecting GitHub
DESCRIPTION: This snippet demonstrates how to install the required Python packages for CAMEL-AI and Composio, and how to connect a GitHub account using the `composio` CLI. It also shows how to list available Composio applications. This is a prerequisite for enabling CAMEL agents to interact with GitHub.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/camelai.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
pip install camel-ai
pip install composio-camel -U
#  Connect your GitHub so agents can use it. 
composio add github
#  Check all different apps which you can connect with
composio apps
```

----------------------------------------

TITLE: Running Code Formatting Checks with Tox
DESCRIPTION: This snippet provides `tox` commands for independent code formatting and checking. `isort` is used for import sorting and `black` for code formatting, ensuring consistent style across the codebase.
SOURCE: https://github.com/composiohq/composio/blob/master/CONTRIBUTING.md#_snippet_4

LANGUAGE: Python
CODE:
```
tox -e isort
tox -e black
tox -e isort-check
tox -e black-check
```

----------------------------------------

TITLE: Integrating Specific GitHub Tools with Composio for CAMEL-AI
DESCRIPTION: This Python snippet initializes the `ComposioToolSet` and retrieves specific GitHub tools, in this case, the action to star a repository. This process makes the specified GitHub functionality available for use by the CAMEL-AI agent, allowing it to perform actions like starring a repository.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/camelai.mdx#_snippet_2

LANGUAGE: python
CODE:
```
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(
    actions=[Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER]
)
```

----------------------------------------

TITLE: Installing Composio Core and Plugin Dependencies
DESCRIPTION: This command installs the core Composio package in editable mode, along with the `swe` package and various optional plugins. It ensures that all necessary development dependencies are available for local development and testing.
SOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#_snippet_0

LANGUAGE: bash
CODE:
```
uv pip install -e .
uv pip install -e ../swe
# Install plugins as needed
uv pip install -e ../plugins/autogen
uv pip install -e ../plugins/claude
uv pip install -e ../plugins/crew_ai
uv pip install -e ../plugins/griptape
uv pip install -e ../plugins/julep
uv pip install -e ../plugins/langchain
uv pip install -e ../plugins/llamaindex
uv pip install -e ../plugins/lyzr
uv pip install -e ../plugins/openai
```

----------------------------------------

TITLE: Execute the Agno Agent
DESCRIPTION: Executes the Agno agent with a natural language prompt to star the 'ComposioHQ/composio' repository, showcasing its ability to interpret commands and interact with external applications.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/agno.mdx#_snippet_5

LANGUAGE: python
CODE:
```
agent.print_response("Can you star ComposioHQ/composio repo?")
```

----------------------------------------

TITLE: Execute the LlamaIndex Agent to Star a GitHub Repository
DESCRIPTION: This final snippet executes the defined LlamaIndex agent, instructing it to star a specific GitHub repository using the integrated Composio tools, demonstrating the agent's capability.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#_snippet_5

LANGUAGE: Python
CODE:
```
result = agent.chat("Star a repo composiohq/composio on GitHub")
```

----------------------------------------

TITLE: Executing IBM Agent with a Specific Task (Python)
DESCRIPTION: This Python snippet demonstrates how to execute the configured IBM agent with a specific natural language prompt. It invokes the `llm_with_tools` object with the task 'Star the composiohq/composio repository', which leverages the bound GitHub tools to perform the action, and then prints the agent's response.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/ibm.mdx#_snippet_4

LANGUAGE: python
CODE:
```
response = llm_with_tools.invoke("Star the composiohq/composio repository")
print(response)
```

----------------------------------------

TITLE: Define the Agno Assistant
DESCRIPTION: Initializes an Agno `Agent` instance, providing it with the previously retrieved GitHub tools and enabling `show_tool_calls` for debugging and transparency.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/agno.mdx#_snippet_4

LANGUAGE: python
CODE:
```
agent = Agent(tools=tools, show_tool_calls=True)
```

----------------------------------------

TITLE: Defining ListTriggersResponse Type Alias in Composio Core
DESCRIPTION: This TypeScript type alias defines the structure for `ListTriggersResponse`, which represents an array of trigger objects. Each object includes optional properties such as `appId`, `appName`, `config` (detailing properties and requirements), `count`, `description`, `display_name`, `enabled`, `instructions`, `logo`, `name`, and `payload` (containing commit-related properties like `author`, `id`, `message`, `timestamp`, and `url`). This type is crucial for handling responses when listing triggers in the Composio SDK.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.ListTriggersResponse.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
ListTriggersResponse: {
    appId?: string;
    appKey?: string;
    appName?: string;
    config?: {
        properties?: {
            description?: string;
            required?: string[];
            title?: string;
            type?: string;
        };
        required?: string[];
        title?: string;
        type?: string;
    };
    count?: number;
    description?: string;
    display_name?: string;
    enabled?: boolean;
    instructions?: string;
    logo?: string;
    name?: string;
    payload?: {
        properties?: {
            author: string;
            id: string;
            message: string;
            timestamp: string;
            url: string;
        };
    };
}[]
```

----------------------------------------

TITLE: Executing GitHub Action with Connection ID in TypeScript
DESCRIPTION: This TypeScript snippet illustrates how to execute a GitHub action by directly providing the `connectedAccountId`. This approach is suitable when precise control over which connection to use is required, rather than relying on entity-based resolution. It asynchronously fetches the authenticated GitHub user's details.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
const user_info_direct = await toolset.executeAction({
    action: Action.GITHUB_GET_THE_AUTHENTICATED_USER,
    params: {},
    connectedAccountId: activeConnection.id
});
```

----------------------------------------

TITLE: Get All GitHub Tools
DESCRIPTION: Retrieves all available tools specifically for the GitHub application from the initialized `ComposioToolSet`. This allows the agent to access GitHub functionalities.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/agno.mdx#_snippet_3

LANGUAGE: python
CODE:
```
tools = toolset.get_tools(apps=[App.GITHUB])
```

----------------------------------------

TITLE: Logging into Composio CLI (Bash)
DESCRIPTION: Executes the `composio login` command via the command line. This action authenticates your CLI session and retrieves your API key, which must be set as the `COMPOSIO_API_KEY` environment variable for subsequent Composio operations.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/welcome.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
composio login
```

----------------------------------------

TITLE: Get Specific GitHub Tool for Starring Repositories
DESCRIPTION: This snippet retrieves specific tools from the `ComposioToolSet`. It filters for the `GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER` action, which is necessary for the agent to perform the repository starring task on GitHub.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/smolagents.mdx#_snippet_4

LANGUAGE: python
CODE:
```
tools = composio_toolset.get_tools(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])
```

----------------------------------------

TITLE: Executing Camel Agent with GitHub Star Prompt (Python)
DESCRIPTION: This Python snippet defines a user prompt to star a GitHub repository and then executes the configured Camel agent with this prompt. It prints the user's prompt and the animated response from the agent, demonstrating the agent's ability to perform the requested action.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/camel/README.md#_snippet_4

LANGUAGE: python
CODE:
```
prompt = (
    "I have created a new Github Repo,"
    "Please star my github repository: camel-ai/camel"
)
user_msg = BaseMessage.make_user_message(role_name="User", content=prompt)
print(Fore.YELLOW + f"user prompt:\n{prompt}\n")

response = agent.step(user_msg)
for msg in response.msgs:
    print_text_animated(Fore.GREEN + f"Agent response:\n{msg.content}\n")
```

----------------------------------------

TITLE: Filtering Specific Applications for Composio Tools (Python)
DESCRIPTION: This snippet illustrates how to restrict the Composio toolset to specific applications, such as Asana and GitHub. This limits the agent's access to only the defined tools, streamlining operations and improving security.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/autogen/README.md#_snippet_6

LANGUAGE: python
CODE:
```
composio_tools.register_tools([App.ASANA, App.GITHUB])
```

----------------------------------------

TITLE: Inspecting Raw Composio Tool Schemas (Python)
DESCRIPTION: This Python example demonstrates how to retrieve the raw JSON schema definition for a specific Composio action, such as `GOOGLECALENDAR_LIST_CALENDARS`, using `base_toolset.get_action_schemas`. A key feature highlighted is `check_connected_accounts=False`, which allows fetching schemas for tools even if the corresponding application is not connected, useful for debugging and exploration.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#_snippet_10

LANGUAGE: Python
CODE:
```
from composio import ComposioToolSet, Action, App # Use base ComposioToolSet for schema inspection

# Initialize base ToolSet
base_toolset = ComposioToolSet()

# Get the raw schema for a specific Google Calendar action
# Bypass the check for an active Google Calendar connection
calendar_schemas = base_toolset.get_action_schemas(
    actions=[Action.GOOGLECALENDAR_LIST_CALENDARS],
    check_connected_accounts=False
)

if calendar_schemas:
    import json
    print("Raw Schema for GOOGLECALENDAR_LIST_CALENDARS:")
    # calendar_schemas is a list, access the first element
    print(json.dumps(calendar_schemas[0].model_dump(), indent=2))
else:
    print("Schema not found.")

# You can also fetch schemas by app or tags similarly
# github_schemas = base_toolset.get_action_schemas(
#    apps=[App.GITHUB], check_connected_accounts=False
```

----------------------------------------

TITLE: Initializing Julep Client and Environment Variables (Python)
DESCRIPTION: This Python snippet initializes the development environment by loading environment variables, setting up the Julep client with an API key and base URL, and defining default settings for agent behavior. It also sets up an agent's name and 'about' description.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/julep/README.md#_snippet_1

LANGUAGE: python
CODE:
```
import os
import textwrap
from julep import Client
from dotenv import load_dotenv


load_dotenv()

api_key = os.environ["JULEP_API_KEY"]
base_url = os.environ["JULEP_API_URL"]
# openai_api_key = os.environ["OPENAI_API_KEY"]

client = Client(api_key=api_key, base_url=base_url)



name = "Jessica"
about = "Jessica is a forward-thinking tech entrepreneur with a sharp eye for disruptive technologies. She excels in identifying and nurturing innovative tech startups, with a particular interest in sustainability and AI."
default_settings = {
    "temperature": 0.7,
    "top_p": 1,
    "min_p": 0.01,
    "presence_penalty": 0,
    "frequency_penalty": 0,
    "length_penalty": 1.0,
    "max_tokens": 150,
}
```

----------------------------------------

TITLE: Installing Composio LangChain and Connecting GitHub (Bash)
DESCRIPTION: This snippet provides commands to install the `composio-langchain` package, connect a GitHub account using `composio-cli`, and view available applications. These steps are prerequisites for using Composio tools with LangChain agents.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langchain/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Install Composio LangChain package
pip install composio-langchain

# Connect your GitHub account
composio-cli add github

# View available applications you can connect with
composio-cli show-apps
```

----------------------------------------

TITLE: Configuring ComposioToolSet with Docker Workspace in Python
DESCRIPTION: This snippet illustrates how to configure ComposioToolSet to execute local tools within a Docker container. It specifies a base Docker image (e.g., 'python:3.9') and allows for optional volume mounts, then uses FILETOOL_LIST_FILES to list files within the containerized environment. Docker must be installed and running on the host machine.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/workspaces/workspaces.mdx#_snippet_2

LANGUAGE: python
CODE:
```
from composio_openai import ComposioToolSet, App, Action, WorkspaceType
from openai import OpenAI

client = OpenAI()

toolset = ComposioToolSet(workspace_config=WorkspaceType.Docker(
    image="python:3.9",  # Base image to use
    volumes={"/host/path": "/container/path"}  # Optional volume mounts
))
tools = toolset.get_tools(["FILETOOL_LIST_FILES"])

response = client.chat.completions.create(
    model="gpt-4o-mini",
    max_tokens=1024,
    tools=tools,
    messages=[{"role": "user", "content": "List files in container"}],
)
result = toolset.handle_tool_calls(response)
print(result)
```

----------------------------------------

TITLE: Inspecting Google Calendar Action Schema with ComposioToolSet (TypeScript)
DESCRIPTION: This snippet demonstrates how to retrieve the raw schema for a specific Composio action, GOOGLECALENDAR_LIST_CALENDARS, using the ComposioToolSet in TypeScript. It shows how to bypass active connection checks to inspect the ActionModel objects, which contain detailed parameter and response schemas. The output is the raw JSON schema printed to the console, providing full parameter and response schemas, and version information.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#_snippet_11

LANGUAGE: TypeScript
CODE:
```
import { ComposioToolSet, Action, App } from "composio-core"; // Use base ComposioToolSet

// Initialize base ToolSet
const baseToolset = new ComposioToolSet();

async function inspectSchema() {
    // Get the raw schema for a specific Google Calendar action
    // Bypass the check for an active Google Calendar connection
    const calendarSchemas = await baseToolset.getActionsSchema( // Note: Method name might differ slightly or require client access depending on SDK version/structure
       { actions: [Action.GOOGLECALENDAR_LIST_CALENDARS] },
       undefined, // entityId - not relevant here
       // Pass underlying client option if needed, or use client directly:
       // await baseToolset.client.actions.get({ actions: [Action.GOOGLECALENDAR_LIST_CALENDARS] })
       // The exact TS equivalent depends on how schema fetching bypassing checks is exposed.
       // Assuming getActionsSchema handles it conceptually:
       // check_connected_accounts=false equivalent might be implicit or require direct client usage.
       // This example assumes a conceptual equivalent exists on the toolset for simplicity.
    );


    if (calendarSchemas && calendarSchemas.length > 0) {
        console.log("Raw Schema for GOOGLECALENDAR_LIST_CALENDARS:");
        // calendarSchemas is an array, access the first element
        console.log(JSON.stringify(calendarSchemas[0], null, 2));
         // Adjust access based on actual return type (might be ActionModel-like objects)
    } else {
        console.log("Schema not found.");
    }

     // Fetching by app:
     // const githubSchemas = await baseToolset.getActionsSchema({ apps: ["github"] });
}

inspectSchema();

// Note: The TypeScript example is conceptual. Direct schema fetching bypassing connection checks
// might require using `baseToolset.client.actions.get(...)` directly if `getActionsSchema`
// on the ToolSet enforces checks or framework formatting. Refer to TS SDK specifics.
```

----------------------------------------

TITLE: Installing Composio LangChain Package and Connecting GitHub
DESCRIPTION: This snippet provides the necessary commands to install the `composio-phidata` package and connect your GitHub account using the `composio-cli` tool, which is essential for enabling GitHub functionalities for your agents.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/phidata/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-phidata

composio-cli add github

composio-cli show-apps
```

----------------------------------------

TITLE: Executing a Task with Google AI Model (Python)
DESCRIPTION: This Python snippet defines a task as a natural language string and sends it to the Google AI model's chat session. It then prints the model's response, which typically includes a tool call to perform the requested action.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/google.mdx#_snippet_3

LANGUAGE: python
CODE:
```
# Define task
task = "Star a repo composiohq/composio on GitHub"

# Send a message to the model
response = chat.send_message(task)

print("Model response:")
print(response)
```

----------------------------------------

TITLE: Initializing Google AI Python Client - Python
DESCRIPTION: This snippet prepares the environment by importing the `genai` package from Google AI Python and initializing a `genai.Client()` instance. This client is essential for interacting with Google's Gemini models and their functionalities.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/gemini/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from google import genai

# Create google client
client = genai.Client()
```

----------------------------------------

TITLE: Fetching GitHub Tools with ComposioToolSet - JavaScript
DESCRIPTION: This snippet demonstrates how to retrieve all available tools for a specific application, in this case, GitHub, using the toolset.getTools() method. The apps parameter specifies the target application. This allows the AI agent to access and utilize GitHub-specific functionalities.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/vercel.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
const tools = await toolset.getTools({ apps: ["github"] });
```

----------------------------------------

TITLE: Testing Agent Interaction and Validating Response
DESCRIPTION: Demonstrates how to interact with the configured agent using a chat message to request starring a GitHub repository. It then prints the agent's response to validate the execution and confirm task completion.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/llamaindex/README.md#_snippet_4

LANGUAGE: python
CODE:
```
response = agent.chat("Hello! I would like to star a repo composiohq/composio on GitHub")
print("Response:", response)
```

----------------------------------------

TITLE: Define GetAppResponse Type Alias in TypeScript
DESCRIPTION: This TypeScript type alias, `GetAppResponse`, defines the comprehensive structure of an application response object. It includes essential fields such as `appId`, `auth_schemes` (detailing authentication modes and fields), `categories`, `meta` data (like action and trigger counts), and optional documentation fields, providing a clear contract for application data.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.GetAppResponse.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
GetAppResponse: {
    appId: string;
    auth_schemes: {
        auth_mode: string;
        authorization_url?: string;
        client_id?: string;
        client_secret?: string;
        default_scopes?: string[];
        fields?: {
            default?: string;
            description: string;
            displayName: string;
            expected_from_customer: boolean;
            name: string;
            required: boolean;
            type: string;
        }[];
        proxy?: {
            base_url?: string;
        };
        scheme_name?: string;
        token_response_metadata?: string[];
        token_url?: string;
    }[];
    categories: string[];
    configuration_docs_text?: string;
    description?: string;
    docs?: string;
    documentation_doc_text?: string;
    group: string;
    key: string;
    logo?: string;
    meta: {
        actionsCount: number;
        is_custom_app: boolean;
        triggersCount: number;
    };
    name: string;
    status: string;
    testConnectors?: {
        authScheme: string;
        id: string;
        name: string;
    }[];
    yaml: any;
}
```

----------------------------------------

TITLE: Executing SQL Query with Agent in JavaScript
DESCRIPTION: This snippet demonstrates how to invoke an agent executor in JavaScript to run a specified SQL query against a SQLite database. It instructs the agent to save the query results to a file and then returns the content of the results.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const result = await agentExecutor.invoke({
    input: `Connect to the SQLite database 'companydb' and execute the following query: ${query}. 
                      Save the results to a file named 'query_results.txt' and return the content.`
});
      
console.log("SQL Query Result:", result.output);
return result.output;
```

----------------------------------------

TITLE: Connecting GitHub Account to Composio
DESCRIPTION: This step explains how to connect your GitHub account with Composio, providing methods for CLI, Python, and JavaScript to initiate the authentication process. A successful connection is required for Composio to access and perform actions on your GitHub account.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai.mdx#_snippet_2

LANGUAGE: shell
CODE:
```
composio login
composio add github
```

LANGUAGE: Python
CODE:
```
request = composio_toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")
```

LANGUAGE: JavaScript
CODE:
```
const connection = await toolset.connectedAccounts.initiate({appName: "github"})
console.log(`Open this URL to authenticate: ${connection.redirectUrl}`);
```

----------------------------------------

TITLE: Installing Composio Python Packages
DESCRIPTION: This snippet provides the necessary commands to install the core Composio Python package and its optional OpenAI plugin using pip. The core package is fundamental for using Composio, while the OpenAI plugin extends its capabilities for OpenAI-specific integrations.
SOURCE: https://github.com/composiohq/composio/blob/master/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-core
```

LANGUAGE: bash
CODE:
```
pip install composio-openai
```

----------------------------------------

TITLE: Re-initiating Connection - TypeScript SDK
DESCRIPTION: This TypeScript example provides two methods for re-establishing a connection: using toolset.connectedAccounts.reinitiateConnection with an existing connectedAccountId, or by creating an entirely new connection using entity.initiateConnection with an integrationId or appName.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/oauth.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
const userId = "alice";
const entity = await toolset.getEntity(userId);

const connectionReq = await toolset.connectedAccounts.reinitiateConnection({
  connectedAccountId: "00000000-0000-0000-0000-000000000000",
  data: {},
  redirectUri: "https://example.com/callback"
});
    
// Alternatively you can create a new connection altogether
    
const integrationId = GMAIL_INTEGRATION_ID; 
const connectionReq = await entity.initiateConnection({
    integrationId: integrationId,
    // appName: "gmail"
});

console.log(`Please re-authenticate your Gmail account: ${connectionReq.redirectUrl}`);
console.log(`Initial status: ${connectionReq.connectionStatus}`); // Will likely be INITIATED
```

----------------------------------------

TITLE: Importing Base Packages for RAG Agent
DESCRIPTION: This snippet shows the essential library imports for both Python and JavaScript implementations. Python imports include `os`, `textwrap`, `ComposioToolSet`, `Agent`, `Crew`, `Process`, `Task` from `crewai`, `load_dotenv`, and `ChatOpenAI`. JavaScript imports `dotenv`, `LangchainToolSet`, `ChatOpenAI`, `AgentExecutor`, `createOpenAIFunctionsAgent`, and `pull`.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
import os
import textwrap

from composio_crewai import Action, App, ComposioToolSet
from crewai import Agent, Crew, Process, Task
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
```

LANGUAGE: JavaScript
CODE:
```
import dotenv from 'dotenv';
import { LangchainToolSet } from "composio-core";
import { ChatOpenAI } from "@langchain/openai";
import { AgentExecutor, createOpenAIFunctionsAgent } from "langchain/agents";
import { pull } from "langchain/hub";

dotenv.config();
```

----------------------------------------

TITLE: Installing Composio Griptape and Connecting GitHub (Bash)
DESCRIPTION: These commands prepare the environment by installing the Composio Griptape library, connecting to GitHub via Composio, and listing available applications to ensure seamless interaction with Griptape agents.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/griptape.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio_griptape
# Connect your GitHub so agents can use it. 
composio add github
# Check all different apps which you can connect with
composio show-apps
```

----------------------------------------

TITLE: Integrating Specific GitHub Tools with Composio (Python)
DESCRIPTION: This Python snippet initializes a `ComposioToolSet` instance and fetches specific GitHub tools. It specifically retrieves the `GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER` action, which allows the agent to star a GitHub repository, enabling targeted functionality for agent operations.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/ibm.mdx#_snippet_2

LANGUAGE: python
CODE:
```
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(
    actions=[Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER]
)
```

----------------------------------------

TITLE: Filtering Composio Tools for Specific GitHub Actions (Python)
DESCRIPTION: This Python snippet demonstrates how to restrict the agent's actions by filtering the Composio tools to include only specific actions, such as `GITHUB_CREATE_ISSUE`. This prevents the agent from executing any other actions.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#_snippet_6

LANGUAGE: python
CODE:
```
# To restrict agents from executing any actions, filter specific actions 
actions = composio_toolset.get_tools(actions=[Action.GITHUB_CREATE_ISSUE])
```

----------------------------------------

TITLE: Importing Core JavaScript Libraries for Research Agent
DESCRIPTION: This snippet imports core JavaScript modules. `express` is for setting up the web server, `openai` for interacting with the OpenAI API, `composio-core` for Composio tools, and `dotenv` for loading environment variables from a `.env` file.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
import express from 'express';
import { OpenAI } from "openai";
import { OpenAIToolSet, Action } from "composio-core";
import dotenv from 'dotenv';

dotenv.config();
```

----------------------------------------

TITLE: Connecting an Application via Composio CLI (Bash)
DESCRIPTION: Uses the `composio add` command to connect a specific application, such as GitHub, to your Composio account. This initiates the integration process, allowing your AI agents to interact with the specified external service through Composio.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/welcome.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
composio add github
```

----------------------------------------

TITLE: Connecting GitHub Account via CLI - Shell
DESCRIPTION: These shell commands facilitate logging into Composio and adding the GitHub integration. This step is a prerequisite for the Composio agent to interact with GitHub on behalf of the authenticated user.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/livekit.mdx#_snippet_3

LANGUAGE: shell
CODE:
```
composio login
composio add github
```

----------------------------------------

TITLE: Defining CreateConnectionResponse Type in TypeScript
DESCRIPTION: This TypeScript type alias, `CreateConnectionResponse`, defines the expected structure for responses related to creating a connection. It includes optional properties for the connected account ID, the connection status (SUCCESS, INITIATED, or FAILED), and a redirect URL.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.CreateConnectionResponse.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
CreateConnectionResponse: {
    connectedAccountId?: string;
    connectionStatus?: "SUCCESS" | "INITIATED" | "FAILED";
    redirectUrl?: string;
}
```

----------------------------------------

TITLE: Integrating GitHub Tools with Composio - Python
DESCRIPTION: This Python snippet imports `App` and `ComposioToolset` from `composio_google`. It then initializes the `ComposioToolset` and fetches GitHub-specific tools, enabling enhanced functionality for Google AI Python operations by providing access to GitHub actions.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/google/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from composio_google import App, ComposioToolset

toolset = ComposioToolset()
actions = toolset.get_tools(apps=[App.GITHUB])
```

----------------------------------------

TITLE: Installing Composio and Connecting GitHub (Bash)
DESCRIPTION: This snippet demonstrates how to install the `composio-google` package, connect your GitHub account using `composio add github`, and list all supported applications with `composio apps`. These steps are prerequisites for enabling Google AI models to interact with external tools like GitHub.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/google.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-google

# Connect your GitHub so models can interact with it

composio add github

# Check all supported apps

composio apps
```

----------------------------------------

TITLE: Installing Composio Smol Agents and Connecting GitHub (Bash)
DESCRIPTION: This snippet provides instructions for installing the `composio-smol` package using pip, connecting a GitHub account via the `composio` CLI, and viewing available applications. These steps are prerequisites for using Composio tools with Smol Agents.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/smolagent/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Install Composio Smol Agents package
pip install composio-smol

# Connect your GitHub account
composio add github

# View available applications you can connect with
composio apps
```

----------------------------------------

TITLE: Handling Composio Tool Calls from Julep Agent Response (Python)
DESCRIPTION: This code processes the response from the Julep agent, specifically handling any tool calls made by the agent using the `composio_toolset.handle_tool_calls` method. It then prints the messages from the processed response.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#_snippet_4

LANGUAGE: python
CODE:
```
response = composio_toolset.handle_tool_calls(response)

print(response.messages)
```

----------------------------------------

TITLE: Initializing ComposioToolSet with Basic Docker Workspace (Python)
DESCRIPTION: This code shows how to configure the ComposioToolSet to operate within a Docker container. This setup provides a sandboxed environment for agent operations, enhancing security and isolation by default.
SOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#_snippet_6

LANGUAGE: Python
CODE:
```
from composio import ComposioToolSet, WorkspaceType

toolset = ComposioToolSet(
    workspace_config=WorkspaceType.Docker()
)
```

----------------------------------------

TITLE: Adding GitHub Star Repository Action to Letta Client
DESCRIPTION: This step shows how to add the specific GitHub 'star a repository' action from Composio to the Letta client for agent use.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/letta.mdx#_snippet_3

LANGUAGE: Python
CODE:
```
tool = client.tools.add_composio_tool(composio_action_name=Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER.name)
```

LANGUAGE: JavaScript
CODE:
```
const tool = await client.tools.addComposioTool(
    "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"
)
```

----------------------------------------

TITLE: Initiating GitHub Connection Programmatically (Python)
DESCRIPTION: This Python snippet demonstrates how to programmatically initiate the GitHub connection process using `toolset.initiate_connection(app=App.GITHUB)`. It returns a `redirectUrl` that the user must open in a browser to complete the authentication and authorize Composio to access their GitHub account.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/autogen.mdx#_snippet_3

LANGUAGE: python
CODE:
```
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")
```

----------------------------------------

TITLE: Creating Data Visualization Function in JavaScript
DESCRIPTION: This JavaScript function `createVisualization` sets up an AI agent to generate a bar chart. It dynamically fetches necessary tools and prompts, configures an agent executor, and then invokes it with data to create a visualization, saving it as 'salary_chart.png'.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#_snippet_6

LANGUAGE: JavaScript
CODE:
```
async function createVisualization(data) {
    // Get all tools including code interpreter
    const allTools = await getAllTools();
    
    // Create the agent prompt
    const prompt = await pull("hwchase17/openai-functions-agent");
    
    // Create the agent for visualization
    const agent = await createOpenAIFunctionsAgent({ 
        llm, 
        tools: allTools, 
        prompt 
    });

    // Create the agent executor
    const agentExecutor = new AgentExecutor({
        agent,
        tools: allTools,
        verbose: true,
    });

    // Execute the visualization task
    const result = await agentExecutor.invoke({
        input: `Using the following data: ${data}
                      Create a bar chart showing first_name on the x-axis and salary on the y-axis.
                      Save the visualization as 'salary_chart.png'.`
    });

    console.log("Visualization Result:", result.output);
    return result.output;
}
```

----------------------------------------

TITLE: Installing Composio and IBM LangChain Packages (Bash)
DESCRIPTION: This snippet installs the required Python packages `composio-langchain` and `langchain-ibm` using pip. It then demonstrates how to connect a GitHub account using `composio add github` and list available applications with `composio apps`, enabling IBM agents to interact with GitHub.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/ibm.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-langchain
pip install langchain-ibm

#  Connect your GitHub so agents can use it. 
composio add github
#  Check all different apps which you can connect with
composio apps
```

----------------------------------------

TITLE: Executing a GitHub Task with Autogen Agent (Python)
DESCRIPTION: This Python snippet defines a task to star a GitHub repository and then initiates a chat with the `chatbot` agent via the `user_proxy` to execute this task. The `response` object will contain the chat history and outcome.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/autogen/README.md#_snippet_3

LANGUAGE: python
CODE:
```
task = "Star a repo composiohq/composio on GitHub"

# Initiate the task
response = user_proxy.initiate_chat(chatbot, message=task)

print(response.chat_history)
```

----------------------------------------

TITLE: Configuring Camel Agent with GitHub Tools (Python)
DESCRIPTION: This Python snippet sets up the LLM model configuration, including the integrated tools, and initializes a `ChatAgent`. It defines the assistant's system message, instructing it to act as a programmer and GitHub user capable of using available tools to execute instructions.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/camel/README.md#_snippet_3

LANGUAGE: python
CODE:
```
# set up LLM model
assistant_model_config = ChatGPTConfig(
    temperature=0.0,
    tools=tools,
)

model = ModelFactory.create(
    model_platform=ModelPlatformType.OPENAI,
    model_type=ModelType.GPT_3_5_TURBO,
    model_config_dict=assistant_model_config.__dict__,
)


# set up agent
assistant_sys_msg = BaseMessage.make_assistant_message(
    role_name="Developer",
    content=(
        "You are a programmer as well an experienced github user. "
        "When asked given a instruction, "
        "you try to use available tools, and execute it"
    ),
)

agent = ChatAgent(
    assistant_sys_msg,
    model,
    tools=tools,
)
agent.reset()
```

----------------------------------------

TITLE: Setting Up Vue.js AI Chat Application in JavaScript
DESCRIPTION: This JavaScript snippet initializes a Vue 3 application for an AI chat interface. It manages the application state using Vue's `reactive` API, handles user input, sends messages to a backend API via `fetch` POST requests, and updates the chat display dynamically. It also includes methods for styling chat messages based on the sender's role and basic error handling for API calls.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/newsletter_summarizer/newsletter_summarizer_cloudflare/src/ui.html#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createApp, reactive } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js';
const state = reactive({ content: '', loading: false, previousMessages: [], });
const scrollToBottom = () => { const chats = document.querySelector('#chats'); chats.scrollTop = chats.scrollHeight; };
createApp({
  template: '#app-template',
  setup() { return { state }; },
  methods: {
    chatClass(item) {
      switch (item.role) {
        case 'assistant': return { container: 'chat chat-start', content: 'chat-bubble chat-bubble-secondary', };
        case 'tool': return { container: 'stats shadow', content: 'stat-value', };
        case 'user': return { container: 'chat chat-end', content: 'chat-bubble chat-bubble-primary' };
      }
    },
    async submit() {
      event.preventDefault();
      try {
        state.loading = true;
        const content = state.content;
        state.previousMessages = [...state.previousMessages, { role: 'user', content }]
        state.content = '';
        const events = await fetch('/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ content }),
        });
        const { messages } = await events.json()
        if (messages.length) {
          state.previousMessages = [ ...state.previousMessages, ...messages ]
        }
      } catch (err) {
        console.log(err)
        state.previousMessages = [...state.previousMessages, { role: 'assistant', content: "Something went wrong." }];
      } finally {
        state.loading = false;
      }
      console.log(state)
    },
  },
}).mount('#app');
```

----------------------------------------

TITLE: Specifying GitHub Pull Request Trigger Configuration (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to enable the 'GITHUB_PULL_REQUEST_EVENT' trigger, passing the required 'owner' and 'repo' configuration details for a GitHub repository.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
const res = await entity.setupTrigger({
  triggerName: "GITHUB_PULL_REQUEST_EVENT",
  app: "github",
  config: {
    owner: "composiohq",
    repo: "composio",
  },
});
```

----------------------------------------

TITLE: Filtering Composio Tools by Specific Applications
DESCRIPTION: This command illustrates how to retrieve tools associated with a specific application, allowing for fine-grained control over which tools an agent can access.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/groq.mdx#_snippet_6

LANGUAGE: python
CODE:
```
# To restrict agents from using all tools, filter specific tools 
tools = composio_toolset.get_tools(actions=[Action.GITHUB_CREATE_ISSUE])
```

----------------------------------------

TITLE: Filtering Composio Tools for Specific Applications (Python)
DESCRIPTION: This code shows how to limit the tools available to the agent by specifying a list of allowed applications, such as Asana and GitHub. This ensures the agent only interacts with the designated apps.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#_snippet_7

LANGUAGE: python
CODE:
```
# To restrict agents from using all tools, filter specific tools 
actions = composio_toolset.get_tools(apps=[App.ASANA, App.GITHUB])
```

----------------------------------------

TITLE: Configuring Environment Variables - .env
DESCRIPTION: Defines the required API keys, `OPENAI_API_KEY` and `COMPOSIO_API_KEY`, within a `.env` file. These keys are crucial for authenticating and interacting with the respective OpenAI and Composio services.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/coinbase/README.md#_snippet_2

LANGUAGE: Environment
CODE:
```
OPENAI_API_KEY=
COMPOSIO_API_KEY=
```

----------------------------------------

TITLE: Installing CrewAI Framework and Composio Plugin
DESCRIPTION: This command installs the `crewai` agentic framework along with its specific Composio plugin (`composio-crewai`). This is an example of integrating `swekit` with a chosen agentic framework, enabling agents to leverage `crewai`'s capabilities.
SOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
pip install crewai composio-crewai
```

----------------------------------------

TITLE: Creating GitHub Pull Request with CLI
DESCRIPTION: This command uses the GitHub CLI to create a new Pull Request. It includes a structured body for the PR description, requiring a summary, test plan, and an attribution, ensuring consistent PR quality.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/CLAUDE.md#_snippet_13

LANGUAGE: Bash
CODE:
```
gh pr create --title "[type]: [title]" --body "$(cat <<'EOF'
## Summary
[Brief description of changes]

## Test plan
[How to verify changes]

🤖 Generated with [Claude Code](https://claude.ai/code)
EOF
)"
```

----------------------------------------

TITLE: Installing Composio Core Package - Bash
DESCRIPTION: This command installs the core Composio library using pip, the Python package installer. It is the first step to set up Composio in your environment.
SOURCE: https://github.com/composiohq/composio/blob/master/python/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-core
```

----------------------------------------

TITLE: Installing Packages for Composio and Letta
DESCRIPTION: This step outlines the necessary package installations for both Python and JavaScript environments to enable integration with Composio and Letta.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/letta.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
pip install letta-client composio_langchain
```

LANGUAGE: JavaScript
CODE:
```
npm i composio-core @letta-ai/letta-client
```

----------------------------------------

TITLE: Running FastAPI Server and Exposing with Ngrok (Bash)
DESCRIPTION: Provides command-line instructions to start the FastAPI server locally using Python and then expose it to the internet using Ngrok. This setup is essential for testing webhook integrations from external services like Composio, allowing them to reach your local development environment.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_17

LANGUAGE: bash
CODE:
```
# Start your FastAPI server
python webhook.py

# In another terminal, start ngrok
ngrok http 8000
```

----------------------------------------

TITLE: Scaffolding a New SWEKit Agent
DESCRIPTION: This command is used to scaffold a new AI agent project using `swekit`. It allows specifying the agent type (e.g., `swe`, `pr_review`), the agentic framework to use (e.g., `crewai`, `langgraph`), and the output path for the generated agent files.
SOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
swekit scaffold <type> -f <framework> -o <path>
```

----------------------------------------

TITLE: Configuring IBM Watsonx LLM and Binding Tools (Python)
DESCRIPTION: This Python snippet configures the IBM Watsonx Large Language Model (LLM) by setting generation parameters and prompting the user for the IBM Cloud URL and Project ID. It initializes `ChatWatsonx` with the specified model and credentials, then binds the previously fetched GitHub tools to the LLM, preparing it for agent execution.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/ibm.mdx#_snippet_3

LANGUAGE: python
CODE:
```
parameters = {
"decoding_method": "sample",
"max_new_tokens": 100,
"min_new_tokens": 1,
"temperature": 0.5,
"top_k": 50,
"top_p": 1,
}
url = input('Add your IBM Cloud URL here: ')
project_id = input('Add your IBM Project ID here: ')
watsonx_llm = ChatWatsonx(
model_id = 'ibm/granite-3-8b-instruct',
url = url, 
project_id = project_id,
)   

if not url or not project_id:
    raise ValueError("IBM Cloud URL and Project ID must be provided")

llm_with_tools = watsonx_llm.bind_tools(tools)
```

----------------------------------------

TITLE: Retrieving Specific Integration Details (TypeScript)
DESCRIPTION: Retrieves the details of a specific integration from the Composio platform using its integration name. The `data` parameter expects a `GetIntegrationData` object. The method returns a `CancelablePromise` resolving to `GetIntegrationResponse`, which includes comprehensive integration information.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk_models_integrations.Integrations.html#_snippet_3

LANGUAGE: TypeScript
CODE:
```
get(data: GetIntegrationData): CancelablePromise<GetIntegrationResponse>
```

----------------------------------------

TITLE: Importing Base Packages for Composio and IBM (Python)
DESCRIPTION: This Python snippet imports essential classes like `ComposioToolSet` and `Action` from `composio_langchain`, and `ChatWatsonx` from `langchain_ibm`. It also sets and validates the `WATSONX_API_KEY` environment variable, which is crucial for authenticating with IBM Watsonx services.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/ibm.mdx#_snippet_1

LANGUAGE: python
CODE:
```
from composio_langchain import ComposioToolSet, Action
from langchain_ibm import ChatWatsonx
import os

os.environ['WATSONX_API_KEY'] = '<ibm_api_key>' #add your ibm api key here
if not os.environ.get('WATSONX_API_KEY'):
    raise ValueError("WATSONX_API_KEY environment variable is not set")
```

----------------------------------------

TITLE: Configuring General API Proxy Settings in YAML
DESCRIPTION: This YAML snippet demonstrates a comprehensive proxy configuration, setting a static `base_url` and including custom `headers` for authorization and content type. It also defines `query_params` using a placeholder for an API key, illustrating how dynamic values are integrated into API requests.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/add-your-app.mdx#_snippet_5

LANGUAGE: yaml
CODE:
```
proxy:
  base_url: "https://api.example.com/v1"
  headers:
    Authorization: "Bearer {{access_token}}"
    Content-Type: "application/json"
  query_params:
    api_key: "{{api_key}}"
```

----------------------------------------

TITLE: Example Response for Composio MCP Server Creation
DESCRIPTION: This JSON snippet illustrates the typical response received after successfully creating a Composio MCP server. It includes the server's unique ID, name, associated authentication configuration, a list of allowed tools, the `mcp_url` for client connections, and example commands for setting up various MCP clients.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/mcp/introduction.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "id": "5bc757cc-7a8e-431c-8616-7f57cbed2423",
  "name": "gdrive_searcher",
  "auth_config_id": "a8a244c4-4a52-488e-8a01-2e504d069d16",
  "allowed_tools": [
    "GOOGLEDRIVE_FIND_FILE",
    "GOOGLEDRIVE_FIND_FOLDER",
    "GOOGLEDRIVE_DOWNLOAD_FILE"
  ],
  "mcp_url": "https://mcp.composio.dev/composio/server/5bc757cc-7a8e-431c-8616-7f57cbed2423?transport=sse",
  "commands": {
    "cursor": "npx @composio/mcp@latest setup \"<mcp_url>\" --client cursor",
    "claude":  "npx @composio/mcp@latest setup \"<mcp_url>\" --client claude",
    "windsurf": "npx @composio/mcp@latest setup \"<mcp_url>\" --client windsurf"
  },
  "created_at": "2025-05-18T22:15:25.926Z",
  "updated_at": "2025-05-18T22:15:25.926Z"
}
```

----------------------------------------

TITLE: Generating Composio SDK Types (Post-Installation)
DESCRIPTION: Executes a command-line utility to generate SDK types after a new Composio installation. This step is crucial to resolve potential 'metadata' related errors and ensure proper SDK functionality.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/installation.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
composio apps generate-types
```

----------------------------------------

TITLE: Retrieving Tools by Filters from Composio SDK (TypeScript)
DESCRIPTION: This method fetches a sequence of dynamic structured tools based on comprehensive filters including applications, tags, and use cases. It also supports an optional entity ID. The method returns a Promise that resolves to a sequence of `DynamicStructuredTool` objects, enabling targeted tool discovery.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/frameworks_langchain.LangchainToolSet.html#_snippet_3

LANGUAGE: TypeScript
CODE:
```
get_tools(filters, entityId?): Promise<Sequence<DynamicStructuredTool<ZodObject<any, any, any, any, {}>>>>
```

----------------------------------------

TITLE: Enabling Slack 'New Message Received' Trigger via Composio CLI (Bash)
DESCRIPTION: This command-line snippet demonstrates how to enable the 'SLACK_RECEIVE_MESSAGE' trigger directly from the terminal using the Composio CLI tool.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
composio triggers enable SLACK_RECEIVE_MESSAGE
```

----------------------------------------

TITLE: Defining DeleteConnectionData Type in TypeScript
DESCRIPTION: This TypeScript type alias defines the structure for data required when deleting a connection. It specifies that any object conforming to this type must include a `connectedAccountId` property, which is a string representing the unique identifier of the connection targeted for deletion. This type ensures data consistency for connection deletion operations within the SDK.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.DeleteConnectionData.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
DeleteConnectionData: {
    connectedAccountId: string;
}
```

----------------------------------------

TITLE: Retrieving Specific Connection Details
DESCRIPTION: This snippet demonstrates how to retrieve the details of a specific connection using its unique `connected_account_id`. It utilizes the `toolset` object to query for the connection and then prints its ID, application name, and status. This operation requires a valid `connected_account_id` as input and returns a connection object.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/connection.mdx#_snippet_6

LANGUAGE: python
CODE:
```
connection_id = "1d28bbbb-91d0-4181-b4e5-088bab0d7779"

connection = toolset.get_connected_account(connection_id)
print(f"Details for {connection.id}: App={connection.appName}, Status={connection.status}")
```

LANGUAGE: typescript
CODE:
```
const connectionId = "1d28bbbb-91d0-4181-b4e5-088bab0d7779";

const connection = await toolset.connectedAccounts.get({
    connectedAccountId: connectionId,
});
console.log(
    `Details for ${connection.id}: App=${connection.appName}, Status=${connection.status}`
);
```

----------------------------------------

TITLE: Importing Core Libraries for Composio Newsletter Summarizer
DESCRIPTION: This section details the essential library imports required for the project, covering Composio tools, CrewAI components, date utilities, and OpenAI for language model interactions in Python, and Hono, CloudflareToolSet, and dotenv in JavaScript.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
import os
from datetime import datetime, timedelta

from composio_crewai import App, ComposioToolSet
from crewai import Agent, Crew, Process, Task
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
```

LANGUAGE: JavaScript
CODE:
```
import { Hono } from "hono";
import { handle } from "hono/cloudflare-pages";
import { CloudflareToolSet } from "composio-core";
import { ChatOpenAI } from "@langchain/openai";
import dotenv from 'dotenv';

dotenv.config();
```

----------------------------------------

TITLE: Run Lead Generator Agent Python Script (Shell)
DESCRIPTION: This command executes the main Python script for the Lead Generator Agent. It initiates the agent's core functionality, which involves generating leads and compiling the data into a spreadsheet. Ensure all dependencies are installed and the `.env` file is properly configured.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_generator_agent/readme.md#_snippet_3

LANGUAGE: Shell
CODE:
```
python cookbook/python-examples/advanced_agents/lead_generator_agent/main.py
```

----------------------------------------

TITLE: Running Python Research Agent Script in Shell
DESCRIPTION: This command executes the main Python script for the domain deep research agent. It initiates the agent's functionality after the environment has been successfully set up.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/domain_deep_research/llamaindex/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/python-examples/advanced_agents/domain_deep_research/llamaindex/main.py
```

----------------------------------------

TITLE: Running the Image Search Agent (Python)
DESCRIPTION: This command executes the main Python script for the Image Search Agent. It initiates the agent's functionality after the environment has been set up and dependencies installed.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_autogen/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/examples/image_search/main.py
```

----------------------------------------

TITLE: Running Main Python Script (Shell)
DESCRIPTION: This command executes the main Python script for the Image Search Agent, initiating the image search functionality. It requires all dependencies to be installed and the '.env' file to be properly configured beforehand.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_langgraph/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/examples/image_search/main.py
```

----------------------------------------

TITLE: Connecting GitHub Account - Bash
DESCRIPTION: This command sets the `GITHUB_ACCESS_TOKEN` environment variable. This token is required to enable the agent to utilize GitHub Issues as a task source, allowing integration with GitHub for software engineering tasks.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/swe/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
export GITHUB_ACCESS_TOKEN=<github_access_token>
```

----------------------------------------

TITLE: Define Smol Code Agent with GitHub Tools
DESCRIPTION: This snippet initializes a `CodeAgent` from `smolagents`, providing it with the previously fetched GitHub tools. It also specifies `HfApiModel` as the underlying model for the agent's operations, enabling it to understand and execute tasks.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/smolagents.mdx#_snippet_5

LANGUAGE: python
CODE:
```
agent = CodeAgent(tools=tools, model=HfApiModel())
```

----------------------------------------

TITLE: Serializing Tool Results to JSON String (Python)
DESCRIPTION: This Python snippet shows how to serialize tool results to a JSON string using the `json` module. This is crucial when frameworks expect string outputs from tool calls, allowing structured data to be preserved by converting dictionaries or other data types into a JSON string representation.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#_snippet_10

LANGUAGE: python
CODE:
```
import json

# When returning tool results
if isinstance(result, dict):
    return json.dumps(result)  # For frameworks that expect strings
else:
    return json.dumps({"result": result})
```

----------------------------------------

TITLE: Importing CrewAI and Initializing OpenAI LLM (Python)
DESCRIPTION: This Python snippet imports the core `Agent` and `Task` classes from `crewai` and `ChatOpenAI` from `langchain_openai`. It then initializes the `ChatOpenAI` language model, which serves as the brain for the CrewAI agent, requiring an OpenAI API key for authentication.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/crew_ai/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from crewai import Agent, Task
from langchain_openai import ChatOpenAI

# Initialize the language model with your OpenAI API key
llm = ChatOpenAI(openai_api_key="sk-<OPENAI KEY>")
```

----------------------------------------

TITLE: Handling Express.js Route Errors in JavaScript
DESCRIPTION: This code block illustrates a `catch` block within an Express.js route handler. It logs the error to the console and sends a 500 Internal Server Error response to the client, including the error message. This ensures robust API behavior by gracefully handling unexpected issues.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#_snippet_14

LANGUAGE: JavaScript
CODE:
```
} catch (error) {
    console.error(error);
    res.status(500).json({ status: 'error', message: error.message });
}
```

----------------------------------------

TITLE: Listing All Actions - Composio SDK - TypeScript
DESCRIPTION: This method fetches a paginated list of all actions available in the Composio platform. It can optionally take a data object for pagination parameters and returns a CancelablePromise that resolves to an object containing an array of action details, each similar to the output of the 'get' method.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk_models_actions.Actions.html#_snippet_2

LANGUAGE: TypeScript
CODE:
```
list(data?): CancelablePromise<GetListActionsResponse>
```

----------------------------------------

TITLE: Local Tool File Structure
DESCRIPTION: This snippet illustrates the required directory and file structure for organizing a custom local tool and its associated actions within the Composio framework. It ensures proper module recognition and loading.
SOURCE: https://github.com/composiohq/composio/blob/master/python/docs/adding-local-tool.md#_snippet_0

LANGUAGE: bash
CODE:
```
composio/
└── tools/
   └── local/
       └── <tool_name>/
           ├── __init__.py
           ├── tool.py
           └── actions/
               ├── __init__.py
               └── <action_name>.py
```

----------------------------------------

TITLE: Installing Core Packages for Calendar Agent
DESCRIPTION: This snippet provides commands to install the essential Python and JavaScript packages required for the Calendar Agent project. It includes libraries for CrewAI, Langchain, OpenAI integration, and Composio core functionalities. A `.env` file is also required for storing the OpenAI API Key.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/calendar-agent.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
pip install composio-crewai langchain-openai
```

LANGUAGE: JavaScript
CODE:
```
pnpm add composio-core dotenv langchain @langchain/openai
```

----------------------------------------

TITLE: Installing Required Packages for RAG Agent
DESCRIPTION: This snippet demonstrates how to install the necessary Python and JavaScript packages for the RAG agent project. It includes `composio-crewai` and `langchain-openai` for Python, and `composio-core`, `dotenv`, `@langchain/openai`, `langchain` for JavaScript. A `.env` file for the OpenAI API Key is also mentioned as a prerequisite.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
pip install composio-crewai langchain-openai
```

LANGUAGE: JavaScript
CODE:
```
pnpm add composio-core dotenv @langchain/openai langchain
```

----------------------------------------

TITLE: Installing Project Dependencies (Bash)
DESCRIPTION: This command installs all required Node.js packages for the Lead Outreach Agent, including Langchain, OpenAI, Composio Core, and Express, using the pnpm package manager.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/lead_outreach_agent/readme.md#_snippet_0

LANGUAGE: bash
CODE:
```
pnpm install @langchain @langchain/openai composio-core express
```

----------------------------------------

TITLE: Installing Dependencies for Composio Newsletter Summarizer
DESCRIPTION: This step outlines the installation of necessary packages for the Newsletter Summarizer project, including Composio integration and OpenAI language model libraries. It also instructs to create a .env file for API keys.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
pip install composio-crewai langchain-openai
```

LANGUAGE: JavaScript
CODE:
```
pnpm add hono composio-core dotenv @langchain/openai
```

----------------------------------------

TITLE: Importing Libraries and Configuring Letta Client
DESCRIPTION: This step demonstrates how to import required libraries and initialize the Letta client, along with the Composio toolset, for both Python and JavaScript.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/letta.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
from letta_client import Letta
from composio_langchain import Action, ComposioToolSet, App

client = Letta(base_url="http://localhost:8283")
```

LANGUAGE: JavaScript
CODE:
```
import { LettaClient } from '@letta-ai/letta-client'
import { ComposioToolSet } from "composio-core"

const client = new LettaClient({
    baseUrl: "http://localhost:8283"
});

const toolset = new ComposioToolSet()
```

----------------------------------------

TITLE: Configuring Docker Workspace with Port Mapping (Python)
DESCRIPTION: This example illustrates how to initialize a Docker workspace for ComposioToolSet while explicitly mapping ports. This is useful for development purposes, allowing external access to services running inside the Docker container.
SOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#_snippet_7

LANGUAGE: Python
CODE:
```
from composio import ComposioToolSet, WorkspaceType

toolset = ComposioToolSet(
    workspace_config=WorkspaceType.Docker(
        ports={
            8001: 8001,
        }
    )
)
```

----------------------------------------

TITLE: Configuring Environment Variables for Scheduling Agent Demo - Plaintext
DESCRIPTION: This snippet shows the required environment variables to be added to a `.env` file. These keys, `COMPOSIO_API_KEY` and `OPENAI_API_KEY`, are essential for authenticating with the respective APIs used by the scheduling agent.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/scheduling-agent/readme.md#_snippet_2

LANGUAGE: plaintext
CODE:
```
COMPOSIO_API_KEY=YOUR_COMPOSIO_API_KEY
OPENAI_API_KEY=YOUR_OPENAI_API_KEY
```

----------------------------------------

TITLE: Configuring API Keys in .env File - Bash
DESCRIPTION: This snippet shows the format for adding Composio and OpenAI API keys to a `.env` file. These keys are essential for the agent to authenticate with the respective services and function properly.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/portfolio-generator/readme.md#_snippet_2

LANGUAGE: bash
CODE:
```
COMPOSIO_API_KEY=YOUR_COMPOSIO_API_KEY
OPENAI_API_KEY=YOUR_OPENAI_API_KEY
```

----------------------------------------

TITLE: Filtering Specific GitHub Actions for Composio Tools (Python)
DESCRIPTION: This advanced configuration snippet demonstrates how to register only a specific GitHub action, `GITHUB_CREATE_ISSUE`, with the Composio toolset. This allows for fine-grained control over the agent's capabilities, enhancing security and operational focus.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/autogen/README.md#_snippet_5

LANGUAGE: python
CODE:
```
composio_tools.register_tools(actions=[Action.GITHUB_CREATE_ISSUE])
```

----------------------------------------

TITLE: Starting Griptape Agent Chat (Python)
DESCRIPTION: This line initiates an interactive chat session with the configured Griptape agent, allowing users to provide natural language commands and receive responses from the agent.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/griptape.mdx#_snippet_3

LANGUAGE: python
CODE:
```
Chat(agent).start()
```

----------------------------------------

TITLE: Install Composio and Smol Agents Packages
DESCRIPTION: This step installs the necessary Python packages, `composio-smol` and `smolagents`, required for integrating Composio with Smol agents. This is a prerequisite for running the examples.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/smolagents.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-smol smolagents
```

----------------------------------------

TITLE: Installing Mastra MCP Package (JavaScript Context)
DESCRIPTION: This snippet demonstrates how to install the `@mastra/mcp` package using npm. This package is essential for configuring and managing Composio tools within your Mastra project.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/mastra.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @mastra/mcp@latest
```

----------------------------------------

TITLE: Installing Composio and Connecting GitHub Account (Bash)
DESCRIPTION: This snippet provides commands to install the `composio-openai` package, connect a GitHub account using `composio-cli`, and view available applications. These steps are prerequisites for using Composio's GitHub functionalities within the Julep framework.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/julep/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-openai
composio-cli add github
composio-cli show-apps
```

----------------------------------------

TITLE: Connect Your GitHub Account
DESCRIPTION: Demonstrates two methods to connect a GitHub account: via CLI commands for quick setup or programmatically using the Composio Python SDK for dynamic authentication. An active GitHub integration is a prerequisite.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/agno.mdx#_snippet_2

LANGUAGE: shell
CODE:
```
composio login 
composio add github
```

LANGUAGE: python
CODE:
```
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")
```

----------------------------------------

TITLE: Initializing Composio Toolset with LiveKit Agent (Python)
DESCRIPTION: This example shows how to initialize the `ComposioToolSet` and select specific tools using the `Action` enum. The selected tools are then passed to a custom `LiveKit Agent` class, enabling the agent to utilize Composio's functionalities.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/livekit/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from composio_livekit import ComposioToolSet, Action
from livekit.agents.voice import Agent

# Initialize the toolset
composio_toolset = ComposioToolSet()

# Get specific tools
tools = composio_toolset.get_tools(
    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]
)

# Use with LiveKit Agent
class Assistant(Agent):
    def __init__(self):
        super().__init__(
            instructions="You are a helpful voice AI assistant.",
            tools=tools
        )
```

----------------------------------------

TITLE: Import Libraries and Initialize Hono Application
DESCRIPTION: Imports the 'Hono' web framework to create an API endpoint and 'CloudflareToolSet' from 'composio-core' to manage Composio tools within the Cloudflare Worker environment. An instance of the Hono application is then initialized to handle incoming requests.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/cloudflare.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
import { Hono } from 'hono';
import { CloudflareToolSet } from "composio-core"

const app = new Hono();
```

----------------------------------------

TITLE: Listing User Connections (TypeScript)
DESCRIPTION: This snippet demonstrates how to retrieve and list all active connections associated with a specific `entity_id` using `toolset.connectedAccounts.list`. It shows how to iterate through the returned connections and log their details, including the app name, ID, and status.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/connection.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
const entity = await toolset.getEntity(userIdentifierFromMyApp);
const connections = await toolset.connectedAccounts.list({
    entityId: entity.id,
}); // Returns list of active connections
console.log(
    `Found ${connections.items.length} active connections for ${entity.id}:`
);
connections.items.forEach((conn) => {
    console.log(`- App: ${conn.appName}, ID: ${conn.id}, Status: ${conn.status}`);
});
```

----------------------------------------

TITLE: Installing a Python Package in Editable Mode with uv
DESCRIPTION: This `uv` command installs the current project in editable mode, allowing changes to the source code to be reflected without reinstallation. This is crucial for local development and testing of the package itself.
SOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#_snippet_12

LANGUAGE: bash
CODE:
```
uv pip install -e .
```

----------------------------------------

TITLE: Running Calendar Agent Main Script (Python)
DESCRIPTION: This command executes the main Python script for the Calendar Agent. It initiates the agent's core functionality, which involves processing to-do lists and creating corresponding events in Google Calendar via Composio tools.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/llamaindex/README.md#_snippet_3

LANGUAGE: python
CODE:
```
python python/examples/quickstarters/calendar_agent/llamaindex/main.py
```

----------------------------------------

TITLE: Constructing Integrations Client (TypeScript)
DESCRIPTION: Initializes a new instance of the `Integrations` class. It requires a `Composio` client instance to establish communication with the Composio platform. This constructor sets up the internal client property for subsequent API calls.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk_models_integrations.Integrations.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
new Integrations(client: Composio): Integrations
```

----------------------------------------

TITLE: Running Community Reward Agent - Python
DESCRIPTION: Executes the Python script for the Community Reward Agent. This agent automates the distribution of SOL tokens to community members based on their contributions, requiring Python 3.8 or higher to run.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/solana/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
python cookbook/python-examples/advanced_agents/cryptokit/solana/community_reward_agent.py
```

----------------------------------------

TITLE: Running PR Agent Python Script (Shell)
DESCRIPTION: This command executes the main Python script for the PR agent, initiating its functionality to review pull requests using the configured AI frameworks and Composio.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_autogen/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/examples/pr_agent_autogen/main.py
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command runs the `setup.sh` script, which automates the environment setup, installs required dependencies, logs into Composio, and adds necessary tools for the Calendar Agent to function correctly.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/langgraph/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script - Shell
DESCRIPTION: This command executes the `setup.sh` script, which is responsible for setting up the environment, installing dependencies, logging into Composio, and adding necessary tools for the presentation agent. It prepares the system for running the main application.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/presentation_agent/langgraph/readme.md#_snippet_2

LANGUAGE: Shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command executes the `setup.sh` script, which is responsible for setting up the environment and installing all required dependencies for the data analyst agent. It prepares the system for running the main application.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Sheets_to_SQL_Agent/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for setting up the project environment and installing all required dependencies. After execution, the `.env` file needs to be populated with secrets.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_assistant_agent/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Running Setup Script for Grok Game Builder (Bash)
DESCRIPTION: Executes the `setup.sh` script to initialize the project environment. This script creates a Python virtual environment, installs dependencies, logs into Composio, and prepares the `.env` file.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/grok/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
bash setup.sh
```

----------------------------------------

TITLE: Viewing GitHub Trigger Configuration Schema (Python)
DESCRIPTION: This Python snippet demonstrates how to retrieve and print the configuration schema for the 'GITHUB_STAR_ADDED_EVENT' trigger. It uses 'toolset.get_trigger' to get the trigger object and then 'model_dump_json' to pretty-print its configuration.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_3

LANGUAGE: python
CODE:
```
# Using same imports as above
trigger = toolset.get_trigger("GITHUB_STAR_ADDED_EVENT")
print(trigger.config.model_dump_json(indent=4))
```

----------------------------------------

TITLE: Executing Code Agent with JavaScript
DESCRIPTION: This snippet defines an asynchronous `executeCodeAgent` function that utilizes an `agentExecutor` to generate and execute code based on a given problem. It demonstrates invoking this function with a sample problem to calculate the Fibonacci sequence, logging the result or any errors. This requires a pre-configured `agentExecutor` instance.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/code-execution-agent.mdx#_snippet_6

LANGUAGE: JavaScript
CODE:
```
// Define the code execution function
async function executeCodeAgent(problem) {
    const result = await agentExecutor.invoke({
        input: `Write code to solve the following problem and execute it: ${problem}`
    });
    
    return result.output;
}

// Run the agent with a sample problem
const problem = "Write a function to calculate the Fibonacci sequence up to the 10th number and display the result.";

executeCodeAgent(problem)
    .then(result => console.log("Result:", result))
    .catch(error => console.error("Error:", error));
```

----------------------------------------

TITLE: Creating Composio Integration (Python)
DESCRIPTION: This Python snippet demonstrates how to create a new Composio integration with custom OAuth credentials. It requires `composio_openai` and sets `use_composio_oauth_app` to `False` to enable white-labelling, providing `client_id`, `client_secret`, and a custom `redirect_uri`.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/white-labelling.mdx#_snippet_1

LANGUAGE: python
CODE:
```
from composio_openai import App, ComposioToolSet

toolset = ComposioToolSet()
integration = toolset.create_integration(
    app=App.GOOGLECALENDAR,
    auth_mode="OAUTH2",
    use_composio_oauth_app=False,
    auth_config={
      "client_id": "12345678",
      "client_secret": "12345678",
      "redirect_uri": "https://yourapp.com/redirect"
    }
)

entity = toolset.get_entity("default")

connection_request = entity.initiate_connection(
    app_name=App.GOOGLECALENDAR, integration=integration
)
print(connection_request)
```

----------------------------------------

TITLE: Initializing Griptape Agent and Composio Environment (Python)
DESCRIPTION: This Python snippet imports necessary Griptape and Composio libraries, and loads environment variables using `dotenv`. It sets up the foundational components required to create and configure a Griptape agent that can utilize Composio tools.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/griptape/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from griptape.structures import Agent
from griptape.utils import Chat

from composio_griptape import App, Action, Tag, ComposioToolSet
import dotenv


dotenv.load_dotenv("/Users/sawradip/Desktop/practice_code/practice_composio/composio_sdk/examples/.env")
```

----------------------------------------

TITLE: Importing Base LangGraph and LangChain Packages (Python)
DESCRIPTION: This Python snippet imports necessary classes from `typing`, `langchain_openai`, and `langgraph` to set up a LangGraph agent. It includes `Literal` for type hinting, `ChatOpenAI` for the language model, `MessagesState` and `StateGraph` for graph definition, and `ToolNode` for integrating tools.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langgraph/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Literal

from langchain_openai import ChatOpenAI
from langgraph.graph import MessagesState, StateGraph
from langgraph.prebuilt import ToolNode
```

----------------------------------------

TITLE: Validating Julep Agent's Tool Call Execution (Python)
DESCRIPTION: This final snippet executes the tool calls generated by the Julep agent's response using `toolset.handle_tool_calls()`. It then prints the output, allowing for validation of whether the intended action (e.g., starring a GitHub repository) was successfully performed by the agent.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/julep/README.md#_snippet_4

LANGUAGE: python
CODE:
```
execution_output = toolset.handle_tool_calls(response)
print(execution_output)
```

----------------------------------------

TITLE: Defining GetListActionsData Type Alias | TypeScript
DESCRIPTION: This TypeScript type alias defines the structure for `GetListActionsData`, used for filtering and controlling action lists. It includes optional properties such as `actions`, `apps`, `filterImportantActions`, `showAll`, `showEnabledOnly`, `tags`, `useCase`, and `usecaseLimit`, each serving a specific filtering or display purpose.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.GetListActionsData.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
{
    actions?: string;
    apps?: string;
    filterImportantActions?: boolean;
    showAll?: boolean;
    showEnabledOnly?: boolean;
    tags?: string;
    useCase?: string;
    usecaseLimit?: string;
}
```

----------------------------------------

TITLE: Configuring Composio Plugin with setup.py (Python)
DESCRIPTION: This snippet configures a Python package for a Composio plugin using `setuptools`. It defines package metadata, dependencies (`composio_core`, `your-framework`, `pydantic`, `typing-extensions`), and specifies Python version requirements. It's essential for package installation and distribution.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#_snippet_7

LANGUAGE: python
CODE:
```
"""
Setup configuration for Composio [Your Framework] plugin
"""

from pathlib import Path
from setuptools import setup, find_packages

setup(
    name="composio_yourframework",
    version="0.1.0",
    author="Your Name",
    author_email="your.email@example.com",
    description="Use Composio with [Your Framework]",
    long_description=(Path(__file__).parent / "README.md").read_text(encoding="utf-8"),
    long_description_content_type="text/markdown",
    url="https://github.com/ComposioHQ/composio",
    classifiers=[
        "Programming Language :: Python :: 3",
        "License :: OSI Approved :: Apache Software License",
        "Operating System :: OS Independent",
    ],
    python_requires=">=3.9,<4",
    packages=find_packages(),
    install_requires=[
        "composio_core>=0.7.0,<0.8.0",
        "your-framework>=X.Y.Z",  # Replace with actual dependency
        "pydantic>=2.0.0",
        "typing-extensions>=4.0.0",
    ],
    include_package_data=True,
)
```

----------------------------------------

TITLE: Filtering Composio Tools for Specific Actions (Python)
DESCRIPTION: This Python snippet demonstrates how to restrict the Google AI model to execute only specific actions by filtering the `ComposioToolset`. Here, it's configured to allow only the `GITHUB_CREATE_ISSUE` action, preventing the model from performing other operations.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/google.mdx#_snippet_5

LANGUAGE: python
CODE:
```
# To restrict models from executing any actions, filter specific actions 
actions = composio_toolset.get_tool(actions=[Action.GITHUB_CREATE_ISSUE]) 
```

----------------------------------------

TITLE: Installing Composio SDK via npm
DESCRIPTION: This command demonstrates how to install the Composio SDK using npm, the Node.js package manager. Executing this command adds the `composio-core` package to your project's dependencies, making the SDK's functionalities available for use.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/index.html#_snippet_1

LANGUAGE: Shell
CODE:
```
npm install composio-core
```

----------------------------------------

TITLE: Initializing ComposioToolSet with Host Workspace (Python)
DESCRIPTION: This snippet demonstrates how to initialize the ComposioToolSet to run directly on the host machine. This configuration provides no isolation and executes operations within the current system environment.
SOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#_snippet_5

LANGUAGE: Python
CODE:
```
from composio import ComposioToolSet, WorkspaceType

toolset = ComposioToolSet(
    workspace_config=WorkspaceType.Host()
)
```

----------------------------------------

TITLE: Exporting Custom Action Class in Python
DESCRIPTION: This `__init__.py` file snippet exports the custom action class, `<ActionName>`, making it discoverable and importable within the Python package structure of the local tool's actions.
SOURCE: https://github.com/composiohq/composio/blob/master/python/docs/adding-local-tool.md#_snippet_4

LANGUAGE: python
CODE:
```
from .<action_name> import <ActionName>
```

----------------------------------------

TITLE: Initializing ComposioToolSet with Basic FlyIO Workspace (Python)
DESCRIPTION: This code shows how to set up the ComposioToolSet to run within a FlyIO machine. FlyIO offers a managed cloud environment for deploying and running applications, providing another option for isolated workspaces.
SOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#_snippet_9

LANGUAGE: Python
CODE:
```
from composio import ComposioToolSet, WorkspaceType

toolset = ComposioToolSet(
    workspace_config=WorkspaceType.FlyIO(),
)
```

----------------------------------------

TITLE: Installing Project Dependencies (Bash)
DESCRIPTION: This command installs all necessary project dependencies using pnpm, a fast and efficient package manager. It is a crucial prerequisite for the demo to function correctly, ensuring all required libraries are available.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/reddit-research/readme.md#_snippet_1

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Importing Base Packages and Initializing Julep Client (Python)
DESCRIPTION: This Python snippet imports necessary libraries (`Client` from `julep`, `ComposioToolSet`, `App` from `composio_julep`, and `os`). It initializes the Julep client with a provided API key, which needs to be replaced.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#_snippet_1

LANGUAGE: python
CODE:
```
from julep import Client
from composio_julep import ComposioToolSet, App
import os

julep_api_key = "{julep_api_key}" # Replace it
julep_client = Client(api_key=julep_api_key)
```

----------------------------------------

TITLE: Fetching GitHub Tools with Composio (Python)
DESCRIPTION: This Python snippet demonstrates how to retrieve all available tools for the GitHub application using `toolset.get_tools()`. This allows the Together AI client to access and utilize specific GitHub actions for automation.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/together.mdx#_snippet_3

LANGUAGE: python
CODE:
```
tools = toolset.get_tools(apps=[App.GITHUB])
```

----------------------------------------

TITLE: Install Packages & Connect Composio Tools
DESCRIPTION: These commands prepare your environment for seamless interaction between PraisonAI and GitHub by installing necessary Python packages and connecting your GitHub account via Composio.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/praisonai.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
pip install PraisonAI -q
pip install composio-praisonai
# login to composio
composio login
# Connect your GitHub using command below, so agents can use it. 
composio add github
# Check all different apps which you can connect with
composio apps
```

----------------------------------------

TITLE: Installing Composio and LiteLLM Python Packages
DESCRIPTION: This command installs the necessary Python packages, `composio_openai` for Composio's OpenAI integration and `litellm` for LiteLLM, enabling interaction with various LLM providers and tool calling.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/litellm.mdx#_snippet_0

LANGUAGE: bash Python
CODE:
```
pip install composio_openai litellm
```

----------------------------------------

TITLE: Filtering Composio ToolSet for Specific Applications (Python)
DESCRIPTION: This Python snippet shows how to restrict the `ComposioToolSet` to use tools from only a specified list of applications, such as Asana and GitHub. This allows fine-grained control over which external services the agent can interact with.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langchain/README.md#_snippet_6

LANGUAGE: python
CODE:
```
# Allow usage of Asana and GitHub only
toolsAsanaGithub = ComposioToolSet(apps=[App.ASANA, App.GITHUB])
```

----------------------------------------

TITLE: Running the Main Python Script (Shell)
DESCRIPTION: This command executes the main Python script for the SQL agent. It initiates the database operations, SQL query execution, and logging as defined within the script.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_crewai/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/examples/sql_agent/main.py
```

----------------------------------------

TITLE: Running the Reddit Research Agent (Node.js via Bash)
DESCRIPTION: This command executes the main demo script for the Reddit research agent using Node.js. It initiates the agent's functionality, allowing it to research and summarize Reddit posts based on the configured settings and user requests.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/reddit-research/readme.md#_snippet_3

LANGUAGE: bash
CODE:
```
node demo.mjs
```

----------------------------------------

TITLE: Viewing GitHub Trigger Configuration Schema (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to retrieve the configuration schema for the 'GITHUB_STAR_ADDED_EVENT' trigger using 'toolset.triggers.get'.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
// Using same imports as above

const trigger = await toolset.triggers.get({
  triggerId: "GITHUB_STAR_ADDED_EVENT",
});
```

----------------------------------------

TITLE: Executing Composio Action with connected_account_id in Python
DESCRIPTION: This Python snippet demonstrates using `connected_account_id` to target a specific connection instance when executing an action. This parameter is useful when an `entity_id` has multiple active connections for the same application, ensuring the action uses the intended account.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/executing-tools.mdx#_snippet_5

LANGUAGE: Python
CODE:
```
# Direct Execution targeting a specific connection
toolset.execute_action(
    action=Action.GMAIL_SEND_EMAIL,
    params={...},
    connected_account_id="conn_abc123xyz" # The specific Gmail connection
)
```

----------------------------------------

TITLE: Importing Core Langchain and Composio Packages
DESCRIPTION: This code imports essential modules from `langchain_community`, `langchain.chat_models`, `langchain.agents`, `langchain`, `composio_langchain`, `os`, and `dotenv` to set up the agent and interact with LLMs and tools.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#_snippet_2

LANGUAGE: python
CODE:
```
from langchain_community.document_loaders import WebBaseLoader
#To use Open Source LLMs from huggingface
from langchain_community.llms import HuggingFaceEndpoint
from langchain.chat_models import ChatHuggingFace
#Langchain Utilities for Agents
from langchain.agents import AgentExecutor, load_tools
from langchain.agents.format_scratchpad import format_log_to_str
from langchain.agents.output_parsers import (
    ReActJsonSingleInputOutputParser,
)
from langchain import hub
from langchain.tools.render import render_text_description
#Importing Composio
from composio_langchain import ComposioToolSet, Action, App
import os
import dotenv
```

----------------------------------------

TITLE: Define PraisonAI Agent Configuration
DESCRIPTION: This snippet defines the `agents.yml` configuration for a PraisonAI agent, specifying its framework, topic, roles, and tasks. It dynamically includes the previously generated `tool_section_str` to equip the agent with the necessary Composio GitHub tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/praisonai.mdx#_snippet_3

LANGUAGE: python
CODE:
```
agent_yaml = """
framework: "crewai"
topic: "Github Management"

roles:
  developer:
    role: "Developer"
    goal: "An expert programmer"
    backstory: "A developer exploring new codebases and having certain tools available to execute different tasks."
    tasks:
      star_github:
        description: "Star a repo composiohq/composio on GitHub"
        expected_output: "Response whether the task was executed."
""" + tool_section_str

print(agent_yaml)
```

----------------------------------------

TITLE: Importing Libraries and Initializing ComposioToolSet
DESCRIPTION: This section demonstrates how to import essential libraries for LangGraph and Composio, and how to initialize the `ComposioToolSet`. This setup is crucial for accessing and managing various tools provided by Composio within the LangGraph agent framework.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Literal
from langchain_openai import ChatOpenAI
from langgraph.graph import MessagesState, StateGraph
from langgraph.prebuilt import ToolNode
from composio_langgraph import Action, ComposioToolSet, App

composio_toolset = ComposioToolSet()
```

LANGUAGE: TypeScript
CODE:
```
import { LangGraphToolSet } from "composio-core";
import { ToolNode } from "@langchain/langgraph/prebuilt";
import { ChatOpenAI } from "@langchain/openai";
import { StateGraph, END, MessagesAnnotation, START } from "@langchain/langgraph";
import { HumanMessage } from "@langchain/core/messages";

const composioToolset = new LangGraphToolSet();
```

----------------------------------------

TITLE: Making Setup Script Executable (Shell)
DESCRIPTION: This shell command grants execute permissions to the `setup.sh` script. This step is crucial on Unix-like systems (Linux/macOS) to allow the script to be run as a program, enabling environment setup.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/llamaindex/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
chmod +x setup.sh
```

----------------------------------------

TITLE: Making Setup Script Executable (Shell)
DESCRIPTION: This command grants execute permissions to the `setup.sh` script on Linux or macOS systems. It is a necessary prerequisite to allow the script to be run as a program, ensuring the environment setup can proceed.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_langgraph/readme.md#_snippet_1

LANGUAGE: shell
CODE:
```
chmod +x setup.sh
```

----------------------------------------

TITLE: Making Setup Script Executable (Shell)
DESCRIPTION: This command grants execute permissions to the `setup.sh` script on Linux or macOS systems. It's a necessary step before running the script to ensure it can be executed by the user.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_openai/readme.md#_snippet_1

LANGUAGE: Shell
CODE:
```
chmod +x setup.sh
```

----------------------------------------

TITLE: Making Setup Script Executable (Shell)
DESCRIPTION: This command grants execute permissions to the `setup.sh` script on Linux or macOS. It is necessary before running the script to configure the environment.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_crewai/readme.md#_snippet_1

LANGUAGE: shell
CODE:
```
chmod +x setup.sh
```

----------------------------------------

TITLE: Making Setup Script Executable (Shell)
DESCRIPTION: This command grants execute permissions to the `setup.sh` script. This step is crucial on Unix-like systems (Linux, macOS) to allow the script to be run directly from the command line, enabling environment setup and dependency installation.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/readme.md#_snippet_1

LANGUAGE: shell
CODE:
```
chmod +x setup.sh
```

----------------------------------------

TITLE: Installing Composio and LangChain Packages
DESCRIPTION: This step outlines the installation of necessary Python and JavaScript packages for integrating Composio with LangChain. It ensures all required libraries, including `composio-langchain`, `langchain_openai`, `composio-core`, and `@langchain/openai`, are available for development.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain.mdx#_snippet_0

LANGUAGE: Bash
CODE:
```
pip install composio-langchain langchain_openai
```

LANGUAGE: JavaScript
CODE:
```
npm install composio-core langchain @langchain/openai
```

----------------------------------------

TITLE: Re-initiating Connection - cURL API
DESCRIPTION: This cURL command demonstrates how to directly call the Composio API's reinitiate-connection endpoint. It requires the connectedAccountId in the URL path, an x-api-key header for authentication, and an empty JSON body, providing a direct way to trigger re-authentication.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/oauth.mdx#_snippet_6

LANGUAGE: curl
CODE:
```
curl --location 'https://backend.composio.dev/api/v1/connectedAccounts/<connectedAccountId>/reinitiate' \
--header 'x-api-key: <api_key>' \
--header 'Content-Type: application/json' \
--data '{
    "data": {}  # Data stays empty
}'
```

----------------------------------------

TITLE: Defining API Key Custom Field in YAML
DESCRIPTION: This YAML snippet defines a custom field named `api_key` within the `fields` section of an authentication scheme. It specifies the field's display name, description, data type (string), and indicates that it is required and expected to be provided by the customer for authentication.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/add-your-app.mdx#_snippet_2

LANGUAGE: yaml
CODE:
```
fields:
  - name: api_key
    display_name: API Key
    description: "Your API key for authentication."
    type: string
    required: true
    expected_from_customer: true
```

----------------------------------------

TITLE: Defining CreateIntegrationResponse Type in TypeScript
DESCRIPTION: This TypeScript type alias defines the structure of a `CreateIntegrationResponse` object, detailing properties like application ID, name, authentication configuration, and timestamps, which are returned upon successful integration creation.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.CreateIntegrationResponse.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
CreateIntegrationResponse: {
    appId?: string;
    appName?: string;
    authConfig?: {
        base_url?: string;
        client_id?: string;
        client_secret?: string;
    };
    authScheme?: string;
    createdAt?: string;
    enabled?: boolean;
    expectedInputFields?: {
        [key: string]: unknown;
    }[];
    id?: string;
    logo?: string;
    name?: string;
    updatedAt?: string;
}
```

----------------------------------------

TITLE: Defining PraisonAI Agent Configuration YAML (Python)
DESCRIPTION: This Python snippet constructs the `agent_yaml` string, which defines the PraisonAI agent's framework, topic, roles, and tasks. It dynamically incorporates the `tool_section_str` generated previously, allowing the agent to perform actions like starring a GitHub repository.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/praisonai/README.md#_snippet_3

LANGUAGE: python
CODE:
```
agent_yaml = """
framework: "crewai"
topic: "Github Management"

roles:
  developer:
    role: "Developer"
    goal: "An expert programmer"
    backstory: "A developer exploring new codebases and have certain tools available to execute different tasks."
    tasks:
      star_github:
        description: "Star a repo composiohq/composio on GitHub"
        expected_output: "Response whether the task was executed."
""" + tool_section_str

print(agent_yaml)
```

----------------------------------------

TITLE: Installing Dependencies for Lead Generator Agent
DESCRIPTION: This command installs the necessary npm packages for the Lead Generator Agent project, including AI SDK for OpenAI, AI core utilities, Zod for schema validation, and Composio core libraries. These dependencies are crucial for the agent's functionality.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/lead_generator_agent/readme.md#_snippet_0

LANGUAGE: bash
CODE:
```
pnpm install @ai-sdk/openai ai zod composio-core
```

----------------------------------------

TITLE: Defining GetAppData Type Alias in Composio Core SDK
DESCRIPTION: This TypeScript type alias defines the structure for `GetAppData`, which is expected to contain an `appKey` property of type `string`. This type is likely used to specify the required input parameters when retrieving application-specific data within the Composio SDK.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.GetAppData.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
GetAppData: {
  appKey: string;
}
```

----------------------------------------

TITLE: Running Unit Tests with Tox
DESCRIPTION: This command executes the project's unit tests using `tox`. It verifies the correctness of code changes and provides code coverage metrics, ensuring the stability and reliability of the application.
SOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#_snippet_10

LANGUAGE: bash
CODE:
```
tox -e test
```

----------------------------------------

TITLE: Installing Composio LlamaIndex Package and Connecting GitHub
DESCRIPTION: Provides instructions for installing the `composio-llamaindex` package using pip and connecting a GitHub account via `composio-cli` to enable GitHub functionalities for agents. It also shows how to view available applications.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/llamaindex/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Install Composio llamaindex package
pip install composio-llamaindex

# Connect your GitHub account
composio-cli add github

# View available applications you can connect with
composio-cli show-apps
```

----------------------------------------

TITLE: Installing Lyzr and Composio, Connecting GitHub (Bash)
DESCRIPTION: This snippet provides the necessary bash commands to set up the development environment. It includes installing `lyzr-automata` and `composio_lyzr` Python packages, connecting a GitHub account using the Composio CLI, and listing available Composio applications.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/lyzr.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
pip install lyzr-automata -q
pip install composio_lyzr
#Connect your Github so agents can use it.
composio add github
#Check all different apps which you can connect with
composio apps
```

----------------------------------------

TITLE: Installing Composio Pydantic-AI and Connecting GitHub (Bash)
DESCRIPTION: This snippet provides the necessary commands to install the Composio Pydantic-AI package using pip, connect your GitHub account via the Composio CLI, and view all available applications that can be integrated.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/pydanticai/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-pydanticai

composio add github

composio apps
```

----------------------------------------

TITLE: Executing Setup Script for Slack Expert (Bash)
DESCRIPTION: This command executes the `setup.sh` script, which automates several initial configuration steps for the Slack Expert. These steps include logging into Composio, adding the Slackbot tool, creating a `.env` file, and prompting for the codebase directory name. Users might need to grant execute permissions using `chmod +x setup.sh` if issues arise.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slackbot_code_expert/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Defining GetActiveTriggerData Type Alias (TypeScript)
DESCRIPTION: This TypeScript type alias defines the structure for `GetActiveTriggerData`, which is used to specify the ID of a trigger. It contains a single required property, `triggerId`, of type `string`, indicating the identifier of the trigger to be retrieved.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.GetActiveTriggerData.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
GetActiveTriggerData: {
    triggerId: string;
}
```

----------------------------------------

TITLE: Updating Composio App and Action Enums via CLI
DESCRIPTION: This Bash command is used to automatically update the Composio application and action enum values, ensuring that newly added custom tools and their actions are recognized by the system.
SOURCE: https://github.com/composiohq/composio/blob/master/python/docs/adding-local-tool.md#_snippet_6

LANGUAGE: bash
CODE:
```
composio apps update
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn (Shell)
DESCRIPTION: This command starts the FastAPI application using Uvicorn. The `--reload` flag enables auto-reloading on code changes, and `--port 8000` specifies that the application will run on port 8000, making it accessible via a web browser.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/tweet-simulator/llama-4/README.md#_snippet_4

LANGUAGE: shell
CODE:
```
uvicorn backend_main:app --reload --port 8000
```

----------------------------------------

TITLE: Installing Docker Workspace Extension for Composio in Bash
DESCRIPTION: This command installs the necessary Python package extension for enabling Docker workspaces in Composio. It ensures that the 'composio-core' library includes the 'docker' extra, providing the required functionalities for containerized tool execution. This command should be run in a bash terminal.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/workspaces/workspaces.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
pip install composio-core[docker]
```

----------------------------------------

TITLE: Executing GitHub Action with Connection ID in Python
DESCRIPTION: This Python snippet demonstrates direct action execution using a `connected_account_id`. This method is used when a specific connection is known and needs to be targeted, bypassing the entity-based connection resolution. It fetches the authenticated GitHub user's information.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#_snippet_5

LANGUAGE: python
CODE:
```
user_info_direct = toolset.execute_action(
    action=Action.GITHUB_GET_THE_AUTHENTICATED_USER,
    params={},
    connected_account_id=active_connection.id
)
```

----------------------------------------

TITLE: Expected JSON Schema for Webhook Configuration
DESCRIPTION: This JSON snippet illustrates the expected structure and properties for a webhook configuration schema, specifically for a GitHub trigger. It defines required fields like 'owner' and 'repo' with their descriptions and types.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
    "properties": {
        "owner": {
            "description": "Owner of the repository",
            "title": "Owner",
            "default": null,
            "type": "string"
        },
        "repo": {
            "description": "Repository name",
            "title": "Repo",
            "default": null,
            "type": "string"
        }
    },
    "title": "WebhookConfigSchema",
    "type": "object",
    "required": [
        "owner",
        "repo"
    ]
}
```

----------------------------------------

TITLE: Importing Core Modules for Toolset - Python
DESCRIPTION: This Python snippet shows the initial imports for the `toolset.py` file. It imports `typing` for type hints and demonstrates how to import necessary classes like `FrameworkTool` and `SomeFrameworkClass` from the target framework, which are crucial for defining and interacting with the framework's tools within Composio.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#_snippet_3

LANGUAGE: python
CODE:
```
import typing as t
from typing import List, cast

# Import from your target framework
from targetframework import FrameworkTool, SomeFrameworkClass
```

----------------------------------------

TITLE: Running Flake8 Linter with Tox
DESCRIPTION: This command executes `flake8` via `tox` to analyze Python code for potential errors and stylistic issues. Running linters helps improve code quality and identify issues early in the development cycle.
SOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#_snippet_7

LANGUAGE: bash
CODE:
```
tox -e flake8
```

----------------------------------------

TITLE: Installing Python Dependencies
DESCRIPTION: This command installs all required Python packages listed in the `requirements.txt` file. It ensures that the project has all necessary libraries to run, including Autogen and Composio tools.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/assignment-agent/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Tracking Responded Slack Threads (Python)
DESCRIPTION: Initializes a Python set to store thread IDs that have already received a response. This prevents the bot from sending duplicate replies to the same Slack thread, ensuring a cleaner user experience and avoiding message spam.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#_snippet_13

LANGUAGE: python
CODE:
```
# Set to keep track of threads we've already responded to
responded_threads = set()
```

----------------------------------------

TITLE: Declaring Optional Items Property in ListAllConnectionsResponse (TypeScript)
DESCRIPTION: This declaration specifies the optional `items` property within `ListAllConnectionsResponse`. Each item is an object representing a connection, containing details like `appName`, `connectionParams` (which includes sensitive tokens and user info), `connectorId`, `createdAt`, `id`, `logo`, `status` (with specific literal values), and `updatedAt`.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.ListAllConnectionsResponse.html#_snippet_2

LANGUAGE: TypeScript
CODE:
```
items?: {
    appName?: string;
    connectionParams?: {
        access_token?: string;
        base_url?: string;
        bot_id?: string;
        client_id?: string;
        client_secret?: string;
        created_at?: number;
        duplicated_template_id?: string;
        expires_in?: number;
        organization?: string;
        owner?: {
            type?: string;
            user?: {
                avatar_url?: string;
                id?: string;
                name?: string;
                object?: string;
                person?: {
                    email?: string;
                };
                type?: string;
            };
        } | string;
        refresh_token?: string;
        request_id?: string;
        scope?: string;
        token_type?: string;
        workspace_icon?: string;
        workspace_id?: string;
        workspace_name?: string;
    };
    connectorId?: string;
    createdAt?: string;
    id?: string;
    logo?: string;
    status?: "FAILED" | "INITIATED" | "ACTIVE";
    updatedAt?: string;
}[]
```

----------------------------------------

TITLE: Installing Composio Autogen Package (Python)
DESCRIPTION: This snippet provides the `pip` command to install the `composio-autogen` Python package, which is essential for integrating Composio with Autogen agents. This package enables Autogen to interact with external applications via Composio tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/autogen.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-autogen
```

----------------------------------------

TITLE: Installing Required Packages for Composio SWEBench-Agent-v2
DESCRIPTION: This command installs the necessary Python packages, `swekit` and `composio-core`, which are prerequisites for running the Composio SWEBench-Agent-v2. `swekit` provides the framework for software engineering agents, and `composio-core` offers core functionalities.
SOURCE: https://github.com/composiohq/composio/blob/master/python/swe/agent/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install -U swekit composio-core
```

----------------------------------------

TITLE: Installing Composio Julep and Connecting GitHub Tool (Bash)
DESCRIPTION: This command block installs the `composio-julep` package, connects the GitHub application to Composio, and allows checking all supported applications. It sets up the environment for Julep and GitHub interaction.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-julep

# Connect your GitHub so agents can interact with it

composio add github

# Check all supported apps

composio apps
```

----------------------------------------

TITLE: Adding SERPAPI Tool with Composio CLI
DESCRIPTION: These commands log into Composio and add the SERPAPI tool, enabling agents to access news article retrieval capabilities through the Composio platform.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#_snippet_1

LANGUAGE: python
CODE:
```
%composio login
%composio add serpapi
```

----------------------------------------

TITLE: Start Cloudflare Worker Locally
DESCRIPTION: Executes the 'wrangler dev' command to start the Cloudflare Worker in a local development environment. This allows for testing and debugging the worker's functionality before deployment.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/cloudflare.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
wrangler dev
```

----------------------------------------

TITLE: Executing CrewAI Agent (Partial) - Python
DESCRIPTION: This snippet demonstrates the final execution step of a CrewAI agent. It assumes `calendar_agent` and `task` are already defined, then initializes the `Crew` and triggers its execution to process the task and print the result.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/calendar-agent.mdx#_snippet_5

LANGUAGE: python
CODE:
```
        )
        crew = Crew(agents=[calendar_agent], tasks=[task])
        result = crew.kickoff()
        print(result)
```

----------------------------------------

TITLE: Executing the Letta Agent to Star GitHub Repository
DESCRIPTION: This step demonstrates how to send a message to the created agent to perform the 'star a repository' action and print the agent's response.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/letta.mdx#_snippet_5

LANGUAGE: Python
CODE:
```
response = client.agents.messages.create(
    agent_id=agent.id,
    messages=[
        {
            "role": "user",
            "content": "Star the github repo composioHQ/composio/"
        }
    ]
)
for message in response.messages:
    print(message)
```

LANGUAGE: JavaScript
CODE:
```
const response = await client.agents.messages.create(agent.id, {
    messages: [
        {
            role: "user",
            content: "Star the github repo composiohq/composio"
        }
    ]
});

for (const message of response.messages) {
    console.log(message);
}
```

----------------------------------------

TITLE: Installing Composio LangChain Package and Connecting GitHub - Bash
DESCRIPTION: This snippet provides instructions for setting up the environment by installing the necessary Composio LangChain package and connecting a GitHub account. It ensures that the agent has the required tools to interact with GitHub functionalities.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/togetherai/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-togetherai

composio add github

composio apps
```

----------------------------------------

TITLE: Installing Composio Gemini and Connecting GitHub - Bash
DESCRIPTION: This snippet provides instructions for installing the `composio-gemini` package using pip and connecting a GitHub account via the `composio` command-line interface. It also shows how to list available applications that can be integrated.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/gemini/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Install Composio Gemini package
pip install composio-gemini

# Connect your GitHub account
composio add github

# View available applications you can connect with
composio apps
```

----------------------------------------

TITLE: Installing Composio LangChain and Connecting GitHub
DESCRIPTION: This snippet provides commands to install the `composio-openai` package, connect a GitHub account using `composio-cli add github`, and view available applications with `composio-cli show-apps`. These steps are prerequisites for utilizing Composio's functionalities and integrating with external applications.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/openai/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-openai

composio-cli add github

composio-cli show-apps
```

----------------------------------------

TITLE: Importing Base Packages for AI Agent Development
DESCRIPTION: This section details the essential library imports for both Python (CrewAI) and JavaScript (Langchain) implementations of the AI agent. These imports include core components for agent creation, tool integration, and environment variable management.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/code-execution-agent.mdx#_snippet_1

LANGUAGE: python
CODE:
```
import os

from composio_crewai import Action, App, ComposioToolSet
from crewai import Agent, Crew, Process, Task
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
```

LANGUAGE: javascript
CODE:
```
import dotenv from 'dotenv';
import { ChatOpenAI } from "@langchain/openai";
import { AgentExecutor, createOpenAIFunctionsAgent } from "langchain/agents";
import { pull } from "langchain/hub";
import { LangchainToolSet } from "composio-core";

dotenv.config();
```

----------------------------------------

TITLE: Executing Setup Script - Shell
DESCRIPTION: This command executes the `setup.sh` script, which is responsible for setting up the environment, installing dependencies, logging into Composio, and adding necessary tools for the project. It prepares the system for running the main application.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for setting up the environment and installing necessary dependencies for the project.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_outreach_agent/crewai/readme.md#_snippet_2

LANGUAGE: Shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Starting Express.js Server in Node.js
DESCRIPTION: This snippet initializes and starts the Express.js server, making it listen for incoming HTTP requests on the `PORT` variable. A confirmation message is logged to the console once the server is successfully running, indicating its operational status.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#_snippet_15

LANGUAGE: JavaScript
CODE:
```
app.listen(PORT, () => {
    console.log(`Research Agent server is running on port ${PORT}`);
});
```

----------------------------------------

TITLE: Installing Composio Griptape and Connecting GitHub Account (Bash)
DESCRIPTION: This snippet provides commands to install the `composio-griptape` package, connect a GitHub account using `composio-cli`, and view available applications. These are prerequisites for using Composio's GitHub functionalities with Griptape.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/griptape/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Install Composio LangChain package
pip install composio-griptape

# Connect your GitHub account
composio-cli add github

# View available applications you can connect with
composio-cli show-apps
```

----------------------------------------

TITLE: Installing Composio LangChain and Connecting GitHub (Bash)
DESCRIPTION: This snippet provides commands to install the `composio-praisonai` package using pip, connect a GitHub account via `composio-cli`, and view available applications. These are essential prerequisites for Praison Agents to interact with GitHub functionalities.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/praisonai/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Install Composio LangChain package
pip install composio-praisonai

# Connect your GitHub account
composio-cli add github

# View available applications you can connect with
composio-cli show-apps
```

----------------------------------------

TITLE: Configuring Benchmark Evaluation with E2B Workspace (Python)
DESCRIPTION: This Python snippet shows how to modify the `evaluate` function call within `benchmark.py` to specify an E2B (or FlyIO) sandbox as the workspace environment. This allows benchmarks to be run in a cloud-based isolated environment, requiring the respective platform's API key.
SOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#_snippet_13

LANGUAGE: Python
CODE:
```
from composio import WorkspaceType

(...)

    evaluate(
        bench,
        dry_run=False,
        test_range=test_range,
        test_instance_ids=test_instance_ids_list,
        workspace_env=WorkspaceType.E2B
    )
```

----------------------------------------

TITLE: Defining ListAllConnectionsData Type - TypeScript
DESCRIPTION: This TypeScript type alias defines the structure for filtering connection data. It includes optional properties for `integrationId` (string) to filter by specific integration, `page` (number) for pagination, `pageSize` (number) for the number of items per page, and `user_uuid` (string) to filter by specific user entities.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.ListAllConnectionsData.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
ListAllConnectionsData: {
	integrationId?: string;
	page?: number;
	pageSize?: number;
	user_uuid?: string;
}
```

----------------------------------------

TITLE: Checking isort Code Formatting with Tox
DESCRIPTION: This command uses `tox` to check if the Python code adheres to `isort` import sorting standards without modifying the files. This is useful for CI/CD pipelines or pre-commit hooks to ensure code quality.
SOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#_snippet_5

LANGUAGE: bash
CODE:
```
tox -e isort-check
```

----------------------------------------

TITLE: Installing Dependencies for Composio with Vercel AI SDK - Bash
DESCRIPTION: This snippet provides the command to install the necessary npm packages for integrating Composio with Vercel AI SDK, including @ai-sdk/openai, composio-core, and ai. These packages are prerequisites for using the AI SDK and Composio tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/vercel.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install @ai-sdk/openai composio-core ai
```

----------------------------------------

TITLE: Running the Portfolio Generator Demo - Bash
DESCRIPTION: This command executes the main demo script using Node.js. It initiates the portfolio generator agent, which will then generate the website code and provide setup guidance.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/portfolio-generator/readme.md#_snippet_3

LANGUAGE: bash
CODE:
```
node demo.mjs
```

----------------------------------------

TITLE: Exporting Custom Tool Class in Python
DESCRIPTION: This `__init__.py` file snippet exports the custom tool class, `<ToolName>`, making it discoverable and importable within the Python package structure of the local tool.
SOURCE: https://github.com/composiohq/composio/blob/master/python/docs/adding-local-tool.md#_snippet_2

LANGUAGE: python
CODE:
```
from .tool import <ToolName>
```

----------------------------------------

TITLE: Checking Black Code Formatting with Tox
DESCRIPTION: This command uses `tox` to check if the Python code adheres to `black` formatting standards without modifying the files. This is useful for CI/CD pipelines or pre-commit hooks to ensure code quality.
SOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#_snippet_6

LANGUAGE: bash
CODE:
```
tox -e black-check
```

----------------------------------------

TITLE: Error 1801: Execution Error (Action Execute)
DESCRIPTION: Tool execution failed. Check your tool parameters and try again, reviewing the tool documentation for proper usage.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/api/errors.mdx#_snippet_35

LANGUAGE: APIDOC
CODE:
```
Error Code: 1801
Name: Execution Error
Error: Tool execution failed
Solution: Check your tool parameters and try again. Review the tool documentation for proper usage.
```

----------------------------------------

TITLE: Installing JavaScript Dependencies for Research Agent
DESCRIPTION: This command installs the required Node.js packages using pnpm. `express` is for web server functionality, `openai` for OpenAI API interaction, `composio-core` for Composio integration, and `dotenv` for environment variable management.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
pnpm add express openai composio-core dotenv
```

----------------------------------------

TITLE: Installing Composio MCP Tools (Bash)
DESCRIPTION: This placeholder represents the command generated from the Composio MCP website, used to install the MCP tools on the system. Users should replace 'Your generated code' with the actual command provided by the Composio platform.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/mcp/claude.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
Your generated code
```

----------------------------------------

TITLE: Defining ListAllConnectionsResponse Type Alias in TypeScript
DESCRIPTION: This TypeScript type alias defines the comprehensive structure for the `ListAllConnectionsResponse`. It includes an optional array of `items` representing individual connections, an optional `page` number for the current page, and an optional `totalPages` count for pagination.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.ListAllConnectionsResponse.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
ListAllConnectionsResponse: {
    items?: {
        appName?: string;
        connectionParams?: {
            access_token?: string;
            base_url?: string;
            bot_id?: string;
            client_id?: string;
            client_secret?: string;
            created_at?: number;
            duplicated_template_id?: string;
            expires_in?: number;
            organization?: string;
            owner?: {
                type?: string;
                user?: {
                    avatar_url?: string;
                    id?: string;
                    name?: string;
                    object?: string;
                    person?: {
                        email?: string;
                    };
                    type?: string;
                };
            } | string;
            refresh_token?: string;
            request_id?: string;
            scope?: string;
            token_type?: string;
            workspace_icon?: string;
            workspace_id?: string;
            workspace_name?: string;
        };
        connectorId?: string;
        createdAt?: string;
        id?: string;
        logo?: string;
        status?: "FAILED" | "INITIATED" | "ACTIVE";
        updatedAt?: string;
    }[];
    page?: number;
    totalPages?: number;
}
```

----------------------------------------

TITLE: Running Loan Underwriter Agent (Python/Streamlit)
DESCRIPTION: This command executes the main Python script for the Loan Underwriter Agent using Streamlit, which typically launches a web interface for the agent. It's the final step to start the application.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/loan_underwriter_agent/readme.md#_snippet_3

LANGUAGE: sh
CODE:
```
streamlit run cookbook/python-examples/advanced_agents/loan_underwriter_agent/main.py
```

----------------------------------------

TITLE: Error 2200: Resource Not Found
DESCRIPTION: Details for Organization error 2200, indicating a missing organization resource and providing steps to verify the organization ID and access permissions.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/api/errors.mdx#_snippet_51

LANGUAGE: APIDOC
CODE:
```
Error Code: 2200
Name: Resource Not Found
Error Message: Organization resource not found
Solution: Verify the organization ID is correct and you have access to it.
```

----------------------------------------

TITLE: Installing Composio LangChain and Connecting GitHub - Bash
DESCRIPTION: This snippet provides commands to install the Composio LangChain package, connect a GitHub account using the Composio CLI, and view available applications. These steps are prerequisites for utilizing GitHub functionalities with Composio and Google AI Python.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/google/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-google

composio-cli add github

composio-cli show-apps
```

----------------------------------------

TITLE: Installing Composio, CrewAI, and Langchain OpenAI Packages (Python)
DESCRIPTION: This snippet provides the command to install the necessary Python packages: `composio_crewai` for Composio integration with CrewAI, `crewai` itself, and `langchain_openai` for OpenAI LLM integration. These are prerequisites for building AI agents that interact with external applications.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/crewai.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio_crewai crewai langchain_openai
```

----------------------------------------

TITLE: Importing Agno Agent (Python)
DESCRIPTION: This Python snippet imports the `Agent` class from the `agno.agent` module. This class is essential for initializing and configuring the conversational agent that will interact with external tools.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/agno/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from agno.agent import Agent
```

----------------------------------------

TITLE: Defining ListTriggersData Type Alias in TypeScript
DESCRIPTION: This TypeScript type alias defines the structure for `ListTriggersData`, used for filtering trigger lists. It includes optional properties for `appNames` (comma-separated app names), `connectedAccountIds` (filter by account IDs), and `showEnabledOnly` (boolean to show only enabled triggers).
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.ListTriggersData.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
ListTriggersData: {
    appNames?: string;
    connectedAccountIds?: string;
    showEnabledOnly?: boolean;
}
```

----------------------------------------

TITLE: Configuring Environment Variables - .env
DESCRIPTION: Defines the essential environment variables required for the agents to function. These include API keys for OpenAI and Composio, and Solana wallet credentials (private key and address) for blockchain interactions. These variables should be stored in a `.env` file.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/solana/README.md#_snippet_2

LANGUAGE: Environment Variables
CODE:
```
OPENAI_API_KEY=
COMPOSIO_API_KEY=
SOLANA_PRIVATE_KEY=
SOLANA_WALLET_ADDRESS=
```

----------------------------------------

TITLE: Starting Local Development Server with Bun in JavaScript
DESCRIPTION: This snippet sets up a local development server using Bun. It checks `import.meta.main` to ensure the code only runs when executed directly. The `Bun.serve` function is used to listen on port 8787, serving the `app.fetch` handler, which is useful for local testing and development.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#_snippet_12

LANGUAGE: JavaScript
CODE:
```
// For local testing
  if (import.meta.main) {
      console.log("Starting server on http://localhost:8787");
      Bun.serve({
          fetch: app.fetch,
          port: 8787
      });
  }
```

----------------------------------------

TITLE: Running Main Game Builder Script - Python
DESCRIPTION: Initiates the AI game building process by executing the `main.py` script using Python 3.10. The script will prompt the user for game ideas, and the AI agent will then attempt to generate and run the game code.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/agents-sdk/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
python3.10 main.py
```

----------------------------------------

TITLE: Running Slack Bot Agent (Python via Shell)
DESCRIPTION: This command executes the main Python script for the Slack Bot Agent using the Python interpreter. It initiates the bot's functionality, leveraging the configured environment and dependencies.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_llamaindex/readme.md#_snippet_3

LANGUAGE: sh
CODE:
```
python python/examples/advanced_agents/slack_bot_agent/slack_agent_llamaindex/slack_agent_llamaindex.py
```

----------------------------------------

TITLE: Running Main Python Script (Shell)
DESCRIPTION: This command executes the main Python script for the Scheduler Agent. It initiates the application, leveraging Composio, LlamaIndex, and ChatGPT functionalities for event scheduling.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_llamaindex/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python python/examples/advanced_agents/scheduler_agent/scheduler_agent_llamaindex/main.py
```

----------------------------------------

TITLE: Run Content Writing Agent (Shell)
DESCRIPTION: This command executes the main Python script for the Content Writing Agent. It initiates the content writing and posting pipeline after the environment has been set up and all dependencies installed.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/content_writing_agent/llamaindex/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/python-examples/advanced_agents/content_writing_agent/llamaindex/main.py
```

----------------------------------------

TITLE: Python Static Type Checking Dependencies
DESCRIPTION: Defines Python packages used for static type analysis, including mypy and associated type stubs for various standard library modules.
SOURCE: https://github.com/composiohq/composio/blob/master/python/swe/tests/test_docker/requirements.txt#_snippet_2

LANGUAGE: Python
CODE:
```
cffi==1.15.1
cryptography==40.0.1
mypy==1.2.0
mypy-extensions==1.0.0
pycparser==2.21
types-contextvars==2.4.7.2
types-dataclasses==0.6.6
types-setuptools==67.6.0.7
typing-extensions==4.5.0
```

----------------------------------------

TITLE: Activating Virtual Environment on Linux/macOS
DESCRIPTION: This command activates the Python virtual environment created by `uv` on Linux and macOS systems. Activating the environment ensures that project-specific dependencies are used and isolates the project from the system's global Python installation.
SOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#_snippet_1

LANGUAGE: bash
CODE:
```
source .venv/bin/activate
```

----------------------------------------

TITLE: Starring a GitHub Repository with Griptape Agent (Bash)
DESCRIPTION: This command, intended to be input to the Griptape agent, instructs it to star the specified 'composiohq/composio' repository on GitHub using its integrated Composio tools.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/griptape.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
Star composiohq/composio repository
```

----------------------------------------

TITLE: Setting Environment Variables - Plaintext
DESCRIPTION: These lines represent the required environment variables to be set in a `.env` file. `COMPOSIO_API_KEY` is for authenticating with the Composio API, and `OPENAI_API_KEY` is for accessing OpenAI services, both crucial for the agent's functionality.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/meeting_brief_agent/readme.md#_snippet_2

LANGUAGE: plaintext
CODE:
```
COMPOSIO_API_KEY=<your-composio-api-key>
OPENAI_API_KEY=<your-openai-api-key>
```

----------------------------------------

TITLE: Manually Updating Composio App and Action Enums in Python
DESCRIPTION: This Python snippet shows how to manually add new entries for custom tools and their actions to the `App` and `Action` enums in `composio/client/enums.py`. This is a fallback if the automatic update command fails, ensuring the tool is recognized.
SOURCE: https://github.com/composiohq/composio/blob/master/python/docs/adding-local-tool.md#_snippet_7

LANGUAGE: python
CODE:
```
class App(str, Enum):
    """Composio App."""

    ABLY = "ably"
    ACCELO = "accelo"
    <TOOL_ENUM_NAME> = <_tool_name_>



class Action(tuple, Enum):
    """App action."""

    MATHEMATICAL_CALCULATOR = ("mathematical", "mathematical_calculator", True, True)
    LOCALWORKSPACE_WORKSPACESTATUSACTION = ("localworkspace", "localworkspace_workspacestatusaction", True, True)
    LOCALWORKSPACE_CREATEWORKSPACEACTION = ("localworkspace", "localworkspace_createworkspaceaction", True, True)
    <ACTION_ENUM_NAME> = ( <_tool_name>, <_action_name>, True, True)
```

----------------------------------------

TITLE: Connecting GitHub Account via CLI (Shell)
DESCRIPTION: These shell commands facilitate connecting a GitHub account to Composio. `composio login` initiates the login process, and `composio add github` specifically adds the GitHub integration, allowing Composio to manage GitHub actions.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/autogen.mdx#_snippet_2

LANGUAGE: shell
CODE:
```
composio login 
composio add github
```

----------------------------------------

TITLE: Installing Packages and Connecting GitHub Tool
DESCRIPTION: This section provides commands to set up the development environment by installing necessary Python and JavaScript packages for Composio and Langchain, and then connecting the GitHub tool via Composio CLI for agent interaction.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/groq.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-langchain
pip install langchain-groq

#Connect your GitHub so agents can use it
composio add github

#Check all different apps which you can connect with
composio apps
```

LANGUAGE: javascript
CODE:
```
npm install composio-core
npm install langchain

// Connect your GitHub so agents can use it
composio add github

// Check all different apps which you can connect with
composio apps
```

----------------------------------------

TITLE: Executing Setup Script - Shell
DESCRIPTION: This command executes the `setup.sh` script, which is responsible for setting up the environment and installing all necessary dependencies for the project. After execution, the `.env` file needs to be filled with secrets.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/domain_deep_research/langgraph/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing CrewAI Task (Python)
DESCRIPTION: This final snippet demonstrates how to initiate the defined CrewAI `crew` to execute its assigned tasks. The `crew.kickoff()` method starts the process, and the result of the operation, such as the status of starring the GitHub repository, is then printed to the console.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/crewai.mdx#_snippet_6

LANGUAGE: python
CODE:
```
result = crew.kickoff()
print(result)
```

----------------------------------------

TITLE: Sanitizing Tool Names for Framework Restrictions (Python)
DESCRIPTION: This Python function `_sanitize_tool_name` provides a solution for framework-specific tool naming restrictions. It's intended to implement logic for replacing invalid characters or truncating names to ensure compliance with the target framework's requirements.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#_snippet_11

LANGUAGE: python
CODE:
```
def _sanitize_tool_name(self, name):
    """Ensure tool name meets framework requirements"""
    # Replace invalid characters, truncate if needed, etc.
    return sanitized_name
```

----------------------------------------

TITLE: Installing Composio OpenAI Agents with pip
DESCRIPTION: This command installs the `composio_openai_agents` package using pip, the Python package installer. It's the first step to set up the integration, ensuring all necessary dependencies are available for use with OpenAI Agents.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/openai_agents/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio_openai_agents
```

----------------------------------------

TITLE: Installing Required Python Packages
DESCRIPTION: This snippet installs all necessary Python libraries for the project, including `composio-langchain`, `composio-core`, `langchain-community`, `huggingface_hub`, `google-search-results`, and `python-dotenv`.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#_snippet_0

LANGUAGE: python
CODE:
```
%pip install composio-langchain
%pip install composio-core
%pip install langchain-community
%pip install huggingface_hub
%pip install google-search-results
%pip install python-dotenv
```

----------------------------------------

TITLE: Installing Fly.io Workspace Extension for Composio (Bash)
DESCRIPTION: This command installs the `composio-core` package with the `flyio` extension, which is required to enable Fly.io as a workspace type for deploying and managing tools within the Composio framework. It ensures the necessary dependencies for Fly.io integration are available.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/workspaces/workspaces.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
pip install composio-core[flyio]
```

----------------------------------------

TITLE: Defining GetListActionsResponse Type Alias in TypeScript
DESCRIPTION: This TypeScript type alias defines the complete structure for the response when listing actions in the Composio API. It includes an optional array of `items`, where each item represents an action, along with mandatory `page` and `totalPages` properties for pagination metadata.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.GetListActionsResponse.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
GetListActionsResponse: {
    items?: {
        appId?: string;
        appName?: string;
        description?: string;
        display_name?: string;
        enabled?: boolean;
        logo?: string;
        name?: string;
        parameters?: {
            properties?: {
                [key: string]: unknown;
            };
            required?: string[];
            title?: string;
            type?: string;
        };
        response?: {
            properties?: {
                [key: string]: unknown;
            };
            required?: string[];
            title?: string;
            type?: string;
        };
    }[];
    page: number;
    totalPages: number;
}
```

----------------------------------------

TITLE: Configuring XAI API Key (Dotenv)
DESCRIPTION: Sets the XAI API key within the `.env` file, which is crucial for authenticating requests to the Grok-3 Mini model. Replace `your_xai_api_key_here` with your actual API key.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/grok/README.md#_snippet_1

LANGUAGE: dotenv
CODE:
```
XAI_API_KEY=your_xai_api_key_here
```

----------------------------------------

TITLE: Starting Development Server for Composio Project
DESCRIPTION: This command initiates the development server, as defined in the `package.json` scripts, allowing the Cloudflare Worker to be tested locally.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/cloudflare-openai/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
npm run start
```

----------------------------------------

TITLE: Setting Environment Variables for API Keys - Python
DESCRIPTION: This snippet outlines the necessary environment variables for various API keys and service URLs. These variables are crucial for authenticating and connecting to Deepgram, OpenAI, Cartesia, LiveKit, and Composio services, enabling the agent's functionality.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/livekit.mdx#_snippet_1

LANGUAGE: python
CODE:
```
DEEPGRAM_API_KEY=
OPENAI_API_KEY=
CARTESIA_API_KEY=
LIVEKIT_API_KEY=
LIVEKIT_API_SECRET=
LIVEKIT_URL=
COMPOSIO_API_KEY=
```

----------------------------------------

TITLE: Creating a Mastra Project using npx (JavaScript Context)
DESCRIPTION: This snippet shows how to initialize a new Mastra project using `npx`. It's the first step in setting up your development environment for Mastra agents, typically for JavaScript-based projects.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/mastra.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-mastra@latest
```

----------------------------------------

TITLE: Connecting GitHub to Composio - Bash
DESCRIPTION: This command initiates the process of connecting your GitHub account with Composio, allowing the AI agent to perform actions on GitHub. It needs to be run in the terminal to complete the authentication flow.
SOURCE: https://github.com/composiohq/composio/blob/master/python/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
composio add github
```

----------------------------------------

TITLE: Connecting GitHub Account via CLI - Shell
DESCRIPTION: This snippet shows how to connect a GitHub account using the Composio command-line interface. `composio login` initiates the authentication flow, and `composio add github` registers the GitHub integration.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/gemini.mdx#_snippet_2

LANGUAGE: shell
CODE:
```
composio login 
composio add github
```

----------------------------------------

TITLE: Importing Composio and CamelAI Base Packages (Python)
DESCRIPTION: This Python snippet imports essential modules from `colorama`, `camel`, and `composio_camel` to prepare the environment for setting up Camel agents and integrating Composio tools. These imports are prerequisites for defining agents and using external application functionalities.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/camel/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from colorama import Fore

from camel.agents import ChatAgent
from camel.configs import ChatGPTConfig
from camel.messages import BaseMessage
from camel.models import ModelFactory
from camel.types import ModelPlatformType, ModelType
from camel.utils import print_text_animated
from composio_camel import ComposioToolSet, Action
```

----------------------------------------

TITLE: Importing Base Packages for Griptape and Composio (Python)
DESCRIPTION: This snippet imports necessary modules for Griptape agent creation, utility functions, Composio integration components (App, Action, Tag, ComposioToolSet), and loads environment variables for configuration.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/griptape.mdx#_snippet_1

LANGUAGE: python
CODE:
```
from griptape.structures import Agent
from griptape.utils import Chat
from composio_griptape import App, Action, Tag, ComposioToolSet
import dotenv

dotenv.load_dotenv()
```

----------------------------------------

TITLE: Define GetIntegrationResponse Type Alias in TypeScript
DESCRIPTION: This TypeScript type alias defines the structure of the `GetIntegrationResponse` object, which represents the response for an integration. It includes optional properties such as `appId`, `appName`, `authConfig`, `authScheme`, `createdAt`, `enabled`, `expectedInputFields`, `id`, `logo`, `name`, and `updatedAt`, detailing configuration and metadata for an integration.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.GetIntegrationResponse.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
GetIntegrationResponse: {
	appId?: string;
	appName?: string;
	authConfig?: {
		base_url?: string;
		client_id?: string;
		client_secret?: string;
	};
	authScheme?: string;
	createdAt?: string;
	enabled?: boolean;
	expectedInputFields?: {
		[key: string]: unknown;
	}[];
	id?: string;
	logo?: string;
	name?: string;
	updatedAt?: string;
}
```

----------------------------------------

TITLE: Installing Composio Plugins with uv
DESCRIPTION: This snippet provides commands to install various Composio plugins in editable mode. Developers can choose to install specific plugins based on their development needs, enabling integration with different AI frameworks and tools.
SOURCE: https://github.com/composiohq/composio/blob/master/CONTRIBUTING.md#_snippet_2

LANGUAGE: Shell
CODE:
```
# Install plugins as needed
uv pip install -e python/plugins/autogen
uv pip install -e python/plugins/claude
uv pip install -e python/plugins/crew_ai
uv pip install -e python/plugins/griptape
uv pip install -e python/plugins/julep
uv pip install -e python/plugins/langchain
uv pip install -e python/plugins/llamaindex
uv pip install -e python/plugins/lyzr
uv pip install -e python/plugins/openai
```

----------------------------------------

TITLE: Installing Composio Lyzr and Connecting GitHub Account (Bash)
DESCRIPTION: This snippet provides the necessary bash commands to install the `composio-lyzr` package, connect a GitHub account using `composio-cli`, and view available applications. These steps are prerequisites for using Composio with Lyzr to interact with GitHub.
SOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/lyzr/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Install Composio LangChain package
pip install composio-lyzr

# Connect your GitHub account
composio-cli add github

# View available applications you can connect with
composio-cli show-apps
```

----------------------------------------

TITLE: Running CRM Agent Python Script (Shell)
DESCRIPTION: This command executes the `main.py` Python script using Streamlit, launching the CRM agent's chat interface. It assumes Streamlit is installed and the script path is correct.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_kit/CRM_agent/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
streamlit run cookbook/python-examples/advanced_agents/sales_kit/CRM_agent/main.py
```

----------------------------------------

TITLE: Installing Composio Core SDK (Python)
DESCRIPTION: Installs the core Composio SDK and OpenAI integration for Python. This step is a prerequisite for using Composio and its OpenAI features. Requires Python 3.8+.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/installation.mdx#_snippet_0

LANGUAGE: pip
CODE:
```
pip install composio_core composio_openai
```

LANGUAGE: uv
CODE:
```
uv add composio_core composio_openai
```

----------------------------------------

TITLE: Installing Composio and OpenAI Packages
DESCRIPTION: This step outlines the necessary package installations for integrating Composio with OpenAI, providing commands for both Python and JavaScript environments. These packages are prerequisites for using Composio's toolset with OpenAI's API.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
pip install composio-openai openai
```

LANGUAGE: JavaScript
CODE:
```
npm i composio-core openai
```

----------------------------------------

TITLE: Installing Composio LangGraph Packages
DESCRIPTION: This step outlines the necessary package installations for using Composio with LangGraph. It provides commands for both Python (pip) and TypeScript/JavaScript (npm) environments, ensuring all required libraries are available for building the agent.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#_snippet_0

LANGUAGE: Bash
CODE:
```
pip install composio-langgraph
```

LANGUAGE: Bash
CODE:
```
npm i @langchain/langgraph
npm i composio-core 
npm i @langchain/openai
npm i @langchain/core
```

----------------------------------------

TITLE: Pushing Git Branch to Remote
DESCRIPTION: This command pushes the current local branch to the remote repository, setting up the upstream tracking. It makes the branch available for others to view and for creating a Pull Request.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/CLAUDE.md#_snippet_12

LANGUAGE: Bash
CODE:
```
git push -u origin [branch-name]
```

----------------------------------------

TITLE: Importing Base Libraries for Calendar Agent
DESCRIPTION: This section imports the fundamental libraries needed for the Calendar Agent. It covers OS utilities, datetime for time handling, Composio and CrewAI components for agent orchestration, dotenv for environment variable loading, and Langchain's OpenAI integration for language model capabilities.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/calendar-agent.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
import os
from datetime import datetime

from composio_crewai import App, ComposioToolSet
from crewai import Agent, Task
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
```

LANGUAGE: JavaScript
CODE:
```
import dotenv from 'dotenv';
import { ChatOpenAI } from "@langchain/openai";
import { AgentExecutor, createOpenAIFunctionsAgent } from "langchain/agents";
import { pull } from "langchain/hub";
import { LangchainToolSet } from "composio-core";

dotenv.config();
```

----------------------------------------

TITLE: Installing Dependencies for Composio and OpenAI
DESCRIPTION: Installs the necessary npm packages for using Composio Core and OpenAI in a JavaScript/TypeScript project. This step is crucial before writing any code that utilizes these libraries, ensuring all required modules are available in your development environment.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai-js.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install composio-core openai 
yarn add composio-core openai 
pnpm add composio-core openai
```

----------------------------------------

TITLE: Install Packages for Composio and LlamaIndex
DESCRIPTION: This step outlines the necessary package installations to integrate Composio with LlamaIndex, ensuring all required dependencies are met for agent functionality.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#_snippet_0

LANGUAGE: Bash
CODE:
```
pip install composio-llamaindex llama-index
```

----------------------------------------

TITLE: Cloning the Repository and Navigating Directory (Bash)
DESCRIPTION: This command sequence clones the `composio-js` repository from GitHub and then changes the current directory to the specific example folder for the report template generator agent. This is the initial step to set up the project locally.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/report-template-generator-agent/readme.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/composioHQ/composio-js.git
cd composio/js/examples/report-template-generator-agent
```

----------------------------------------

TITLE: Cloning SWE JavaScript Template - Bash
DESCRIPTION: This command clones the `swe-js-template` repository from GitHub into a local directory named `swe-js`. This template provides a quick starting point for developing SWE agents with pre-configured settings and examples.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/swe/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
git clone https://github.com/ComposioHQ/swe-js-template.git swe-js
```

----------------------------------------

TITLE: Running Slack Bot Agent - Python Script Execution
DESCRIPTION: This command executes the main Python script for the Slack Bot Agent. It initiates the bot's functionality, allowing it to interact with Slack and leverage the integrated AI frameworks for PR reviews.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_autogen/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python python/examples/advanced_agents/slack_bot_agent/slack_agent_autogen/slack_agent_autogen.py
```

----------------------------------------

TITLE: Running Scheduler Agent Main Script (Python/Shell)
DESCRIPTION: This command executes the main Python script for the Scheduler Agent. It initiates the agent's functionality, leveraging Composio, PhiData, and ChatGPT to process emails and schedule events.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_phidata/readme.md#_snippet_3

LANGUAGE: Shell
CODE:
```
python python/examples/advanced_agents/scheduler_agent/scheduler_agent_phidata/main.py
```

----------------------------------------

TITLE: Run Customer Support Agent - Python Script
DESCRIPTION: This command executes the main Python script for the Customer Support Agent. It initiates the agent's functionality, leveraging Composio and Swarm to process customer queries.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/customer_support/swarm/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python python/examples/quickstarters/customer_support/swarm/main.py
```

----------------------------------------

TITLE: Making Setup Script Executable (Shell)
DESCRIPTION: This command grants execute permissions to the `setup.sh` script on Linux or macOS systems. It's a necessary step to allow the script to be run from the command line and prepare the environment.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_crewai/readme.md#_snippet_1

LANGUAGE: Shell
CODE:
```
chmod +x setup.sh
```

----------------------------------------

TITLE: Making Setup Script Executable (Shell)
DESCRIPTION: This command grants execute permissions to the `setup.sh` script on Linux or macOS systems, allowing it to be run as a program. This is necessary before executing the setup script.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/startup_trend_generator/readme.md#_snippet_1

LANGUAGE: shell
CODE:
```
chmod +x setup.sh
```

----------------------------------------

TITLE: Making Setup Script Executable (Shell)
DESCRIPTION: This command grants execute permissions to the 'setup.sh' script on Linux or macOS, ensuring it can be run. It is a necessary step before executing the setup script to prepare the environment.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_langgraph/readme.md#_snippet_1

LANGUAGE: shell
CODE:
```
chmod +x setup.sh
```

----------------------------------------

TITLE: Making Setup Script Executable (Shell)
DESCRIPTION: This command grants execute permissions to the `setup.sh` script on Linux or macOS, allowing it to be run as a program. This is often necessary before executing shell scripts.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_langchain/readme.md#_snippet_1

LANGUAGE: shell
CODE:
```
chmod +x setup.sh
```

----------------------------------------

TITLE: Executing Environment Setup Script (Shell)
DESCRIPTION: Runs the `setup.sh` script to automate the environment setup process. This includes installing dependencies, logging into Composio, and adding necessary tools required for the Data Analyst agent's operation.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sheet_analyst/crewai/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for setting up the environment and installing necessary dependencies for the Image Search Agent. Users must then fill in the `.env` file with secrets.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_langchain/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Execute Setup Script (Shell)
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for setting up the environment and installing necessary dependencies for the project. Users should fill in the `.env` file with secrets after execution.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/slack_calendar_agent/Readme.md#_snippet_2

LANGUAGE: sh
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Declaring Optional Page Property in ListAllConnectionsResponse (TypeScript)
DESCRIPTION: This declaration defines the optional `page` property within the `ListAllConnectionsResponse` type. It is of type `number` and indicates the current page number in a paginated list of connections.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.ListAllConnectionsResponse.html#_snippet_3

LANGUAGE: TypeScript
CODE:
```
page?: number
```

----------------------------------------

TITLE: Defining ListAllAppsResponse Type in Composio Core (TypeScript)
DESCRIPTION: This TypeScript type alias defines the structure for the `ListAllAppsResponse`. It includes an optional `items` array, where each item represents an application with properties like `appId`, `categories`, `description`, `key`, `logo`, and `name`. This type is used for responses when listing all available applications.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.ListAllAppsResponse.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
ListAllAppsResponse: {
    items?: {
        appId?: string;
        categories?: string[];
        description?: string;
        key?: string;
        logo?: string;
        name?: string;
    }[];
}
```

----------------------------------------

TITLE: Defining ListAllIntegrationsResponse Type in TypeScript
DESCRIPTION: This TypeScript type alias defines the structure for a response containing a list of integrations. It includes an optional `items` array, where each item represents an integration with details like `appId`, `appName`, `authScheme`, `createdAt`, `enabled`, `id`, `logo`, `name`, and `updatedAt`. It also includes optional `page` and `totalPages` properties for pagination.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.ListAllIntegrationsResponse.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
ListAllIntegrationsResponse: {
    items?: {
        appId?: string;
        appName?: string;
        authScheme?: string;
        createdAt?: string;
        enabled?: boolean;
        id?: string;
        logo?: string;
        name?: string;
        updatedAt?: string;
    }[];
    page?: number;
    totalPages?: number;
}
```

----------------------------------------

TITLE: Defining GetConnectedAccountData Type Alias in TypeScript
DESCRIPTION: This TypeScript type alias, `GetConnectedAccountData`, defines the structure for data related to a connected account. It specifies that any object conforming to this type must include a `connectedAccountId` property, which is a string representing the unique identifier of the connection. This type is crucial for ensuring data consistency when handling connected account information.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.GetConnectedAccountData.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
GetConnectedAccountData: {
    connectedAccountId: string;
}
```

----------------------------------------

TITLE: Defining GetActionData Type Alias - TypeScript
DESCRIPTION: The `GetActionData` type alias defines the expected structure for data related to an action. It requires a single property, `actionName`, which is a string representing the unique identifier of the action. This type is used within the Composio SDK client for data retrieval operations.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.GetActionData.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
GetActionData: {
    actionName: string;
}
```

----------------------------------------

TITLE: Running Coder Reward Agent - Python
DESCRIPTION: Executes the Python script for the Coder Reward Agent. This agent manages automated payments to developers based on their code contributions and milestones, requiring Python 3.8 or higher to run.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/solana/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
python cookbook/python-examples/advanced_agents/cryptokit/solana/coder_reward_agent.py
```

----------------------------------------

TITLE: Running Coinbase Crypto Kit Agent - Python/Shell
DESCRIPTION: Executes the main Python script for the Coinbase Crypto Kit Agent. This command initiates the agent's functionality, allowing it to perform operations like creating wallets, sending tokens, and checking balances using Coinbase.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/coinbase/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
python cookbook/python-examples/advanced_agents/cryptokit/coinbase/main.py
```

----------------------------------------

TITLE: Configuring JavaScript Express App and Research Parameters
DESCRIPTION: This snippet initializes an Express application, sets the server `PORT`, and defines research parameters like `researchTopic`, `targetRepo`, and `nIssues`. It also configures Express to parse JSON request bodies.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
// Create Express app
const app = express();
const PORT = process.env.PORT || 2001;

// Set research parameters
const researchTopic = "LLM agents function calling";
const targetRepo = "composiohq/composio";
const nIssues = 3;

// Configure Express
app.use(express.json());
```

----------------------------------------

TITLE: Testing Composio Schema Transformation for OpenAI Agents in Python
DESCRIPTION: This Python unit test example, `test_schema_transformation`, illustrates how to verify the correct transformation of Composio schemas into the format required by the OpenAI Agents framework. It initializes a `ComposioToolSet`, applies the `_wrap_tool` function to a sample schema, and then asserts that the resulting framework tool possesses the expected name and description properties.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#_snippet_13

LANGUAGE: Python
CODE:
```
def test_schema_transformation():
    """Test that Composio schemas are correctly transformed to framework schemas"""
    toolset = ComposioToolSet()
    composio_schema = {...}  # Sample Composio schema
    framework_tool = toolset._wrap_tool(composio_schema)
    
    # Assert framework tool has expected properties
    assert framework_tool.name == composio_schema["name"]
    assert framework_tool.description == composio_schema["description"]
    # ... more assertions
```

----------------------------------------

TITLE: Initializing Theme and Display in Web Page (JavaScript)
DESCRIPTION: This snippet initializes the theme of the web page based on local storage or defaults to 'os'. It also hides the body initially and then shows it after a delay, potentially via an 'app' object, to prevent a flash of unstyled content.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/classes/sdk_models_integrations.Integrations.html#_snippet_0

LANGUAGE: JavaScript
CODE:
```
document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)
```

----------------------------------------

TITLE: Execute Setup Script - Shell
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for setting up the environment, installing dependencies, logging into Composio, and adding necessary tools for the content hook agent.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/content_hook_generator_agent/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for setting up the environment and installing all necessary dependencies for the PR agent. After execution, the `.env` file needs to be filled with secrets.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_langchain/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Setting GitHub Access Token Environment Variable
DESCRIPTION: This command sets the `GITHUB_ACCESS_TOKEN` environment variable, which is required for the agent to interact with GitHub repositories. Users must replace `<your_token>` with a valid GitHub personal access token created with necessary permissions.
SOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
export GITHUB_ACCESS_TOKEN=<your_token>
```

----------------------------------------

TITLE: Executing Lead Generator Agent Demo Script
DESCRIPTION: This command executes the main demo script for the Lead Generator Agent using Node.js. Ensure environment variables are set in a `.env` file before running, as the script relies on them for proper operation.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/lead_generator_agent/readme.md#_snippet_2

LANGUAGE: bash
CODE:
```
node demo.mjs
```

----------------------------------------

TITLE: Running Python SQL Agent Script (Shell)
DESCRIPTION: This command executes the main Python script for the SQL agent. It initiates the database operations, including SQL query execution and logging, as defined within the `main.py` file. This is the primary command to run the application.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_llama_index/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/examples/sql_agent/main.py
```

----------------------------------------

TITLE: Running the Scheduling Agent Demo - Bash
DESCRIPTION: This command executes the main demo script using Node.js. It initiates the scheduling agent, which will then start listening for new emails and processing scheduling requests.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/scheduling-agent/readme.md#_snippet_3

LANGUAGE: bash
CODE:
```
node demo.mjs
```

----------------------------------------

TITLE: Running Resume Matching Agent (Shell)
DESCRIPTION: This command executes the main Python script for the Resume Matching Agent. It initiates the agent's functionality, leveraging the previously set up environment and dependencies.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/resume_matching/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python python/examples/advanced_agents/resume_matching/main.py
```

----------------------------------------

TITLE: Running Main Python Script (Shell)
DESCRIPTION: This command executes the main Python script for the Human in the Loop Scheduler Agent. It initiates the agent's functionality, leveraging the configured environment and dependencies.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/human_in_the_loop_scheduler/llamaindex/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/examples/advanced_agents/human_in_the_loop_scheduler/llamaindex/main.py
```

----------------------------------------

TITLE: Running Main Python Script (Shell)
DESCRIPTION: This command executes the main Python script for the Image Search Agent. It initiates the application's core functionality, allowing users to search for images using prompts.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_crewai/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/examples/image_search/main.py
```

----------------------------------------

TITLE: Installing Python Requirements from File with uv
DESCRIPTION: This `uv` command installs all packages listed in a `requirements.txt` file. It's a standard way to manage and install project dependencies, ensuring consistent environments across different machines.
SOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#_snippet_13

LANGUAGE: bash
CODE:
```
uv pip install -r requirements.txt
```

----------------------------------------

TITLE: Running Grok Game Builder Script (Python)
DESCRIPTION: Executes the main Python script that leverages the Grok-3 Mini model to generate a Pygame application. The script will prompt the model to create a game, save it, and then attempt to run it.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/grok/README.md#_snippet_3

LANGUAGE: python
CODE:
```
python grok-3-mini.py
```

----------------------------------------

TITLE: Run Main Python Script (Shell)
DESCRIPTION: This command executes the `main.py` Python script, which is the core application for the Game Builder Agent. It initiates the agent's functionality after the environment has been successfully set up and dependencies installed.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/openai/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python main.py
```

----------------------------------------

TITLE: Running SWE Agent - Bash
DESCRIPTION: This command starts the SWE agent using `pnpm`. After execution, the user will be prompted to provide details such as the target repository and issue for the agent to begin its work.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/swe/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
pnpm start
```

----------------------------------------

TITLE: Running the Streamlit Application - Bash
DESCRIPTION: This command starts the Streamlit web application by executing the `main.py` script. It launches the user interface where the YouTube URL and Slack channel can be input, initiating the podcast summarization process.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Podcast_summarizer_Agents/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
streamlit run main.py
```

----------------------------------------

TITLE: Running Main Python Script (Python)
DESCRIPTION: This command executes the main Python script for the code execution agent, initiating its functionality after the environment has been set up.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/code_execution_agent/README.md#_snippet_3

LANGUAGE: shell
CODE:
```
python python/examples/quickstarters/code_execution_agent/main.py
```

----------------------------------------

TITLE: Running Main Python Script (Shell)
DESCRIPTION: Executes the main Python script responsible for generating YouTube video summaries. This command initiates the agent's core functionality after the environment has been successfully set up and dependencies installed.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/youtube_slack_summary_agent/llama_index/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/python-examples/quickstarters/transcript_insight_generator/llama_index/main.py
```

----------------------------------------

TITLE: Running Image Search Agent (Python via Shell)
DESCRIPTION: This command executes the main Python script for the Image Search Agent. It initiates the image search functionality using the configured environment and dependencies.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_langchain/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/examples/image_search/main.py
```

----------------------------------------

TITLE: Running RAG Agent Python Script (Python)
DESCRIPTION: This command executes the main Python script for the RAG agent. It initiates the core functionality of the agent, leveraging the previously set up environment and tools.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/rag_agent/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/examples/rag_agent/main.py
```

----------------------------------------

TITLE: Python Project Dependencies List
DESCRIPTION: Lists the core Python package dependencies required for the Composio project, including components for language model integration and utility functions.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/youtube_slack_summary_agent/langgraph/requirements.txt#_snippet_0

LANGUAGE: Python
CODE:
```
composio-langgraph
langchain-openai
langchain-groq
langchain-community
python-dotenv
```

----------------------------------------

TITLE: Running Slack Bot Agent - Python via Shell
DESCRIPTION: This command executes the main Python script for the Slack Bot Agent, `slack_agent_langchain.py`, which initiates the bot's functionality. This step should be performed after the environment setup and `.env` file configuration.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_langchain/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python python/examples/advanced_agents/slack_bot_agent/slack_agent_langchain/slack_agent_langchain.py
```

----------------------------------------

TITLE: Starting Slack Expert Agent (Python)
DESCRIPTION: This command initiates the Slack Expert agent by running the `main.py` script. Once executed, the agent will be active and ready to answer codebase-related questions in the configured Slack channel, leveraging OpenAI and Composio tools.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slackbot_code_expert/README.md#_snippet_3

LANGUAGE: python
CODE:
```
python main.py
```

----------------------------------------

TITLE: Running Slack Bot Agent Python Script - Shell
DESCRIPTION: This command executes the main Python script for the Slack Bot Agent. It initiates the bot's functionality, leveraging the configured environment and dependencies to start the agent.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_crewai/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python python/examples/advanced_agents/slack_bot_agent/slack_agent_crewai/slack_agent_crewai.py
```

----------------------------------------

TITLE: Running the Application - Node.js/Bash
DESCRIPTION: This command executes the main application file `demo.mjs` using Node.js. It starts the meeting brief agent, allowing it to begin processing calendar events and sending Slack notifications.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/meeting_brief_agent/readme.md#_snippet_3

LANGUAGE: bash
CODE:
```
node demo.mjs
```

----------------------------------------

TITLE: Running Slack Bot Agent (Shell)
DESCRIPTION: This command executes the main Python script for the Slack Bot Agent. It initiates the bot's functionality, allowing it to start monitoring and reviewing pull requests as configured, leveraging the previously set up environment and secrets.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/examples/slack_agent_openai/slack_agent_openai.py
```

----------------------------------------

TITLE: Running the Report Template Generator Demo (Node.js/Bash)
DESCRIPTION: This command executes the `demo.mjs` script using Node.js. This initiates the report template generator agent, which will then interact with Composio and Google Docs based on the configured API keys and user requests.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/report-template-generator-agent/readme.md#_snippet_3

LANGUAGE: bash
CODE:
```
node demo.mjs
```

----------------------------------------

TITLE: Running Image Search Agent (Python)
DESCRIPTION: This command executes the main Python script for the Image Search Agent. It initiates the agent's functionality, allowing users to search for images in a local directory using natural language prompts.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/readme.md#_snippet_3

LANGUAGE: Shell
CODE:
```
python cookbook/examples/image_search/main.py
```

----------------------------------------

TITLE: Executing the Lead Outreach Agent (Bash)
DESCRIPTION: This command starts the Lead Outreach Agent application using Node.js, initiating the email drafting process based on the configured environment variables and code logic.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/lead_outreach_agent/readme.md#_snippet_2

LANGUAGE: bash
CODE:
```
node demo.mjs
```

----------------------------------------

TITLE: Running Main Recruiter Agent Script (Shell)
DESCRIPTION: This command executes the main Python script for the Recruiter Agent. It initiates the agent's core functionality, which involves identifying candidates and compiling their data into a spreadsheet, assuming all dependencies are installed and environment variables are configured.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/recruiter_agent/readme.md#_snippet_3

LANGUAGE: Shell
CODE:
```
python cookbook/python-examples/advanced_agents/recruiter_agent/main.py
```

----------------------------------------

TITLE: Running Main Python Script - Shell
DESCRIPTION: This command executes the main Python script of the YouTube Summary Agent. It initiates the agent's functionality, leveraging Composio, Langgraph, and ChatGPT to generate video summaries. Ensure all dependencies are installed and the `.env` file is configured before running.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/youtube_slack_summary_agent/langgraph/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/python-examples/quickstarters/transcript_insight_generator/langgraph/main.py
```

----------------------------------------

TITLE: Running Main Python Script (Shell)
DESCRIPTION: This command executes the main Python script of the YouTube Summary Agent. It initiates the process of generating YouTube video summaries using Composio, LlamaIndex, and ChatGPT.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/transcript_insight_generator/llama_index/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/python-examples/quickstarters/transcript_insight_generator/llama_index/main.py
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for setting up the environment, installing dependencies, logging into Composio, and adding necessary tools for the presentation agent.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/presentation_agent/crewai/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command executes the `setup.sh` script, which is responsible for setting up the environment, installing dependencies, logging into Composio, and adding necessary tools for the Twitter Posting Agent.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/twitter_posting_agent/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command executes the `setup.sh` script, which is responsible for setting up the environment and installing project dependencies. After execution, the `.env` file needs to be populated with secrets.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/human_in_the_loop_scheduler/llamaindex/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Running Setup Script - Bash
DESCRIPTION: Executes the `setup.sh` script, which automates the creation of a Python virtual environment, installation of necessary dependencies, and initial configuration of the `.env` file. Users might need to make the script executable first using `chmod +x setup.sh`.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/agents-sdk/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
bash setup.sh
```

----------------------------------------

TITLE: Defining PatchUpdateActiveTriggerStatusData Type in TypeScript
DESCRIPTION: This TypeScript type alias defines the structure for data used to update an active trigger's status. It includes a `requestBody` object with an `enabled` boolean property to control the trigger's state, and a `triggerId` string to identify the specific trigger.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.PatchUpdateActiveTriggerStatusData.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
PatchUpdateActiveTriggerStatusData: {
    requestBody: {
        enabled: boolean;
    };
    triggerId: string;
}
```

----------------------------------------

TITLE: Execute Setup Script - Shell
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for setting up the environment, installing dependencies, logging into Composio, and adding necessary tools for the project.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/customer_support/swarm/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for setting up the environment, installing dependencies, logging into Composio, and adding necessary tools for the research assistant agent.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/Readme.md#_snippet_2

LANGUAGE: Shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Defining UpdateIntegrationData Type Alias in TypeScript
DESCRIPTION: This snippet defines the `UpdateIntegrationData` type alias, used for structuring data when updating an integration. It includes `integrationId` as a mandatory string and an optional `requestBody` object, which can contain an optional `enabled` boolean property to control integration status.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.UpdateIntegrationData.html#_snippet_0

LANGUAGE: TypeScript
CODE:
```
UpdateIntegrationData: {
    integrationId: string;
    requestBody?: {
        enabled?: boolean;
    };
}
```

----------------------------------------

TITLE: Declaring Optional TotalPages Property in ListAllConnectionsResponse (TypeScript)
DESCRIPTION: This declaration defines the optional `totalPages` property within the `ListAllConnectionsResponse` type. It is of type `number` and represents the total number of available pages for the paginated list of connections.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.ListAllConnectionsResponse.html#_snippet_4

LANGUAGE: TypeScript
CODE:
```
totalPages?: number
```

----------------------------------------

TITLE: Running a Scaffolded SWEKit Agent
DESCRIPTION: These commands navigate into the newly scaffolded agent directory and then execute the `main.py` script, which is the entry point for running the agent. After execution, the user will be prompted to provide repository and issue details.
SOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
cd agent
python main.py
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: Runs the `setup.sh` script to configure the environment, install necessary dependencies, log in to Composio, and add required tools. This prepares the system for the Data Analyst agent's operation.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sheet_analyst/llamaindex/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command executes the `setup.sh` script, which is responsible for setting up the environment and installing necessary dependencies for the project. Users must then fill in the `.env` file with secrets.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/indie_hacker_agent/langgraph/readme.md#_snippet_2

LANGUAGE: Shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script - Shell
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for setting up the environment and installing necessary dependencies for the Slack Bot Agent. After execution, the `.env` file should be filled with secrets.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_crewai/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command executes the `setup.sh` script, which is responsible for setting up the environment and installing all required dependencies for the Human in the Loop Scheduler Agent. After execution, the `.env` file needs to be populated with secrets.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/human_in_the_loop_scheduler/crewai/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for setting up the environment, installing dependencies, logging into Composio, and adding necessary tools. It's a crucial step for initial project setup and environment preparation.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/solana-agent/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for setting up the environment and installing necessary dependencies for the project. It is a crucial step before running the main application, ensuring all prerequisites are met.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/content_writing_agent/phidata/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command executes the `setup.sh` script, which is responsible for setting up the environment and installing necessary dependencies for the Second Brain Agent. After execution, the `.env` file needs to be filled.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Second_brain_Agent/llamaindex/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Execute Setup Script (Shell)
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for configuring the environment and installing all necessary dependencies for the Lead Generator Agent. It's a crucial step before running the main application.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_generator_agent/readme.md#_snippet_2

LANGUAGE: Shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Installing Core Libraries for AI Agent Development - Python
DESCRIPTION: This snippet installs the necessary Python packages for building the research assistant. `composio_crewai` integrates Composio with CrewAI, `crewai` provides the agent framework, and `langchain-openai` enables OpenAI LLM integration.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/research_assistant.ipynb#_snippet_0

LANGUAGE: python
CODE:
```
%pip install composio_crewai
%pip install crewai
%pip install langchain-openai
```

----------------------------------------

TITLE: Installing Project Dependencies - pnpm Bash
DESCRIPTION: This command uses `pnpm` to install the required Node.js packages for the market research agent. Key dependencies include `@langchain`, `@langchain/openai`, `composio-core`, and `express`, which are essential for the agent's functionality.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/market_research_agent/readme..md#_snippet_1

LANGUAGE: bash
CODE:
```
pnpm install @langchain @langchain/openai composio-core express
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for setting up the environment and installing all necessary dependencies for the Scheduler Agent. It prepares the system for the main application.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_llamaindex/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Running Slack Bot Python Agent
DESCRIPTION: This command executes the main Python script for the Slack Bot agent. It initiates the bot's functionality, allowing it to interact with Slack and perform automated PR reviews using the configured AI frameworks.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_ollama/readme.md#_snippet_5

LANGUAGE: shell
CODE:
```
python python/examples/advanced_agents/slack_bot_agent/slack_agent_ollama/main.py
```

----------------------------------------

TITLE: Running Main Python Script (Shell)
DESCRIPTION: This command executes the main Python script for the scheduler agent. It initiates the core functionality of the agent, which leverages Composio and other AI frameworks to schedule events.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_autogen/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python python/examples/advanced_agents/scheduler_agent/scheduler_agent_autogen/main.py
```

----------------------------------------

TITLE: Installing E2B Workspace Extension for Composio in Bash
DESCRIPTION: This command installs the Python package extension required to use E2B workspaces with Composio. It adds the 'e2b' extra to 'composio-core', enabling secure serverless execution of tools in E2B sandboxes. This command should be run in a bash terminal.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/workspaces/workspaces.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
pip install composio-core[e2b]
```

----------------------------------------

TITLE: Cloning the Repository for Portfolio Generator Demo - Bash
DESCRIPTION: This snippet provides the bash commands to clone the Composio repository and navigate into the specific directory for the portfolio generator example. It's a prerequisite for setting up the demo environment.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/portfolio-generator/readme.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/composioHQ/composio.git
cd composio/js/examples/portfolio-generator
```

----------------------------------------

TITLE: Cloning Repository and Navigating Directory (Shell)
DESCRIPTION: This command sequence clones the project repository from a specified URL and then changes the current directory to the project's root, preparing for subsequent setup steps.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/trading_agent/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
git clone <repository-url>
cd path/to/project/directory
```

----------------------------------------

TITLE: Running Calendar Agent Script (Python)
DESCRIPTION: This command executes the main Python script for the Calendar Agent. It initiates the process of converting to-do list items into Google Calendar events using the configured Composio tools and language model.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/langgraph/README.md#_snippet_3

LANGUAGE: python
CODE:
```
python python/examples/quickstarters/calendar_agent/main.py
```

----------------------------------------

TITLE: Running Calendar Agent Script (Python)
DESCRIPTION: This command executes the main Python script for the calendar agent. It initiates the process of converting to-do items into Google Calendar events using the configured Composio tools and language model.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/crewai/README.md#_snippet_3

LANGUAGE: python
CODE:
```
python python/examples/quickstarters/calendar_agent/main.py
```

----------------------------------------

TITLE: Running Newsletter Summarizer Script (Shell)
DESCRIPTION: This command executes the main Python script for the Newsletter Summarizer Agent. It initiates the agent's functionality to summarize newsletters after the environment setup is complete.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_llamaindex/README.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_crewai/main.py
```

----------------------------------------

TITLE: Running Trend Finder Agent (Python)
DESCRIPTION: This command executes the main Python script for the Trend Finder agent. It initiates the agent's functionality, leveraging Composio and ChatGPT to find trends after the environment has been set up and the `.env` file configured with necessary secrets.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/solana-agent/readme.md#_snippet_3

LANGUAGE: python
CODE:
```
python python/examples/quickstarters/trend_finder/main.py
```

----------------------------------------

TITLE: Running Main Python Script (Shell)
DESCRIPTION: This command executes the main Python script for the Human in the Loop Scheduler Agent. It initiates the agent's functionality, leveraging the configured environment and installed dependencies to perform its tasks.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/human_in_the_loop_scheduler/crewai/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/examples/advanced_agents/human_in_the_loop_scheduler/crewai/main.py
```

----------------------------------------

TITLE: Defining Optional Items Array in GetListActionsResponse Type
DESCRIPTION: This TypeScript snippet details the structure of an individual action object within the `items` array of the `GetListActionsResponse` type. It specifies various optional properties such as `appId`, `appName`, `description`, `display_name`, `enabled`, `logo`, and `name`, along with nested `parameters` and `response` objects that define the schema for action inputs and outputs respectively.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.GetListActionsResponse.html#_snippet_2

LANGUAGE: TypeScript
CODE:
```
Optional items?: {
    appId?: string;
    appName?: string;
    description?: string;
    display_name?: string;
    enabled?: boolean;
    logo?: string;
    name?: string;
    parameters?: {
        properties?: {
            [key: string]: unknown;
        };
        required?: string[];
        title?: string;
        type?: string;
    };
    response?: {
        properties?: {
            [key: string]: unknown;
        };
        required?: string[];
        title?: string;
        type?: string;
    };
}[]
```

----------------------------------------

TITLE: Making Setup Script Executable (Shell)
DESCRIPTION: This command grants execute permissions to the `setup.sh` script on Linux or macOS, ensuring it can be run as a program for environment setup.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_outreach_agent/crewai/readme.md#_snippet_1

LANGUAGE: Shell
CODE:
```
chmod +x setup.sh
```

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: This command grants execute permissions to the `setup.sh` script. It is necessary on Linux or macOS systems to allow the script to be run, ensuring the environment setup can proceed.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/agentic_rag/readme.md#_snippet_1

LANGUAGE: shell
CODE:
```
chmod +x setup.sh
```

----------------------------------------

TITLE: Setting Up Cloudflare Pages Fetch Handler in JavaScript
DESCRIPTION: This snippet exports a default object configuring the `fetch` handler for Cloudflare Pages. It uses a `handle` function (presumably from a framework like Hono or similar) to wrap the main `app` instance, making it compatible with the Cloudflare Workers/Pages environment.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#_snippet_11

LANGUAGE: JavaScript
CODE:
```
// Set up Cloudflare Pages handler
  export default {
      fetch: handle(app)
  };
```

----------------------------------------

TITLE: Defining GetIntegrationData Type Alias - TypeScript
DESCRIPTION: This TypeScript type alias, `GetIntegrationData`, defines the expected structure for data related to an integration. It specifies that the type must contain a single property, `integrationId`, which is a string used to uniquely identify an integration. This type is typically used as an input parameter for functions or methods that retrieve integration-specific information.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.GetIntegrationData.html#_snippet_1

LANGUAGE: TypeScript
CODE:
```
{
    integrationId: string;
}
```

----------------------------------------

TITLE: Running the SQL Agent Python Script (Shell)
DESCRIPTION: This command executes the main Python script for the SQL agent. It initiates the database operations, including SQL query execution and logging, as defined within the `main.py` file. A dummy `company.db` database is available for testing.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/readme.md#_snippet_3

LANGUAGE: Shell
CODE:
```
python cookbook/examples/sql_agent/main.py
```

----------------------------------------

TITLE: Running Newsletter Summarizer Python Script (Shell)
DESCRIPTION: This command executes the main Python script for the Newsletter Summarizer agent. It initiates the agent's functionality, leveraging the configured environment and installed dependencies to summarize newsletters.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_crewai/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
python cookbook/python-examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_crewai/main.py
```

----------------------------------------

TITLE: Running Main Python Script (Shell)
DESCRIPTION: This command executes the main Python script for the Lead Outreach Agent, initiating the agent's functionality after the environment has been successfully set up.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_outreach_agent/crewai/readme.md#_snippet_3

LANGUAGE: Shell
CODE:
```
python cookbook/python-examples/advanced_agents/lead_outreach_agent/crewai/main.py
```

----------------------------------------

TITLE: Running Main Python Script - Shell
DESCRIPTION: This command executes the main Python script, `main.py`, which performs the core database operations using the SQL agent. It initiates the interaction with the database, executing and logging SQL queries.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_langchain/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
python cookbook/examples/sql_agent/main.py
```

----------------------------------------

TITLE: Run Main Python Script (Shell)
DESCRIPTION: This command executes the `main.py` script using `poetry`, which manages project dependencies and virtual environments. Running this script sets up a webhook to listen for messages in the Slack workspace, enabling the AI agent functionality.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/slack_calendar_agent/Readme.md#_snippet_3

LANGUAGE: sh
CODE:
```
poetry run python main.py
```

----------------------------------------

TITLE: Initializing Theme and Display in Composio Core (JavaScript)
DESCRIPTION: This JavaScript snippet initializes the document's theme based on local storage or defaults to 'os'. It temporarily hides the body and then, after a 500ms delay, either shows the application page or removes the display property, ensuring a smooth loading experience.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.SetupTriggerData.html#_snippet_0

LANGUAGE: JavaScript
CODE:
```
document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)
```

----------------------------------------

TITLE: Initializing Theme and Page Display in JavaScript
DESCRIPTION: This JavaScript snippet handles the initial page load and theme application. It retrieves the theme from local storage or defaults to 'os', hides the body to prevent FOUC (Flash of Unstyled Content), and then reveals the body after a short delay, potentially waiting for an application to render.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.DeleteConnectionResponse.html#_snippet_0

LANGUAGE: JavaScript
CODE:
```
document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)
```

----------------------------------------

TITLE: Navigating to Project Directory (Shell)
DESCRIPTION: Changes the current working directory to the specified project directory. This step is essential to ensure that subsequent commands, such as running setup scripts and the main application, are executed from the correct location.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_llama_index/readme.md#_snippet_0

LANGUAGE: Shell
CODE:
```
cd path/to/project/directory
```

----------------------------------------

TITLE: Navigating to Project Directory - Shell
DESCRIPTION: This command changes the current working directory to the specified project directory. It is a prerequisite for executing other setup and run scripts.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_crewai/readme.md#_snippet_0

LANGUAGE: sh
CODE:
```
cd path/to/project/directory
```

----------------------------------------

TITLE: Navigating to Project Directory (Shell)
DESCRIPTION: This command changes the current working directory to the specified project directory. It's a prerequisite for running the setup and main scripts.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_langchain/readme.md#_snippet_0

LANGUAGE: sh
CODE:
```
cd path/to/project/directory
```

----------------------------------------

TITLE: Navigating to Project Directory (Bash)
DESCRIPTION: This command changes the current working directory to the specified project directory. This step is crucial as it ensures that subsequent commands, such as running setup scripts or the main application, are executed from the correct location.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_langgraph/readme.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd path/to/project/directory
```

----------------------------------------

TITLE: Execute Setup Script (Shell)
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for setting up the environment and installing all necessary dependencies for the Game Builder Agent. After execution, the `.env` file must be populated with required secrets.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/openai/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Navigating to Project Directory (Shell)
DESCRIPTION: This command changes the current working directory to the specified project directory, which is a prerequisite for running the setup and main scripts. Replace `path/to/project/directory` with the actual path where the project files are located.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/solana-agent/readme.md#_snippet_0

LANGUAGE: shell
CODE:
```
cd path/to/project/directory
```

----------------------------------------

TITLE: Defining the To-Do List for Calendar Event Creation
DESCRIPTION: This code defines the structured to-do list that the Calendar Agent will process. Each entry specifies a time range and a corresponding task, which the agent will use to create Google Calendar events. The format is designed for easy parsing by the agent.
SOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/calendar-agent.mdx#_snippet_3

LANGUAGE: Python
CODE:
```
# Setup Todo
todo = """
    1PM - 3PM -> Code,
    5PM - 7PM -> Meeting,
    9AM - 12AM -> Learn something,
    8PM - 10PM -> Game
"""
```

LANGUAGE: JavaScript
CODE:
```
// Setup Todo
const todo = `
    1PM - 3PM -> Code solo
    5PM - 7PM -> Meeting,
    9AM - 12AM -> Learn something,
    8PM - 10PM -> Game
`;
```

----------------------------------------

TITLE: Initializing UI Theme and Display with JavaScript
DESCRIPTION: This JavaScript snippet initializes the UI theme based on local storage or defaults to 'os'. It temporarily hides the body to prevent FOUC (Flash of Unstyled Content) and then shows the page after a delay, either by calling `app.showPage()` if `app` exists or by removing the display property.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.ListTriggersData.html#_snippet_0

LANGUAGE: JavaScript
CODE:
```
document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)
```

----------------------------------------

TITLE: Initializing Theme and Page Display in JavaScript
DESCRIPTION: This JavaScript snippet initializes the document's theme based on local storage or defaults to 'os', hides the body, and then shows the page after a delay, potentially using an 'app' object if available. It ensures a smooth page load experience by preventing a flash of unstyled content.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.GetActiveTriggerResponse.html#_snippet_0

LANGUAGE: JavaScript
CODE:
```
document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)
```

----------------------------------------

TITLE: Initializing Page Theme and Display (JavaScript)
DESCRIPTION: This JavaScript snippet initializes the page's theme by checking local storage for 'tsd-theme' or defaulting to 'os'. It then hides the document body initially and uses a 500ms timeout to either show an 'app' page or remove the display property, ensuring a smooth page load experience.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/modules/sdk_models_actions.html#_snippet_0

LANGUAGE: JavaScript
CODE:
```
document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)
```

----------------------------------------

TITLE: Initializing Theme and Page Display in JavaScript
DESCRIPTION: This JavaScript snippet handles client-side UI initialization. It retrieves a theme preference from local storage, defaulting to 'os', hides the document body to prevent FOUC (Flash of Unstyled Content), and then reveals the body after a 500ms delay or immediately if an 'app' object is available to show a page. This ensures a smoother loading experience.
SOURCE: https://github.com/composiohq/composio/blob/master/js/docs/types/sdk_client_types_gen.GetConnectedAccountData.html#_snippet_0

LANGUAGE: JavaScript
CODE:
```
composio-coredocument.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)
```

----------------------------------------

TITLE: Installing Project Dependencies with pnpm (Bash)
DESCRIPTION: This command installs all necessary project dependencies listed in the `package.json` file using `pnpm`. It ensures that all required libraries and modules are available for the application to run correctly.
SOURCE: https://github.com/composiohq/composio/blob/master/js/examples/report-template-generator-agent/readme.md#_snippet_1

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Navigating to Project Directory (Shell)
DESCRIPTION: This command changes the current working directory to the specified project directory. It's a prerequisite for running setup scripts and the main application.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/Readme.md#_snippet_0

LANGUAGE: Shell
CODE:
```
cd path/to/project/directory
```

----------------------------------------

TITLE: Navigating to Project Directory (Shell)
DESCRIPTION: This command changes the current working directory to the specified project directory. It is a prerequisite for running subsequent setup and execution scripts.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/startup_trend_generator/readme.md#_snippet_0

LANGUAGE: shell
CODE:
```
cd path/to/project/directory
```

----------------------------------------

TITLE: Navigating to Project Directory - Shell
DESCRIPTION: This command changes the current directory to the specified project directory. It is a prerequisite for running the setup and main scripts, ensuring all necessary files are accessible.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_langchain/readme.md#_snippet_0

LANGUAGE: sh
CODE:
```
cd path/to/project/directory
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command executes the `setup.sh` script, which is responsible for setting up the environment and installing necessary dependencies for the Second Brain Agent. Ensure the `.env` file is filled with secrets after this step.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Second_brain_Agent/crewai/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script - Shell
DESCRIPTION: This command executes the `setup.sh` script, which is responsible for setting up the environment and installing required dependencies for the project. It's a crucial step to prepare the system before running the main application.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/AI_PM_agent/llamaindex/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command runs the `setup.sh` script, which automates the environment setup and installs all required Python dependencies. After execution, users must manually populate the `.env` file with their API secrets and configurations.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/readme.md#_snippet_2

LANGUAGE: shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command executes the `setup.sh` script, which is responsible for setting up the environment and installing required dependencies for the Slack Bot Agent. After execution, the `.env` file needs to be populated with secrets.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_llamaindex/readme.md#_snippet_2

LANGUAGE: sh
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for setting up the environment and installing all required dependencies for the Slack Bot Agent. After execution, the `.env` file needs to be populated with secrets.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_openai/readme.md#_snippet_2

LANGUAGE: Shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Executing Setup Script (Shell)
DESCRIPTION: This command runs the `setup.sh` script, which is responsible for setting up the project environment and installing all required dependencies. This ensures the project is ready for execution.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_crewai/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
./setup.sh
```

----------------------------------------

TITLE: Composio Project Python Package Requirements
DESCRIPTION: This snippet provides the complete list of Python packages and their specific versions that the Composio project depends on. This format is commonly used in `requirements.txt` files to manage project dependencies, allowing for reproducible installations via `pip install -r requirements.txt`.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/assignment-agent/requirements.txt#_snippet_0

LANGUAGE: Python
CODE:
```
aiohappyeyeballs==2.4.4
aiohttp==3.11.9
aiosignal==1.3.1
annotated-types==0.7.0
anyio==4.6.2.post1
async-timeout==5.0.1
attrs==24.2.0
bcrypt==4.2.1
certifi==2024.8.30
cffi==1.17.1
charset-normalizer==3.4.0
click==8.1.7
composio_autogen==0.5.50
composio_core==0.5.50
cryptography==44.0.0
diskcache==5.6.3
distro==1.9.0
docker==7.1.0
exceptiongroup==1.2.2
fastapi==0.115.6
FLAML==2.2.0
frozenlist==1.5.0
h11==0.14.0
httpcore==1.0.7
httpx==0.28.0
idna==3.10
importlib_metadata==8.5.0
inflection==0.5.1
jiter==0.8.0
jsonref==1.1.0
jsonschema==4.23.0
jsonschema-specifications==2024.10.1
markdown-it-py==3.0.0
mdurl==0.1.2
multidict==6.1.0
numpy==1.26.4
openai==1.56.1
packaging==24.2
paramiko==3.5.0
propcache==0.2.1
pyautogen==0.4.1
pycparser==2.22
pydantic==2.9.2
pydantic_core==2.23.4
Pygments==2.18.0
PyNaCl==1.5.0
pyperclip==1.9.0
Pysher==1.0.8
python-dotenv==1.0.1
referencing==0.35.1
regex==2024.11.6
requests==2.32.3
rich==13.9.4
rpds-py==0.22.1
semver==3.0.2
sentry-sdk==2.19.0
sniffio==1.3.1
starlette==0.41.3
termcolor==2.5.0
tiktoken==0.8.0
tqdm==4.67.1
typing_extensions==4.12.2
urllib3==2.2.3
uvicorn==0.32.1
websocket-client==1.8.0
yarl==1.18.3
zipp==3.21.0
```

----------------------------------------

TITLE: Making Setup Script Executable (Shell)
DESCRIPTION: This command grants execute permissions to the `setup.sh` script on Linux or macOS, ensuring it can be run. It's a necessary step before executing the setup script.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_autogen/readme.md#_snippet_1

LANGUAGE: shell
CODE:
```
chmod +x setup.sh
```

----------------------------------------

TITLE: Making Setup Script Executable (Linux/macOS)
DESCRIPTION: This command grants execute permissions to the `setup.sh` script on Linux or macOS. This step ensures that the script can be run successfully to set up the environment and install dependencies.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_ollama/readme.md#_snippet_3

LANGUAGE: shell
CODE:
```
chmod +x setup.sh
```

----------------------------------------

TITLE: Making Setup Script Executable (Shell)
DESCRIPTION: This command grants execute permissions to the `setup.sh` script on Linux or macOS. It is necessary before running the script directly, ensuring the operating system can execute it.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/crewai/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
chmod +x setup.sh
```

----------------------------------------

TITLE: Make Setup Script Executable - Shell
DESCRIPTION: This command grants execute permissions to the `setup.sh` script on Linux or macOS, ensuring it can be run. This is a prerequisite for executing the setup script.
SOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/customer_support/swarm/readme.md#_snippet_1

LANGUAGE: shell
CODE:
```
chmod +x setup.sh
```
