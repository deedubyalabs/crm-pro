TITLE: Installing Tavily JavaScript SDK
DESCRIPTION: This snippet demonstrates how to install the Tavily JavaScript SDK using npm, which is the package manager for Node.js. It adds the `@tavily/core` package to your project, enabling access to Tavily's API functionalities.
SOURCE: https://github.com/tavily-ai/tavily-js/blob/main/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm i @tavily/core
```

----------------------------------------

TITLE: Performing a Simple Tavily Search Query in JavaScript
DESCRIPTION: This snippet illustrates how to perform a basic search query using the Tavily Search API. It involves instantiating the Tavily client with an API key, executing a search for a specific query, and then logging the search response. The `tavily` function is imported from `@tavily/core`.
SOURCE: https://github.com/tavily-ai/tavily-js/blob/main/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { tavily } = require("@tavily/core");

// Step 1. Instantiating your Tavily client
const tvly = tavily({ apiKey: "tvly-YOUR_API_KEY" });

// Step 2. Executing a simple search query
const response = await tvly.search("Who is Leo Messi?");

// Step 3. That's it! You've done a Tavily Search!
console.log(response);
```

----------------------------------------

TITLE: Extracting Raw Content from URLs using Tavily Extract in JavaScript
DESCRIPTION: This snippet demonstrates how to use the Tavily Extract API to retrieve raw content from a list of specified URLs. It initializes the Tavily client, defines an array of URLs, executes the `extract` method, and then iterates through the results to print the URL and its raw content. The API supports extracting content from up to 20 URLs simultaneously.
SOURCE: https://github.com/tavily-ai/tavily-js/blob/main/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { tavily } = require("@tavily/core");

// Step 1. Instantiating your TavilyClient
const tvly = tavily({ apiKey: "tvly-YOUR_API_KEY" });

// Step 2. Defining the list of URLs to extract content from
const urls = [
  "https://en.wikipedia.org/wiki/Artificial_intelligence",
  "https://en.wikipedia.org/wiki/Machine_learning",
  "https://en.wikipedia.org/wiki/Data_science",
  "https://en.wikipedia.org/wiki/Quantum_computing",
  "https://en.wikipedia.org/wiki/Climate_change"
]; // You can provide up to 20 URLs simultaneously

// Step 3. Executing the extract request
response = await tvly.extract(urls);

// Step 4. Printing the extracted raw content
for (let result of response.results) {
  console.log(`URL: ${result.url}`);
  console.log(`Raw Content: ${result.rawContent}\n`);
}
// Note that URLs that could not be extracted will be stored in response.failedResults
```

----------------------------------------

TITLE: Performing a Targeted Site Crawl with Tavily Crawl in JavaScript
DESCRIPTION: This snippet shows how to use the Tavily Crawl API to intelligently navigate and extract information from a website based on natural-language instructions. It initializes the client, sets a starting URL, and then executes a crawl request with parameters like `max_depth`, `limit`, and `instructions` to find specific content. The results, including URLs and raw content snippets, are then printed.
SOURCE: https://github.com/tavily-ai/tavily-js/blob/main/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const { tavily } = require("@tavily/core");

// Step 1. Instantiating your Tavily client
const tvly = tavily({ apiKey: "tvly-YOUR_API_KEY" });

// Step 2. Defining the starting URL to crawl
const start_url = "https://wikipedia.org/wiki/Lemon"

// Step 3. Executing the crawl request with instructions to surface only pages about citrus fruits
response = await tvly.crawl(start_url, {
  max_depth: 3,
  limit: 50,
  instructions: "Find all pages on citrus fruits"
});

// Step 4. Printing pages matching the query
for (let result of response.results) {
  console.log(`URL: ${result.url}`);
  console.log(`Raw Content: ${result.rawContent.substring(0, 200)}...`);
}
```

----------------------------------------

TITLE: Mapping a Website Structure with Tavily Map in JavaScript
DESCRIPTION: This snippet demonstrates how to use the Tavily Map API to discover and visualize the structure of a website. It initializes the Tavily client, specifies a starting URL, and then executes a map request with parameters such as `max_depth`, `limit`, and `instructions` to focus the mapping process. The resulting URLs, representing the site structure, are then printed to the console.
SOURCE: https://github.com/tavily-ai/tavily-js/blob/main/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const { tavily } = require("@tavily/core");

// Step 1. Instantiating your Tavily client
const tvly = tavily({ apiKey: "tvly-YOUR_API_KEY" });

// Step 2. Defining the starting URL
const start_url = "https://wikipedia.org/wiki/Lemon"

// Step 3. Executing the map request with parameters to focus on specific pages
response = await tvly.map(start_url, {
  max_depth: 3,
  limit: 50,
  instructions: "Find all pages on citrus fruits"
});

// Step 4. Printing the site structure
for (let url of response.results) {
  console.log(`URl: ${url}`);
}
```