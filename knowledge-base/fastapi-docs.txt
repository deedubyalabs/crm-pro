TITLE: Basic FastAPI Application
DESCRIPTION: This code defines a simple FastAPI application with a single endpoint that returns a JSON response. It imports FastAPI, creates an app instance, and defines a route that returns a dictionary.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Defining a Common Dependency Function (Python)
DESCRIPTION: This snippet defines an asynchronous function `common_parameters` that serves as a dependency. It accepts optional query parameters `q` (string), `skip` (integer, default 0), and `limit` (integer, default 100), then returns them as a dictionary. This function encapsulates reusable logic for handling common request parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Initializing FastAPI Application in Python
DESCRIPTION: This code snippet initializes a basic FastAPI application and defines a single endpoint that returns a JSON response. It imports the FastAPI class, creates an instance of it, and defines a path operation function decorated with `@app.get("/")` to handle GET requests to the root path.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Importing FastAPI
DESCRIPTION: This code snippet shows how to import the FastAPI class from the fastapi package. This is the first step in creating a FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Initializing a Basic FastAPI Application with Async Functions
DESCRIPTION: This code initializes a basic FastAPI application with two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'.  It uses `async def` to define the route functions, indicating that they can handle asynchronous operations. The '/items/{item_id}' endpoint takes an integer item_id and an optional string query parameter q.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application with GET Routes (Python)
DESCRIPTION: This snippet demonstrates how to create a minimal FastAPI application. It shows importing the FastAPI class, creating an app instance, and defining two GET endpoints ('/' and '/items/{item_id}') using the `@app.get` decorator. It illustrates handling path parameters with type hints and optional query parameters, returning JSON responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fa/docs/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Optional[str] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating a Simple FastAPI Application with async def (Python)
DESCRIPTION: Shows an alternative version of the basic FastAPI application example. This snippet uses `async def` for the endpoint functions, which is suitable for applications performing asynchronous operations or I/O-bound tasks. The functionality remains the same as the synchronous version, defining a root and an item endpoint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Installing ASGI Server (Uvicorn) - Console
DESCRIPTION: Command to install an ASGI server like Uvicorn, which is necessary to run a FastAPI application. The `[standard]` extra includes commonly used dependencies for the server.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/he/docs/index.md#_snippet_1

LANGUAGE: Console
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies
DESCRIPTION: This command installs the FastAPI library along with its standard dependencies, including Uvicorn and Pydantic, which are necessary for running a FastAPI application. The "[standard]" extra ensures all common requirements are met for a typical FastAPI project.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Using `Annotated` for Metadata (Python 3.9+)
DESCRIPTION: Demonstrates the use of `Annotated` from the standard `typing` module in Python 3.9+ to add additional metadata to type hints. The first parameter to `Annotated` is the actual type, while subsequent parameters provide metadata for tools like FastAPI or Pydantic's `Field`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_30

LANGUAGE: Python
CODE:
```
from typing import Annotated
from pydantic import BaseModel, Field

class ModelWithAnnotated(BaseModel):
    item_name: Annotated[str, Field(min_length=3, max_length=50)]
```

----------------------------------------

TITLE: Building a FastAPI Docker Image
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for a FastAPI application. It starts from a Python 3.9 base image, sets the working directory, copies `requirements.txt`, installs dependencies, copies the application code, and sets the default command to run the FastAPI application using `fastapi run`. It also includes a commented-out line for running behind a proxy.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["fastapi", "run", "app/main.py", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["fastapi", "run", "app/main.py", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Basic Dockerfile Configuration for FastAPI
DESCRIPTION: This Dockerfile sets up a FastAPI application within a Docker container. It starts from a Python base image, sets the working directory, copies the requirements file, installs dependencies, copies the application code, and defines the command to run the Uvicorn server.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/deployment/docker.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9
WORKDIR /code
COPY ./requirements.txt /code/requirements.txt
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt
COPY ./app /code/app
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Defining a Basic Endpoint with FastAPI
DESCRIPTION: This code snippet defines a basic FastAPI application with a single endpoint that returns a JSON response. It imports the FastAPI class, creates an instance of it, and defines a route using a decorator.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Defining Multiple Pydantic User Models in FastAPI
DESCRIPTION: Demonstrates defining separate Pydantic models for different stages of user data handling (input, output, database). It shows a FastAPI endpoint accepting `UserIn`, hashing the password, creating a `UserInDB` object (using dictionary unpacking), saving it, and returning a `UserOut` object, thus controlling which fields are exposed. This approach is common for handling sensitive data like passwords differently based on context.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/extra-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class UserIn(BaseModel):
    username: str
    password: str
    email: str
    full_name: str | None = None

class UserOut(BaseModel):
    username: str
    email: str
    full_name: str | None = None

class UserInDB(BaseModel):
    username: str
    hashed_password: str
    email: str
    full_name: str | None = None

# Helper functions (fake)
def fake_password_hasher(password: str):
    return "fakehashed" + password

def fake_save_user(user_in_db: UserInDB):
    print(f"Saving user {user_in_db.username} to DB")
    # Simulate saving to DB
    return user_in_db

@app.post("/users/", response_model=UserOut)
def create_user(user_in: UserIn):
    hashed_password = fake_password_hasher(user_in.password)
    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)
    user_out = fake_save_user(user_in_db)
    return user_out
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies
DESCRIPTION: This command installs FastAPI along with a set of commonly used standard optional dependencies, such as Uvicorn for the server and Pydantic for data validation. It is recommended to execute this command within an activated Python virtual environment to manage project dependencies effectively.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "fastapi[standard]"

---> 100%
```

----------------------------------------

TITLE: Including Routers in Main App (Python)
DESCRIPTION: Uses app.include_router() to integrate path operations from APIRouter instances (users.router, items.router) defined in imported modules into the main FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_18

LANGUAGE: Python
CODE:
```
app.include_router(users.router)
app.include_router(items.router)
```

----------------------------------------

TITLE: Creating a Simple FastAPI Application (Python)
DESCRIPTION: Demonstrates a basic FastAPI application structure. It imports necessary components, initializes the app, and defines two simple GET endpoints using decorators: a root path '/' returning a JSON object and an item path '/items/{item_id}' that takes a path parameter and an optional query parameter, using type hints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating a FastAPI Instance
DESCRIPTION: This Python code snippet shows how to create an instance of the FastAPI class, which serves as the main entry point for building all APIs. The 'app' variable will be an instance of the FastAPI class.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application with Async Endpoints
DESCRIPTION: This Python code illustrates a FastAPI application where endpoint functions are defined using `async def`. This approach is beneficial for I/O-bound operations, allowing the server to handle multiple requests concurrently without blocking, thereby improving performance and responsiveness. It includes a root endpoint and an item endpoint, both asynchronous.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Running FastAPI in Development Mode with CLI
DESCRIPTION: This snippet demonstrates how to start a FastAPI application in development mode using the `fastapi dev` command. It shows the console output, including server startup details, documentation links, and the auto-reload feature. This mode is suitable for development due to auto-reloading and listening on localhost.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/fastapi-cli.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ fastapi dev main.py

  FastAPI   Starting development server 🚀

             Searching for package file structure from directories with
             __init__.py files
             Importing from /home/user/code/awesomeapp

    module   🐍 main.py

      code   Importing the FastAPI app object from the module with the
             following code:

             from main import app

       app   Using import string: main:app

    server   Server started at http://127.0.0.1:8000
    server   Documentation at http://127.0.0.1:8000/docs

       tip   Running in development mode, for production use:
             fastapi run

             Logs:

      INFO   Will watch for changes in these directories:
             ['/home/user/code/awesomeapp']
      INFO   Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to
             quit)
      INFO   Started reloader process [383138] using WatchFiles
      INFO   Started server process [383153]
      INFO   Waiting for application startup.
      INFO   Application startup complete.
```

----------------------------------------

TITLE: Initializing FastAPI Application
DESCRIPTION: Creates an instance of the FastAPI class, which serves as the main entry point for building the API. This instance is then used to define path operations and handle incoming requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Creating FastAPI Instance
DESCRIPTION: This snippet creates an instance of the FastAPI class, assigning it to the variable app. This app instance serves as the main entry point for creating and interacting with the API.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Importing FastAPI
DESCRIPTION: This code snippet demonstrates how to import the FastAPI class, which provides the core functionality for building APIs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Declaring Basic Path Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to declare a simple path parameter `item_id` in a FastAPI GET route. The value from the URL path is automatically passed as an argument to the asynchronous function, allowing the API to respond with the received ID.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This Python code defines a simple FastAPI application with two HTTP GET endpoints. The root endpoint ('/') returns a basic 'Hello: World' JSON response, while the '/items/{item_id}' endpoint demonstrates how to define path parameters (item_id) and optional query parameters (q), returning them in the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Annotated Dockerfile for FastAPI
DESCRIPTION: This Dockerfile provides a step-by-step guide to building a FastAPI Docker image, with inline comments explaining each command. It covers selecting a base image, setting the working directory, copying dependencies, installing Python packages, and copying the application code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
# (1)
FROM python:3.9

# (2)
WORKDIR /code

# (3)
COPY ./requirements.txt /code/requirements.txt

# (4)
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (5)
COPY ./app /code/app
```

----------------------------------------

TITLE: Defining a Route with GET Operation
DESCRIPTION: This code snippet demonstrates how to define a route using the @app.get() decorator. This decorator associates a function with a specific URL path ('/') and the HTTP GET operation, indicating that the function should handle GET requests to that path.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: python
CODE:
```
@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Running FastAPI Development Server
DESCRIPTION: This command initiates the FastAPI development server, automatically reloading the application upon code changes in `main.py`. It provides a local URL for accessing the API and displays server logs, indicating successful startup and watch directories.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

  FastAPI   Starting development server 🚀

             Searching for package file structure from directories
             with __init__.py files
             Importing from /home/user/code/awesomeapp

   module   🐍 main.py

     code   Importing the FastAPI app object from the module with
             the following code:

             from main import app

      app   Using import string: main:app

   server   Server started at http://127.0.0.1:8000
   server   Documentation at http://127.0.0.1:8000/docs

      tip   Running in development mode, for production use:
             fastapi run

             Logs:

     INFO   Will watch for changes in these directories:
             ['/home/user/code/awesomeapp']
     INFO   Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C
             to quit)
     INFO   Started reloader process [383138] using WatchFiles
     INFO   Started server process [383153]
     INFO   Waiting for application startup.
     INFO   Application startup complete.
```

----------------------------------------

TITLE: Defining a Path Operation Decorator
DESCRIPTION: This code snippet demonstrates how to define a path operation using the @app.get() decorator, which associates a function with a specific path and HTTP method (GET in this case).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Define Synchronous Path Operation Function
DESCRIPTION: This code snippet defines a synchronous path operation function `def root():` that will be called by FastAPI when it receives a GET request to the `/` URL. It returns a dictionary that FastAPI automatically converts to JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_6

LANGUAGE: python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: Creates a basic FastAPI application with two endpoints: `/` and `/items/{item_id}`. The `/` endpoint returns a simple JSON response, and the `/items/{item_id}` endpoint returns the item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/deployment/docker.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Type Hinting Optional Values (Union with None)
DESCRIPTION: Shows how to specify that a variable or parameter can be of a certain type or `None`. This is done using `Optional[SomeType]` from `typing` (equivalent to `Union[SomeType, None]`) or `SomeType | None` in Python 3.10+.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import Optional

def say_hi(name: Optional[str] = None):
    if name is not None:
        print(f"Hey {name}")
    else:
        print("Hello World")
```

LANGUAGE: Python
CODE:
```
def say_hi(name: str | None = None):
    if name is not None:
        print(f"Hey {name}")
    else:
        print("Hello World")
```

----------------------------------------

TITLE: Creating SQLModel Database Model
DESCRIPTION: Defines a Hero class inheriting from SQLModel, representing a database table. Includes fields for id (primary key), name, secret_name, age, and indexes for optimized querying. The table=True argument specifies that this model represents a database table.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from sqlmodel import Field, SQLModel


class Hero(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = Field(default=None, index=True)
```

----------------------------------------

TITLE: Simple FastAPI App
DESCRIPTION: This is a minimal FastAPI application that defines a single endpoint at the root path ('/'). When accessed, it returns a JSON response containing the message 'Hello World'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Importing FastAPI
DESCRIPTION: This code snippet imports the FastAPI class, which is essential for creating a FastAPI application. It provides the core functionality for defining API endpoints and handling requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Pydantic Model Example (Python 3.9+)
DESCRIPTION: This example demonstrates a Pydantic model definition with type annotations. Pydantic validates data, converts it to the appropriate type, and provides an object with all the data. This snippet is designed for Python 3.9 and above.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/python-types.md#_snippet_21

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial011_py39.py!}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application - Python
DESCRIPTION: Defines a minimal FastAPI application instance and sets up two basic GET endpoints: a root path and an item path that accepts an integer path parameter and an optional string query parameter. Demonstrates using type hints for automatic data validation and documentation. Includes both synchronous (`def`) and asynchronous (`async def`) versions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/he/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Defining Python Types and Pydantic Models
DESCRIPTION: This snippet demonstrates how to use standard Python type hints for function parameters and define a data model using Pydantic's BaseModel. Pydantic models provide data validation and serialization, leveraging Python's type annotations. It shows a simple function with a typed argument and a `User` model with `int`, `str`, and `date` fields.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Defining an Asynchronous Path Operation Function
DESCRIPTION: This code snippet defines an asynchronous path operation function that handles GET requests to the root path ('/'). It returns a dictionary, which FastAPI automatically converts to JSON. This function is decorated with @app.get("/") to associate it with the GET operation on the root path.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It allows you to start developing web APIs with FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install fastapi
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This code snippet demonstrates how to create an asynchronous FastAPI application using `async def` for the route functions. This is useful when dealing with I/O-bound operations. It includes two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint includes a path parameter 'item_id' and an optional query parameter 'q'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies (Shell)
DESCRIPTION: Installs FastAPI along with its 'standard' group of optional dependencies, which include packages like `email-validator` for Pydantic, `httpx`, `jinja2`, `python-multipart` for Starlette, and `uvicorn` for serving the application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_9

LANGUAGE: Shell
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Initializing FastAPI App with Basic Endpoints
DESCRIPTION: This code initializes a FastAPI application and defines two GET endpoints: one for the root path ('/') that returns a simple JSON response, and another for '/items/{item_id}' that accepts an integer path parameter 'item_id' and an optional string query parameter 'q'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: This command starts the FastAPI application using Uvicorn, a fast ASGI server. The `--reload` flag enables automatic server reloading upon code changes, which is highly beneficial during development. The application typically becomes accessible at `http://127.0.0.1:8000`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
uvicorn main:app --reload
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: This command starts the FastAPI application using Uvicorn, a fast ASGI server. `main:app` specifies the `app` instance from `main.py`. The `--reload` flag enables automatic server restart on code changes, which is highly useful for development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
<span style="color: green;">INFO</span>:     Started reloader process [28720]
<span style="color: green;">INFO</span>:     Started server process [28722]
<span style="color: green;">INFO</span>:     Waiting for application startup.
<span style="color: green;">INFO</span>:     Application startup complete.
```

----------------------------------------

TITLE: Defining a GET path operation in FastAPI
DESCRIPTION: This snippet shows how to define a GET path operation in FastAPI using the `@app.get()` decorator. It demonstrates how to create an endpoint that returns a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining Path Operation Decorator with FastAPI
DESCRIPTION: This code snippet demonstrates how to define a path operation decorator using `@app.get("/")` in FastAPI. It associates the function below with handling GET requests to the root path ("/").
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Running FastAPI Dev Server (Console)
DESCRIPTION: This command starts the FastAPI application in development mode using Uvicorn. It automatically detects the FastAPI app object in the specified file and enables auto-reloading on code changes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

 ╭────────── FastAPI CLI - Development mode ───────────╮
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 ╰─────────────────────────────────────────────────────╯

INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2248755] using WatchFiles
INFO:     Started server process [2248757]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Running FastAPI Application in Development Mode
DESCRIPTION: This console command starts the FastAPI development server. The `fastapi dev` command automatically reloads the application on code changes, making it convenient for development. The server typically runs on `http://127.0.0.1:8000`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/websockets.md#_snippet_4

LANGUAGE: console
CODE:
```
$ fastapi dev main.py
```

----------------------------------------

TITLE: Setting a Dependency Override in FastAPI for Testing
DESCRIPTION: This snippet demonstrates how to set a dependency override in a FastAPI application. It assigns a new override function to an original dependency within the `app.dependency_overrides` dictionary, ensuring the override is used instead of the original during tests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/testing-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
app.dependency_overrides[original_dependency_function] = override_dependency_function
```

----------------------------------------

TITLE: Creating a basic FastAPI application
DESCRIPTION: This code creates a basic FastAPI application with two endpoints: `/` which returns a simple greeting, and `/items/{item_id}` which returns the item ID and an optional query parameter. It demonstrates the basic structure of a FastAPI application, including importing FastAPI, creating an app instance, and defining routes using decorators.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating an async FastAPI application
DESCRIPTION: This code defines a basic FastAPI application with two asynchronous endpoints: `/` which returns a simple JSON response, and `/items/{item_id}` which takes an item ID as a path parameter and an optional query parameter `q`.  It uses `async def` to define the functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: str = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Installing FastAPI with Standard Extras (Shell)
DESCRIPTION: Provides the command-line instruction to install the FastAPI library using pip, including the '[standard]' extra which typically pulls in necessary dependencies like an ASGI server (e.g., Uvicorn) for running the application. The command needs to be run in a virtual environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
pip install "fastapi[standard]"

---> 100%
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This code defines a simple FastAPI application with two asynchronous endpoints: `/` which returns a greeting, and `/items/{item_id}` which returns an item ID and an optional query parameter. It demonstrates the basic structure of a FastAPI application, including importing necessary modules, creating an app instance, and defining API endpoints using decorators.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Initializing FastAPI App with Async Endpoints
DESCRIPTION: This code initializes a FastAPI application and defines two GET endpoints using `async def`: one for the root path ('/') that returns a simple JSON response, and another for '/items/{item_id}' that accepts an integer path parameter 'item_id' and an optional string query parameter 'q'. The use of `async def` allows for asynchronous request handling.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: This console command initiates the FastAPI application using fastapi dev, which internally uses Uvicorn. It starts a development server, making the application accessible at http://127.0.0.1:8000. This command is essential for testing and running FastAPI applications locally.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_3

LANGUAGE: Console
CODE:
```
fastapi dev main.py
```

----------------------------------------

TITLE: Sub-dependencies with Yield (Python 3.9+)
DESCRIPTION: Illustrates how to create nested dependencies with `yield`, where one dependency relies on another. FastAPI ensures that the exit code in each dependency with `yield` is executed in the correct order. This example uses Python 3.9+ syntax with Annotated.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_2

LANGUAGE: python
CODE:
```
from typing import Annotated, Generator

from fastapi import Depends, FastAPI

app = FastAPI()


async def dependency_a() -> Generator[str, None, None]:
    yield "dependency_a"


async def dependency_b(dep_a: Annotated[str, Depends(dependency_a)]) -> Generator[str, None, None]:
    yield f"dependency_b with {dep_a}"


async def dependency_c(dep_b: Annotated[str, Depends(dependency_b)]) -> str:
    return f"dependency_c with {dep_b}"


@app.get("/items/")
async def read_items(dep_c: Annotated[str, Depends(dependency_c)]):
    return dep_c
```

----------------------------------------

TITLE: Install Uvicorn with standard extras using pip
DESCRIPTION: This command installs Uvicorn, an ASGI server, using pip. The `[standard]` extra installs commonly used dependencies for Uvicorn.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn - Command Line
DESCRIPTION: This command line snippet demonstrates how to run a FastAPI application using Uvicorn. `uvicorn main:app` specifies the module (`main`) and the FastAPI application instance (`app`), while `--reload` enables auto-reloading on code changes for development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_18

LANGUAGE: Shell
CODE:
```
uvicorn main:app --reload
```

----------------------------------------

TITLE: Creating a Basic FastAPI App
DESCRIPTION: This code defines a basic FastAPI application with two endpoints: a root endpoint that returns a simple JSON response and an items endpoint that accepts an item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Initializing FastAPI App with Async Endpoints
DESCRIPTION: This code initializes a FastAPI application and defines two asynchronous GET endpoints using `async def`.  It demonstrates how to define routes for the root path ('/') and '/items/{item_id}' with a path parameter and an optional query parameter.  It returns JSON responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Declaring Integer Parameter Type in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to declare an integer type for a parameter in FastAPI using standard Python type hints. This single declaration enables automatic validation, data conversion, and documentation for the `item_id` parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_6

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: En Sade FastAPI Uygulaması
DESCRIPTION: Bu kod parçacığı, en basit FastAPI uygulamasını tanımlar. Uygulama, "/" yolunda bir GET isteğine yanıt verir ve bir JSON nesnesi döndürür.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating Basic FastAPI App Python
DESCRIPTION: This Python code defines a basic FastAPI application instance and registers two GET endpoints. The first endpoint returns a simple JSON message, and the second takes a path parameter (`item_id`) and an optional query parameter (`q`), returning them as JSON. It uses standard Python synchronous function definitions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/index.md#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Managing Database Connections with FastAPI `yield` Dependencies
DESCRIPTION: This snippet demonstrates how to manage a database connection using a FastAPI dependency with `yield`. The code before `yield` establishes the connection, which is then provided to path operations. The code in the `finally` block after `yield` ensures the connection is properly closed, even if errors occur during the request processing, making it suitable for resource management.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: Python
CODE:
```
def get_database():
    # Assume connect_to_db() returns a database connection object
    db = connect_to_db()
    try:
        yield db
    finally:
        # This code runs after the response has been delivered
        db.close()
```

----------------------------------------

TITLE: Building a FastAPI Docker Image
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for a FastAPI application. It starts from a Python base image, sets the working directory, copies `requirements.txt`, installs dependencies, copies the application code, and defines the command to run the Uvicorn server.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Implementing OAuth2 Scopes in FastAPI: Global View
DESCRIPTION: This comprehensive snippet demonstrates the full integration of OAuth2 scopes in a FastAPI application. It includes defining the OAuth2 security scheme with specific scopes, handling user authentication, creating JWT tokens that embed user scopes, and protecting API endpoints based on required permissions. It serves as a complete example of a secure API with scope-based authorization.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI, HTTPException, status, Security
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm

# ... (User, Token, authenticate_user, create_access_token, get_current_user models and functions)

oauth2_scheme = OAuth2PasswordBearer(
    tokenUrl="token",
    scopes={
        "me": "Read information about the current user.",
        "items": "Read items."
    }
)

app = FastAPI()

@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]) -> Token:
    user = authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username, "scopes": form_data.scopes}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}


@app.get("/users/me/", response_model=User)
async def read_users_me(current_user: Annotated[User, Security(oauth2_scheme, scopes=["me"])]):
    return current_user


@app.get("/items/", response_model=list[Item])
async def read_items(current_user: Annotated[User, Security(oauth2_scheme, scopes=["items"])]):
    return [
        {"item_id": "Foo", "owner": "Alice"},
        {"item_id": "Bar", "owner": "Bob"}
    ]

# ... (Item model definition)
```

----------------------------------------

TITLE: Creating a Docker Image for FastAPI
DESCRIPTION: This Dockerfile sets up a Python 3.9 environment, copies the requirements file, installs the dependencies, copies the application code, and defines the command to run the FastAPI application using Uvicorn.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

# Wenn Sie hinter einem Proxy wie Nginx oder Traefik sind, fügen Sie --proxy-headers hinzu
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Importing Depends for Dependency Injection (Python)
DESCRIPTION: This snippet shows the essential import statement for `Depends` from the `fastapi` module. `Depends` is a crucial utility in FastAPI's dependency injection system, enabling the declaration and automatic injection of dependencies into path operation functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends, Query
```

----------------------------------------

TITLE: Creating a Dependency Function
DESCRIPTION: Defines a dependency function that accepts query parameters (q, skip, limit) and returns them as a dictionary. This function can be injected into route operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI


async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Type Annotations for Route Parameters in FastAPI
DESCRIPTION: This code snippet shows how to declare the type of a route parameter in a FastAPI function using standard Python type annotations. In this case, `item_id` is declared as an `int`, enabling editor support, error checking, and autocompletion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Declaring Path Parameter
DESCRIPTION: Declares a path parameter `item_id` in a FastAPI route. The value of the `item_id` path parameter is passed to the function as the argument `item_id`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Create FastAPI Instance with Title
DESCRIPTION: Creates an instance of the FastAPI class, which serves as the main entry point for defining the API. This instance is used to register path operations and other configurations. This example shows how to set the title.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
my_awesome_api = FastAPI()
```

----------------------------------------

TITLE: Initializing FastAPI App with Basic Endpoints
DESCRIPTION: This code initializes a FastAPI application and defines two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint accepts an integer path parameter 'item_id' and an optional string query parameter 'q'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Dockerfile for FastAPI Application
DESCRIPTION: Defines a Dockerfile to build a Docker image for a FastAPI application. It starts from the official Python 3.9 image, sets the working directory, copies the requirements file, installs the dependencies, and copies the application code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/deployment/docker.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app
```

----------------------------------------

TITLE: Updating Dependencies for User Authentication
DESCRIPTION: This example demonstrates how to update dependencies to ensure that only active users can access certain endpoints. It uses get_current_user as a dependency for get_current_active_user, which returns an HTTP error if the user is inactive.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/security/simple-oauth2.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def get_current_active_user(current_user: User = Depends(get_current_user)):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user
```

----------------------------------------

TITLE: Pydantic Model Example (Python 3.9+)
DESCRIPTION: This Pydantic model defines a `User` class with attributes `id`, `name`, `signup_ts`, and `friends`. It demonstrates how Pydantic can be used to validate and transform data, providing editor support and automatic error generation. This version uses Python 3.9+ syntax.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_19

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: List[int] = []


external_data = {
    'id': '123',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, '2', b'3'],
}

user = User(**external_data)
print(user.id)
print(user.friends)
```

----------------------------------------

TITLE: Installing FastAPI with standard extras using pip
DESCRIPTION: Illustrates installing FastAPI with the `standard` extras using pip. This command downloads and installs FastAPI and its dependencies into the current environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/virtual-environments.md#_snippet_19

LANGUAGE: console
CODE:
```
// Não execute isso agora, é apenas um exemplo 🤓
$ pip install "fastapi[standard]"
---> 100%
```

----------------------------------------

TITLE: Defining POST Path Operation Decorator - FastAPI Python
DESCRIPTION: This snippet shows the `@app.post()` decorator, used in FastAPI to define a path operation that handles HTTP POST requests. It's typically used for creating new resources or submitting data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_9

LANGUAGE: Python
CODE:
```
@app.post()
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI App
DESCRIPTION: This code defines a FastAPI application with asynchronous endpoints using `async def`. It includes a root endpoint and an items endpoint that accepts an item ID and an optional query parameter. Use this when your code uses `async` / `await`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Pydantic Model Definition (Python 3.8+)
DESCRIPTION: This code snippet demonstrates how to define a Pydantic model with type annotations in Python 3.8 or later. Pydantic is used for data validation and serialization.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/python-types.md#_snippet_24

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial011.py!}
```

----------------------------------------

TITLE: Updating Hero Data with HeroUpdate
DESCRIPTION: Updates hero data using the PATCH method and the HeroUpdate model. It excludes unset values to only update fields provided by the client, leveraging sqlmodel_update for efficient updates.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_17

LANGUAGE: Python
CODE:
```
@app.patch("/heroes/{hero_id}", response_model=HeroPublic)
async def update_hero(hero_id: int, hero: HeroUpdate):
    with Session(engine) as session:
        hero_db = session.get(Hero, hero_id)
        if not hero_db:
            raise HTTPException(status_code=404, detail="Hero not found")

        hero_data = hero.dict(exclude_unset=True)
        hero_db.sqlmodel_update(hero_data)

        session.add(hero_db)
        session.commit()
        session.refresh(hero_db)
        return hero_db
```

----------------------------------------

TITLE: Defining Asynchronous Path Operation Function - FastAPI Python
DESCRIPTION: This snippet highlights the `async def` syntax used to define an asynchronous path operation function in FastAPI. Asynchronous functions are crucial for handling I/O-bound operations efficiently without blocking the event loop.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_16

LANGUAGE: Python
CODE:
```
async def
```

----------------------------------------

TITLE: 비동기 함수 정의하기
DESCRIPTION: `async def`를 사용하여 비동기를 지원하는 함수를 정의합니다. `await` 키워드는 파이썬에게 작업이 완료되기를 기다리라고 지시합니다.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Do some asynchronous stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Install FastAPI using pip
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It downloads and installs FastAPI and its dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install fastapi
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This code demonstrates how to create a simple FastAPI application with two routes: a root route that returns a "Hello World" message and an items route that returns an item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This code defines a simple FastAPI application with two endpoints: `/` which returns a greeting, and `/items/{item_id}` which returns an item ID and an optional query parameter. It demonstrates the basic structure of a FastAPI application, including importing necessary modules, creating an app instance, and defining API endpoints using decorators.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Updating FastAPI app to receive request body
DESCRIPTION: This code modifies the FastAPI application to receive a request body for the `/items/{item_id}` endpoint using Pydantic. It defines an `Item` model with `name`, `price`, and `is_offer` fields, and uses it as a parameter for the `update_item` function. This allows the API to receive and validate data from the client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This code snippet shows how to declare a more complex item model in FastAPI using Python type hints. The `item: Item` declaration allows FastAPI to validate the structure and types of the incoming data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Sharing Dependencies with Annotated
DESCRIPTION: This code demonstrates how to share dependencies using `Annotated` in FastAPI. It defines a common dependency `common_parameters` and then uses it in multiple path operations by storing the `Annotated` value in a variable.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/dependencies/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}


CommonsDep = Annotated[dict, Depends(common_parameters)]


@app.get("/items/")
async def read_items(commons: CommonsDep):
    return commons


@app.get("/users/")
async def read_users(commons: CommonsDep):
    return commons
```

----------------------------------------

TITLE: Annotated Type Hint Example (Python 3.8+)
DESCRIPTION: This example shows how to use `Annotated` to add metadata to type hints in Python 3.8+. The `Annotated` type allows attaching extra metadata to type hints, which can be used by FastAPI to influence application behavior. The first type parameter passed to `Annotated` is the actual type.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/python-types.md#_snippet_24

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial013.py!}
```

----------------------------------------

TITLE: Declaring Annotated Dependency Parameter in FastAPI
DESCRIPTION: This snippet illustrates the declaration of a dependency parameter using Python's `Annotated` type hint combined with FastAPI's `Depends` function. It demonstrates how to specify a dependency, `common_parameters`, and its expected type, `dict`, directly within a function signature for type checking and dependency injection.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
commons: Annotated[dict, Depends(common_parameters)]
```

----------------------------------------

TITLE: Sharing Dependencies with Annotated
DESCRIPTION: This code demonstrates how to share dependencies using `Annotated` in FastAPI. It defines a common dependency `common_parameters` and then uses it in multiple path operations by storing the `Annotated` value in a variable.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/dependencies/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
commons: Annotated[dict, Depends(common_parameters)]
```

----------------------------------------

TITLE: Pydantic Model Definition with Type Annotations (Python 3.8+)
DESCRIPTION: This code snippet demonstrates how to define a Pydantic model with type annotations in Python 3.8+. It defines a class User with attributes id, name, signup_ts, and friends, specifying their types. Pydantic uses these type annotations for data validation and conversion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_21

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: List[int] = []


external_data = {
    'id': '123',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, '2', b'3'],
}

user = User(**external_data)
print(user.id)
print(repr(user.signup_ts))
print(user.friends)
```

----------------------------------------

TITLE: Defining a GET Path Operation Decorator
DESCRIPTION: Defines a path operation decorator using `@app.get("/")` to associate the function below with the root path ("/") and the HTTP GET method. This tells FastAPI that the function should handle requests to that specific path and method.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Running FastAPI Development Server
DESCRIPTION: This command starts the FastAPI development server using `fastapi dev`. It automatically reloads the application on code changes and provides URLs for the application and its interactive documentation. The server runs on `http://127.0.0.1:8000` by default.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: console
CODE:
```
$ fastapi dev main.py
```

----------------------------------------

TITLE: Defining an Asynchronous Path Operation Function
DESCRIPTION: Defines an asynchronous path operation function named `root` that returns a dictionary. This function is decorated with `@app.get("/")`, making it the handler for GET requests to the root path.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining Path Parameter
DESCRIPTION: Defines a path parameter `item_id` in a FastAPI route. The value of the `item_id` parameter will be passed to the function in the argument `item_id`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining a GET Path Operation in FastAPI
DESCRIPTION: This snippet illustrates how to define a GET path operation in FastAPI. It uses the @app.get() decorator to associate the read_url function with the /some/url endpoint, returning a JSON response. This demonstrates FastAPI's server-side API building, mirroring the simplicity of Requests for client-side operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Define Response Model with response_model Parameter - Python
DESCRIPTION: Uses the `response_model` parameter in the path operation decorator to specify the expected response structure, typically a Pydantic model. This is useful when the function's actual return type doesn't exactly match the desired output model but you want FastAPI to handle validation and filtering.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    price: float

app = FastAPI()

@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: str):
    # Function returns a dict, but response_model is Item
    return {"name": "Foo", "description": "A very nice Item", "price": 42}
```

----------------------------------------

TITLE: Defining a Pydantic Model in Python
DESCRIPTION: This code snippet defines a Pydantic model named `User` with type annotations for its attributes: `id` (integer), `name` (string), and `joined` (date). Pydantic models are used in FastAPI for data validation and serialization. The example shows how to define the model and then how to instantiate it using both keyword arguments and a dictionary.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This code demonstrates how to create a simple FastAPI application with two asynchronous routes using `async def`.  It includes a root route that returns a "Hello World" message and an items route that returns an item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: JWT Token Generation in FastAPI
DESCRIPTION: This snippet shows how to generate a JWT token for user authentication in FastAPI. It includes code for creating a secret key, defining the algorithm, setting the expiration time, and generating the access token.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/security/oauth2-jwt.md#_snippet_3

LANGUAGE: python
CODE:
```
SECRET_KEY = "YOUR_SECRET_KEY"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: Union[str, None] = None


def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
```

----------------------------------------

TITLE: Creating a Virtual Environment with venv (Shell)
DESCRIPTION: This command initializes a new Python virtual environment using the built-in `venv` module. It creates a `.venv` directory within the current project, which will contain an isolated Python interpreter and its own set of installed packages. This should be done once per project to ensure dependency isolation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ python -m venv .venv
```

----------------------------------------

TITLE: Defining Async Path Operation with Await - FastAPI Python
DESCRIPTION: This FastAPI path operation function `read_burgers` is defined as `async def`, allowing it to correctly `await` the `get_burgers` asynchronous function. This demonstrates the proper pattern for integrating asynchronous operations within FastAPI route handlers, ensuring that I/O-bound tasks do not block the event loop. The `@app.get('/burgers')` decorator registers this function as an HTTP GET endpoint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/async.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Dockerfile for FastAPI Application
DESCRIPTION: This Dockerfile sets up a Python 3.9 environment, copies the application requirements and source code, installs the dependencies, and defines the command to run the FastAPI application using Uvicorn.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: FastAPI Asynchronous Path Operation
DESCRIPTION: Demonstrates a FastAPI path operation defined as an `async def` function. This allows the endpoint to `await` asynchronous operations, such as fetching burgers, without blocking the server and enabling concurrent handling of multiple requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Creating FastAPI Application Instance
DESCRIPTION: This snippet shows the instantiation of the `FastAPI` class, creating an `app` object. This `app` instance serves as the main point of interaction for defining all API routes, operations, and configurations within the FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Defining a Path Operation Function (Sync)
DESCRIPTION: This code snippet shows an example of a synchronous path operation function that returns a simple JSON response. FastAPI will call this function when it receives a GET request to the root path.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Defining a Synchronous Path Operation Function in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a synchronous path operation function in FastAPI.  Like the async example, this function is associated with a specific path and HTTP method using a decorator. FastAPI calls this function whenever it receives a request to the specified URL with the corresponding HTTP method.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_6

LANGUAGE: Python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining a Synchronous Route Function in FastAPI
DESCRIPTION: Defines a synchronous route function using `def` and the `@app.get` decorator to handle GET requests to the `/` path. Returns a dictionary that FastAPI automatically converts to JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining GET Path Operation Decorator - FastAPI Python
DESCRIPTION: This snippet illustrates the `@app.get()` decorator used in FastAPI to define a path operation for handling HTTP GET requests. It maps the root path '/' to a Python function, indicating that the decorated function will be executed when a GET request is made to this URL.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_8

LANGUAGE: Python
CODE:
```
@app.get("/\")
```

----------------------------------------

TITLE: Running the FastAPI Application with Uvicorn - Console
DESCRIPTION: Command to start the FastAPI application using the Uvicorn ASGI server. It specifies the Python module (`main`) and the application instance (`app`). The `--reload` flag enables hot-reloading for development purposes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/he/docs/index.md#_snippet_3

LANGUAGE: Console
CODE:
```
$ uvicorn main:app --reload
```

----------------------------------------

TITLE: Running FastAPI server with Uvicorn
DESCRIPTION: This command starts the FastAPI application using Uvicorn, a fast ASGI server. The `--reload` flag enables automatic server restart upon code changes, intended for development use.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_4

LANGUAGE: bash
CODE:
```
uvicorn main:app --reload
```

----------------------------------------

TITLE: Get Heroes Endpoint
DESCRIPTION: This code defines a FastAPI endpoint for retrieving a list of `Hero` objects from the database. It uses a `select` statement to query the database, applies pagination using `limit` and `offset`, and returns the list of heroes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_6

LANGUAGE: Python
CODE:
```
@router.get("/heroes/")
async def read_heroes(offset: int = 0, limit: int = 100, session: SessionDep):
    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()
    return heroes
```

----------------------------------------

TITLE: Pydantic Model Definition with Type Annotations (Python 3.10+)
DESCRIPTION: This code snippet demonstrates how to define a Pydantic model with type annotations in Python 3.10+. It defines a class User with attributes id, name, signup_ts, and friends, specifying their types. Pydantic uses these type annotations for data validation and conversion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_19

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: List[int] = []


external_data = {
    'id': '123',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, '2', b'3'],
}

user = User(**external_data)
print(user.id)
print(repr(user.signup_ts))
print(user.friends)
```

----------------------------------------

TITLE: Asynchronous Route Definition in FastAPI
DESCRIPTION: Shows how to define an asynchronous route in FastAPI using `async def`. This allows the route to handle requests concurrently, improving performance. The `await` keyword is used to wait for asynchronous operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/async.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: List Type Annotation (Python 3.9+)
DESCRIPTION: This snippet demonstrates how to define a list with a specific type in Python 3.9 and later using the built-in `list` type and square brackets to specify the internal type.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/python-types.md#_snippet_5

LANGUAGE: Python
CODE:
```
items: list[str] = ["foo", "bar"]
```

----------------------------------------

TITLE: Creating a Basic FastAPI App with async def
DESCRIPTION: This code snippet demonstrates how to define asynchronous API endpoints using `async def` in FastAPI. It defines two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint takes an integer item_id as a path parameter and an optional string q as a query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/it/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from typing import Optional

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Optional[str] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating main.py for OAuth2 Password Flow
DESCRIPTION: This code snippet demonstrates how to create a FastAPI application that implements the OAuth2 password flow for authentication. It includes defining dependencies for username and password, creating a token URL, and securing API endpoints with authentication.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/security/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    # Fake check username/password
    if form_data.username != "string" or form_data.password != "string":
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    # Fake create token
    token = form_data.username + "token"
    return {"access_token": token, "token_type": "bearer"}


@app.get("/items/")
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Defining an HTTP GET Endpoint FastAPI Python
DESCRIPTION: This snippet shows how to define a GET endpoint `/some/url` in a FastAPI application using the `@app.get()` decorator. The function `read_url` handles incoming requests to this path and returns a simple JSON response. It requires a FastAPI application instance (`app`).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Basic FastAPI Application
DESCRIPTION: This Python code defines a simple FastAPI application with two endpoints: one for the root path ("/") that returns a greeting, and another for "/items/{item_id}" that returns the item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Initializing FastAPI App with Basic Endpoints
DESCRIPTION: This code initializes a FastAPI application and defines two GET endpoints: one for the root path ('/') and another for '/items/{item_id}' with a path parameter and an optional query parameter. It uses type hints for parameter validation and returns JSON responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Installing FastAPI with All Dependencies
DESCRIPTION: This command installs the FastAPI framework along with all its optional dependencies, including Uvicorn, which is used to run the application. This comprehensive installation is recommended for a full development environment setup.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/index.md#_snippet_1

LANGUAGE: Shell
CODE:
```
pip install "fastapi[all]"
```

----------------------------------------

TITLE: Simple FastAPI Application
DESCRIPTION: This code snippet demonstrates the simplest FastAPI application. It defines a single endpoint that returns a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Query Parameter with String Type and Default Value
DESCRIPTION: This code snippet demonstrates how to define a query parameter 'q' with a type of Union[str, None] (or str | None in Python 3.10), making it an optional string parameter with a default value of None. FastAPI automatically infers that the parameter is optional due to the default value.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/query-params-str-validations.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = None):
    return {"q": q}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This snippet defines a basic FastAPI application with two GET endpoints: a root endpoint and an item endpoint that accepts a path parameter and an optional query parameter. It demonstrates the fundamental structure of a FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This code demonstrates how to create an asynchronous FastAPI application using `async def` for the route functions. This is useful for handling I/O-bound operations without blocking the main thread.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/hu/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Dockerfile for FastAPI Application
DESCRIPTION: This Dockerfile sets up a Python 3.9 environment, copies the application requirements and source code, installs the dependencies, and defines the command to run the FastAPI application using Uvicorn.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Updating Dependencies for Active Users in FastAPI
DESCRIPTION: This snippet illustrates how to update dependencies to ensure that only active users can access certain endpoints. It creates an additional dependency, `get_current_active_user`, which uses `get_current_user` as a dependency and returns an HTTP error if the user is inactive.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/security/simple-oauth2.md#_snippet_4

LANGUAGE: Python
CODE:
```
WWW-Authenticate
```

----------------------------------------

TITLE: Run FastAPI App with Uvicorn
DESCRIPTION: Runs the FastAPI application using Uvicorn, specifying the main module (`main`) and the app object (`app`). The `--reload` flag enables automatic reloading upon code changes, suitable for development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/index.md#_snippet_4

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload
```

----------------------------------------

TITLE: Create FastAPI Instance
DESCRIPTION: Creates an instance of the FastAPI class, which serves as the main entry point for defining the API. This instance is used to register path operations and other configurations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Einfache FastAPI-Anwendung
DESCRIPTION: Erstellt eine minimale FastAPI-Anwendung, die beim Aufruf des Root-Pfads eine JSON-Response zurückgibt.  Diese Anwendung demonstriert die grundlegende Struktur einer FastAPI-Anwendung und wie ein einfacher Endpunkt definiert wird.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Defining Data Model and PUT Endpoint in FastAPI
DESCRIPTION: This code extends the FastAPI application by defining a Pydantic model `Item` to represent the structure of the data and adds a PUT endpoint at '/items/{item_id}'. The PUT endpoint takes an item_id and an Item object in the request body, returning the item name and ID.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/yo/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Creating a Hero Entry in FastAPI with SQLModel
DESCRIPTION: This FastAPI endpoint handles the creation of a new `Hero` entry. It accepts a `Hero` object from the request body, adds it to the database session, commits the transaction, refreshes the object to include database-generated fields (like `id`), and returns the created hero.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.post("/heroes/", response_model=Hero)
def create_hero(*, session: SessionDep, hero: Hero):
    session.add(hero)
    session.commit()
    session.refresh(hero)
    return hero
```

----------------------------------------

TITLE: Defining FastAPI App with Path/Query/Body (Python)
DESCRIPTION: This Python code defines a FastAPI application with routes for the root path (`/`), an item path (`/items/{item_id}`) with a GET operation accepting path/query parameters, and the same item path with a PUT operation accepting path parameters and a request body defined by a Pydantic `Item` model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Declaring Pydantic Model Request Body (Python)
DESCRIPTION: This snippet shows how to declare a request body parameter `item` using a previously defined Pydantic model `Item` in a FastAPI path operation function. FastAPI uses the model for automatic request body parsing, validation, and documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Pydantic Model Usage
DESCRIPTION: Illustrates how to create instances of a Pydantic model, both directly with keyword arguments and by unpacking a dictionary. It shows how to initialize a Pydantic model from both direct arguments and a dictionary, demonstrating data validation and type coercion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Defining a Data Model Parameter in FastAPI
DESCRIPTION: This example shows how to define a parameter as a data model in FastAPI. The `item: Item` syntax specifies that the `item` parameter should be an instance of the `Item` model. FastAPI will automatically validate the input against the model's schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Defining a Simple FastAPI Application
DESCRIPTION: This code defines a basic FastAPI application with a single GET endpoint at the root path. This structure is typical for the main application file (`main.py`) when separating application logic from test files in a larger project.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/testing.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_main():
    return {"msg": "Hello World"}
```

----------------------------------------

TITLE: Example of Installing FastAPI with Standard Extras
DESCRIPTION: This command provides an example of installing the FastAPI library along with its 'standard' extra dependencies using pip. It illustrates the typical output of a successful package installation, where packages are downloaded from PyPI and extracted into the Python environment, by default the global one.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_20

LANGUAGE: Console
CODE:
```
// Don't run this now, it's just an example 🤓
$ pip install "fastapi[standard]"
---> 100%
```

----------------------------------------

TITLE: Declaring Dependency in Path Operation - Python
DESCRIPTION: Demonstrates how to declare a dependency in a FastAPI path operation function. The `commons` parameter is assigned `Depends(common_parameters)`, indicating that the `common_parameters` function should be called and its return value injected into this parameter when the path is accessed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: dict = Depends(common_parameters)):
    return commons
```

----------------------------------------

TITLE: Async Path Operation Function with Await
DESCRIPTION: This code snippet demonstrates how to define an asynchronous path operation function in FastAPI using `async def`. It uses `await` to call a third-party library, allowing FastAPI to handle other tasks while waiting for the library to complete. This is suitable for I/O-bound operations where the function needs to wait for external resources.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Docker Image with Poetry using Multi-Stage Build
DESCRIPTION: This Dockerfile uses a multi-stage build to create an optimized image for a Python application managed with Poetry. The first stage installs Poetry and exports the dependencies to a requirements.txt file. The second stage copies the requirements and installs the dependencies using pip, then copies the application code and defines the command to run the application using Uvicorn.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/deployment/docker.md#_snippet_17

LANGUAGE: dockerfile
CODE:
```
# (1)
FROM python:3.9 as requirements-stage

# (2)
WORKDIR /tmp

# (3)
RUN pip install poetry

# (4)
COPY ./pyproject.toml ./poetry.lock* /tmp/

# (5)
RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

# (6)
FROM python:3.9

# (7)
WORKDIR /code

# (8)
COPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt

# (9)
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (10)
COPY ./app /code/app

# (11)
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Importing FastAPI
DESCRIPTION: This code snippet demonstrates how to import the FastAPI class, which provides the core functionality for building APIs. FastAPI inherits directly from Starlette, allowing the use of Starlette's features as well.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Configuring Uvicorn Server Startup
DESCRIPTION: This Python line configures and starts the Uvicorn server for a FastAPI application. It specifies the application object (`app`), the host address (`0.0.0.0` for network accessibility), and the port (`8000`), making the API accessible for development and testing.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/debugging.md#_snippet_3

LANGUAGE: Python
CODE:
```
uvicorn.run(app, host="0.0.0.0", port=8000)
```

----------------------------------------

TITLE: Simple Path Operation in FastAPI
DESCRIPTION: This snippet creates a basic path operation in FastAPI to test the custom documentation setup. It defines a GET endpoint at the root path that returns a simple message.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/how-to/custom-docs-ui-assets.md#_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/")
async def read_main():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application in Python
DESCRIPTION: This snippet initializes a FastAPI application and defines a root endpoint (`/`) that returns a JSON response. It demonstrates the minimal code required to create a functional web API with FastAPI, serving a simple 'Hello World' message.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Implementing Partial Updates with PATCH (FastAPI, Python)
DESCRIPTION: This snippet outlines the standard pattern for handling partial updates with FastAPI's PATCH method and Pydantic models. It fetches the existing item, creates an update dictionary from the incoming model excluding default/unset values (`exclude_unset=True`), updates the existing model with the new data (`copy(update=...)`), and finally prepares the result using `jsonable_encoder` for persistence.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-updates.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi.encoders import jsonable_encoder
from fastapi import APIRouter, Body
from pydantic import BaseModel

router = APIRouter()

class Item(BaseModel):
    name: str | None = None
    description: str | None = None
    price: float | None = None
    tax: float | None = None

# Simulate storage
stored_items = {
    "foo": {"name": "Foo", "price": 32.0, "tax": 20.5},
    "bar": {"name": "Bar", "price": 6.0, "tax": 10.5}
}

# Assume item_id and item: Item are parameters of a PATCH route
# This function simulates the core logic referencing lines 30-37
def update_item_patch(item_id: str, item: Item = Body(...)):
    # Retrieve existing item (simulated)
    if item_id not in stored_items:
         # Handle item not found (e.g., raise HTTPException)
         pass # Placeholder for error handling

    stored_item_data = stored_items[item_id]
    stored_item_model = Item(**stored_item_data)

    # Create update dictionary from incoming model, excluding unset fields
    # This corresponds to the concept mentioned for hl[34]
    # Only fields that were explicitly sent in the request body are included
    update_data = item.model_dump(exclude_unset=True)

    # Update the stored model with the new data from the update dictionary
    # This corresponds to the concept mentioned for hl[35]
    # model_copy creates a new model instance with updated data
    updated_item = stored_item_model.model_copy(update=update_data)

    # Prepare the updated item for storage (e.g., database)
    # This corresponds to part of the overall process hl[30:37]
    # jsonable_encoder converts the Pydantic model into a dict with JSON-compatible types
    item_to_store = jsonable_encoder(updated_item)

    # Simulate saving the updated item data
    stored_items[item_id] = item_to_store

    # Return the updated item (optional, but common)
    return item_to_store

```

----------------------------------------

TITLE: Defining Request Body with Pydantic Model
DESCRIPTION: This code defines a Pydantic model `Item` to represent the structure of the request body for the `/items/{item_id}` PUT endpoint. It includes fields for 'name' (string), 'price' (float), and an optional 'is_offer' (boolean). The `update_item` function then uses this model to receive and process the request body, returning a JSON response containing the item's name and ID.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Creating a Dockerfile with uvicorn-gunicorn-fastapi
DESCRIPTION: This Dockerfile sets up a FastAPI application using the `tiangolo/uvicorn-gunicorn-fastapi` base image. It copies the requirements file, installs dependencies, and then copies the application code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/deployment/docker.md#_snippet_15

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app
```

----------------------------------------

TITLE: Implementing Partial Data Update with FastAPI PATCH and Pydantic (Python)
DESCRIPTION: This snippet illustrates the core process for performing a partial update using the HTTP PATCH method in FastAPI. It involves retrieving the current item data, creating a Pydantic model instance from it, generating an update dictionary from the input model using `model_dump(exclude_unset=True)` to include only fields explicitly set by the user, creating an updated model instance by copying the stored model and applying the update dictionary with `model_copy(update=...)`, and finally encoding the updated model using `jsonable_encoder` for storage.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-updates.md#_snippet_1

LANGUAGE: Python
CODE:
```
stored_item_data = items.get(item_id)
if stored_item_data is None:
    raise HTTPException(status_code=404, detail="Item not found")

stored_item_model = Item(**stored_item_data)
update_data = item.model_dump(exclude_unset=True)
updated_item = stored_item_model.model_copy(update=update_data)
items[item_id] = jsonable_encoder(updated_item)
return updated_item
```

----------------------------------------

TITLE: Running FastAPI Development Server
DESCRIPTION: This console command starts the FastAPI development server using `fastapi dev main.py`. It automatically detects the FastAPI app and enables auto-reload for local development, serving the application at `http://127.0.0.1:8000`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_3

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

 ╭────────── FastAPI CLI - Development mode ───────────╮
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  API docs: http://127.0.0.1:8000/docs               │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 ╰─────────────────────────────────────────────────────╯

INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2248755] using WatchFiles
INFO:     Started server process [2248757]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This code snippet demonstrates how to create a basic FastAPI application with two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint includes a path parameter 'item_id' and an optional query parameter 'q'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Declaring a Model Parameter in FastAPI
DESCRIPTION: This code snippet shows how to declare a parameter as a Pydantic model in a FastAPI endpoint. The `item` parameter is declared as an instance of the `Item` model, allowing for complex data validation and conversion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Defining Asynchronous Routes in FastAPI
DESCRIPTION: This code demonstrates how to define asynchronous routes in FastAPI using `async def`. It's suitable for I/O-bound operations and improves performance. The example includes asynchronous versions of the root path ('/') and item retrieval ('/items/{item_id}') routes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/az/docs/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Create Docker Image for FastAPI
DESCRIPTION: This Dockerfile sets up a Python 3.9 environment, installs dependencies from requirements.txt, copies the application code, and defines the command to run the FastAPI application using Uvicorn. It also includes an optional configuration for proxy headers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

# Если используете прокси-сервер, такой как Nginx или Traefik, добавьте --proxy-headers
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Starting FastAPI with Multiple Workers using `uvicorn` command
DESCRIPTION: This command directly starts the FastAPI application `main:app` using Uvicorn, binding it to `0.0.0.0:8080` and configuring it to run with 4 worker processes. It offers granular control over Uvicorn's server parameters, suitable for more specific deployment scenarios.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/server-workers.md#_snippet_1

LANGUAGE: Shell
CODE:
```
uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
```

----------------------------------------

TITLE: Define Response Model with Python Return Type - Python
DESCRIPTION: Defines a Pydantic model for the response data and uses a Python type hint for the function's return value to indicate the expected response structure. FastAPI uses this annotation for validation, documentation, and filtering.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    price: float

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: str) -> Item:
    return {"name": "Foo", "price": 42}
```

----------------------------------------

TITLE: Database Dependency with yield in FastAPI
DESCRIPTION: Creates a database session and closes it after the request is processed. The code before the `yield` statement is executed before creating a response, and the value generated is injected into path operations and other dependencies. The code after the `yield` statement is executed after creating the response but before sending it.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: python
CODE:
```
async def get_db():
    db = DBSession()
    try:
        yield db
    finally:
        db.close()
```

----------------------------------------

TITLE: Initializing FastAPI instance
DESCRIPTION: This code snippet shows how to import the FastAPI class and create an instance of it, which is the main entry point for building APIs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()
```

----------------------------------------

TITLE: Defining a Path Operation Decorator
DESCRIPTION: This code snippet defines a path operation using the `@app.get("/")` decorator. This decorator tells FastAPI that the function immediately following it is responsible for handling GET requests to the root path ('/').
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: JWT Token Authentication in FastAPI
DESCRIPTION: This snippet demonstrates how to authenticate a user using a JWT token in FastAPI. It includes code for decoding the token, verifying it, and retrieving the current user.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/security/oauth2-jwt.md#_snippet_4

LANGUAGE: python
CODE:
```
async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = get_user(username=token_data.username)
    if user is None:
        raise credentials_exception
    return user
```

----------------------------------------

TITLE: Defining a Path Operation in FastAPI
DESCRIPTION: This snippet shows how to define a path operation in FastAPI that handles a GET request to a specific URL. It demonstrates the use of the `@app.get` decorator and a function that returns a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Define Separate Input and Output Models
DESCRIPTION: Defines separate Pydantic models for input (`UserIn`) and output (`UserOut`), where the output model excludes the password field to prevent it from being exposed in the API response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel, EmailStr


class UserIn(BaseModel):
    email: EmailStr
    password: str
    age: Optional[int] = None


class UserOut(BaseModel):
    email: EmailStr
    age: Optional[int] = None
```

----------------------------------------

TITLE: Running FastAPI Application
DESCRIPTION: This command demonstrates how to start the FastAPI application using `fastapi dev`. This development server automatically reloads on code changes and is suitable for local development and testing. The output confirms that the Uvicorn server is running and accessible at the specified local address.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/first-steps.md#_snippet_2

LANGUAGE: Console
CODE:
```
$ fastapi dev main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies
DESCRIPTION: This command installs the FastAPI framework along with its recommended standard dependencies. These dependencies include essential libraries like Uvicorn for serving the application and Pydantic for data validation and serialization, which are crucial for developing FastAPI applications.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Return Data from Path Operation
DESCRIPTION: This code snippet demonstrates returning a dictionary from a path operation function. FastAPI automatically converts the returned dictionary into a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_7

LANGUAGE: python
CODE:
```
return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining FastAPI Endpoints and Pydantic Model - Python
DESCRIPTION: Defines a basic FastAPI application, including a Pydantic model `Item` for request body validation and serialization. It sets up three endpoints: a root GET, a GET for items with path and query parameters, and a PUT for items demonstrating how to accept a request body using the defined Pydantic model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_5

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Importing FastAPI Class (Python)
DESCRIPTION: This snippet demonstrates how to import the `FastAPI` class from the `fastapi` library, which is the foundational step for creating a new FastAPI application. It is a prerequisite for defining routes, middleware, and other application components.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/fastapi.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Importing FastAPI Class
DESCRIPTION: This snippet demonstrates how to import the `FastAPI` class from the `fastapi` library. This class is the core component for building a FastAPI application, providing all the necessary functionality to define API routes and handle requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Defining a Pydantic Data Model in Python
DESCRIPTION: This code defines a Pydantic `Item` model inheriting from `BaseModel`. It specifies data types for `name`, `price`, and optional `description` and `tax` fields, which FastAPI uses for automatic data validation and serialization of request bodies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_1

LANGUAGE: Python
CODE:
```
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

----------------------------------------

TITLE: Running FastAPI Development Server
DESCRIPTION: This command starts the FastAPI application in development mode using `fastapi dev`. It automatically reloads the server on code changes and displays the local URL where the application is accessible. This is useful for rapid development and testing.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_19

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Importing the Depends Function - Python
DESCRIPTION: Imports the `Depends` object from the `fastapi` module. This object is used to declare dependencies in FastAPI path operation functions, enabling dependency injection.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends
```

----------------------------------------

TITLE: Using OAuth2PasswordBearer as a Dependency
DESCRIPTION: Demonstrates how to use the oauth2_scheme instance as a dependency in a FastAPI path operation. The dependency will provide a string that is assigned to the token parameter of the path operation function. FastAPI will use this dependency to define a security scheme in the OpenAPI schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/security/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Declaring response_model for UserOut
DESCRIPTION: This snippet shows how the response_model parameter is used to specify the UserOut model, which does not include the password field. FastAPI uses this model to filter the data returned in the API response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#_snippet_6

LANGUAGE: python
CODE:
```
from typing import Optional

from fastapi import FastAPI
from pydantic import BaseModel, EmailStr

app = FastAPI()


class UserIn(BaseModel):
    email: EmailStr
    password: str
    full_name: Optional[str] = None
    disabled: Optional[bool] = None


class UserOut(BaseModel):
    email: EmailStr
    full_name: Optional[str] = None
    disabled: Optional[bool] = None


@app.post("/users/", response_model=UserOut)
async def create_user(user: UserIn):
    return user
```

----------------------------------------

TITLE: Using OAuth2PasswordBearer as a Dependency in FastAPI
DESCRIPTION: Integrates the `oauth2_scheme` as a dependency in a FastAPI path operation. This automatically handles the extraction and validation of the Bearer token from the `Authorization` header, providing the token string to the function parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

@app.get("/items/")
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Path Operation Returning UserIn
DESCRIPTION: This snippet shows the path operation function returning the UserIn model, which includes the password. However, because the response_model is set to UserOut, FastAPI will filter out the password field from the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#_snippet_5

LANGUAGE: python
CODE:
```
from typing import Optional

from fastapi import FastAPI
from pydantic import BaseModel, EmailStr

app = FastAPI()


class UserIn(BaseModel):
    email: EmailStr
    password: str
    full_name: Optional[str] = None
    disabled: Optional[bool] = None


class UserOut(BaseModel):
    email: EmailStr
    full_name: Optional[str] = None
    disabled: Optional[bool] = None


@app.post("/users/", response_model=UserOut)
async def create_user(user: UserIn):
    return user
```

----------------------------------------

TITLE: Declaring Synchronous Path Operation Function (FastAPI, Python)
DESCRIPTION: This snippet illustrates how to define a FastAPI path operation function using a standard `def` when interacting with a synchronous (blocking) third-party library, such as most traditional database clients. FastAPI automatically runs these `def` functions in a separate thread pool, preventing them from blocking the main asynchronous event loop and maintaining responsiveness.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get('/')
def results():
    results = some_library()
    return results
```

----------------------------------------

TITLE: Type Hinting Path Parameter
DESCRIPTION: Defines a path parameter `item_id` with a type hint of `int`. FastAPI will automatically convert the path parameter to an integer and validate that it is a valid integer.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare an integer parameter in a FastAPI application using Python type hints. FastAPI uses this type information for automatic data validation and conversion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Path Parameter with Type
DESCRIPTION: Defines a path parameter `item_id` with the type `int`. FastAPI automatically parses the incoming string from the HTTP request into a Python integer.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Uvicorn Command with Proxy Headers in Dockerfile
DESCRIPTION: This `CMD` instruction configures Uvicorn to run the FastAPI application, enabling `--proxy-headers`. This option is crucial when the application is deployed behind a proxy like Nginx or Traefik, allowing Uvicorn to correctly interpret X-Forwarded-For and other proxy-related headers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_6

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Dockerfile for FastAPI application
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for the FastAPI application. It starts from a Python 3.9 base image, sets the working directory, copies the requirements file, installs the dependencies, and copies the application code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/deployment/docker.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI with Python
DESCRIPTION: This code snippet demonstrates how to declare an integer parameter in FastAPI using standard Python type annotations. The `item_id: int` syntax tells FastAPI to expect an integer value for the `item_id` parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Declaring Query Parameters with Defaults - FastAPI Python
DESCRIPTION: This snippet demonstrates how to declare query parameters in FastAPI with default integer values. Parameters like `skip` and `limit` are automatically parsed from the URL query string and converted to their specified Python types, providing data validation and automatic documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/")
async def read_items(skip: int = 0, limit: int = 10):
    return {"skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Importing Depends
DESCRIPTION: This code snippet shows how to import the `Depends` class from the `fastapi` module. `Depends` is used to declare dependencies in path operation functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
```

----------------------------------------

TITLE: Using Annotated with Depends for FastAPI Dependencies
DESCRIPTION: This code demonstrates how to use `Annotated` with `Depends` to define and reuse dependencies in FastAPI. By storing the `Annotated` value in a variable, you can avoid code repetition and maintain type information for better code completion and error checking.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Annotated, Optional

from fastapi import Depends, FastAPI, Query


async def common_parameters(q: Optional[str] = Query(None, max_length=50)):
    return {"q": q}


app = FastAPI()


@app.get("/items/")
async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons


@app.get("/items2/")
async def read_items2(commons: Annotated[dict, Depends(common_parameters)]):
    return commons
```

----------------------------------------

TITLE: Install packages from requirements.txt using pip
DESCRIPTION: This command installs packages from a `requirements.txt` file using pip. The `-r` flag specifies the file containing the list of packages to install.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/virtual-environments.md#_snippet_12

LANGUAGE: Shell
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Optional Type Declaration in Python
DESCRIPTION: Demonstrates how to declare a variable that can be either a string or None using the Optional type from the typing module.  This is applicable for Python 3.6 and later.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_13

LANGUAGE: Python
CODE:
```
from typing import Optional

name: Optional[str] = None
```

----------------------------------------

TITLE: Returning Data from Path Operation Function
DESCRIPTION: This code snippet illustrates how to return data from a path operation function in FastAPI.  The returned data, in this case a dictionary, is automatically converted to JSON in the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_7

LANGUAGE: Python
CODE:
```
return {"message": "Hello World"}
```

----------------------------------------

TITLE: Define Path Operation Decorator
DESCRIPTION: Defines a path operation using the `@app.get()` decorator, which associates a function with a specific HTTP method (GET) and path (`/`). This decorator tells FastAPI to handle requests to the specified path with the decorated function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Defining a GET operation in FastAPI
DESCRIPTION: This snippet shows how to define a GET operation (route) in FastAPI using the `@app.get()` decorator. It demonstrates the similarity in syntax to Requests, making it easy to understand and use.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining an Asynchronous Route Function in FastAPI
DESCRIPTION: Defines an asynchronous route function using `async def` and the `@app.get` decorator to handle GET requests to the `/` path. Returns a dictionary that FastAPI automatically converts to JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Returning a Dictionary from a FastAPI Route
DESCRIPTION: Demonstrates returning a dictionary from a FastAPI route function. FastAPI automatically converts this dictionary into a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_6

LANGUAGE: Python
CODE:
```
return {"message": "Hello World"}
```

----------------------------------------

TITLE: Simple FastAPI Application
DESCRIPTION: This code snippet demonstrates the simplest possible FastAPI application. It defines a single endpoint that returns a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This Python code defines a simple FastAPI application with two routes: a root route ('/') that returns a greeting and an '/items/{item_id}' route that returns an item ID and an optional query parameter. It showcases the basic structure of a FastAPI application using synchronous functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Defining a Path Operation in FastAPI
DESCRIPTION: This snippet shows how to define a simple API endpoint (path operation) in FastAPI using the @app.get decorator. It demonstrates the basic structure for handling GET requests at a specific URL and returning a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World!"}
```

----------------------------------------

TITLE: Abhängigkeit mit yield und HTTPException
DESCRIPTION: This code snippet demonstrates how to use `yield` in a dependency to manage resources and handle exceptions, specifically `HTTPException`. It shows how to raise an `HTTPException` after the `yield` statement.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def dependency_a():
    try:
        print("Bevor yield")
        yield
        print("Nach yield")
    except Exception:
        print("Innerhalb der Abhängigkeit, die die Exception behandelt")
        raise HTTPException(status_code=400, detail="Fehler in der Abhängigkeit")


async def dependency_b(dependency_a):
    print("Dependency B wurde ausgeführt")


@app.get("/items/", dependencies=[Depends(dependency_b)])
async def read_items():
    return {"Nach der Abhängigkeit": True}
```

----------------------------------------

TITLE: Password Hashing and JWT Token Generation
DESCRIPTION: This snippet demonstrates password hashing using PassLib and JWT token generation using the `jose` library. It includes functions for hashing passwords, verifying passwords, generating access tokens, and defining a Pydantic model for token responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#_snippet_2

LANGUAGE: Python
CODE:
```
from datetime import datetime, timedelta
from typing import Optional

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: Optional[str] = None


SECRET_KEY = "YOUR_SECRET_KEY"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30


pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)


def get_password_hash(password):
    return pwd_context.hash(password)


def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
```

----------------------------------------

TITLE: Defining Path Parameter
DESCRIPTION: Defines a path parameter `item_id` in a FastAPI route. The value of the path parameter is passed to the function as an argument.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining Multiple Nested Pydantic Models (Python)
DESCRIPTION: Defines a hierarchy of Pydantic models (`Image`, `Item`, `Offer`) where models contain lists of other models. This demonstrates how FastAPI/Pydantic handles validation and documentation for complex, multi-level nested data structures.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_10

LANGUAGE: Python
CODE:
```
class Image(BaseModel):
    url: HttpUrl
    name: str | None = None

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: set[str] = set()
    images: list[Image] | None = None

class Offer(BaseModel):
    name: str
    description: str | None = None
    price: float
    items: list[Item]
```

----------------------------------------

TITLE: Token Endpoint Update
DESCRIPTION: This snippet updates the `/token` route operation to generate and return a real JWT access token. It creates a `timedelta` for the token's expiration time and includes the username in the token's subject.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/security/oauth2-jwt.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):
    user = await authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user["username"]},
        expires_delta=access_token_expires,
    )
    return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: Initializing FastAPI App and Defining Basic Routes
DESCRIPTION: This code initializes a FastAPI application and defines two GET routes: one for the root path ('/') and another for retrieving items by ID ('/items/{item_id}'). It demonstrates how to use type hints for parameter validation and how to return JSON responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/az/docs/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare an integer parameter in a FastAPI application. FastAPI uses this type declaration for validation and automatic API documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/az/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Response Model Declaration with Return Type Annotation
DESCRIPTION: This code snippet demonstrates how to declare the response type of a path operation by annotating the return type of the function. FastAPI uses this type to validate the data, generate a JSON schema, and limit the output data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int):
    return {"name": "Foo", "description": "", "price": 50.2, "tax": 20.3}


@app.post("/items/", response_model=Item)
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Defining a Data Model and PUT Route with Pydantic
DESCRIPTION: This code extends the FastAPI application to include a PUT route ('/items/{item_id}') that accepts a JSON body. It defines a Pydantic model (`Item`) to represent the expected data structure, enabling automatic data validation and serialization. The `update_item` function demonstrates how to access the validated data from the request body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/az/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare an integer parameter in a FastAPI application using Python type hints. The `item_id: int` syntax specifies that the `item_id` parameter should be an integer.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Define Synchronous Path Function
DESCRIPTION: Defines a synchronous path function that will be called when a request is made to the associated path. This function returns a dictionary, which FastAPI automatically converts to JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get("/")
def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Declaring Async Path Operation Function (FastAPI, Python)
DESCRIPTION: This example shows how to define a FastAPI path operation function using `async def` when it needs to interact with an asynchronous third-party library via `await`. Using `async def` allows FastAPI to optimize performance by releasing the event loop while waiting for I/O-bound operations to complete, improving concurrency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: FastAPI OAuth2 Password Flow Initial Setup
DESCRIPTION: This complete example demonstrates the foundational setup for implementing OAuth2 password flow in FastAPI. It defines the OAuth2PasswordBearer scheme with a tokenUrl and protects a path operation, automatically generating OpenAPI documentation for authentication. Requires python-multipart for form data parsing.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

@app.get("/users/me")
async def read_users_me(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Initializing a Basic FastAPI Application
DESCRIPTION: This code initializes a basic FastAPI application with two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint takes an integer item_id and an optional string query parameter q.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Function with Type Hints
DESCRIPTION: This example demonstrates how to add type hints to function parameters, specifying that both `first_name` and `last_name` should be strings. This enables better code completion and error checking in editors.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name
```

----------------------------------------

TITLE: Declaring Variables with Type Hints in Python
DESCRIPTION: Demonstrates how to declare a variable with a type hint in Python using standard Python 3.6+ syntax. This allows for editor support and type checking.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fa/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str): 
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Combining Body, Path, and Query Parameters in FastAPI
DESCRIPTION: This snippet demonstrates a FastAPI path operation that simultaneously handles a request body (`item`), a path parameter (`item_id`), and an optional query parameter (`q`). FastAPI automatically parses and validates each parameter from its respective source (body, URL path, or query string).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

@app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item, q: str | None = None):
    results = {"item_id": item_id, **item.dict()}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Pydantic Model Definition (Python 3.8+)
DESCRIPTION: This code defines a Pydantic model named `User` with attributes `id`, `name`, `signup_ts`, and `friends`. It demonstrates how Pydantic validates and converts data to the specified types. The `signup_ts` field is optional and can be `None`. The `friends` field is a list of `int`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/python-types.md#_snippet_21

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: List[int] = []


external_data = {
    'id': 123,
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, '2', b'3'],
}

user = User(**external_data)
print(user.id)
print(user.friends)
```

----------------------------------------

TITLE: Declaring Request Body Parameter in FastAPI Path Operation - Python
DESCRIPTION: This snippet shows how to declare a request body parameter in a FastAPI path operation function. By type-hinting the parameter `item` with the `Item` Pydantic model, FastAPI automatically handles JSON parsing, validation, and provides the structured data to the function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.post("/items/")
async def create_item(item: Item):
```

----------------------------------------

TITLE: Handling Request Body with Pydantic in FastAPI
DESCRIPTION: This snippet demonstrates how to define a request body using a Pydantic `BaseModel` and handle `PUT` requests in FastAPI. It allows receiving structured data in the request body and accessing it within the endpoint function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Creating an async FastAPI application
DESCRIPTION: This code creates a basic FastAPI application with asynchronous route handlers using `async def`. The endpoints `/` and `/items/{item_id}` are defined as asynchronous functions.  This is useful for I/O-bound operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Declaring an Item Model
DESCRIPTION: This code snippet shows how to declare a more complex `Item` model using Python's type hinting. This allows FastAPI to perform data validation, conversion, and automatic API documentation generation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Installing Uvicorn ASGI server
DESCRIPTION: This snippet shows how to install Uvicorn, an ASGI server, which is required for running FastAPI applications in production.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"

---> 100%
```

----------------------------------------

TITLE: Install Uvicorn
DESCRIPTION: Installs Uvicorn, an ASGI server, which is required for running FastAPI applications in a production environment. The `[standard]` extra installs recommended dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Installing FastAPI
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It fetches and installs the latest version of FastAPI and its dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
pip install fastapi
```

----------------------------------------

TITLE: Using `Annotated` for Metadata (Python 3.8+)
DESCRIPTION: Illustrates how to use `Annotated` from `typing_extensions` in Python 3.8+ to attach metadata to type hints. This allows tools like FastAPI to interpret additional information beyond the basic type, enhancing API behavior definition through metadata like Pydantic's `Field`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_31

LANGUAGE: Python
CODE:
```
from typing_extensions import Annotated
from pydantic import BaseModel, Field

class AnotherModel(BaseModel):
    description: Annotated[str, Field(min_length=10)]
```

----------------------------------------

TITLE: Including Routers in Main App - Python
DESCRIPTION: Demonstrates how to include the 'APIRouter' instances from the imported router modules ('users.router', 'items.router') into the main 'FastAPI' application using the 'app.include_router()' method. This integrates the routes defined in the separate router files into the main application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends
from app.dependencies import get_token_header

from app.routers import items, users
from app.internal import admin

app = FastAPI()

app.include_router(users.router)
app.include_router(items.router)

app.include_router(
    admin.router,
    prefix="/admin",
    tags=["admin"],
    dependencies=[Depends(get_token_header)],
    responses={418: {"description": "I'm a teapot"}},
)

@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Defining Pydantic v2 BaseSettings Class
DESCRIPTION: This Python snippet defines a `Settings` class inheriting from `BaseSettings` (from `pydantic_settings`). It declares application configuration attributes with type annotations and default values, enabling Pydantic to automatically load and validate settings from environment variables.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_2

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50
```

----------------------------------------

TITLE: Response Model with Return Type Annotation
DESCRIPTION: This example demonstrates how to define a response model using the return type annotation in a FastAPI path operation function. FastAPI uses this type to validate and filter the response data, and to generate a JSON schema for the API documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int):
    return {"name": "Foo", "description": "", "price": 50.2, "tax": 20.3}
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This Python code defines a simple FastAPI application with two asynchronous endpoints using `async def`: a root endpoint ('/') that returns a greeting and an endpoint ('/items/{item_id}') that returns an item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Response Model with `response_model` Parameter - Python
DESCRIPTION: This code snippet demonstrates the usage of the `response_model` parameter in the route decorator. This is useful when you want to return data that doesn't exactly match the declared type, such as returning a dictionary but declaring it as a Pydantic model. The `response_model` parameter takes precedence over the return type annotation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.post("/items/", response_model=Item)
async def create_item(item: Item):
    return item


@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int):
    return {"name": "Foo", "description": "", "price": 50.2, "tax": 20.3}


@app.put("/items/{item_id}", response_model=Item)
async def update_item(item_id: int):
    return {"name": "Foo", "description": "", "price": 50.2, "tax": 20.3}
```

----------------------------------------

TITLE: Declaring a Dependency in a Path Operation Function
DESCRIPTION: This code demonstrates how to use the `Depends` function to inject a dependency into a path operation function. The `common_parameters` function is passed to `Depends`, and FastAPI will automatically call this function and pass its return value as the `commons` parameter to the path operation function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: dict = Depends(common_parameters)):
    return commons
```

LANGUAGE: Python
CODE:
```
@app.get("/users/")
async def read_users(commons: dict = Depends(common_parameters)):
    return commons
```

----------------------------------------

TITLE: Defining an Asynchronous Path Operation Function
DESCRIPTION: This code snippet defines an asynchronous path operation function that returns a dictionary. This function is called when a GET request is made to the root path ('/').
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Run Docker Container
DESCRIPTION: Command to run a Docker container based on the built image. The -d flag runs the container in detached mode, --name assigns a name to the container, and -p maps port 80 on the host to port 80 on the container.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_14

LANGUAGE: console
CODE:
```
$ docker run -d --name mycontainer -p 80:80 myimage
```

----------------------------------------

TITLE: Database Dependency with yield
DESCRIPTION: This code snippet demonstrates how to create a database session as a dependency using `yield`. The session is created before the request and closed after the response is sent. The session object is injected into the path operation function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: python
CODE:
```
async def get_db():
    db = DBSession()
    try:
        yield db
    finally:
        db.close()
```

----------------------------------------

TITLE: Creating FastAPI Endpoints with Async Functions
DESCRIPTION: This snippet shows how to define FastAPI endpoints using `async def` for asynchronous operations. It's suitable for I/O-bound tasks and integrates with Python's `async`/`await` syntax.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Use Output Model with response_model Parameter - Python
DESCRIPTION: Applies the `UserOut` model (which excludes sensitive data) using the `response_model` parameter in the path operation decorator. FastAPI uses this model to filter the data returned by the function before sending the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel, EmailStr

class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None

class UserOut(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None

app = FastAPI()

@app.post("/user/", response_model=UserOut)
async def create_user(user_in: UserIn):
    # ... create user in DB etc.
    return user_in
```

----------------------------------------

TITLE: Asynchronous Route Operation Function
DESCRIPTION: Defines an asynchronous route operation function using `async def` and `await` to handle asynchronous operations like fetching data. This ensures the server doesn't block while waiting for the operation to complete.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/async.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Installing Pytest for Test Execution
DESCRIPTION: This command installs the `pytest` testing framework using pip. `pytest` is essential for automatically discovering and running tests written for the application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/testing.md#_snippet_4

LANGUAGE: console
CODE:
```
$ pip install pytest
```

----------------------------------------

TITLE: Deleting a Single Hero
DESCRIPTION: Demonstrates deleting a single `hero`. The hero is retrieved from the database, and if found, it is deleted. A 404 error is raised if the hero is not found.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_19

LANGUAGE: Python
CODE:
```
@app.delete("/heroes/{hero_id}")
async def delete_hero(*, session: AsyncSession, hero_id: int):
    hero = await session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    await session.delete(hero)
    await session.commit()
    return {"ok": True}
```

----------------------------------------

TITLE: Defining Path Parameter
DESCRIPTION: Defines a path parameter `item_id` in a FastAPI route. The value of the `item_id` path parameter will be passed to the function as the `item_id` argument.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining a GET path operation in FastAPI
DESCRIPTION: This code snippet shows how to define a GET path operation in FastAPI. It uses the `@app.get()` decorator to associate the function `read_url` with the `/some/url` endpoint, returning a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Pydantic v1 Settings Class
DESCRIPTION: Define a Pydantic settings class inheriting from BaseSettings (Pydantic v1). This class defines the application settings, including data types and default values. Pydantic will automatically read these settings from environment variables.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/settings.md#_snippet_3

LANGUAGE: python
CODE:
```
from typing import Optional

from pydantic import BaseSettings, Field


class Settings(BaseSettings):
    app_name: str = Field("Awesome API", env="APP_NAME")
    admin_email: Optional[str] = Field(None, env="ADMIN_EMAIL")
    items_per_user: int = Field(50, env="ITEMS_PER_USER")

    class Config:
        env_file = ".env"

```

----------------------------------------

TITLE: Defining Basic Pydantic Model in Python
DESCRIPTION: Defines a Pydantic model named `Image` to represent structured data. It includes fields for `url` (a required string) and `name` (an optional string), providing data validation and structure definition.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_6

LANGUAGE: Python
CODE:
```
class Image(BaseModel):
    url: str
    name: str | None = None
```

----------------------------------------

TITLE: Defining HeroCreate Data Model in Python
DESCRIPTION: This snippet defines the `HeroCreate` Pydantic model, used for validating data received when creating a new hero. It includes the `secret_name` field, which is accepted during creation but not exposed in public responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_13

LANGUAGE: Python
CODE:
```
from typing import Optional
from sqlmodel import Field, SQLModel

class HeroBase(SQLModel):
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = Field(default=None, index=True)

class HeroCreate(HeroBase):
    secret_name: str
```

----------------------------------------

TITLE: Initializing Database Session Dependency with FastAPI
DESCRIPTION: This snippet creates a FastAPI dependency using `yield` to provide a new database session for each request, ensuring a single session per request. It uses `Annotated` to simplify the code that uses this dependency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def get_session() -> Generator[Session, None, None]:
    async with async_engine.begin() as conn:
        await conn.run_sync(SQLModel.metadata.create_all)
        async with AsyncSession(conn) as session:
            yield session
```

----------------------------------------

TITLE: Create a Session Dependency with FastAPI
DESCRIPTION: This snippet creates a FastAPI dependency using `yield` to provide a new `Session` for each request, ensuring a single session per request. It uses `Annotated` to simplify the code that uses this dependency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def get_session():
    async with async_engine.begin() as conn:
        await conn.run_sync(SQLModel.metadata.create_all)
        async with AsyncSession(conn) as session:
            yield session

SessionDep = Annotated[AsyncSession, Depends(get_session)]
```

----------------------------------------

TITLE: Declaring a List Type Hint (Python 3.9+)
DESCRIPTION: This snippet demonstrates how to declare a variable as a list of strings using the native `list` type with square bracket notation, available in Python 3.9 and newer versions. This syntax is simpler as it does not require importing `List` from the `typing` module.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_9

LANGUAGE: Python
CODE:
```
items: list[str] = []
```

----------------------------------------

TITLE: Initializing FastAPI App with Async Endpoints
DESCRIPTION: This code initializes a FastAPI application and defines two asynchronous GET endpoints using `async def`: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint takes an integer item_id and an optional string query parameter q. Using `async def` is recommended for I/O-bound operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/yo/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Update item with PUT request using Pydantic model
DESCRIPTION: This Python code defines a FastAPI application with an endpoint to update an item using a PUT request. It uses Pydantic to define the structure of the request body and type hints for data validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Uvicorn Command Referencing FastAPI Instance
DESCRIPTION: This command demonstrates how Uvicorn references the `app` instance from `main.py`. The `app` variable is the instantiated `FastAPI` object, serving as the application entry point for the ASGI server to run your API.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Creating a Dependency Function
DESCRIPTION: This code snippet defines a dependency function that takes optional query parameters `q`, `skip`, and `limit` and returns a dictionary containing these values. This function can be used as a dependency in FastAPI path operation functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn (Console)
DESCRIPTION: This command starts the Uvicorn server, pointing it to the FastAPI application instance (`app`) within the `main.py` file. It configures the server to listen on all available network interfaces (`0.0.0.0`) on port `80`, making the application accessible.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/manually.md#_snippet_3

LANGUAGE: console
CODE:
```
uvicorn main:app --host 0.0.0.0 --port 80
```

----------------------------------------

TITLE: Defining Optional Query Parameter
DESCRIPTION: This code snippet defines an optional query parameter `q` of type string or None with a default value of None. FastAPI recognizes this as an optional parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(q: Union[str, None] = None):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This code creates a basic FastAPI application with two endpoints: a root endpoint that returns a simple JSON response and an items endpoint that accepts an item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/hu/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This snippet shows how to install FastAPI with the standard dependencies using pip. It is recommended to use a virtual environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install "fastapi[standard]"

---> 100%
```

----------------------------------------

TITLE: Defining a Pydantic Model with Optional Fields in Python
DESCRIPTION: This snippet defines a Pydantic `Item` model. The `description` and `tax` fields are explicitly marked as optional using `Union[str, None]` and `Union[float, None]` respectively, and are assigned a default value of `None`. This model structure is fundamental to how FastAPI and Pydantic v2 generate distinct OpenAPI schemas for input and output contexts.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/separate-openapi-schemas.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None
```

----------------------------------------

TITLE: Using a Pydantic Model as Request Body in FastAPI
DESCRIPTION: This FastAPI path operation demonstrates how the `Item` Pydantic model is used as an input (request body). When a model with default values is used for input, fields like `description` are considered optional in the generated OpenAPI schema, indicating that clients are not required to provide them in the request.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/separate-openapi-schemas.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union
from pydantic import BaseModel
from fastapi import FastAPI

app = FastAPI()

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None

@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Creating Hero and Returning HeroPublic
DESCRIPTION: Demonstrates creating a `Hero` table model from a `HeroCreate` data model received in a request. The function returns the `Hero` table model, but FastAPI uses the `HeroPublic` data model specified in `response_model` to validate and serialize the data before sending it to the client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_15

LANGUAGE: Python
CODE:
```
@app.post("/heroes/", response_model=HeroPublic)
async def create_hero(*, session: AsyncSession, hero: HeroCreate):
    hero_db = Hero.from_orm(hero)
```

----------------------------------------

TITLE: Create Hero Endpoint
DESCRIPTION: This code defines a FastAPI endpoint for creating a new `Hero` in the database. It receives the `Hero` data from the request body, adds it to the database session, commits the changes, and returns the created `Hero`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import Depends


@app.post("/heroes/")
async def create_hero(hero: Hero, session: SessionDep):
    session.add(hero)
    session.commit()
    session.refresh(hero)
    return hero
```

----------------------------------------

TITLE: Token Endpoint Implementation in FastAPI
DESCRIPTION: This snippet shows how to implement a token endpoint in FastAPI that generates and returns a JWT token upon successful user authentication.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/security/oauth2-jwt.md#_snippet_5

LANGUAGE: python
CODE:
```
@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user["username"]},
        expires_delta=access_token_expires,
    )
    return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: Implementing Custom ID Validation with AfterValidator in Python
DESCRIPTION: This snippet demonstrates how to create a custom validator function (`validate_item_id`) using Pydantic's `AfterValidator` and `Annotated` in FastAPI. It ensures that an item ID string starts with either 'isbn-' or 'imdb-', raising a `ValueError` if the condition is not met, and shows how to apply this validator to a path parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_24

LANGUAGE: python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query
from pydantic import AfterValidator

app = FastAPI()

def validate_item_id(value: str):
    if not value.startswith(("isbn-", "imdb-")):
        raise ValueError("Item ID must start with 'isbn-' or 'imdb-'")
    return value

ItemId = Annotated[str, AfterValidator(validate_item_id)]

@app.get("/items/{item_id}")
async def read_item(item_id: ItemId):
    return {"item_id": item_id, "message": "Item ID is valid"}
```

----------------------------------------

TITLE: Running FastAPI Application
DESCRIPTION: This console command uses Uvicorn to serve the FastAPI application, enabling automatic reloading on code changes. It targets the app instance within the main.py file, making the API accessible locally.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#_snippet_1

LANGUAGE: console
CODE:
```
uvicorn main:app --reload
```

----------------------------------------

TITLE: Dockerfile for Larger Applications with Uvicorn and Gunicorn
DESCRIPTION: This Dockerfile is tailored for larger applications with multiple files, using the tiangolo/uvicorn-gunicorn-fastapi base image, copying the requirements, installing dependencies, and copying the application code to a specific directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/deployment/docker.md#_snippet_16

LANGUAGE: dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app/app
```

----------------------------------------

TITLE: Dependency Injection with yield and HTTPException (Python 3.8+)
DESCRIPTION: This code demonstrates how to use dependencies with `yield` and `HTTPException` in FastAPI. It includes a `try` block to catch exceptions and raise an `HTTPException` in the exit code after the `yield`. The dependency checks for a token and raises an exception if it's invalid, otherwise it yields control to the route function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_6

LANGUAGE: python
CODE:
```
from typing import Optional

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


async def get_current_user(token: str = Depends(oauth2_scheme)):
    if token == "jflsdkjf":
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Incorrect username or password", headers={"WWW-Authenticate": "Bearer"})
    return "The user"


@app.get("/items/")
async def read_items(current_user: str = Depends(get_current_user)):
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]


async def get_db():
    try:
        db = "fake_db"
        yield db
    except:  # noqa: E722
        print("Oooops, there was an error")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Internal error")
    finally:
        print("Closing connection")


@app.get("/db-items/")
async def read_db_items(db: str = Depends(get_db)):
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]
```

----------------------------------------

TITLE: Defining a Path Parameter
DESCRIPTION: Defines a path parameter item_id in a FastAPI route. The value of the item_id path parameter will be passed to your function as the item_id argument.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This example demonstrates how to declare a complex data model named `Item` as a parameter in a FastAPI endpoint. FastAPI uses this model for data validation and automatic documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/hu/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Example File Structure
DESCRIPTION: Illustrates a typical directory and file layout for a larger FastAPI application using Python packages and modules.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_0

LANGUAGE: Text/Diagram
CODE:
```
.
├── app
│   ├── __init__.py
│   ├── main.py
│   ├── dependencies.py
│   └── routers
│   │   ├── __init__.py
│   │   ├── items.py
│   │   └── users.py
│   └── internal
│       ├── __init__.py
│       └── admin.py
```

----------------------------------------

TITLE: Creating a Settings Object with Pydantic v2
DESCRIPTION: This snippet demonstrates how to create a settings object using Pydantic's `BaseSettings` class. It defines a subclass with type-annotated attributes and default values, similar to Pydantic models. It showcases how Pydantic reads environment variables and converts/validates data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/settings.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseSettings, Field


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = Field(50, alias="items_per_page")

    class Config:
        env_prefix = "app_"

```

----------------------------------------

TITLE: Defining User Path Operations with APIRouter
DESCRIPTION: Shows how to define path operations for a specific domain (users) in a separate file (`app/routers/users.py`) using `APIRouter`, including importing the router and defining GET endpoints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()

@router.get("/users/", tags=["users"])
async def read_users():
    return [{"username": "Rick"}, {"username": "Morty"}]

@router.get("/users/me/", tags=["users"])
async def read_user_me():
    return {"username": "fakecurrentuser"}

@router.get("/users/{username}", tags=["users"])
async def read_user(username: str):
    return {"username": username}
```

----------------------------------------

TITLE: Configuring FastAPI OpenAPI URL with Pydantic Settings
DESCRIPTION: This snippet demonstrates how to use Pydantic settings to dynamically configure the `openapi_url` for a FastAPI application. It defines a `Settings` class with an `openapi_url` attribute and then passes this setting to the `FastAPI` app constructor, allowing the URL to be controlled via environment variables.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/conditional-openapi.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings
from fastapi import FastAPI

class Settings(BaseSettings):
    openapi_url: str = "/openapi.json"

settings = Settings()
app = FastAPI(openapi_url=settings.openapi_url)
```

----------------------------------------

TITLE: Initializing FastAPI App with Async Endpoints
DESCRIPTION: This code initializes a FastAPI application and defines two asynchronous GET endpoints using `async def`: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint accepts an integer path parameter 'item_id' and an optional string query parameter 'q'. Using `async def` allows for non-blocking operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Pydantic Model Example
DESCRIPTION: This snippet shows an example of a Pydantic model. Pydantic is used for data validation. You declare the "shape" of the data as classes with attributes. Each attribute has a type. Then you create an instance of that class with some values, and it will validate the values, convert them to the appropriate type (if that's the case) and give you an object with all the data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/python-types.md#_snippet_11

LANGUAGE: Python
CODE:
```
from typing import List

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tags: List[str] = []


class Image(BaseModel):
    url: str
    name: Optional[str] = None


class Offer(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    items: List[Item]


class Model(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    items: List[Item]
    image: Optional[Image] = None
    offers: List[Offer]
```

----------------------------------------

TITLE: Instantiating FastAPI Application
DESCRIPTION: This line creates an instance of the `FastAPI` class, typically named `app`. This `app` object is the main entry point for defining all your API's routes and operations, and it's the object referenced by ASGI servers like Uvicorn to run your application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Import FastAPI class
DESCRIPTION: Import klasy FastAPI z biblioteki fastapi. Jest to niezbędne do utworzenia instancji aplikacji FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Defining Hero Data Models (HeroPublic, HeroCreate, HeroUpdate) - Python
DESCRIPTION: Defines three data models: `HeroPublic` for API responses, ensuring `id` is always an integer; `HeroCreate` for validating client data when creating a hero, including a `secret_name`; and `HeroUpdate` for updating hero data, with all fields being optional. These models manage data flow and validation between the API and the database.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_11

LANGUAGE: Python
CODE:
```
...
# Code omitted for brevity
...

```

----------------------------------------

TITLE: Awaiting Asynchronous Operations in Python
DESCRIPTION: This code snippet demonstrates how to use the `await` keyword in Python to wait for an asynchronous operation to complete before assigning the result to a variable. This allows Python to perform other tasks while waiting, improving efficiency in concurrent applications.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
burgers = await get_burgers(2)
```

----------------------------------------

TITLE: Password Hashing and Verification
DESCRIPTION: This snippet defines functions for hashing passwords using PassLib and verifying them against stored hashes. It includes a utility function to authenticate a user based on the provided password.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/security/oauth2-jwt.md#_snippet_2

LANGUAGE: Python
CODE:
```
from datetime import timedelta
from typing import Annotated

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel


app = FastAPI()


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: str | None = None


# to get a string like this run:
# openssl rand -hex 32
SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30


password_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def get_password_hash(password: str) -> str:
    return password_context.hash(password)


def verify_password(password: str, hashed_password: str) -> bool:
    return password_context.verify(password, hashed_password)


fake_users_db = {
    "johndoe": {
        "username": "johndoe",
        "hashed_password": get_password_hash("secret"),
        "email": "johndoe@example.com",
        "full_name": "John Doe",
        "disabled": False,
    }
}


async def authenticate_user(username: str, password: str):
    user = fake_users_db.get(username)
    if not user:
        return False
    if not verify_password(password, user["hashed_password"]):
        return False
    return user
```

----------------------------------------

TITLE: Compartilhando dependências com Annotated
DESCRIPTION: Este snippet demonstra como usar `Annotated` para definir um type alias para uma dependência, permitindo reutilizá-la em múltiplos locais sem repetição de código. A informação de tipo é preservada, garantindo preenchimento automático e detecção de erros no editor de texto.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
commons: Annotated[dict, Depends(common_parameters)]
```

----------------------------------------

TITLE: Updating Dependencies for JWT Token Handling
DESCRIPTION: This snippet demonstrates how to update dependencies to handle JWT tokens for user authentication. It includes decoding the received token, validating it, and returning the current user. If the token is invalid, it returns an HTTP error.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/security/oauth2-jwt.md#_snippet_4

LANGUAGE: Python
CODE:
```
from datetime import timedelta, datetime
from typing import Annotated

from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: str | None = None


fake_users_db = {
    "johndoe": {
        "username": "johndoe",
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",
    }
}


SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = fake_users_db.get(token_data.username)
    if user is None:
        raise credentials_exception
    return user
```

----------------------------------------

TITLE: Calling an Asynchronous Library Function in Python
DESCRIPTION: This snippet demonstrates how to call a function from a third-party library that supports asynchronous operations. The `await` keyword is used to pause the execution of the current coroutine until the `some_library()` function completes its I/O-bound task, allowing other tasks to run concurrently.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
results = await some_library()
```

----------------------------------------

TITLE: Recommended Default Value with Annotated and Query in FastAPI
DESCRIPTION: This snippet illustrates the recommended method for setting a default value for a query parameter using `Annotated` and `Query` in FastAPI. The default value is assigned directly to the function parameter, ensuring clarity and consistency with standard Python practices.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_12

LANGUAGE: Python
CODE:
```
q: Annotated[str, Query()] = "rick"
```

----------------------------------------

TITLE: Combining Path Parameters with Request Body in FastAPI
DESCRIPTION: This example shows how to define a path operation that accepts both a path parameter (`item_id`) and a request body (`item` of type `Item`). FastAPI intelligently distinguishes between them based on their type annotations, automatically extracting data from the URL path and the request body respectively.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

@app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item):
    return {"item_id": item_id, **item.dict()}
```

----------------------------------------

TITLE: Defining Global Authentication Dependencies (Python)
DESCRIPTION: These asynchronous functions define two global dependencies, `verify_key` and `verify_token`, which validate specific HTTP header values (`X-Key` and `X-Token`). If the headers are missing or invalid, an `HTTPException` is raised, effectively blocking unauthorized requests. Although these functions return values, those values are not passed to the path operation functions when used as global dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_1

LANGUAGE: Python
CODE:
```
async def verify_key(x_key: str = Header(...)):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="X-Key header invalid")
    return x_key

async def verify_token(x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return x_token
```

----------------------------------------

TITLE: Asynchronous Route Operation with await
DESCRIPTION: This code snippet demonstrates how to define an asynchronous route operation function using `async def` when interacting with third-party libraries that require the use of `await`. The `await` keyword is used to wait for the completion of an asynchronous operation before proceeding.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Type Annotations and Editor Support in FastAPI
DESCRIPTION: Demonstrates the use of Python type annotations with Pydantic for defining data types and leveraging editor support for autocompletion and error checking.  It shows how to define a function with type hints and a Pydantic model with type annotations for fields.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Объявляем параметр user_id с типом `str`
# и получаем поддержку редактора внутри функции
def main(user_id: str):
    return user_id


# Модель Pydantic
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Creating a Dependency Function with Query Parameters
DESCRIPTION: This code defines a dependency function that accepts optional query parameters (q, skip, limit) and returns them as a dictionary. This function can be used to extract and validate common parameters across multiple path operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Creating a FastAPI Instance
DESCRIPTION: This code snippet shows how to create an instance of the FastAPI class, which serves as the main entry point for defining API endpoints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Defining URL Route Parameters in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a URL route parameter in FastAPI using the same syntax as Python's string formatting. The value passed in the URL for `item_id` will be passed to the function as the argument `item_id`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining a Pydantic Data Model for Request Body - Python
DESCRIPTION: This code defines a Pydantic model named `Item` by inheriting from `BaseModel`. It specifies the expected data structure for a request body, including required fields (`name`, `price`) and optional fields (`description`, `tax`) with default `None` values, enabling automatic data validation and serialization.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body.md#_snippet_1

LANGUAGE: Python
CODE:
```
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

----------------------------------------

TITLE: Defining Request Body with Pydantic in FastAPI
DESCRIPTION: This code defines a FastAPI application with a PUT endpoint that receives a request body. It uses Pydantic to define the structure and data types of the expected request body, enabling automatic data validation and serialization. The Item class inherits from BaseModel and defines the expected fields: name (string), price (float), and an optional is_offer (boolean).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: bool = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: str = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This snippet shows how to install the FastAPI library using pip, the Python package installer. It's a prerequisite for using FastAPI in any Python project.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/yo/docs/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install fastapi
```

----------------------------------------

TITLE: Abhängigkeit mit yield und try
DESCRIPTION: Verwenden eines `try`-Blocks in einer Abhängigkeit mit `yield`, um alle Exceptions zu empfangen, die bei Verwendung der Abhängigkeit geworfen wurden. Verwendung von `finally`, um sicherzustellen, dass die Exit-Schritte ausgeführt werden, unabhängig davon, ob eine Exception geworfen wurde oder nicht.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_1

LANGUAGE: Python
CODE:
```
async def get_db():
    db = DBSession()
    try:
        yield db
    except SomeException:
        db.rollback()
    finally:
        db.close()
```

----------------------------------------

TITLE: Declaring a Dependency in Path Operation
DESCRIPTION: This code snippet demonstrates how to declare a dependency in a FastAPI path operation function using `Depends`. The `common_parameters` function is passed to `Depends`, and FastAPI will automatically call this function and inject its return value into the path operation function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: dict = Depends(common_parameters)):
    return commons
```

----------------------------------------

TITLE: Updating Items with Request Body using Pydantic
DESCRIPTION: This code snippet demonstrates how to receive and process a request body in a FastAPI application using Pydantic for data validation and serialization. It defines a Pydantic model `Item` to represent the expected structure of the request body and uses it as a parameter in the `update_item` route.  The route then returns a JSON response containing the item name and ID.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Defining a Dependency Function - Python
DESCRIPTION: Defines a Python function `common_parameters` intended for use as a dependency. It accepts optional query parameters `q` (string), `skip` (integer with default 0), and `limit` (integer with default 100). It returns a dictionary containing these parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Pydantic Model Definition (Python 3.8+)
DESCRIPTION: Defines a Pydantic model `User` with attributes `id`, `name`, and `signup_ts`. Pydantic validates and converts data to the appropriate types when an instance of the model is created.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_22

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: list[int] = []
```

----------------------------------------

TITLE: Running Gunicorn with Uvicorn Workers
DESCRIPTION: This command executes Gunicorn with Uvicorn workers to serve a FastAPI application. It specifies the main application module, the number of worker processes, the worker class, and the binding address.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/deployment/server-workers.md#_snippet_1

LANGUAGE: Shell
CODE:
```
gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:80
```

----------------------------------------

TITLE: Including Router within Another Router - Python
DESCRIPTION: Shows how to include one 'APIRouter' instance ('other_router') into another 'APIRouter' instance ('router') using the 'router.include_router()' method. This allows for nesting routers and organizing routes hierarchically before including the parent router in the main application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_12

LANGUAGE: Python
CODE:
```
router.include_router(other_router)
```

----------------------------------------

TITLE: Database Dependency with Yield
DESCRIPTION: Creates a database session as a dependency and closes it after the operation is complete. The code before the `yield` statement is executed before creating a response, and the code after `yield` is executed after the response is delivered. The yielded value is injected into route operations and other dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: python
CODE:
```
from typing import Generator

from fastapi import Depends, FastAPI

app = FastAPI()


async def get_db() -> Generator:
    db = {"foo": "bar"}
    try:
        yield db
    finally:
        db.clear()


@app.get("/items/")
async def read_items(db: dict = Depends(get_db)):
    return db
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: Creates a basic FastAPI application with two endpoints: `/` (root) and `/items/{item_id}`. The `/items/{item_id}` endpoint takes an item ID and an optional query parameter `q`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/deployment/docker.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Including Admin Router with Custom Config - Python
DESCRIPTION: Demonstrates including the 'admin.router' into the main 'FastAPI' application using 'app.include_router()'. This example shows how to apply custom configurations like a URL 'prefix' ('/admin'), 'tags' ('admin'), 'dependencies' (e.g., 'get_token_header'), and specific 'responses' directly during the inclusion process.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_9

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends
from app.dependencies import get_token_header

from app.routers import items, users
from app.internal import admin

app = FastAPI()

app.include_router(users.router)
app.include_router(items.router)

app.include_router(
    admin.router,
    prefix="/admin",
    tags=["admin"],
    dependencies=[Depends(get_token_header)],
    responses={418: {"description": "I'm a teapot"}},
)

@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Raise HTTPException with status code
DESCRIPTION: This code snippet demonstrates how to raise an HTTPException with a specific status code (404 in this case) when an item is not found.  It shows how to return a custom detail message in the JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/handling-errors.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException

app = FastAPI()

items = {"foo": "The Foo Wrestlers"}


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item": items[item_id]}
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This snippet shows how to declare an integer parameter in FastAPI using Python type annotations. The `item_id: int` syntax defines a parameter named `item_id` with the type `int`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/it/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Updating Dependencies for Active User
DESCRIPTION: This code snippet updates dependencies to ensure that only active users can access specific endpoints. It defines dependencies to retrieve the current user and verify their active status, returning an HTTP error if the user is not active.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/security/simple-oauth2.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get("/users/me", response_model=User)
async def read_users_me(current_user: User = Depends(get_current_active_user)):
    return current_user
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare an integer parameter in a FastAPI function. The `item_id: int` syntax specifies that the `item_id` parameter should be an integer.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This code snippet shows how to declare a more complex data model (Item) as a parameter in FastAPI. FastAPI uses this type declaration for validation, conversion, and automatic API documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/az/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Defining Items Router with APIRouter (Python)
DESCRIPTION: Creates an `APIRouter` instance for item-related path operations. It is configured with a path prefix `/items`, a tag `items`, a default 404 response, and the `get_token` dependency applied to all its path operations. It includes example path operations for `/` and `/{item_id}`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends, HTTPException

from ..dependencies import get_token

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_token)],
    responses={404: {"description": "Not found"}},
)


@router.get("/")
async def read_items():
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]


@router.get("/{item_id}")
async def read_item(item_id: str):
    if item_id != "foo":
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item_id": "baz"}
```

----------------------------------------

TITLE: Password Hashing and Verification with PassLib in FastAPI
DESCRIPTION: This snippet demonstrates how to hash a password using PassLib and verify it against a stored hash. It includes functions for hashing passwords, verifying passwords, and authenticating users.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/security/oauth2-jwt.md#_snippet_2

LANGUAGE: python
CODE:
```
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password):
    return pwd_context.hash(password)


def verify_password(password, hashed_password):
    return pwd_context.verify(password, hashed_password)


def get_user(username: str):
    user = fake_users_db.get(username)
    if not user:
        return None
    return user


def authenticate_user(username: str, password: str):
    user = get_user(username)
    if not user:
        return False
    if not verify_password(password, user["hashed_password"]):
        return False
    return user
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This code snippet shows how to declare a complex item model using FastAPI. The `item: Item` syntax indicates that the `item` parameter should conform to the structure defined by the `Item` model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Pydantic Model Declaration
DESCRIPTION: Defines a Pydantic model `User` with type annotations for data validation and serialization. It showcases the use of `BaseModel` and type hints to define the structure of the `User` object, including `id` as an integer, `name` as a string, and `joined` as a date.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Zadeklaruj parametr jako str
# i uzyskaj wsparcie edytora wewnątrz funkcji
def main(user_id: str):
    return user_id


# Model Pydantic
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Define API endpoints with FastAPI and Pydantic
DESCRIPTION: This Python code defines several API endpoints using FastAPI, including GET and PUT requests. It uses Pydantic to define the structure of the request body for the PUT request, ensuring data validation and type hints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_6

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Dockerfile for FastAPI Application
DESCRIPTION: Defines a Dockerfile for building a FastAPI application image. It starts from the official Python 3.9 image, sets the working directory, copies the requirements file, installs the dependencies, and copies the application code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/deployment/docker.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app
```

----------------------------------------

TITLE: Defining a Pydantic Model in Python
DESCRIPTION: This code snippet defines a Pydantic model named User with fields for id (integer), name (string), and joined (date). Pydantic models are used for data validation and serialization. The example shows how to create instances of the User model using both direct initialization and dictionary unpacking.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import List, Dict
from datetime import date

from pydantic import BaseModel

# Pydantic modeli
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Run FastAPI using Gunicorn with Uvicorn Workers (Console)
DESCRIPTION: Starts the FastAPI application (`main:app`) using Gunicorn. Gunicorn serves as the master process, managing 4 worker processes (`--workers 4`), each running a `uvicorn.workers.UvicornWorker`. The application listens on all available network interfaces (`0.0.0.0`) on port 80.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/server-workers.md#_snippet_1

LANGUAGE: console
CODE:
```
gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:80
```

----------------------------------------

TITLE: Pydantic Model Definition (Python 3.9+)
DESCRIPTION: This code snippet demonstrates how to define a Pydantic model with type annotations in Python 3.9 or later. Pydantic is used for data validation and serialization.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/python-types.md#_snippet_23

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial011_py39.py!}
```

----------------------------------------

TITLE: Declaring Optional Type with Optional
DESCRIPTION: This code snippet demonstrates how to declare that a value can be of a specific type (str) or None using Optional from the typing module in Python 3.6 and above.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/python-types.md#_snippet_13

LANGUAGE: Python
CODE:
```
from typing import Optional


name: Optional[str] = 'Foo'
```

----------------------------------------

TITLE: Get Current User Dependency
DESCRIPTION: This code defines a dependency function called `get_current_user`. It takes a token as input, validates it, and returns a User object. This function uses the OAuth2PasswordBearer scheme to extract the token from the request's authorization header.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm


async def get_user(username: str):
    if username == "fakeuser":
        return None
    return User(username=username, full_name="Fake User")


async def get_current_user(token: str = Depends(oauth2_scheme)):
    user = await get_user(username=token)
    if user is None:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return user
```

----------------------------------------

TITLE: Validating HTTP Basic Auth Credentials Securely with `secrets`
DESCRIPTION: This snippet demonstrates how to securely validate HTTP Basic Auth credentials in FastAPI using Python's `secrets` module. It employs `secrets.compare_digest()` to prevent timing attacks by ensuring a constant comparison time, converting credentials to bytes before comparison, and raising an `HTTPException` for incorrect credentials.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/security/http-basic-auth.md#_snippet_1

LANGUAGE: Python
CODE:
```
import secrets
from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials

app = FastAPI()

basic_auth = HTTPBasic()

@app.get("/users/me")
def read_current_user(credentials: HTTPBasicCredentials = Depends(basic_auth)):
    correct_username = secrets.compare_digest(credentials.username.encode("utf8"), b"stanleyjobson")
    correct_password = secrets.compare_digest(credentials.password.encode("utf8"), b"swordfish")
    if not (correct_username and correct_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Basic"},
        )
    return {"username": credentials.username, "password": credentials.password}
```

----------------------------------------

TITLE: Reutilizando dependências Annotated
DESCRIPTION: Este snippet demonstra como reutilizar uma dependência definida com `Annotated` em diferentes funções, mantendo a tipagem e evitando duplicação de código.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
{* ../../docs_src/dependencies/tutorial001_02_an_py310.py hl[12,16,21] *}
```

----------------------------------------

TITLE: Importing HTTPSRedirectMiddleware in FastAPI
DESCRIPTION: This snippet illustrates how to import the HTTPSRedirectMiddleware class, which automatically redirects all incoming HTTP requests to their HTTPS equivalents. This is crucial for enforcing secure communication and protecting sensitive data in a FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/middleware.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware
```

----------------------------------------

TITLE: Injecting the User Dependency
DESCRIPTION: This code shows how to inject the `get_current_user` dependency into a path operation. The `current_user` parameter will automatically receive the User object returned by the dependency function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI

app = FastAPI()

@app.get("/users/me")
async def read_users_me(current_user: User = Depends(get_current_user)):
    return current_user
```

----------------------------------------

TITLE: Defining a Synchronous Path Operation Function
DESCRIPTION: This code snippet defines a synchronous path operation function that handles GET requests to the root path ('/'). It returns a dictionary, which FastAPI automatically converts to JSON. This function is an alternative to the asynchronous version and can be used when asynchronicity is not required.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_6

LANGUAGE: Python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining Pydantic `BaseSettings` for Application Configuration
DESCRIPTION: This Python snippet defines a `Settings` class inheriting from Pydantic's `BaseSettings`. It declares configuration fields with type hints and default values, allowing Pydantic to automatically load values from environment variables (e.g., `APP_NAME`, `ADMIN_EMAIL`) and perform validation, including field-specific constraints like `gt` and `le`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_5

LANGUAGE: python
CODE:
```
from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import Field

class Settings(BaseSettings):
    model_config = SettingsConfigDict(env_file=".env", extra="ignore")

    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = Field(50, gt=0, le=100)
```

----------------------------------------

TITLE: Pydantic Model Definition
DESCRIPTION: Defines a Pydantic model with type annotations for data validation and conversion. This example showcases a simple model with a name and description field.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_16

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
```

----------------------------------------

TITLE: Returning Input Data with Output Model in FastAPI
DESCRIPTION: This example shows how to return the input data (which may contain sensitive information) from the path operation function while using a separate output model to filter the response. FastAPI automatically filters the data based on the `response_model`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.post("/users/", response_model=UserOut)
async def create_user(user: UserIn):
    return user
```

----------------------------------------

TITLE: Database Dependency with yield
DESCRIPTION: This code snippet demonstrates how to create a database session as a dependency using `yield`. The session is created before the request is processed, and closed after the response is sent. The yielded value is injected into route operations and other dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: python
CODE:
```
async def get_db():
    db = DBSession()
    try:
        yield db
    finally:
        db.close()
```

----------------------------------------

TITLE: Defining Multiple Pydantic Models for User Data in Python
DESCRIPTION: This snippet defines distinct Pydantic models (`UserIn`, `UserInDB`, `UserOut`) for handling user data at different stages: input (with plaintext password), database storage (with hashed password), and output (without password). It also includes a `create_user` function demonstrating the data flow and transformation between these models, using `**user_in.dict()` for unpacking.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional
from pydantic import BaseModel

# Simulate a password hasher and user saver
def fake_password_hasher(password: str):
    return "hashed" + password

def fake_save_user(user_in_db: "UserInDB"):
    # Simulate saving to a database
    print(f"Saving user: {user_in_db.username} to DB")
    return user_in_db

# Input model: User provides password
class UserIn(BaseModel):
    username: str
    password: str
    email: str
    full_name: Optional[str] = None

# Database model: Stores hashed password
class UserInDB(BaseModel):
    username: str
    hashed_password: str
    email: str
    full_name: Optional[str] = None

# Output model: Does not expose password
class UserOut(BaseModel):
    username: str
    email: str
    full_name: Optional[str] = None

# Example usage
def create_user(user_in: UserIn):
    hashed_password = fake_password_hasher(user_in.password)
    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)
    saved_user = fake_save_user(user_in_db)
    user_out = UserOut(**saved_user.dict())
    return user_out

# Test the function
user_input = UserIn(username="john", password="secret", email="john.doe@example.com")
created_user = create_user(user_input)
print(f"Created user (output): {created_user.username}, {created_user.email}")
```

----------------------------------------

TITLE: Dependency with yield and try
DESCRIPTION: This example shows how to use a `try` block within a dependency that uses `yield`. This allows you to catch exceptions that occur during the request processing, such as database transaction rollbacks, and handle them appropriately. The `finally` block ensures that cleanup steps are always executed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_1

LANGUAGE: python
CODE:
```
async def get_db():
    db = DBSession()
    try:
        yield db
    finally:
        db.close()
```

----------------------------------------

TITLE: Defining FastAPI Header Dependencies - Python
DESCRIPTION: These asynchronous functions define dependencies that extract specific headers (`X-Key`, `X-Token`) from the incoming request. They serve as prerequisites for path operations, ensuring that required headers are present and can be validated. These functions can also declare other sub-dependencies if needed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_1

LANGUAGE: Python
CODE:
```
async def verify_key(x_key: Annotated[str | None, Header()] = None):
async def verify_token(x_token: Annotated[str | None, Header()] = None):
```

----------------------------------------

TITLE: Installing Uvicorn with Standard Dependencies (Console)
DESCRIPTION: This command installs the Uvicorn ASGI server along with its recommended standard dependencies, including `uvloop` for high-performance asynchronous operations. It's a prerequisite for manually running a FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/manually.md#_snippet_2

LANGUAGE: console
CODE:
```
pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Pydantic Model Example
DESCRIPTION: This snippet shows an example of a Pydantic model. Pydantic is used for data validation and settings management using Python type annotations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/python-types.md#_snippet_11

LANGUAGE: python
CODE:
```
from typing import List

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tags: List[str] = []


class Image(BaseModel):
    url: str
    name: str


class Offer(BaseModel):
    name: str
    description: str | None = None
    price: float
    items: List[Item]


class Model(BaseModel):
    name: str
    description: str | None = None
    price: float
    items: List[Item]
    image: Image | None = None
    offers: List[Offer] | None = None
    # ... more attributes ...

```

----------------------------------------

TITLE: Dependency with Yield and Try
DESCRIPTION: Demonstrates how to use a `try` block in a dependency with `yield` to catch exceptions that may be raised during the dependency's usage. This allows for handling errors such as database transaction rollbacks and ensures that cleanup steps are executed using `finally`, regardless of exceptions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Generator

from fastapi import Depends, FastAPI

app = FastAPI()


async def get_db() -> Generator:
    db = {"foo": "bar"}
    try:
        yield db
    finally:
        db.clear()


@app.get("/items/")
async def read_items(db: dict = Depends(get_db)):
    return db
```

----------------------------------------

TITLE: Declaring Dependencies in FastAPI Path Operations (Python)
DESCRIPTION: These snippets illustrate how to integrate a dependency into FastAPI path operation functions using `Annotated` and `Depends`. The `common_parameters` function is automatically called, and its return value is injected into the `commons` parameter, streamlining the use of shared logic across different endpoints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons


@app.get("/users/")
async def read_users(commons: Annotated[dict, Depends(common_parameters)]):
    return commons
```

----------------------------------------

TITLE: Running FastAPI with Uvicorn
DESCRIPTION: This command starts the FastAPI application `app` located in `main.py` using Uvicorn. It configures the server to listen on all available network interfaces (`0.0.0.0`) on port `80`. The `--reload` option, though not shown in the snippet, is mentioned as a development-only feature.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/manually.md#_snippet_2

LANGUAGE: Shell
CODE:
```
$ uvicorn main:app --host 0.0.0.0 --port 80
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This example shows how to declare a complex data model `Item` as a parameter in FastAPI. This enables automatic data validation and conversion for the `Item` model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Configuring FastAPI Application Metadata
DESCRIPTION: This snippet demonstrates how to provide detailed metadata for your FastAPI application by passing arguments like title, description, version, terms of service, contact information, and license details directly to the FastAPI constructor. This metadata is then used to populate the automatically generated OpenAPI documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/metadata.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    title="My Super Project",
    description="This is a very long description for my super project.",
    version="2.5.0",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "Deadpool",
        "url": "http://x-force.example.com/contact/",
        "email": "dp@x-force.example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
)

@app.get("/items/")
async def read_items():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Adding HTTPS Redirect Middleware - Python
DESCRIPTION: This snippet demonstrates how to add the `HTTPSRedirectMiddleware` to a FastAPI application. This middleware automatically intercepts incoming HTTP and WebSocket requests and redirects them to their secure HTTPS and WSS counterparts, enhancing security by ensuring encrypted communication.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.httpsredirect import HTTPSRedirectMiddleware

app = FastAPI()

app.add_middleware(HTTPSRedirectMiddleware)
```

----------------------------------------

TITLE: Inheritance for Data Filtering and Type Hints
DESCRIPTION: Demonstrates using class inheritance to define a base model (`BaseUser`) and an input model (`UserIn`) that inherits from it. This allows for type hinting with the base model while still filtering data using FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel, EmailStr


class BaseUser(BaseModel):
    email: EmailStr
    age: Optional[int] = None


class UserIn(BaseUser):
    password: str


@app.post("/users/")
async def create_user(user: UserIn) -> BaseUser:
    return user
```

----------------------------------------

TITLE: Protecting Endpoint with OAuth2 Dependency
DESCRIPTION: This snippet shows how to secure a path operation by injecting oauth2_scheme as a dependency. FastAPI automatically validates the Authorization header, extracts the bearer token, and passes it to the token parameter, or returns a 401 Unauthorized error if invalid.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/users/me")
async def read_users_me(token: str = Depends(oauth2_scheme)):
```

----------------------------------------

TITLE: Use Model Inheritance for Response Type and Filtering - Python
DESCRIPTION: Demonstrates using Pydantic model inheritance (`UserIn` inherits from `BaseUser`). The function's return type annotation is set to the base class (`-> BaseUser`), allowing static type checkers to validate the function's return while FastAPI/Pydantic correctly filters the response based on the base model fields.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_7

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel, EmailStr

class BaseUser(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None

class UserIn(BaseUser):
    password: str

class UserOut(BaseUser):
    pass # UserOut is same as BaseUser, implicitly

app = FastAPI()

@app.post("/user/")
async def create_user(user_in: UserIn) -> BaseUser:
    # ... create user in DB etc.
    return user_in
```

----------------------------------------

TITLE: Setting Uvicorn Command in Dockerfile
DESCRIPTION: This `CMD` instruction defines the default command to execute when the Docker container starts. It runs the Uvicorn server, serving the FastAPI application `app.main:app` on all network interfaces (`0.0.0.0`) and port 80. The command will be executed from the `/code` working directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Defining Python Types and Pydantic Models in FastAPI
DESCRIPTION: This snippet demonstrates the use of standard Python type declarations for function parameters and the definition of a Pydantic BaseModel for data validation and serialization. It highlights how FastAPI leverages these types for automatic data handling and enhanced editor support.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Defining a Pydantic BaseModel - Python
DESCRIPTION: Introduces Pydantic models, showing how to define a data model by inheriting from `BaseModel` and defining fields with type hints. Pydantic uses these hints for data validation, serialization, and more.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_10

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class User(BaseModel):
    id: int
    name: str = "John Doe"
    signup_ts: datetime | None = None
    friends: list[int] = []
```

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel

class User(BaseModel):
    id: int
    name: str = "John Doe"
    signup_ts: Optional[datetime] = None
    friends: List[int] = []
```

----------------------------------------

TITLE: Defining a GET Path Operation Decorator
DESCRIPTION: This code snippet demonstrates how to define a path operation using the @app.get() decorator. It associates the function below it with the specified path ('/') and the HTTP GET method. FastAPI uses this to route incoming requests to the appropriate function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Defining a GET path operation
DESCRIPTION: This code snippet demonstrates how to define a GET path operation using the @app.get decorator. It associates the function with the root path ('/') and the HTTP GET method.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating a SQLModel Session Dependency in FastAPI
DESCRIPTION: This snippet defines a FastAPI dependency that provides a new SQLModel `Session` for each request using `yield`, ensuring proper session management. It also creates an `Annotated` type alias, `SessionDep`, to simplify its use in route functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_4

LANGUAGE: Python
CODE:
```
def get_session():
    with Session(engine) as session:
        yield session

SessionDep = Annotated[Session, Depends(get_session)]
```

----------------------------------------

TITLE: Defining Application Settings with Pydantic - Python
DESCRIPTION: This snippet defines the `Settings` class using Pydantic's `BaseSettings` to manage application configuration. It includes `app_name` and `admin_email` fields. The `get_settings` function, decorated with `@lru_cache`, ensures that the `Settings` object is instantiated only once, optimizing performance for subsequent calls.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_11

LANGUAGE: Python
CODE:
```
from functools import lru_cache
from pydantic_settings import BaseSettings, SettingsConfigDict

class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str

@lru_cache
def get_settings():
    return Settings()
```

----------------------------------------

TITLE: Raising HTTPException for Not Found (FastAPI) - Python
DESCRIPTION: Demonstrates how to raise an `HTTPException` with a 404 status code and a detail message if a requested item is not found. When raised, FastAPI intercepts the exception, stops processing the current request, and returns a JSON response with the specified status code and detail.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#_snippet_1

LANGUAGE: Python
CODE:
```
raise HTTPException(status_code=404, detail="Item not found")
```

----------------------------------------

TITLE: Define GET Path Operation Decorator
DESCRIPTION: This code snippet shows how to define a path operation decorator using `@app.get("/")` to handle GET requests to the root path `/`. It tells FastAPI that the function immediately following it should handle requests to the specified path using the GET method.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Reading a Single Hero with HeroPublic - Python
DESCRIPTION: Illustrates how to read a single `Hero` object and return it as a `HeroPublic` model. The `response_model` parameter ensures that the data is validated and serialized correctly before being sent as a response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_14

LANGUAGE: Python
CODE:
```
...
# Code omitted for brevity
...

```

----------------------------------------

TITLE: Define SQLModel Model
DESCRIPTION: Defines a SQLModel model named `Hero` that represents a table in the SQL database. It includes fields for `id` (primary key), `name` (indexed), `secret_name`, and `age`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from sqlmodel import Field, SQLModel, create_engine


class Hero(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = None
```

----------------------------------------

TITLE: Declaring an Item Model in FastAPI
DESCRIPTION: This code snippet shows how to declare a more complex `Item` model as a type for a request body parameter in FastAPI. This allows for validation and automatic conversion of JSON data to Python objects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Defining a Request Body with Pydantic
DESCRIPTION: This code snippet extends the basic FastAPI application to include a PUT endpoint that receives a request body. It defines a Pydantic model `Item` to represent the structure of the request body, including name (string), price (float), and an optional is_offer (boolean) field. The `update_item` function handles PUT requests to '/items/{item_id}' and receives an `Item` object in the request body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/it/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel
from typing import Optional

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: bool = Optional[None]


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Optional[str] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Items APIRouter Module - Python
DESCRIPTION: Defines a simple APIRouter for item-related routes. This module is intended to be imported and included in the main application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()

@router.get("/items/")
async def read_items():
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]
```

----------------------------------------

TITLE: Performing Asynchronous HTTP Requests in Pytest with AsyncClient
DESCRIPTION: This snippet shows how to use `httpx.AsyncClient` within an asynchronous `pytest` function to make requests to a FastAPI application. It demonstrates instantiating `AsyncClient` with the FastAPI `app` object and using `await` to send a GET request and receive the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_3

LANGUAGE: Python
CODE:
```
    async with AsyncClient(app=app, base_url="http://test") as ac:
        response = await ac.get("/")
    assert response.status_code == 200
    assert response.json() == {"Hello": "World"}
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This code snippet shows how to declare a complex item model in FastAPI using Python type hints. FastAPI uses this declaration for validation and documentation of the item's structure.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Including User and Item APIRouters - Python
DESCRIPTION: Includes the APIRouter instances from the imported 'users' and 'items' modules into the main FastAPI application using `app.include_router()`, making their routes part of the main app.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

from .routers import items, users

app = FastAPI()

app.include_router(users.router)
app.include_router(items.router)
```

----------------------------------------

TITLE: Including APIRouter Instances in Main App - FastAPI Python
DESCRIPTION: Demonstrates how to include the imported `APIRouter` instances (`users.router`, `items.router`) into the main `FastAPI` application instance using `app.include_router()`. This integrates the routes defined in the submodules into the main application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends

from .dependencies import get_query_token

from .routers import items, users

app = FastAPI(dependencies=[Depends(get_query_token)])

app.include_router(users.router)
app.include_router(items.router)
```

----------------------------------------

TITLE: Pydantic v2 settings configuration
DESCRIPTION: This Python snippet demonstrates how to configure Pydantic settings in v2 to read from a `.env` file. The `env_file` configuration specifies the path to the `.env` file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/settings.md#_snippet_16

LANGUAGE: Python
CODE:
```
model_config = SettingsConfigDict(env_file='.env')
```

----------------------------------------

TITLE: Declaring Complex Model Parameter in FastAPI (Python)
DESCRIPTION: This snippet shows how to declare a complex `Item` model as a parameter in FastAPI. By using a Pydantic model, FastAPI automatically handles validation, serialization, and documentation for the entire JSON body, including nested objects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_7

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Defining a Basic FastAPI Application with Models
DESCRIPTION: This Python snippet demonstrates how to set up a simple FastAPI application. It defines a Pydantic `Item` model for data validation and a POST endpoint that accepts and returns data, showcasing the basic structure for API development and the use of `ResponseMessage`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union
from pydantic import BaseModel
from fastapi import FastAPI

class ResponseMessage(BaseModel):
    message: str

class Item(BaseModel):
    name: str

app = FastAPI()

@app.post("/items/", response_model=ResponseMessage)
def create_item(item: Item):
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Running the FastAPI application with Uvicorn
DESCRIPTION: This command starts the Uvicorn server, which hosts the FastAPI application. The `--reload` flag enables automatic reloading of the server when code changes are detected, useful for development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/index.md#_snippet_4

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Defining a SQLModel Hero Table
DESCRIPTION: This Python class defines the 'Hero' database model using SQLModel, mapping it to a SQL table. It includes fields for 'id' (primary key), 'name' (indexed string), 'secret_name' (string), and 'age' (optional indexed integer), combining Pydantic's data validation with SQLAlchemy's ORM capabilities.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Optional
from sqlmodel import Field, SQLModel

class Hero(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = Field(default=None, index=True)
```

----------------------------------------

TITLE: Return Full Input Object Before Filtering - Python
DESCRIPTION: Shows the function returning the original input object (`user_in`), which contains the password. This return is handled by FastAPI's `response_model` filtering mechanism, ensuring only fields defined in `UserOut` (specified via `response_model`) are included in the final response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel, EmailStr

class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None

class UserOut(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None

app = FastAPI()

@app.post("/user/", response_model=UserOut)
async def create_user(user_in: UserIn):
    # ... create user in DB etc.
    return user_in
```

----------------------------------------

TITLE: Using Pydantic Model Inheritance for User Models
DESCRIPTION: Illustrates reducing code duplication by defining a base Pydantic model `UserBase` with common fields. Other models (`UserIn`, `UserOut`, `UserInDB`) inherit from `UserBase` and add or modify specific fields, making model definitions DRY (Don't Repeat Yourself). This inheritance is automatically understood by Pydantic and FastAPI for validation and documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/extra-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class UserBase(BaseModel):
    username: str
    email: str
    full_name: str | None = None

class UserIn(UserBase):
    password: str

class UserOut(UserBase):
    pass

class UserInDB(UserBase):
    hashed_password: str

# Rest of the fake functions and endpoint would typically follow, 
# similar to the previous example but using these new models.
```

----------------------------------------

TITLE: Defining a Basic HTTP Middleware in FastAPI
DESCRIPTION: This snippet illustrates the fundamental structure for creating an HTTP middleware in FastAPI. It uses the `@app.middleware("http")` decorator to register an asynchronous function that receives the `request` object and a `call_next` function. The `call_next` function processes the request and returns the `response`, which can then be further modified before being returned by the middleware.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/middleware.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    response = await call_next(request)
    return response
```

----------------------------------------

TITLE: Initializing OAuth2PasswordBearer in FastAPI
DESCRIPTION: Initializes an instance of the OAuth2PasswordBearer class, passing the tokenUrl parameter. This parameter specifies the URL that the client will use to send the username and password to obtain a token. The tokenUrl parameter does not create the endpoint, but declares the URL that the client should use to obtain the token.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/security/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Installing Uvicorn with pip
DESCRIPTION: This command installs Uvicorn, an ASGI server, using pip. Uvicorn is recommended for production environments. The "[standard]" extra installs additional dependencies for broader compatibility.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/index.md#_snippet_1

LANGUAGE: Bash
CODE:
```
pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Updating FastAPI Application with Pydantic Model and PUT Endpoint (Python)
DESCRIPTION: This Python code updates the `main.py` file to introduce a Pydantic `Item` model for data validation and a new `PUT` endpoint. The `Item` model defines the structure for incoming request bodies, ensuring type safety and enabling automatic documentation. The `update_item` function handles `PUT` requests to `/items/{item_id}`, accepting an `item_id` and an `Item` object as the request body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Define SQLModel Model
DESCRIPTION: This code defines a SQLModel model named `Hero` that represents a table in the SQL database. It specifies the primary key, index, and data types for each column, using `Field` to configure these properties. The `table=True` argument indicates that this model represents a database table.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from sqlmodel import Field, SQLModel, create_engine


class Hero(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = Field(default=None, index=True)
```

----------------------------------------

TITLE: Basic Dockerfile for FastAPI
DESCRIPTION: This Dockerfile sets up a basic FastAPI application using the tiangolo/uvicorn-gunicorn-fastapi base image. It copies the requirements file, installs dependencies, and copies the application code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_17

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app
```

----------------------------------------

TITLE: Activating Virtual Environment on Linux/macOS
DESCRIPTION: This command activates a Python virtual environment on Linux and macOS systems. It sources the `activate` script located in the `.venv/bin` directory, which modifies the shell's environment variables, primarily the PATH, to prioritize executables from the virtual environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_22

LANGUAGE: Bash
CODE:
```
$ source .venv/bin/activate
```

----------------------------------------

TITLE: Updating main.py with PUT request body using Pydantic
DESCRIPTION: This code snippet demonstrates how to modify the main.py file to handle PUT requests with a request body using Pydantic for data validation and serialization. It defines an Item model using Pydantic's BaseModel, specifying the expected data types for the name, price, and is_offer fields. The update_item function is then defined to handle PUT requests to the /items/{item_id} endpoint, extracting the item_id from the URL and the item data from the request body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/index.md#_snippet_4

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Activating Virtual Environment on Windows PowerShell
DESCRIPTION: This command activates the virtual environment on Windows using PowerShell. It executes the Activate.ps1 script located in the .venv\Scripts directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/virtual-environments.md#_snippet_4

LANGUAGE: Shell
CODE:
```
$ .venv\Scripts\Activate.ps1
```

----------------------------------------

TITLE: Awaiting Asynchronous Operations in Python
DESCRIPTION: Demonstrates the use of the `await` keyword to pause execution until an asynchronous operation, such as `get_burgers(2)`, completes. This allows Python to perform other tasks concurrently while waiting for the result.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_3

LANGUAGE: Python
CODE:
```
burgers = await get_burgers(2)
```

----------------------------------------

TITLE: Creating Separate Input and Output Models
DESCRIPTION: This snippet shows how to create separate Pydantic models for input (UserIn) and output (UserOut). The UserOut model excludes the password field, preventing it from being returned in the API response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#_snippet_4

LANGUAGE: python
CODE:
```
from typing import Optional

from fastapi import FastAPI
from pydantic import BaseModel, EmailStr

app = FastAPI()


class UserIn(BaseModel):
    email: EmailStr
    password: str
    full_name: Optional[str] = None
    disabled: Optional[bool] = None


class UserOut(BaseModel):
    email: EmailStr
    full_name: Optional[str] = None
    disabled: Optional[bool] = None


@app.post("/users/", response_model=UserOut)
async def create_user(user: UserIn):
    return user
```

----------------------------------------

TITLE: Query Parameter with Minimum Length Validation in FastAPI
DESCRIPTION: This code defines a query parameter 'q' with both minimum and maximum length validations using the `Query` class. The parameter is optional and defaults to None.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = Query(default=None, min_length=3, max_length=50)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Asynchronous Path Operation Function with await
DESCRIPTION: This code snippet demonstrates how to define an asynchronous path operation function using `async def` in FastAPI. It uses `await` to call an asynchronous library, allowing the application to handle other tasks while waiting for the library to complete its operation. This is suitable for I/O-bound operations that support `await`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: FastAPI Application Code
DESCRIPTION: This FastAPI application defines two endpoints: a root endpoint that returns a simple greeting and an item endpoint that returns item details based on the provided item ID and optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Async Path Operation with Await
DESCRIPTION: Demonstrates how to define a path operation function using async def when interacting with third-party libraries that require await. This ensures that FastAPI can efficiently handle asynchronous operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Initializing FastAPI App with Basic Endpoints
DESCRIPTION: This code initializes a FastAPI application and defines two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint takes an integer item_id and an optional string query parameter q.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/yo/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Type Hints with Metadata Annotations (Python 3.8+)
DESCRIPTION: Demonstrates how to use `Annotated` in Python 3.8+ to add metadata to type hints. This allows providing extra information about the type, such as a description, which can be used by FastAPI for validation and documentation.  It imports Annotated from typing_extensions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_18

LANGUAGE: Python
CODE:
```
from typing import Optional

from typing_extensions import Annotated

from fastapi import Query


async def read_items(
    q: Annotated[Optional[str], Query(title="Search query", max_length=50)] = None
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Asynchronous Path Operation Function
DESCRIPTION: Defines a FastAPI path operation function using `async def` to handle asynchronous operations, such as calling an asynchronous library with `await`. This is suitable for I/O-bound operations where the function needs to wait for external resources.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Creating main.py for OAuth2 Password Flow
DESCRIPTION: This code snippet demonstrates how to set up a basic FastAPI application with OAuth2 password flow for authentication. It includes importing necessary modules, defining a token URL, and creating a path operation that requires authentication.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/security/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


@app.get("/items/")
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Dockerfile for Single-File FastAPI App
DESCRIPTION: This Dockerfile is designed for a FastAPI application contained in a single file (main.py). It copies the requirements.txt and main.py files into the container, installs the dependencies, and then runs the FastAPI application using the 'fastapi run' command.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/deployment/docker.md#_snippet_15

LANGUAGE: dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (1)!
COPY ./main.py /code/

# (2)!
CMD ["fastapi", "run", "main.py", "--port", "80"]
```

----------------------------------------

TITLE: Defining X-Token Dependency (Python 3.8+ Optional)
DESCRIPTION: Defines a simple dependency function `get_token` in `app/dependencies.py` that reads the `X-Token` header using `Optional`. It raises an `HTTPException` if the token is not 'fake-super-secret-token'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/bigger-applications.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import Header, HTTPException


async def get_token(x_token: Optional[str] = Header(None)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return x_token


async def get_query_token(token: str):
    if token != "jessica":
        raise HTTPException(status_code=400, detail="No Jessica token provided")
    return token
```

----------------------------------------

TITLE: JWT Token Decoding and User Retrieval
DESCRIPTION: This snippet updates the `get_current_user` function to decode and verify JWT tokens. It retrieves the current user based on the token's subject and raises an HTTP exception if the token is invalid.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/security/oauth2-jwt.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = fake_users_db.get(token_data.username)
    if user is None:
        raise credentials_exception
    return user
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This code snippet shows how to declare a complex item model in FastAPI using Python type hints. FastAPI uses this type information for automatic data validation and conversion of request bodies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Initializing SQL Database Tables
DESCRIPTION: This Python function, 'create_db_and_tables', uses 'SQLModel.metadata.create_all(engine)' to generate all defined database tables. It iterates through all SQLModel table classes (like 'Hero') and creates their corresponding tables in the database connected via the provided engine, ensuring the database schema matches the application's models.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_3

LANGUAGE: python
CODE:
```
from sqlmodel import SQLModel

def create_db_and_tables():
    SQLModel.metadata.create_all(engine)
```

----------------------------------------

TITLE: Marking Pytest Functions for Asynchronous Execution with AnyIO
DESCRIPTION: This snippet highlights the `@pytest.mark.anyio` decorator, which is crucial for enabling asynchronous execution within a `pytest` test function. It allows the test to use `await` and interact with asynchronous code, such as `httpx.AsyncClient`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_2

LANGUAGE: Python
CODE:
```
@pytest.mark.anyio
```

----------------------------------------

TITLE: Response Model with `response_model` Parameter
DESCRIPTION: This example shows how to use the `response_model` parameter in a FastAPI path operation decorator to specify the response model. This is useful when you want to return a different type than what is declared in the function's return type annotation, allowing FastAPI to still validate, document, and filter the output.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int):
    return {"name": "Foo", "description": "A very nice Item", "price": 50.2, "tax": 20.3}


@app.post("/items/", response_model=Item)
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Copy requirements.txt for Docker Cache
DESCRIPTION: This Dockerfile instruction copies the requirements.txt file to the /code directory. This is done early in the Dockerfile to leverage Docker's caching mechanism. Since requirements.txt changes less frequently than the application code, Docker can reuse the cached layer, speeding up the build process.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/deployment/docker.md#_snippet_8

LANGUAGE: Dockerfile
CODE:
```
COPY ./requirements.txt /code/requirements.txt
```

----------------------------------------

TITLE: Running FastAPI Application with `fastapi run` Command
DESCRIPTION: This command starts a FastAPI application using the built-in `fastapi run` utility. It automatically detects the application object (e.g., `app` from `main.py`) and launches an ASGI server (like Uvicorn) to serve it, providing URLs for the application and its documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/manually.md#_snippet_0

LANGUAGE: console
CODE:
```
$ fastapi run main.py
```

----------------------------------------

TITLE: Pydantic Model Example (Python 3.10+)
DESCRIPTION: This Pydantic model defines a `User` class with attributes `id`, `name`, `signup_ts`, and `friends`. It demonstrates how Pydantic can be used to validate and transform data, providing editor support and automatic error generation. This version uses Python 3.10+ syntax.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_20

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: List[int] = []


external_data = {
    'id': '123',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, '2', b'3'],
}

user = User(**external_data)
print(user.id)
print(user.friends)
```

----------------------------------------

TITLE: Initializing FastAPI App with Global Dependencies - Python
DESCRIPTION: Illustrates the main application file (`app/main.py`) where the `FastAPI` instance is created. It demonstrates how to declare global dependencies that will be applied to all path operations in the application, including those from included routers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends

from .dependencies import get_query_token

from .routers import items, users

app = FastAPI(dependencies=[Depends(get_query_token)])

app.include_router(users.router)
app.include_router(items.router)
```

----------------------------------------

TITLE: Installing Uvicorn with pip
DESCRIPTION: This snippet demonstrates how to install Uvicorn, an ASGI server, using pip. Uvicorn is required to run FastAPI applications in a production environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/yo/docs/index.md#_snippet_1

LANGUAGE: bash
CODE:
```
pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Function with Type Annotations in Python
DESCRIPTION: This example shows how to add type annotations to function parameters.  It specifies that `first_name` and `last_name` are strings, enabling autocompletion and error checking in editors.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/python-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name

print(get_full_name("john", "doe"))
```

----------------------------------------

TITLE: Running Uvicorn Server
DESCRIPTION: Specifies the command to start the Uvicorn server for the FastAPI application. It uses the `uvicorn` command, points to the `app` object in the `app.main` module, binds to all available network interfaces (`0.0.0.0`), and listens on port 80.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/deployment/docker.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: This instruction defines the command to run the FastAPI application using Uvicorn. It specifies the host, port, and application module to be executed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/deployment/docker.md#_snippet_24

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Get Single Hero Endpoint
DESCRIPTION: This code defines a FastAPI endpoint for retrieving a single `Hero` object from the database by its ID. It uses a `select` statement with a where clause to query the database and returns the hero if found.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_7

LANGUAGE: Python
CODE:
```
@router.get("/heroes/{hero_id}")
async def read_hero(hero_id: int, session: SessionDep):
    hero = session.get(Hero, hero_id)
    return hero
```

----------------------------------------

TITLE: Defining List Response Model with FastAPI and Pydantic
DESCRIPTION: Demonstrates using `typing.List` (or `list` in Python 3.9+) with FastAPI's `response_model` to specify that the endpoint will return a list where each item conforms to a particular Pydantic model (`Item`). This provides automatic documentation and validation for endpoints returning arrays of structured objects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/extra-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import List

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float

@app.get("/items/", response_model=List[Item])
def read_items():
    return [
        {"name": "item1", "price": 1.5},
        {"name": "item2", "price": 2.5},
    ]
```

----------------------------------------

TITLE: Defining an Optional Query Parameter in FastAPI
DESCRIPTION: This snippet demonstrates how to define an optional query parameter `q` in a FastAPI path operation. By setting its type hint to `str | None` and its default value to `None`, FastAPI automatically recognizes it as optional, allowing requests to be made without providing this parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/")
async def read_items(q: str | None = None):
    if q:
        return {"q": q}
    return {"message": "No q parameter"}
```

----------------------------------------

TITLE: Instantiating a Pydantic Model in Python
DESCRIPTION: This code snippet demonstrates how to instantiate a Pydantic model in Python. It shows two ways to create instances of the `User` model: first, by directly passing keyword arguments, and second, by unpacking a dictionary containing the data. This highlights Pydantic's flexibility in handling data input.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/features.md#_snippet_2

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Initializing OAuth2PasswordBearer Scheme in FastAPI
DESCRIPTION: Initializes an instance of `OAuth2PasswordBearer` to define an OAuth2 security scheme. The `tokenUrl` parameter specifies the endpoint where clients can obtain a token, which is used by OpenAPI for documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi.security import OAuth2PasswordBearer

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Basic Dockerfile for FastAPI with Uvicorn/Gunicorn
DESCRIPTION: This Dockerfile provides a basic setup for a FastAPI application using the `tiangolo/uvicorn-gunicorn-fastapi` base image. It copies `requirements.txt`, installs dependencies, and then copies the application code into the `/app` directory. This is suitable for standard FastAPI projects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_15

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app
```

----------------------------------------

TITLE: Declaring an Async FastAPI Path Operation Function
DESCRIPTION: This FastAPI path operation function is declared with `async def` because it performs an I/O-bound operation by awaiting `some_library()`. Using `async def` allows FastAPI to run other tasks concurrently while this function is waiting for the library call to complete, improving overall application responsiveness.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/async.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Asynchronous Path Operation Function with await
DESCRIPTION: Defines an asynchronous path operation function using `async def` and `await` to call an external library. This allows FastAPI to handle other requests while waiting for the library to return results, improving concurrency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Basic FastAPI App
DESCRIPTION: Creates a basic FastAPI application with two endpoints: a root endpoint that returns a "Hello World" message and an `/items/{item_id}` endpoint that returns the item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating a Basic FastAPI App
DESCRIPTION: This code snippet initializes a FastAPI application, defines two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint takes an integer item_id as a path parameter and an optional string q as a query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/it/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from typing import Optional

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: str = Optional[None]):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Asynchronous Function Definition
DESCRIPTION: Defines an asynchronous function `get_burgers` using `async def`. This allows the function to use `await` to pause execution while waiting for an asynchronous operation to complete, enabling concurrency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # ハンバーガーを作成するために非同期処理を実行
    return burgers
```

----------------------------------------

TITLE: Prosty plik FastAPI
DESCRIPTION: Definiuje podstawową aplikację FastAPI z jednym endpointem zwracającym wiadomość JSON. Używa FastAPI do utworzenia instancji aplikacji i definiuje endpoint '/' zwracający słownik, który FastAPI konwertuje na odpowiedź JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Creating a basic FastAPI application
DESCRIPTION: This code defines a basic FastAPI application with two endpoints: `/` which returns a simple JSON response, and `/items/{item_id}` which takes an item ID as a path parameter and an optional query parameter `q`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: str = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Hashing and Verifying Passwords with Passlib
DESCRIPTION: This snippet demonstrates how to hash a password using Passlib and verify if a given password matches the stored hash. It includes helper functions for hashing passwords and verifying them against stored hashes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/security/oauth2-jwt.md#_snippet_2

LANGUAGE: Python
CODE:
```
from datetime import timedelta
from typing import Annotated

from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: str | None = None


fake_users_db = {
    "johndoe": {
        "username": "johndoe",
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",
    }
}


SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)


def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)


def authenticate_user(form_data: OAuth2PasswordRequestForm) -> str | bool:
    user = fake_users_db.get(form_data.username)
    if not user:
        return False
    if not verify_password(form_data.password, user["hashed_password"]):
        return False
    return user
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: This command starts the FastAPI application using Uvicorn, enabling hot-reloading for development. It specifies `main` as the module and `app` as the FastAPI instance to run.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/websockets.md#_snippet_4

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload
```

----------------------------------------

TITLE: Typed Path Parameter
DESCRIPTION: Declares the type of a path parameter `item_id` as an integer (`int`) using Python type annotations. This enables editor support for error checking and autocompletion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Activate Virtual Environment (Linux, macOS)
DESCRIPTION: This command activates the virtual environment in Linux and macOS. It sources the activate script located in the .venv/bin directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/virtual-environments.md#_snippet_3

LANGUAGE: Console
CODE:
```
$ source .venv/bin/activate
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This Python code defines a simple FastAPI application with two endpoints. The root endpoint (`/`) returns a 'Hello: World' message, and the `/items/{item_id}` endpoint demonstrates path parameters and optional query parameters. This serves as the core application logic to be containerized.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Building a Docker Image for FastAPI
DESCRIPTION: This Dockerfile sets up a Python 3.9 environment, copies the requirements file, installs dependencies, copies the application code, and defines the command to run the FastAPI application using Uvicorn.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Dockerfile Example
DESCRIPTION: This Dockerfile sets up a Python 3.9 environment, copies the requirements file, installs dependencies, copies the FastAPI application code, and defines the command to run the application using Uvicorn.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Basic FastAPI Application Testing with TestClient and Pytest
DESCRIPTION: This snippet demonstrates how to set up basic tests for a FastAPI application using `TestClient` and `pytest`. It shows importing `TestClient`, initializing it with the FastAPI app instance, and writing a test function to make a GET request and assert the response's status code and JSON content.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.testclient import TestClient

app = FastAPI()

@app.get("/")
async def read_main():
    return {"msg": "Hello World"}

client = TestClient(app)

def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Installing Uvicorn with pip
DESCRIPTION: This command installs Uvicorn, an ASGI server, along with standard dependencies, using pip. Uvicorn is required for running FastAPI applications in production.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/index.md#_snippet_1

LANGUAGE: Console
CODE:
```
$ pip install uvicorn[standard]
```

----------------------------------------

TITLE: Unterabhängigkeiten mit yield - Exit Code
DESCRIPTION: Demonstration of how dependencies with yield can depend on each other, ensuring that the exit code in each dependency is executed in the correct order.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def dependency_b(dep_a=Depends(dependency_a)):
    dep_b = generate_dep_b()
    try:
        yield dep_b
    finally:
        clean_dep_b(dep_b, dep_a)


async def dependency_c(dep_b=Depends(dependency_b)):
    dep_c = generate_dep_c()
    try:
        yield dep_c
    finally:
        clean_dep_c(dep_c, dep_b)
```

----------------------------------------

TITLE: Upgrading pip for Python Projects
DESCRIPTION: Upgrades the `pip` package installer to its latest version within the active Python virtual environment. This is a crucial first step to prevent common installation errors and should typically be performed once after creating a virtual environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_8

LANGUAGE: console
CODE:
```
$ python -m pip install --upgrade pip

---> 100%
```

----------------------------------------

TITLE: Basic FastAPI Application (main.py)
DESCRIPTION: This Python code defines a simple FastAPI application with two endpoints: a root endpoint that returns 'Hello: World' and an item endpoint that accepts an `item_id` and an optional query parameter `q`. It demonstrates basic routing and type hinting in FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Adding Max Length Validation with Annotated and Query
DESCRIPTION: This snippet demonstrates how to apply a maximum length validation to an optional query parameter `q` using `Annotated` and `Query`. By including `Query(max_length=50)` within `Annotated`, FastAPI enforces that the provided string for `q` does not exceed 50 characters, while still keeping the parameter optional.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(max_length=50)] = None):
    if q:
        return {"q": q}
    return {"message": "No q parameter"}
```

----------------------------------------

TITLE: Filtering Data with Class Inheritance in FastAPI
DESCRIPTION: This example demonstrates using class inheritance to filter data in FastAPI responses. It defines a base model (`BaseUser`) and extends it with additional fields in the input model (`UserIn`). The function returns the `UserIn` instance but is annotated with the `BaseUser` type, allowing FastAPI to filter the response based on the `BaseUser` model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel, EmailStr


class BaseUser(BaseModel):
    email: EmailStr
    first_name: str
    last_name: Optional[str] = None


class UserIn(BaseUser):
    password: str


@app.post("/users/")
async def create_user(user: UserIn) -> BaseUser:
    return user
```

----------------------------------------

TITLE: Create Hero with HeroCreate, Return HeroPublic
DESCRIPTION: Demonstrates how to use the `HeroCreate` model to receive data from a request and create a `Hero` database model. The `response_model` parameter is used to validate and serialize the data using the `HeroPublic` model before returning it in the API response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_14

LANGUAGE: Python
CODE:
```
response_model=HeroPublic
```

----------------------------------------

TITLE: Awaiting an Asynchronous Function in Python
DESCRIPTION: Shows how to call an asynchronous function using the `await` keyword. The `await` keyword pauses the execution of the current function until the asynchronous function `get_burgers(2)` completes and returns its result, which is then stored in the `burgers` variable.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/async.md#_snippet_4

LANGUAGE: Python
CODE:
```
burgers = await get_burgers(2)
```

----------------------------------------

TITLE: Enforcing HTTPS/WSS with HTTPSRedirectMiddleware - Python
DESCRIPTION: Shows how to add `HTTPSRedirectMiddleware` to a FastAPI application to automatically redirect all incoming HTTP or WS requests to their secure HTTPS or WSS counterparts. This middleware helps enforce secure communication across the application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/middleware.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.httpsredirect import HTTPSRedirectMiddleware

app = FastAPI()

app.add_middleware(HTTPSRedirectMiddleware)
```

----------------------------------------

TITLE: FastAPI Application Dependencies (requirements.txt)
DESCRIPTION: This snippet shows a typical `requirements.txt` file, listing the Python packages required for a FastAPI application, including `fastapi`, `pydantic`, and `uvicorn`, along with their version constraints. This file is used by `pip` to install project dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_1

LANGUAGE: Text
CODE:
```
fastapi>=0.68.0,<0.69.0
pydantic>=1.8.0,<2.0.0
uvicorn>=0.15.0,<0.16.0
```

----------------------------------------

TITLE: Activating a Virtual Environment (Windows Bash)
DESCRIPTION: Activates a Python virtual environment in Windows Bash (e.g., Git Bash) by sourcing the activate script. This modifies the PATH environment variable to prioritize packages within the virtual environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/virtual-environments.md#_snippet_22

LANGUAGE: shell
CODE:
```
source .venv/Scripts/activate
```

----------------------------------------

TITLE: Using async def in FastAPI Path Operation
DESCRIPTION: Demonstrates how to define an asynchronous path operation function in FastAPI using `async def`. This allows the function to handle requests concurrently, improving performance.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/async.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Overriding Default Status Codes with JSONResponse in FastAPI
DESCRIPTION: This snippet demonstrates how to explicitly set HTTP status codes in a FastAPI path operation. While the `@app.post` decorator sets a default status code (e.g., 200), you can override it by returning a `JSONResponse` object with a different `status_code` (e.g., 201 for creation). This allows for fine-grained control over responses based on specific conditions, such as indicating a new resource was created versus an existing one being updated.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/additional-status-codes.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()

@app.post("/items/", status_code=200)
async def create_item(item_id: str, new_item: bool = False):
    if new_item:
        # If a new item is truly created, return 201
        return JSONResponse(
            content={
                "message": f"Item '{item_id}' created successfully."
            },
            status_code=201
        )
    else:
        # If the item already exists or was just updated, return 200
        return {
            "message": f"Item '{item_id}' already exists or was updated."
        }
```

----------------------------------------

TITLE: Reading Heroes from the Database
DESCRIPTION: This snippet demonstrates how to read heroes from the database using a `select()` statement. It includes `limit` and `offset` parameters for pagination.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_6

LANGUAGE: Python
CODE:
```
async def get_heroes(
    *, session: AsyncSession, offset: int = 0, limit: int = 100
) -> List[Hero]:
    heroes = await session.exec(select(Hero).offset(offset).limit(limit))
    return heroes.all()
```

----------------------------------------

TITLE: Updating Items with Request Body using Pydantic
DESCRIPTION: This code extends the basic FastAPI application to include a `PUT` endpoint that accepts a request body. It uses Pydantic to define the structure of the request body, including data types and optional fields.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/hu/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Updating a Hero with HeroUpdate in FastAPI
DESCRIPTION: This snippet demonstrates how to update a hero's data using a PATCH request in FastAPI with SQLModel. It retrieves only the data sent by the client, excluding default values, using `exclude_unset=True`. Then, it updates the hero in the database using `hero_db.sqlmodel_update(hero_data)`. This function updates the `hero_db` with the data from `hero_data`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_17

LANGUAGE: Python
CODE:
```
@app.patch("/heroes/{hero_id}", response_model=HeroRead)
async def update_hero(
    hero_id: int, hero: HeroUpdate, db: Session = Depends(get_db)
):
    hero_db = db.get(Hero, hero_id)
    if not hero_db:
        raise HTTPException(status_code=404, detail="Hero not found")
    hero_data = hero.dict(exclude_unset=True)
    hero_db.sqlmodel_update(hero_data)
    db.add(hero_db)
    db.commit()
    db.refresh(hero_db)
    return hero_db
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: Installs FastAPI with the standard extras using pip. This command is used when you want to directly install the package without using a requirements file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_10

LANGUAGE: bash
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Creating Database Tables on FastAPI Startup
DESCRIPTION: This snippet demonstrates how to automatically create all defined database tables when the FastAPI application starts. It uses the `on_event('startup')` decorator to execute `SQLModel.metadata.create_all(engine)`, ensuring the database schema is ready before handling requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_5

LANGUAGE: Python
CODE:
```
def create_db_and_tables():
    SQLModel.metadata.create_all(engine)

@app.on_event("startup")
def on_startup():
    create_db_and_tables()
```

----------------------------------------

TITLE: Define Separate Input and Output Models - Python
DESCRIPTION: Illustrates creating distinct Pydantic models for input (`UserIn`) and output (`UserOut`). The output model (`UserOut`) is designed to exclude sensitive fields present in the input model, improving security.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_4

LANGUAGE: python
CODE:
```
from pydantic import BaseModel, EmailStr

class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None

class UserOut(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None
```

----------------------------------------

TITLE: Declaring Typed Path Parameters in FastAPI
DESCRIPTION: This example shows how to add a type annotation (`int`) to a path parameter in FastAPI. This enables automatic data conversion from the URL string to a Python integer, providing type safety and better editor support.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Full FastAPI Lifespan Context Manager Definition
DESCRIPTION: This snippet defines the `lifespan` asynchronous context manager using `@asynccontextmanager`. It demonstrates how to establish a database connection during application startup (before `yield`) and disconnect it during application shutdown (after `yield`), ensuring resources are properly managed throughout the application's lifecycle.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/events.md#_snippet_1

LANGUAGE: Python
CODE:
```
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Code to run before the application starts
    await db.connect()
    print("Application startup complete.")
    yield
    # Code to run after the application shuts down
    await db.disconnect()
```

----------------------------------------

TITLE: Lifespan Event Definition with Async Context Manager
DESCRIPTION: Defines an asynchronous lifespan function using `@asynccontextmanager` to manage application startup and shutdown. It simulates loading a machine learning model before the application starts and unloads it after the application shuts down.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/events.md#_snippet_0

LANGUAGE: Python
CODE:
```
from contextlib import asynccontextmanager

from fastapi import FastAPI


@asynccontextmanager
async def lifespan(app: FastAPI):
    # Load the ML model
    model = {}
    yield
    # Clean up the ML models and release the resources
    model.clear()


app = FastAPI(lifespan=lifespan)


@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Asynchronous Route Definition in FastAPI
DESCRIPTION: This code demonstrates how to define an asynchronous route in FastAPI using `async def`. The route calls an asynchronous function `get_burgers` using `await` and returns the result.  The `@app.get` decorator registers the function as a handler for GET requests to the '/burgers' endpoint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/async.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Define a Pydantic Model
DESCRIPTION: This code snippet demonstrates how to define a Pydantic model with type annotations. The `User` model includes fields for `id` (integer), `name` (string), and `joined` (date).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Un modelo de Pydantic
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Installing Dependencies in Dockerfile
DESCRIPTION: This Dockerfile instruction installs the Python dependencies from the requirements.txt file. The --no-cache-dir option prevents pip from storing downloaded packages, reducing the image size. The --upgrade flag ensures that the latest versions of the packages are installed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/deployment/docker.md#_snippet_10

LANGUAGE: Dockerfile
CODE:
```
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt
```

----------------------------------------

TITLE: Installing Dependencies with Caching in Dockerfile
DESCRIPTION: Installs Python dependencies from the requirements.txt file using pip. The --no-cache-dir option is used to prevent pip from storing the downloaded packages, reducing the image size.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/deployment/docker.md#_snippet_8

LANGUAGE: Dockerfile
CODE:
```
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt
```

----------------------------------------

TITLE: Dockerfile for Single File FastAPI App
DESCRIPTION: Dockerfile configuration for a FastAPI application consisting of a single Python file (main.py).  It copies the requirements, installs dependencies, and then copies the main.py file into the /code directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/deployment/docker.md#_snippet_13

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (1)
COPY ./main.py /code/
```

----------------------------------------

TITLE: Pydantic Model Usage
DESCRIPTION: Demonstrates the use of Pydantic models for data validation and type conversion. Pydantic models allow you to define data structures as classes with type annotations, and automatically validate and convert data when an instance of the class is created.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/python-types.md#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import List

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tags: List[str] = []


class Image(BaseModel):
    url: str
    name: str


class Offer(BaseModel):
    name: str
    description: str | None = None
    price: float
    items: List[Item]


class Product(BaseModel):
    name: str
    description: str | None = None
    price: float
    tags: List[str] = []
    image: Image | None = None
```

----------------------------------------

TITLE: Asynchronous Route Definition in FastAPI
DESCRIPTION: This code defines an asynchronous route in FastAPI using `async def`. It calls an asynchronous function `get_burgers` using `await` and returns the result.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/async.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Main Application File with Settings Dependency
DESCRIPTION: This snippet demonstrates how to use settings as a dependency in a FastAPI application. It defines a `get_settings` function with `@lru_cache` that returns a `Settings` object. This function is then used as a dependency in a route to access the configured values.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/settings.md#_snippet_12

LANGUAGE: Python
CODE:
```
from functools import lru_cache

from fastapi import Depends, FastAPI

from .config import Settings

app = FastAPI()


@lru_cache
def get_settings():
    return Settings()
```

----------------------------------------

TITLE: FastAPI Application with Authenticated GET and POST Endpoints
DESCRIPTION: This snippet defines a FastAPI application with two endpoints, `/items/` (GET and POST), both requiring an `X-Token` header for authentication. It demonstrates how to use `Header` for dependency injection and raise `HTTPException` for invalid or missing tokens, ensuring secure access to resources.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Header, HTTPException

app = FastAPI()

@app.get("/items/")
async def read_items(x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]

@app.post("/items/")
async def create_item(item: dict, x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return item
```

----------------------------------------

TITLE: Returning HTTP 401 Unauthorized for Invalid Credentials
DESCRIPTION: This snippet shows how to respond with an HTTP 401 Unauthorized status code when credentials are incorrect. It uses FastAPI's `HTTPException` to set the status, provide a detail message, and include the `WWW-Authenticate: Basic` header, prompting the client (browser) to re-request credentials.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/security/http-basic-auth.md#_snippet_3

LANGUAGE: Python
CODE:
```
raise HTTPException(
    status_code=status.HTTP_401_UNAUTHORIZED,
    detail="Incorrect username or password",
    headers={"WWW-Authenticate": "Basic"},
)
```

----------------------------------------

TITLE: Async FastAPI App
DESCRIPTION: Creates an asynchronous FastAPI application with two endpoints: a root endpoint that returns a "Hello World" message and an `/items/{item_id}` endpoint that returns the item ID and an optional query parameter. Uses `async def` for asynchronous execution.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: JSON Schema examples in Pydantic models
DESCRIPTION: Declares examples for a Pydantic model that will be added to the generated JSON Schema. Uses the `model_config` attribute in Pydantic v2 to set `json_schema_extra` with a dictionary containing the examples.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/schema-extra-example.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel, ConfigDict


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                }
            ]
        }
    }
```

----------------------------------------

TITLE: Dependency Injection with yield and HTTPException (Python 3.8+ non-annotated)
DESCRIPTION: This code demonstrates how to use dependencies with `yield` and `HTTPException` in FastAPI. It includes a `try` block to catch exceptions and raise an `HTTPException` in the exit code after the `yield`. The dependency checks for a token and raises an exception if it's invalid, otherwise it yields control to the route function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_7

LANGUAGE: python
CODE:
```
from typing import Optional

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


async def get_current_user(token: Optional[str] = Depends(oauth2_scheme)):
    if token == "jflsdkjf":
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Incorrect username or password", headers={"WWW-Authenticate": "Bearer"})
    return "The user"


@app.get("/items/")
async def read_items(current_user: Optional[str] = Depends(get_current_user)):
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]


async def get_db():
    try:
        db = "fake_db"
        yield db
    except:  # noqa: E722
        print("Oooops, there was an error")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Internal error")
    finally:
        print("Closing connection")


@app.get("/db-items/")
async def read_db_items(db: Optional[str] = Depends(get_db)):
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]
```

----------------------------------------

TITLE: Function with Type Hints - Python
DESCRIPTION: This example shows how to add type hints to the function parameters.  It specifies that both `first_name` and `last_name` should be strings. This enables better code completion and error checking in editors.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/python-types.md#_snippet_2

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name
```

----------------------------------------

TITLE: Defining an Integer Parameter in FastAPI
DESCRIPTION: This example demonstrates how to define an integer parameter in FastAPI using Python's type hinting. The `item_id: int` syntax specifies that the `item_id` parameter should be an integer. FastAPI will automatically validate the input and return an error if it is not an integer.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Combining Multiple Body and Query Parameters in FastAPI
DESCRIPTION: Demonstrates how to define a FastAPI path operation that accepts multiple body parameters (Pydantic models and singular values using `Body()`) along with an optional query parameter. FastAPI automatically distinguishes between body and query parameters based on their declaration.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI, Body
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None

class User(BaseModel):
    username: str
    full_name: Union[str, None] = None

@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item,
    user: User,
    importance: int = Body(gt=0),
    q: Union[str, None] = None,
):
    results = {"item_id": item_id, "item": item.dict(), "user": user.dict(), "importance": importance}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Sub-dependencies with Yield (Python 3.8+)
DESCRIPTION: Illustrates how to create nested dependencies with `yield`, where one dependency relies on another. FastAPI ensures that the exit code in each dependency with `yield` is executed in the correct order. This example uses Python 3.8+ syntax.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_3

LANGUAGE: python
CODE:
```
from typing import Generator

from fastapi import Depends, FastAPI

app = FastAPI()


async def dependency_a() -> Generator[str, None, None]:
    yield "dependency_a"


async def dependency_b(dep_a: str = Depends(dependency_a)) -> Generator[str, None, None]:
    yield f"dependency_b with {dep_a}"


async def dependency_c(dep_b: str = Depends(dependency_b)) -> str:
    return f"dependency_c with {dep_b}"


@app.get("/items/")
async def read_items(dep_c: str = Depends(dependency_c)):
    return dep_c
```

----------------------------------------

TITLE: FastAPI application with Pydantic models
DESCRIPTION: This FastAPI application defines two path operations that use Pydantic models for request and response payloads. The models `Item` and `ResponseMessage` are used to define the schemas for the data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/advanced/generate-clients.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


class ResponseMessage(BaseModel):
    message: str


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.post("/items", response_model=ResponseMessage)
async def create_item(item: Item):
    return ResponseMessage(message=f"Item received with name {item.name}")


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}

```

----------------------------------------

TITLE: Deleting a Hero by ID in FastAPI
DESCRIPTION: This FastAPI endpoint handles the deletion of a `Hero` entry by its ID. It retrieves the hero, raises a 404 error if not found, deletes it from the session, commits the change, and returns a success message or the deleted hero's ID.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_9

LANGUAGE: Python
CODE:
```
@app.delete("/heroes/{hero_id}")
def delete_hero(*, session: SessionDep, hero_id: int):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    session.delete(hero)
    session.commit()
    return {"ok": True}
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare an integer parameter in a FastAPI application using Python type hints. FastAPI uses this declaration for validation and documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Importing FastAPI Class
DESCRIPTION: This Python code imports the FastAPI class, which is essential for creating a FastAPI application. The FastAPI class provides the core functionality for defining API endpoints, handling requests, and generating API documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
FastAPI
```

----------------------------------------

TITLE: Declaring a Dependency in a Path Operation Function
DESCRIPTION: Demonstrates how to declare a dependency in a path operation function using Depends. The dependency function (common_parameters) is passed to Depends, and FastAPI automatically calls the dependency and injects the result into the path operation function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI

app = FastAPI()


async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}


@app.get("/items/")
async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This Python code defines a simple FastAPI application with two endpoints: a root endpoint ('/') that returns a greeting and an endpoint ('/items/{item_id}') that returns an item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This code snippet demonstrates how to create an asynchronous FastAPI application using `async def` for the route handlers. This is useful when your code uses `async` / `await` for asynchronous operations. It defines two routes: a root route and an items route, both using asynchronous functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This code snippet demonstrates how to create a basic FastAPI application with two routes: a root route that returns a simple JSON response and an items route that accepts an item ID and an optional query parameter. It uses the FastAPI framework to define the application and the routes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Verify required scopes in FastAPI
DESCRIPTION: This snippet demonstrates how to verify that all required scopes for a dependency and its dependents (including route operations) are included in the scopes provided by the received token. It uses `security_scopes.scopes` to check if all required scopes are present and raises an `HTTPException` if any scope is missing.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/security/oauth2-scopes.md#_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import Depends, FastAPI, HTTPException, Security, SecurityScopes
from pydantic import BaseModel, ValidationError

app = FastAPI()


class TokenData(BaseModel):
    username: str | None = None
    scopes: list[str] = []


async def oauth2_scheme(token: str):
    return token


async def get_current_user(security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)):
    if security_scopes.scopes:
        raise HTTPException(status_code=403, detail="Not enough permissions", headers={
            "WWW-Authenticate": f"Bearer scope={security_scopes.scope_str}"})
    try:
        username = "someuser"
        scopes = ["myscope"]
        token_data = TokenData(username=username, scopes=scopes)
    except ValidationError:
        raise HTTPException(status_code=403, detail="Invalid token", headers={
            "WWW-Authenticate": f"Bearer scope={security_scopes.scope_str}"})
```

LANGUAGE: python
CODE:
```
    for scope in security_scopes.scopes:
        if scope not in token_data.scopes:
            raise HTTPException(status_code=403, detail="Not enough permissions", headers={
                "WWW-Authenticate": f"Bearer scope={security_scopes.scope_str}"})
```

----------------------------------------

TITLE: Defining Path Operations using FastAPI APIRouter
DESCRIPTION: This example demonstrates how to define multiple path operations (GET requests in this case) using the APIRouter instance. Each operation is associated with a specific path and can include tags for documentation purposes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()

@router.get("/users/", tags=["users"])
async def read_users():
    return [{"username": "Rick"}, {"username": "Morty"}]

@router.get("/users/me", tags=["users"])
async def read_user_me():
    return {"username": "fakecurrentuser"}

@router.get("/users/{username}", tags=["users"])
async def read_user(username: str):
    return {"username": username}
```

----------------------------------------

TITLE: Declaring OpenAPI Examples with openapi_examples in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare OpenAPI examples in FastAPI using the `openapi_examples` parameter within `Body`. It defines multiple examples with summaries, descriptions, and values, which are then displayed in the documentation interface.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/schema-extra-example.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import Body, FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None


@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(
        openapi_examples={
            "normal": {
                "summary": "A normal example",
                "description": "A **normal** item works correctly.",
                "value": {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                },
            },
            "invalid": {
                "summary": "Invalid data",
                "description": "Here's what happens when you don't provide the right data.",
                "value": {
                    "name": "Bar",
                    "price": "thirty five point four",
                },
            },
            "alternative": {
                "summary": "An alternative example",
                "description": "An alternative example of an item",
                "value": {
                    "name": "Baz",
                    "price": 50.2,
                    "tax": 0,
                },
            },
        },
    ),
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Defining Token Data Model with Scopes - FastAPI Python
DESCRIPTION: Creates a Pydantic model (`TokenData`) to represent the structure of the data stored within the authentication token's payload. It includes the username and a list of scopes (`scopes`) granted to the user, used for data validation after decoding the token. Requires `BaseModel` from `pydantic` and `Union` from `typing`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_1

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel
from typing import Union

class TokenData(BaseModel):
    username: Union[str, None] = None
    scopes: list[str] = []
```

----------------------------------------

TITLE: Get user data and raise HTTPException if user not found
DESCRIPTION: This code snippet retrieves user data based on the username provided in the form data. If the user is not found, it raises an HTTPException with a 400 status code, indicating invalid credentials.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/security/simple-oauth2.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm

app = FastAPI()


@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    user_dict = fake_users_db.get(form_data.username)
    if not user_dict:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Incorrect username or password")
    return {"access_token": form_data.username, "token_type": "bearer"}
```

----------------------------------------

TITLE: Including Router with Custom Parameters (Python)
DESCRIPTION: Includes an existing APIRouter (admin.router) using app.include_router(), applying custom settings like prefix, tags, dependencies, and responses during inclusion without altering the original router definition.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_20

LANGUAGE: Python
CODE:
```
app.include_router(
    admin.router,
    prefix="/admin",
    tags=["admin"],
    dependencies=[Depends(get_token_header)],
    responses={418: {"description": "I'm a teapot"}},
)
```

----------------------------------------

TITLE: Initializing FastAPI with Global Dependencies (Python)
DESCRIPTION: This snippet demonstrates how to apply global dependencies to a FastAPI application. By passing a list of `Depends()` objects to the `dependencies` parameter of the `FastAPI` constructor, the specified dependency functions (`verify_key` and `verify_token`) will be executed for every incoming request before any path operation, ensuring application-wide validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_0

LANGUAGE: Python
CODE:
```
app = FastAPI(dependencies=[Depends(verify_key), Depends(verify_token)])
```

----------------------------------------

TITLE: Lifespan Event Definition with Startup and Shutdown Logic in FastAPI
DESCRIPTION: Defines an asynchronous lifespan function that simulates loading a machine learning model during startup (before requests are handled) and removing it from memory during shutdown (after requests are handled). This function is decorated with `@asynccontextmanager` to make it an async context manager.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/events.md#_snippet_0

LANGUAGE: Python
CODE:
```
@asynccontextmanager
async def lifespan(app: FastAPI): # pragma: no cover
    # Load the ML model
    model = FakeModel()
    app.state.model = model
    yield
    # Clean up the ML models and release the resources
    del app.state.model
```

----------------------------------------

TITLE: Defining Lifespan Events with FastAPI
DESCRIPTION: This code defines a lifespan event handler for a FastAPI application. It simulates loading a machine learning model during startup (before the application starts receiving requests) and unloading it during shutdown (after the application has finished processing requests). This allows for resource management and cleanup during the application's lifecycle.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/advanced/events.md#_snippet_0

LANGUAGE: Python
CODE:
```
from contextlib import asynccontextmanager

from fastapi import FastAPI


fake_models_db = {}


async def fake_load_model(model_name: str):
    fake_models_db[model_name] = {}


async def fake_unload_model(model_name: str):
    del fake_models_db[model_name]


@asynccontextmanager
async def lifespan(app: FastAPI):
    # Load the ML model
    await fake_load_model("my_model")
    yield
    # Clean up the ML models and release the resources
    await fake_unload_model("my_model")


app = FastAPI(lifespan=lifespan)
```

----------------------------------------

TITLE: Defining FastAPI Lifespan Async Context Manager
DESCRIPTION: This snippet defines the `lifespan` function as an `asynccontextmanager`, which is used by FastAPI to manage application startup and shutdown events. The code before `yield` executes on startup, and the code after `yield` executes on shutdown, making it suitable for initializing and cleaning up shared resources.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_1

LANGUAGE: Python
CODE:
```
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Load the ML model
    ml_models["regression_model"] = RegressionModel()
    yield
    # Clean up the ML models
    ml_models.clear()
```

----------------------------------------

TITLE: Query Parameter with min_length and Annotated
DESCRIPTION: This code snippet demonstrates how to add both min_length and max_length validations to a query parameter using Annotated. It shows how to define a query parameter with minimum and maximum length constraints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#_snippet_11

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Annotated[str | None, Query(min_length=3, max_length=50)] = None
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Defining Asynchronous GET Path Operation in FastAPI
DESCRIPTION: This snippet defines an asynchronous path operation function for the root URL (`/`) using the `GET` HTTP method. FastAPI calls this `async` function when a `GET` request is received at the specified path, making it suitable for I/O-bound operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_9

LANGUAGE: Python
CODE:
```
@app.get("/")
async def root():
```

----------------------------------------

TITLE: Starting FastAPI with Multiple Workers using `fastapi` command
DESCRIPTION: This command initiates the FastAPI application located in `main.py` using the `fastapi` CLI, configuring it to run with 4 worker processes. It leverages the built-in `fastapi` runner to manage the application's concurrency, providing a simplified startup experience.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/server-workers.md#_snippet_0

LANGUAGE: Shell
CODE:
```
fastapi run --workers 4 main.py
```

----------------------------------------

TITLE: Mounting Sub-Application in Main App - Python
DESCRIPTION: This snippet demonstrates how to mount the previously defined `subapi` instance onto the main `app` instance. The sub-application is mounted at the path `/subapi`, meaning all its routes will be accessible under `/subapi/...`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/sub-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
subapi = FastAPI()
# ... other subapi definitions ...

app.mount("/subapi", subapi)
```

----------------------------------------

TITLE: Updating FastAPI Example with PUT Request and Pydantic Model
DESCRIPTION: This code modifies the FastAPI application to include a PUT endpoint at '/items/{item_id}'. It defines a Pydantic model `Item` to represent the request body, which includes a name (string), price (float), and an optional is_offer (boolean). The `update_item` function handles the PUT request, taking the item_id and the Item model as input.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Defining a GET Path Operation Decorator in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a GET path operation decorator in FastAPI using the `@app.get("/")` decorator. It associates the function below it with the root path ("/") and the HTTP GET method, allowing FastAPI to route incoming GET requests to that path to the decorated function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Defining a GET Path Operation
DESCRIPTION: Defines a path operation using the `@app.get()` decorator, associating the function below with the `/` path and the HTTP GET method. This allows the function to handle requests to the root URL.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Defining a GET Path Operation
DESCRIPTION: This snippet demonstrates how to define a GET path operation using the `@app.get()` decorator in FastAPI. The decorator associates the following asynchronous Python function with the specified URL path (`/`) and the HTTP GET method, making it responsible for handling incoming GET requests to that route.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating a SQLModel Database Engine
DESCRIPTION: This Python code creates a SQLModel engine, which is responsible for managing connections to the SQLite database file 'database.db'. The 'check_same_thread=False' argument is crucial for SQLite when used with FastAPI, allowing multiple threads (e.g., from different requests or dependencies) to safely access the same database connection.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_2

LANGUAGE: python
CODE:
```
from sqlmodel import create_engine

sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"

engine = create_engine(sqlite_url, echo=True, connect_args={"check_same_thread": False})
```

----------------------------------------

TITLE: Recommended FastAPI Version Pinning for Stability
DESCRIPTION: This snippet reiterates the recommended version pinning strategy for FastAPI, emphasizing stability by allowing only 'bug' version updates (e.g., `0.45.x`) while preventing 'minor' version updates (e.g., `0.46.0`) that could introduce breaking changes. This approach balances stability with receiving critical bug fixes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/versions.md#_snippet_2

LANGUAGE: txt
CODE:
```
fastapi>=0.45.0,<0.46.0
```

----------------------------------------

TITLE: Declaring Root Level List of Pydantic Models Parameter (Python 3.9+)
DESCRIPTION: Declares the entire request body parameter as a list where each element must conform to the `Image` Pydantic model, using the native `list` type hint for Python 3.9+. This allows sending an array of complex objects directly as the request payload.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_12

LANGUAGE: Python
CODE:
```
images: list[Image]
```

----------------------------------------

TITLE: Configuring APIRouter for Items
DESCRIPTION: Demonstrates configuring an `APIRouter` instance in `app/routers/items.py` for item-related path operations. It sets a common `prefix` (`/items`), `tags` (`items`), a required `dependencies` list (using the `get_token` dependency), and default `responses` for all included routes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/bigger-applications.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends, HTTPException

from ..dependencies import get_token

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_token)],
    responses={404: {"description": "Not found"}},
)


@router.get("/")
async def read_items():
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]


@router.get("/{item_id}")
async def read_item(item_id: str):
    if item_id != "foo":
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item_id": item_id, "description": "The Foo description"}

```

----------------------------------------

TITLE: Updating a Hero with HeroUpdate in FastAPI
DESCRIPTION: This FastAPI endpoint handles partial updates of a hero using an HTTP PATCH operation. It accepts a `HeroUpdate` model, extracts only the fields that were explicitly set by the client using `exclude_unset=True`, and applies these changes to the existing hero record in the database.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_18

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, HTTPException
from sqlmodel import Session, select

# Assuming Hero, HeroUpdate, HeroPublic are defined
router = APIRouter()

@router.patch("/heroes/{hero_id}", response_model=HeroPublic)
def update_hero(*, session: Session, hero_id: int, hero: HeroUpdate):
    db_hero = session.get(Hero, hero_id)
    if not db_hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    hero_data = hero.dict(exclude_unset=True)
    for key, value in hero_data.items():
        setattr(db_hero, key, value)
    session.add(db_hero)
    session.commit()
    session.refresh(db_hero)
    return db_hero
```

----------------------------------------

TITLE: Path Parameter Ordering in FastAPI
DESCRIPTION: This example demonstrates the importance of path parameter ordering in FastAPI. The `/users/me` path must be defined before `/users/{user_id}` to avoid misinterpretation of the 'me' value as a user ID.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Path Parameter Ordering
DESCRIPTION: This example demonstrates the importance of path operation order in FastAPI. The `/users/me` path must be defined before `/users/{user_id}` to avoid the latter incorrectly matching `/users/me`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Running the FastAPI Application - Console
DESCRIPTION: Command to start the uvicorn server, hosting the FastAPI application defined in the 'app.main' module's 'app' variable with automatic reloading enabled.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_7

LANGUAGE: Console
CODE:
```
uvicorn app.main:app --reload
```

----------------------------------------

TITLE: Defining Pydantic Models (Python 3.9+)
DESCRIPTION: Illustrates defining a Pydantic model for data validation and structure, compatible with Python 3.9+ syntax. It shows how Pydantic uses type hints to validate and convert data, providing a robust way to define expected data shapes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_28

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import Optional
from pydantic import BaseModel

class Product(BaseModel):
    product_id: int
    name: str
    price: float
    is_available: bool = True
    categories: list[str] = []
```

----------------------------------------

TITLE: Dockerfile for Single-File FastAPI App
DESCRIPTION: Dockerfile example for a FastAPI application contained in a single file (main.py). It copies the requirements.txt and main.py files, installs dependencies, and sets up the working directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/deployment/docker.md#_snippet_13

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt
```

----------------------------------------

TITLE: Creating a Hero
DESCRIPTION: This snippet shows how to define a Hero model and use it as a type hint for a request body. It also demonstrates how to use the model as a return type for a function, which will be reflected in the automatically generated documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def create_hero(
    *, session: SessionDep, hero: Hero
) -> Hero:
    db_hero = Hero.model_validate(hero)
    session.add(db_hero)
    await session.commit()
    await session.refresh(db_hero)
    return db_hero
```

----------------------------------------

TITLE: Asynchronous Path Operation Function
DESCRIPTION: Defines an asynchronous path operation function `read_burgers` using `async def` and the `@app.get` decorator. It calls the asynchronous function `get_burgers` using `await` to retrieve the burgers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/async.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Pydantic v2 Settings Class
DESCRIPTION: Defines a Pydantic settings class inheriting from `BaseSettings` to manage application configuration. It includes type annotations, default values, and validation using `Field()` for settings like admin email, app name, and items per user.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/advanced/settings.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseSettings, Field


class Settings(BaseSettings):
    admin_email: str
    app_name: str = Field("Awesome API", env="APP_NAME")
    items_per_user: int = 50

    class Config:
        env_file = ".env"

```

----------------------------------------

TITLE: Reducing Duplication with Pydantic Model Inheritance in Python
DESCRIPTION: This snippet demonstrates how to reduce code duplication by using Pydantic model inheritance. A `UserBase` model defines common attributes, and `UserIn`, `UserInDB`, and `UserOut` models inherit from it, adding only their specific fields (e.g., `password`, `hashed_password`) or simply inheriting all fields, ensuring consistency and maintainability.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Optional
from pydantic import BaseModel

# Base model with common fields
class UserBase(BaseModel):
    username: str
    email: str
    full_name: Optional[str] = None

# Input model: inherits from UserBase, adds password
class UserIn(UserBase):
    password: str

# Database model: inherits from UserBase, adds hashed_password
class UserInDB(UserBase):
    hashed_password: str

# Output model: inherits from UserBase (no password or hashed_password)
class UserOut(UserBase):
    pass
```

----------------------------------------

TITLE: Creating an Enum Class for Predefined Values in FastAPI
DESCRIPTION: This example shows how to create an Enum class in Python for use with FastAPI.  The Enum class inherits from both `str` and `Enum` to ensure the API documentation correctly identifies the values as strings. Class attributes are defined with fixed values representing the valid options.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/path-params.md#_snippet_3

LANGUAGE: python
CODE:
```
from enum import Enum


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"
```

----------------------------------------

TITLE: Password Hashing Example
DESCRIPTION: This code snippet shows how to hash passwords for security purposes. Hashing transforms a password into a seemingly random string of bytes, making it impossible to reverse engineer the original password from the hash.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/security/simple-oauth2.md#_snippet_3

LANGUAGE: Python
CODE:
```
return user
```

----------------------------------------

TITLE: Creating Async FastAPI App Python
DESCRIPTION: This Python code is similar to the basic example but uses `async def` for the route handler functions. This is suitable when the handler function needs to perform asynchronous operations like database calls or external API requests using libraries that support `async`/`await`. It requires an ASGI server (like Uvicorn) to run.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/index.md#_snippet_2

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Importing Path and Annotated in FastAPI
DESCRIPTION: This snippet demonstrates how to import `Path` from `fastapi` and `Annotated` from `typing`. `Path` is used for declaring path parameters, while `Annotated` is recommended for type hints with metadata in FastAPI versions 0.95.0 and above.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Path
```

----------------------------------------

TITLE: Declaring Pydantic Model Attributes with Field in Python
DESCRIPTION: This snippet illustrates how to use `Field` within a Pydantic `BaseModel` to define attributes with default values, validation, and metadata. It shows how `Field` parameters like `default`, `title`, `max_length`, `gt` (greater than), and `description` are applied to model fields.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-fields.md#_snippet_1

LANGUAGE: Python
CODE:
```
description: Union[str, None] = Field(
    default=None, title="Description of the item", max_length=300
)
price: float = Field(gt=0, description="The price must be greater than zero")
```

----------------------------------------

TITLE: Awaiting an Asynchronous Function Call in Python
DESCRIPTION: This snippet demonstrates the use of the `await` keyword in Python. When `await` is used before an asynchronous function call (like `get_burgers`), it tells the Python event loop to pause the current function's execution until the awaited operation completes, allowing other tasks to run concurrently in the meantime.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/async.md#_snippet_3

LANGUAGE: Python
CODE:
```
burgers = await get_burgers(2)
```

----------------------------------------

TITLE: Generating JWT Tokens
DESCRIPTION: This snippet demonstrates how to generate JWT tokens using the `jose` library. It includes setting up the secret key, algorithm, and expiration time, as well as creating a helper function to generate the access token.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/security/oauth2-jwt.md#_snippet_3

LANGUAGE: Python
CODE:
```
from datetime import timedelta
from typing import Annotated

from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: str | None = None


fake_users_db = {
    "johndoe": {
        "username": "johndoe",
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",
    }
}


SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
```

----------------------------------------

TITLE: Get user and validate credentials
DESCRIPTION: This snippet demonstrates how to retrieve user data from a database (in this case, a fake database) based on the username provided in the form data. It also includes error handling for incorrect usernames or passwords using HTTPException.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/security/simple-oauth2.md#_snippet_1

LANGUAGE: python
CODE:
```
    user = fake_users_db.get(form_data.username)
    if not user:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Incorrect username or password", headers={"WWW-Authenticate": "Bearer"})
```

----------------------------------------

TITLE: Installing Uvicorn ASGI server
DESCRIPTION: This command installs Uvicorn, an ASGI server, which is required for running FastAPI applications in a production environment. The `[standard]` extra includes commonly used features.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"

---> 100%
```

----------------------------------------

TITLE: Defining Union Response Model with FastAPI and Pydantic
DESCRIPTION: Shows how to use `typing.Union` (or `|` in Python 3.10+) with FastAPI's `response_model` parameter. This allows an endpoint to return a response that can conform to the schema of one of several specified Pydantic models, useful for APIs that return different object types based on logic. FastAPI will automatically generate the corresponding OpenAPI `anyOf` schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/extra-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class CarItem(BaseModel):
    model: str = "Car"
    color: str
    wheel_count: int

class PlaneItem(BaseModel):
    model: str = "Plane"
    color: str
    wing_count: int

@app.get("/items/{item_id}", response_model=Union[PlaneItem, CarItem])
def read_item(item_id: str):
    # Dummy logic to return different types
    if item_id.endswith("car"):
        return {"model": "Car", "color": "red", "wheel_count": 4}
    else:
        return {"model": "Plane", "color": "blue", "wing_count": 2}
```

----------------------------------------

TITLE: Reading a Single Hero by ID in FastAPI
DESCRIPTION: This FastAPI endpoint retrieves a single `Hero` object from the database using its `hero_id`. It queries the session for the hero and raises an `HTTPException` with a 404 status if the hero is not found, ensuring proper error handling.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_8

LANGUAGE: Python
CODE:
```
@app.get("/heroes/{hero_id}", response_model=Hero)
def read_hero(*, session: SessionDep, hero_id: int):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    return hero
```

----------------------------------------

TITLE: Update FastAPI App with PUT Request
DESCRIPTION: Updates the FastAPI application to handle PUT requests with a request body. Defines a Pydantic model `Item` to represent the structure of the request body, including name, price, and an optional offer flag.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Using Context Managers in FastAPI Dependencies with Yield
DESCRIPTION: Shows how to use `with` statements within FastAPI dependencies that use `yield` to leverage context managers. This allows for resource management and cleanup within the dependency lifecycle.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_8

LANGUAGE: Python
CODE:
```
async def get_db():
    db = FakeDatabase()
    try:
        yield db
    finally:
        await db.close()

async def dependency_a(db: FakeDatabase):
    async with SomeContextManager() as token:
        yield
```

----------------------------------------

TITLE: Run the Docker container
DESCRIPTION: This console command runs a Docker container based on the myimage image. The -d flag runs the container in detached mode (in the background). The --name flag assigns the name mycontainer to the container. The -p 80:80 flag maps port 80 on the host to port 80 on the container.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/deployment/docker.md#_snippet_12

LANGUAGE: console
CODE:
```
$ docker run -d --name mycontainer -p 80:80 myimage
```

----------------------------------------

TITLE: Updating FastAPI App with PUT Request and Pydantic Model
DESCRIPTION: This code extends the FastAPI application to include a PUT endpoint at '/items/{item_id}'. It defines a Pydantic model `Item` to represent the structure of the request body, including fields for 'name' (string), 'price' (float), and an optional 'is_offer' (boolean). The `update_item` function handles the PUT request, validates the request body against the `Item` model, and returns a response containing the item's name and ID.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Running Uvicorn with Docker CMD
DESCRIPTION: This Docker `CMD` instruction defines the default command to execute when a container starts. It runs the Uvicorn server, serving the FastAPI application instance named `app` from the `main` module (e.g., `main.py`) on all available network interfaces (`0.0.0.0`) and port `80`. This is a standard setup for containerized FastAPI applications.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_14

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Import OAuth2PasswordRequestForm in FastAPI
DESCRIPTION: This code snippet demonstrates how to import `OAuth2PasswordRequestForm` from `fastapi.security` and use it as a dependency in a FastAPI path operation to handle username and password retrieval from form data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/security/simple-oauth2.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.security import OAuth2PasswordRequestForm

# ...

@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    # ...
```

----------------------------------------

TITLE: OAuth2 Security Scheme Declaration with Scopes in FastAPI
DESCRIPTION: Declares an OAuth2 security scheme with available scopes ('me' and 'items') for API authentication and authorization. The `scopes` parameter is a dictionary where keys are scope names and values are their descriptions. This declaration makes the scopes appear in the API documentation, allowing users to select which scopes to grant access to.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/security/oauth2-scopes.md#_snippet_0

LANGUAGE: Python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token", scopes=scopes)
```

LANGUAGE: Python
CODE:
```
scopes = {
    "me": "read information about the current user",
    "items": "read items",
}
```

----------------------------------------

TITLE: Declaring Query Parameters with Pydantic Model in FastAPI
DESCRIPTION: This snippet demonstrates how to define a group of related query parameters using a Pydantic `BaseModel`. Each field in the model corresponds to a query parameter, allowing for type validation, default values, and additional metadata. The model is then injected into a FastAPI path operation using `Query()`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-param-models.md#_snippet_0

LANGUAGE: python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query
from pydantic import BaseModel

app = FastAPI()

class CommonQueryParams(BaseModel):
    q: Optional[str] = None
    skip: int = 0
    limit: int = 100

@app.get("/items/")
async def read_items(commons: CommonQueryParams = Query()):
    response = {}
    if commons.q:
        response.update({"q": commons.q})
    items = [{"item_id": "Foo"}, {"item_id": "Bar"}]
    response.update({"items": items[commons.skip : commons.skip + commons.limit]})
    return response
```

----------------------------------------

TITLE: Asynchronous Context Manager with lifespan
DESCRIPTION: This code snippet demonstrates how to define an asynchronous context manager using `@asynccontextmanager` for managing the application's lifespan. It shows the structure of the context manager with setup code before `yield` and teardown code after `yield`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/advanced/events.md#_snippet_2

LANGUAGE: Python
CODE:
```
from contextlib import asynccontextmanager

from fastapi import FastAPI


@asynccontextmanager
async def lifespan(app: FastAPI):
    # Load the ML model
    print("Startup logic")
    yield
    # Clean up the ML models and release the resources
    print("Shutdown logic")


app = FastAPI(lifespan=lifespan)
```

----------------------------------------

TITLE: Declaring OpenAPI Examples with openapi_examples in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare OpenAPI-specific examples using the `openapi_examples` parameter within a FastAPI application. It showcases the usage of `openapi_examples` with `Body` to define multiple example requests with summaries, descriptions, and values.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/schema-extra-example.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import Body, FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None


@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(
        openapi_examples={
            "normal": {
                "summary": "A normal example",
                "description": "A **normal** item works correctly.",
                "value": {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                },
            },
            "invalid": {
                "summary": "Invalid data sent",
                "description": "An item that has invalid data",
                "value": {
                    "name": "Bar",
                    "price": "thirty five point four",
                },
            },
        },
    ),
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Enum Class Creation
DESCRIPTION: This example demonstrates how to create an Enum class in Python to define a set of valid values for a path parameter.  It inherits from both `str` and `Enum` to ensure the enum values are strings and are correctly rendered in the API documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/path-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
from enum import Enum


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"
```

----------------------------------------

TITLE: Asynchronous Function Definition
DESCRIPTION: Defines an asynchronous function `get_burgers` using `async def`. This allows the function to use `await` internally, enabling non-blocking execution. The function takes an integer as input and returns burgers asynchronously.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # burgerleri oluşturmak için asenkron birkaç iş
    return burgers
```

----------------------------------------

TITLE: Using SecurityScopes in FastAPI dependencies
DESCRIPTION: This code snippet illustrates how to use `SecurityScopes` in FastAPI to manage security scopes within dependencies. It shows how to declare a `SecurityScopes` parameter and use it to access the required scopes for the dependency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/security/oauth2-scopes.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Annotated, List, Optional

from fastapi import Depends, FastAPI, HTTPException, Security
from fastapi.security import OAuth2PasswordBearer, SecurityScopes
from pydantic import BaseModel

app = FastAPI()


class User(BaseModel):
    username: str
    full_name: Optional[str] = None
    disabled: Optional[bool] = None
    scopes: List[str] = []


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: Optional[str] = None
    scopes: List[str] = []


oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


async def get_current_user(
    security_scopes: SecurityScopes,
    token: Annotated[str, Depends(oauth2_scheme)],
):
    return User(username=token, scopes=[])


async def get_current_active_user(
    current_user: Annotated[User, Security(get_current_user, scopes=["me"])]
):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user


@app.get("/users/me/items/", dependencies=[Security(get_current_active_user, scopes=["items"])])
async def read_own_items():
    return [{"item_id": "Foo", "owner": "current_user.username"}]
```

----------------------------------------

TITLE: Combining Response Model, Status Code, and OpenAPI Responses in FastAPI (Python)
DESCRIPTION: This snippet illustrates how to combine `response_model`, `status_code`, and the `responses` parameter in FastAPI. It defines a `response_model` for the successful `200` response, adds a custom example for it, and also declares a `404` response with its own Pydantic model and description, enriching the OpenAPI documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/additional-responses.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    id: str
    value: str

class Message(BaseModel):
    message: str

app = FastAPI()

@app.get(
    "/items/{item_id}",
    response_model=Item,
    responses={
        404: {"model": Message, "description": "The item was not found"},
        200: {
            "description": "Item found successfully",
            "content": {
                "application/json": {
                    "example": {"id": "foo", "value": "The Foo Wrestlers"}
                }
            }
        }
    }
)
async def read_item(item_id: str):
    if item_id == "foo":
        return {"id": "foo", "value": "The Foo Wrestlers"}
    return {"message": "Item not found"}
```

----------------------------------------

TITLE: Testing Authenticated FastAPI Endpoints with TestClient
DESCRIPTION: This snippet provides comprehensive tests for a FastAPI application with authenticated GET and POST endpoints. It demonstrates how to send headers and JSON bodies with `TestClient` requests, asserting various status codes and response contents for cases with valid, invalid, and missing authentication tokens.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient
from app.app_b.main import app

client = TestClient(app)

def test_read_items():
    response = client.get("/items/", headers={"X-Token": "fake-super-secret-token"})
    assert response.status_code == 200
    assert response.json() == [{"item_id": "Foo"}, {"item_id": "Bar"}]

def test_read_items_bad_token():
    response = client.get("/items/", headers={"X-Token": "bad-token"})
    assert response.status_code == 400
    assert response.json() == {"detail": "X-Token header invalid"}

def test_create_item():
    response = client.post(
        "/items/",
        headers={"X-Token": "fake-super-secret-token"},
        json={"name": "Baz", "description": "The Baz", "price": 50.2},
    )
    assert response.status_code == 200
    assert response.json() == {"name": "Baz", "description": "The Baz", "price": 50.2}

def test_create_item_bad_token():
    response = client.post(
        "/items/",
        headers={"X-Token": "bad-token"},
        json={"name": "Baz", "description": "The Baz", "price": 50.2},
    )
    assert response.status_code == 400
    assert response.json() == {"detail": "X-Token header invalid"}

def test_create_item_no_token():
    response = client.post(
        "/items/",
        json={"name": "Baz", "description": "The Baz", "price": 50.2},
    )
    assert response.status_code == 400
    assert response.json() == {"detail": "X-Token header invalid"}
```

----------------------------------------

TITLE: Raising HTTPException with Status Code
DESCRIPTION: This code snippet demonstrates how to raise an HTTPException with a specific status code (404 in this case) when an item is not found. The detail parameter provides a message to the client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/handling-errors.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException

app = FastAPI()

items = {"foo": {"name": "The Foo Wrestlers"}}


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    return items[item_id]
```

----------------------------------------

TITLE: Pydantic Model Example (Python 3.8+)
DESCRIPTION: This Pydantic model defines a `User` class with attributes `id`, `name`, `signup_ts`, and `friends`. It demonstrates how Pydantic can be used to validate and transform data, providing editor support and automatic error generation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_18

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: List[int] = []


external_data = {
    'id': '123',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, '2', b'3'],
}

user = User(**external_data)
print(user.id)
print(user.friends)
```

----------------------------------------

TITLE: Running Uvicorn in Docker for FastAPI
DESCRIPTION: This command defines the entry point for a Docker container, running the Uvicorn ASGI server. It specifies that the FastAPI application is located at 'app.main:app', listens on all network interfaces ('0.0.0.0'), and uses port '80'. This is a standard way to serve FastAPI applications within a Docker container.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_18

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Example Dockerfile for Single-File FastAPI App
DESCRIPTION: This Dockerfile configures a container for a FastAPI application contained in a single file (main.py). It copies the requirements.txt and main.py files, installs dependencies, and runs the Uvicorn server, importing the app from the main module.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_9

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (1)
COPY ./main.py /code/

# (2)
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Optional Type Declaration (Python 3.10+)
DESCRIPTION: This snippet demonstrates how to declare a variable that can be a specific type or `None` using the `|` operator in Python 3.10 and above. The variable `item` can be either a string or `None`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_15

LANGUAGE: Python
CODE:
```
item: str | None = None
```

----------------------------------------

TITLE: Creating a Virtual Environment with venv
DESCRIPTION: This command creates a virtual environment using Python's built-in venv module. The virtual environment is created in a directory named '.venv' within the current project directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_1

LANGUAGE: console
CODE:
```
$ python -m venv .venv
```

----------------------------------------

TITLE: Recommended CMD Exec Form for FastAPI
DESCRIPTION: Illustrates the correct 'exec' form for the `CMD` instruction in a Dockerfile, which is crucial for FastAPI applications to ensure proper shutdown and trigger lifespan events. This form passes arguments as a JSON array.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_6

LANGUAGE: Dockerfile
CODE:
```
CMD ["fastapi", "run", "app/main.py", "--port", "80"]
```

----------------------------------------

TITLE: Declaring a Simple Required Query Parameter in FastAPI
DESCRIPTION: This snippet demonstrates the basic syntax for declaring a required query parameter in FastAPI. By simply type-hinting the parameter without assigning a default value, it becomes mandatory for clients to provide this parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_14

LANGUAGE: Python
CODE:
```
q: str
```

----------------------------------------

TITLE: Validating Required Scopes in Dependency - FastAPI Python
DESCRIPTION: A dependency function (`get_current_user`) that uses `SecurityScopes` to receive the combined set of scopes required by the path operation and its dependency chain. It retrieves the authenticated user's scopes from the token and checks if all required scopes are present in the user's granted scopes. If not, it raises an `HTTPException` with a `WWW-Authenticate` header indicating the missing scopes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi.security import SecurityScopes, OAuth2PasswordBearer
from fastapi import Depends, HTTPException, status

# Assume oauth2_scheme is defined
# Assume TokenData model and token decoding logic exist
# Assume function to retrieve user based on username exists

async def get_current_user(
    security_scopes: SecurityScopes, # Receives scopes from Security()
    token: str = Depends(oauth2_scheme) # Gets token from header
):
    # Placeholder: Decode token to get username and granted scopes
    # try:
    #    payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    #    username: str = payload.get("sub")
    #    user_scopes = payload.get("scopes", []) # Get scopes from token payload
    #    if username is None:
    #        raise credential_exception # Or raise HTTPException
    #    token_data = TokenData(scopes=user_scopes, username=username)
    # except JWTError:
    #    raise credential_exception # Or raise HTTPException

    # Placeholder: Retrieve user from database
    # user = get_user(fake_users_db, username=token_data.username)
    # if user is None:
    #    raise credential_exception # Or raise HTTPException

    # Validate required scopes against user's granted scopes (from token_data.scopes)
    # Assuming 'user_scopes' is the list of scopes obtained from the token
    user_scopes = token_data.scopes # Access scopes from the validated TokenData
    for scope in security_scopes.scopes: # Iterate through scopes required by the path/dependencies
        if scope not in user_scopes:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Not enough permissions",
                headers={"WWW-Authenticate": f"Bearer scope=\"{security_scopes.scope_str}\""}, # Indicate missing scopes
            )

    # return user # Return the authenticated user object
```

----------------------------------------

TITLE: Response Model with Return Type Annotation - Python
DESCRIPTION: This code snippet demonstrates how to declare the response type using the return type annotation of a route operation function. FastAPI uses this type for validation, generating a JSON schema for the response in the OpenAPI documentation, and limiting/filtering the output data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.post("/items/", response_model=Item)
async def create_item(item: Item):
    return item


@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int):
    return {"name": "Foo", "description": "", "price": 50.2, "tax": 20.3}
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn - Console
DESCRIPTION: Provides the command-line instruction to run the FastAPI application using Uvicorn. It specifies the application entry point ('app.main:app') and uses the '--reload' flag for development purposes, enabling automatic code reloading on changes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_11

LANGUAGE: Console
CODE:
```
$ uvicorn app.main:app --reload
<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Adding Type Hints to Function Parameters
DESCRIPTION: This example shows how to add type hints to function parameters, specifying that `first_name` and `last_name` should be strings. This allows editors and tools to provide better support, such as autocompletion and error checking.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name

print(get_full_name("john", "doe"))
```

----------------------------------------

TITLE: Initializing OAuth2 Password Bearer in FastAPI
DESCRIPTION: This snippet initializes a FastAPI application and configures OAuth2 security using `OAuth2PasswordBearer`. It defines a dependency that expects a token from the client, enabling the automatic generation of an 'Authorize' button in the interactive API documentation (Swagger UI) and enforcing authentication for protected endpoints. The `tokenUrl` parameter specifies the endpoint where the client should send username and password to obtain a token.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

@app.get("/items/")
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Declaring Optional Type with Union in Python 3.10+
DESCRIPTION: This code snippet shows how to declare an optional type using the | operator in Python 3.10 and later, which is equivalent to Union[str, None].
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/python-types.md#_snippet_14

LANGUAGE: Python
CODE:
```
name: str | None = 'Foo'
```

----------------------------------------

TITLE: OAuth2PasswordBearer Initialization
DESCRIPTION: Initializes an instance of the OAuth2PasswordBearer class, providing the token URL where the client can send username and password to obtain a token. The tokenUrl parameter specifies the relative URL for token retrieval.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/security/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Define Path Operations with Correct Order - Python
DESCRIPTION: This code snippet demonstrates how to define path operations in FastAPI with the correct order to avoid conflicts. The `/users/me` path must be declared before `/users/{user_id}`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Install packages using uv pip
DESCRIPTION: This command installs the specified packages (fastapi with the standard extras) using uv pip. It directly installs the packages into the active virtual environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/virtual-environments.md#_snippet_11

LANGUAGE: Shell
CODE:
```
uv pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Building a Docker Image with Multiple Uvicorn Workers
DESCRIPTION: This Dockerfile builds an image for a FastAPI application, configuring Uvicorn to run with multiple worker processes. It copies application dependencies and source code, then uses the `CMD` instruction to start the FastAPI application via `fastapi run` with the `--workers` option set to 4. This setup is suitable for single-server deployments or Docker Compose where cluster-level replication is not managed externally.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_17

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

# (1)!
CMD ["fastapi", "run", "app/main.py", "--port", "80", "--workers", "4"]
```

----------------------------------------

TITLE: Annotated Type Hint Example (Python 3.8+)
DESCRIPTION: This code demonstrates the use of `Annotated` from the `typing_extensions` module to add metadata to type hints. The `name` parameter is annotated with `str` as the type and `Field(title='User Name', max_length=32)` as metadata, providing additional information about the field for tools like FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/python-types.md#_snippet_23

LANGUAGE: Python
CODE:
```
from typing_extensions import Annotated

from pydantic import Field

name: Annotated[str, Field(title='User Name', max_length=32)]
```

----------------------------------------

TITLE: Defining a PUT Endpoint with Request Body
DESCRIPTION: This code extends the FastAPI application to include a PUT endpoint at '/items/{item_id}'. It defines a Pydantic model `Item` to represent the request body, including data validation. The `update_item` function receives the `item_id` as a path parameter and the `item` as a request body, returning a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Accessing Pydantic Model Attributes in FastAPI Endpoint - Python
DESCRIPTION: This complete FastAPI endpoint demonstrates how to access and utilize the attributes of a received Pydantic `Item` model within a path operation function. It shows how to convert the model to a dictionary, perform conditional logic based on optional fields, and return a modified response, leveraging the type safety and structure provided by Pydantic.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None


@app.post("/items/")
async def create_item(item: Item):
    item_dict = item.dict()
    if item.tax:
        price_with_tax = item.price + item.tax
        item_dict.update({"price_with_tax": price_with_tax})
    return item_dict
```

----------------------------------------

TITLE: Defining a Custom Dependency Function in FastAPI
DESCRIPTION: This snippet shows how to create a reusable dependency function that reads a custom header (X-Token). It uses fastapi.Header to extract the header value and raises an HTTPException if the token is invalid, enforcing authentication or validation logic.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import Header, HTTPException

async def get_token_header(x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return x_token
```

----------------------------------------

TITLE: Defining Synchronous GET Path Operation in FastAPI
DESCRIPTION: This snippet demonstrates defining a synchronous path operation function for the root URL (`/`) with the `GET` HTTP method. Unlike `async` functions, this `def` function is suitable for CPU-bound operations or when asynchronous capabilities are not required.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_10

LANGUAGE: Python
CODE:
```
@app.get("/")
def root():
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command demonstrates how to install FastAPI with the 'standard' extras using pip. It downloads and installs FastAPI and its dependencies into the current Python environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_19

LANGUAGE: Shell
CODE:
```
$ pip install "fastapi[standard]"
---> 100%
```

----------------------------------------

TITLE: Defining Python Dependencies in requirements.txt
DESCRIPTION: This snippet defines the required Python packages and their version constraints for a FastAPI application. It specifies `fastapi[standard]` and `pydantic`, ensuring compatibility and stability by setting precise version ranges. This file is typically used by `pip` to install project dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_1

LANGUAGE: Text
CODE:
```
fastapi[standard]>=0.113.0,<0.114.0
pydantic>=2.7.0,<3.0.0
```

----------------------------------------

TITLE: Dependencies with Scopes
DESCRIPTION: Defines a dependency that requires a specific scope ('me') to access a route. It retrieves the token from the Authorization header, verifies it, and checks if the token contains the required scope. If the scope is missing, it raises an HTTPException with a 403 status code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/advanced/security/oauth2-scopes.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_scopes = payload.get("scopes", [])
        user = fake_users_db.get(username)
        if user is None:
            raise credentials_exception
        user = User(**user)
        for scope in scopes_needed:
            if scope not in token_scopes:
                raise HTTPException(
                    status_code=status.HTTP_403_FORBIDDEN,
                    detail="Not enough permissions",
                )
        return user
    except JWTError:
        raise credentials_exception
```

----------------------------------------

TITLE: Defining HeroBase for Shared Model Fields
DESCRIPTION: This snippet defines `HeroBase`, a SQLModel class that serves as a base for other hero-related models. It includes common fields like `name` and `age`, promoting code reuse and consistency across different hero representations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_10

LANGUAGE: Python
CODE:
```
class HeroBase(SQLModel):
    name: str
    age: int | None = None
```

----------------------------------------

TITLE: Creating main.py with OAuth2 Password RequestForm
DESCRIPTION: This code snippet demonstrates how to set up a FastAPI application with a password authentication endpoint using OAuth2PasswordRequestForm. It defines a /token endpoint that expects username and password, which can be used for authentication.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/security/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordRequestForm

app = FastAPI()


@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    return {"access_token": form_data.username + "token"}

```

----------------------------------------

TITLE: Defining X-Token Dependency (Python 3.9+ Annotated)
DESCRIPTION: Defines a simple dependency function `get_token` in `app/dependencies.py` that reads the `X-Token` header using `Annotated`. It raises an `HTTPException` if the token is not 'fake-super-secret-token'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/bigger-applications.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Header, HTTPException


async def get_token(x_token: Annotated[str, Header()]):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return x_token


async def get_query_token(token: str):
    if token != "jessica":
        raise HTTPException(status_code=400, detail="No Jessica token provided")
    return token
```

----------------------------------------

TITLE: Using Jinja2Templates in FastAPI
DESCRIPTION: This snippet demonstrates how to integrate Jinja2 templates into a FastAPI application. It shows how to initialize `Jinja2Templates`, declare a `Request` object in a path operation, and render an HTML template using `TemplateResponse`, passing the `request` object and other data to the template context.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/templates.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

app = FastAPI()

templates = Jinja2Templates(directory="templates")

@app.get("/items/{id}", response_class=HTMLResponse)
async def read_item(request: Request, id: str):
    return templates.TemplateResponse("item.html", {"request": request, "id": id})
```

----------------------------------------

TITLE: Import HTTPException in FastAPI
DESCRIPTION: Import the HTTPException class from the FastAPI library to raise HTTP exceptions in your application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/handling-errors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException
```

----------------------------------------

TITLE: Path Parameter with Type
DESCRIPTION: Declares a path parameter `item_id` with the type `int`. FastAPI will automatically parse the request and convert the string from the HTTP request into an integer.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Asynchronous Path Operation Function Definition
DESCRIPTION: When a path operation function is declared with `async def`, it's handled asynchronously. If the path operation function does not perform blocking I/O, using `async def` is recommended.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/async.md#_snippet_7

LANGUAGE: python
CODE:
```
async def path_operation_function():
    # some asynchronous operation
    return
```

----------------------------------------

TITLE: Include APIRouter in another APIRouter (Python)
DESCRIPTION: This snippet shows how to include one APIRouter instance (`other_router`) into another (`router`). This allows nesting router structures. Ensure this inclusion is done before the parent router (`router`) is included in the main FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_23

LANGUAGE: Python
CODE:
```
router.include_router(other_router)
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It fetches the latest version of FastAPI and its dependencies from the Python Package Index (PyPI).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/index.md#_snippet_0

LANGUAGE: Bash
CODE:
```
pip install fastapi
```

----------------------------------------

TITLE: Installing Uvicorn
DESCRIPTION: This command installs Uvicorn, an ASGI server, which is required for running FastAPI applications in production. The `[standard]` extra installs additional dependencies for enhanced performance and features.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/index.md#_snippet_1

LANGUAGE: Shell
CODE:
```
pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Defining a List of Nested Pydantic Submodels
DESCRIPTION: This snippet shows how to define an attribute as a list containing instances of another Pydantic model (e.g., `list[Image]`). This allows FastAPI to expect, validate, and document a JSON array of complex objects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_10

LANGUAGE: Python
CODE:
```
images: list[Image]
```

----------------------------------------

TITLE: Type Annotations with Metadata using Annotated (Python 3.9+)
DESCRIPTION: This code snippet demonstrates the use of `Annotated` in Python 3.9+ to add metadata to type annotations. It imports `Annotated` from the `typing` module and uses it to add a `Field` with a description to the `name` attribute of the `Item` class. FastAPI can then use this metadata for documentation or validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_22

LANGUAGE: Python
CODE:
```
from typing import Annotated

from pydantic import BaseModel, Field


class Item(BaseModel):
    name: Annotated[str, Field(description='Name of the item')] = 'Foo'
    description: Annotated[Optional[str], Field(description='A long description')] = None
    price: Annotated[float, Field(description='Price in USD')] = 35.4
    tax: Annotated[Optional[float], Field(description='Applicable tax')] = None
```

----------------------------------------

TITLE: Using OAuth2PasswordBearer as a Dependency
DESCRIPTION: This code snippet demonstrates how to use the OAuth2PasswordBearer scheme as a dependency in a FastAPI path operation. The dependency ensures that the client provides a valid Bearer token in the Authorization header. If the token is missing or invalid, FastAPI automatically returns a 401 Unauthorized error.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/security/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Using a Response Model
DESCRIPTION: Demonstrates how to declare a response model for a path operation using the `response_model` parameter. This ensures that the response data conforms to the specified Pydantic model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/response-model.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int):
    return {"name": "Foo", "price": 50.2}

```

----------------------------------------

TITLE: Defining Asynchronous Functions with async def
DESCRIPTION: Illustrates how to define an asynchronous function using `async def`. This declaration signals to Python that the function can be 'paused' at `await` expressions, allowing the event loop to switch to other tasks.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Do some asynchronous stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Full FastAPI Application with Lifespan Events
DESCRIPTION: This example showcases a complete FastAPI application that incorporates lifespan events for managing resources. The `lifespan` function handles the startup and shutdown processes, while the main route utilizes the loaded model. This setup ensures efficient resource management and avoids unnecessary loading during testing.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/events.md#_snippet_1

LANGUAGE: Python
CODE:
```
from contextlib import asynccontextmanager

from fastapi import FastAPI


class FakeModel:
    def predict(self, item: str): # pragma: no cover
        return f"predicted value for {item}"


@asynccontextmanager
async def lifespan(app: FastAPI): # pragma: no cover
    # Load the ML model
    model = FakeModel()
    app.state.model = model
    yield
    # Clean up the ML models and release the resources
    del app.state.model


app = FastAPI(lifespan=lifespan)


@app.get("/")
async def read_main(item: str):
    model = app.state.model
    prediction = model.predict(item)
    return {"prediction": prediction}
```

----------------------------------------

TITLE: Using Annotated for Metadata (Python 3.8+)
DESCRIPTION: Demonstrates the use of `Annotated` to add metadata to type hints. In this case, it's used to provide additional information about a string type.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_24

LANGUAGE: Python
CODE:
```
from typing import Union

from typing_extensions import Annotated

Annotated[str, 'some metadata']
```

----------------------------------------

TITLE: Testing Asynchronous FastAPI Endpoints with Pytest and AsyncClient
DESCRIPTION: This snippet demonstrates how to write an asynchronous test for a FastAPI application using `pytest` and `httpx.AsyncClient`. The `@pytest.mark.anyio` decorator enables the test function to run asynchronously, allowing the use of `await` with `AsyncClient` to make requests to the FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_1

LANGUAGE: Python
CODE:
```
import pytest
from httpx import AsyncClient
from app.main import app

@pytest.mark.anyio
async def test_read_root():
    async with AsyncClient(app=app, base_url="http://test") as ac:
        response = await ac.get("/")
    assert response.status_code == 200
    assert response.json() == {"Hello": "World"}
```

----------------------------------------

TITLE: Dependency Injection with yield and HTTPException (Python 3.9+)
DESCRIPTION: This code demonstrates how to use dependencies with `yield` and `HTTPException` in FastAPI. It includes a `try` block to catch exceptions and raise an `HTTPException` in the exit code after the `yield`. The dependency checks for a token and raises an exception if it's invalid, otherwise it yields control to the route function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_5

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
    if token == "jflsdkjf":
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Incorrect username or password", headers={"WWW-Authenticate": "Bearer"})
    return "The user"


@app.get("/items/")
async def read_items(current_user: Annotated[str, Depends(get_current_user)]):
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]


async def get_db():
    try:
        db = "fake_db"
        yield db
    except:  # noqa: E722
        print("Oooops, there was an error")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Internal error")
    finally:
        print("Closing connection")


@app.get("/db-items/")
async def read_db_items(db: Annotated[str, Depends(get_db)]):
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]
```

----------------------------------------

TITLE: Using CMD - Exec Form in Dockerfile
DESCRIPTION: This snippet demonstrates the correct way to use the `CMD` instruction in a Dockerfile, using the exec form. This ensures that FastAPI can shut down properly and lifespan events are triggered.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/deployment/docker.md#_snippet_6

LANGUAGE: Dockerfile
CODE:
```
CMD ["fastapi", "run", "app/main.py", "--port", "80"]
```

----------------------------------------

TITLE: Pydantic Model Definition (Python 3.10+)
DESCRIPTION: This code snippet demonstrates how to define a Pydantic model with type annotations in Python 3.10 or later. Pydantic is used for data validation and serialization.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/python-types.md#_snippet_22

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial011_py310.py!}
```

----------------------------------------

TITLE: Returning Unauthorized HTTP Exception for Basic Auth
DESCRIPTION: This snippet shows how to raise an `HTTPException` with a 401 Unauthorized status code when authentication fails. It includes the `WWW-Authenticate` header with the value "Basic" to instruct the client (e.g., a web browser) to prompt the user for credentials.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/security/http-basic-auth.md#_snippet_5

LANGUAGE: Python
CODE:
```
raise HTTPException(
    status_code=status.HTTP_401_UNAUTHORIZED,
    detail="Incorrect username or password",
    headers={"WWW-Authenticate": "Basic"},
)
```

----------------------------------------

TITLE: Implementing Process Time Header in FastAPI Middleware
DESCRIPTION: This snippet demonstrates a complete FastAPI HTTP middleware that measures the request processing time and adds it as a custom `X-Process-Time` header to the response. It utilizes `time.perf_counter()` for precise timing, capturing the time before and after the `call_next` function, and then modifies the `response` headers before returning it.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/middleware.md#_snippet_1

LANGUAGE: Python
CODE:
```
import time
from fastapi import FastAPI, Request

app = FastAPI()

@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    start_time = time.perf_counter()
    response = await call_next(request)
    process_time = time.perf_counter() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response
```

----------------------------------------

TITLE: Using response_model_include and response_model_exclude in FastAPI
DESCRIPTION: This code demonstrates the use of `response_model_include` and `response_model_exclude` parameters in the path operation decorator to include or exclude specific attributes from the response model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#_snippet_13

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}", response_model=Item, response_model_include={"name", "description"})
async def read_item(item_id: str): #, q: Union[str, None] = Query(default=None)): #, short: bool = False):
    item = fake_items_db[item_id]
    return item


@app.get("/items2/{item_id}", response_model=Item, response_model_exclude={"tax", "price"})
async def read_item2(item_id: str): #, q: Union[str, None] = Query(default=None)): #, short: bool = False):
    item = fake_items_db[item_id]
    return item
```

----------------------------------------

TITLE: Applying Tags to FastAPI Path Operations
DESCRIPTION: This snippet demonstrates how to associate specific path operations with the predefined OpenAPI tags. By using the `tags` argument in the `@app.get()` decorator, you can categorize your API endpoints, which helps organize the interactive documentation and improves API discoverability.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/metadata.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/users/", tags=["users"])
async def read_users():
    return ["Rick", "Morty"]


@app.get("/items/", tags=["items"])
async def read_items():
    return ["Portal gun", "Plumbus"]
```

----------------------------------------

TITLE: Using Pydantic Model for Data Handling in Python
DESCRIPTION: Shows how to use a Pydantic model to create and manipulate data. It includes creating an instance of the `User` model directly and from a dictionary.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fa/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Importing Depends from FastAPI
DESCRIPTION: Imports the Depends class from the fastapi module.  This is necessary to declare dependencies in path operation functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It fetches the latest version of FastAPI and its dependencies from the Python Package Index (PyPI).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/it/docs/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
pip install fastapi
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs the FastAPI package using pip, the Python package installer. It fetches the latest version of FastAPI and its dependencies from the Python Package Index (PyPI).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/index.md#_snippet_0

LANGUAGE: shell
CODE:
```
$ pip install fastapi
```

----------------------------------------

TITLE: Adding GZip Compression Middleware - Python
DESCRIPTION: This snippet demonstrates adding the `GZipMiddleware` to a FastAPI application. This middleware automatically compresses responses with GZip if the client indicates support via the `Accept-Encoding` header, reducing bandwidth usage. It can be configured with a `minimum_size` to avoid compressing very small responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.gzip import GZipMiddleware

app = FastAPI()

app.add_middleware(GZipMiddleware, minimum_size=500)
```

----------------------------------------

TITLE: Importing BaseModel for Request Body Definition - Python
DESCRIPTION: This snippet demonstrates how to import `BaseModel` from the Pydantic library, which is the foundational class for defining data models used in FastAPI request bodies. It's a prerequisite for creating structured data schemas.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel
```

----------------------------------------

TITLE: Running FastAPI with Root Path
DESCRIPTION: Starts the FastAPI application using Uvicorn, specifying the `--root-path` option. This configures the application to recognize and use the given root path for all routes, affecting how it generates URLs and handles requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/behind-a-proxy.md#_snippet_7

LANGUAGE: Console
CODE:
```
$ fastapi run main.py --root-path /api/v1
```

----------------------------------------

TITLE: List Declaration with Type Hinting (Python 3.9+)
DESCRIPTION: Declares a variable `items` as a list of strings using the built-in `list` type hint in Python 3.9 and later. This eliminates the need to import `List` from the `typing` module.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_5

LANGUAGE: Python
CODE:
```
items: list[str]
```

----------------------------------------

TITLE: Additional Response with Model
DESCRIPTION: This code snippet demonstrates how to define an additional response with an HTTP status code of 404 and a Pydantic model named `Message`. It uses the `responses` parameter in the path operation decorator to specify the response model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/advanced/additional-responses.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from fastapi.responses import JSONResponse
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    id: str
    value: str
    tax: Union[float, None] = None


class Message(BaseModel):
    message: str


@app.post("/items/{item_id}", responses={
    404: {"model": Message},
})
async def create_item(
    item_id: int,
    item: Item,
):
    if item_id == 3:
        return JSONResponse(status_code=404, content={"message": "Item not found"})
    return item
```

----------------------------------------

TITLE: Dockerfile for Single-File FastAPI App
DESCRIPTION: This Dockerfile sets up a Python 3.9 environment, copies the requirements.txt file, installs the dependencies, copies the main.py file, and runs the Uvicorn server. It assumes that the FastAPI application is contained in a single file named main.py.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/deployment/docker.md#_snippet_14

LANGUAGE: dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (1)
COPY ./main.py /code/

# (2)
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Handling Dependency Errors with HTTPException - Python
DESCRIPTION: This code demonstrates how dependencies can raise `HTTPException` to signal errors or unmet requirements. If a required header is missing or invalid, an appropriate HTTP status code and detail message are returned to the client, preventing the path operation from executing. This ensures robust error handling within the dependency chain.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_2

LANGUAGE: Python
CODE:
```
if x_key is None:
    raise HTTPException(status_code=400, detail="X-Key header required")
if x_token is None:
    raise HTTPException(status_code=400, detail="X-Token header required")
```

----------------------------------------

TITLE: Updating Items with PUT Request and Pydantic Model
DESCRIPTION: This code snippet demonstrates how to handle a PUT request to update an item using a Pydantic model to define the request body. It defines an `Item` model with fields for name, price, and an optional offer flag. The `update_item` function receives the item ID and the item data from the request body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Injecting a Class-Based Dependency into a Path Operation
DESCRIPTION: This snippet demonstrates how to integrate the `CommonQueryParams` class as a dependency into a FastAPI path operation. By type-hinting `commons` as `CommonQueryParams` and assigning `Depends(CommonQueryParams)`, FastAPI instantiates the class and provides its instance to the `read_items` function. This allows the path operation to access the parsed query parameters via the `commons` object.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):
    return commons
```

----------------------------------------

TITLE: Including Admin APIRouter with Custom Config - Python
DESCRIPTION: Includes the 'admin.router' with custom parameters like a '/admin' prefix, 'admin' tag, 'get_token_header' dependency, and a specific response, demonstrating how to configure included routers without modifying their source files. Also adds a direct root route.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends
from .dependencies import get_token_header
from .internal import admin
from .routers import items, users

app = FastAPI()

app.include_router(users.router)
app.include_router(items.router)
app.include_router(
    admin.router,
    prefix="/admin",
    tags=["admin"],
    dependencies=[Depends(get_token_header)],
    responses={418: {"description": "I'm a teapot"}},
)


@app.get("/")
async def root():
    return {"message": "Hello Bigger Applications!"}
```

----------------------------------------

TITLE: Importing TestClient for FastAPI Testing - Python
DESCRIPTION: This snippet demonstrates how to import the `TestClient` class from the `fastapi.testclient` module. This class is essential for testing FastAPI applications by allowing direct interaction with the application's code without requiring an active HTTP server connection.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/testclient.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient
```

----------------------------------------

TITLE: Defining DELETE Path Operation Decorator - FastAPI Python
DESCRIPTION: This snippet illustrates the `@app.delete()` decorator, used in FastAPI to define a path operation for handling HTTP DELETE requests. It's typically used for removing resources.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_11

LANGUAGE: Python
CODE:
```
@app.delete()
```

----------------------------------------

TITLE: Declaring Integer Path Parameter (Python)
DESCRIPTION: This snippet shows how to declare a path parameter `item_id` with a type hint `int` in a FastAPI path operation function. FastAPI uses this type hint for automatic data validation and documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Overriding Settings for Testing
DESCRIPTION: This snippet demonstrates how to override the settings dependency during testing. It defines a new `override_settings` function that returns a `Settings` object with modified values. It then uses `app.dependency_overrides` to replace the original `get_settings` dependency with the override function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/settings.md#_snippet_14

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.routing import APIRoute
from httpx import AsyncClient
import pytest

from .main import get_settings, app


@pytest.fixture(scope="function")
async def client() -> AsyncClient:
    def override_settings():
        return Settings(admin_email="testing@example.com")

    app.dependency_overrides[get_settings] = override_settings

    async with AsyncClient(app=app, base_url="http://test") as client:
        yield client

    app.dependency_overrides = {}
```

----------------------------------------

TITLE: Defining a List of Strings in FastAPI with Pydantic
DESCRIPTION: This snippet shows how to define a Pydantic model attribute as a list specifically containing string elements. By declaring `tags: list[str]`, FastAPI will validate and document the field as an array of strings.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_4

LANGUAGE: Python
CODE:
```
tags: list[str]
```

----------------------------------------

TITLE: Testing FastAPI Application with Separate Test File
DESCRIPTION: This snippet demonstrates how to structure tests in a separate `test_main.py` file, importing the FastAPI application instance from `app.main`. It utilizes `TestClient` to make a GET request to the root endpoint and asserts the expected status code and JSON response, suitable for larger project structures.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_read_root():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"Hello": "World"}
```

----------------------------------------

TITLE: Defining a Request Body with Pydantic
DESCRIPTION: This code extends the FastAPI application to handle PUT requests with a request body. It defines a Pydantic model `Item` to represent the structure of the request body, including name, price, and an optional offer flag.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Path Operation Function Definition
DESCRIPTION: When a path operation function is declared with a regular `def` instead of `async def`, it's executed in an external thread pool to avoid blocking the server. This is in contrast to other asynchronous frameworks where using `def` for small performance gains might be common.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/async.md#_snippet_6

LANGUAGE: python
CODE:
```
def path_operation_function():
    # some operation
    return
```

----------------------------------------

TITLE: Declaring Class Dependency in Path Operation (Annotated)
DESCRIPTION: This snippet shows the preferred way to declare a class-based dependency, `CommonQueryParams`, within a FastAPI path operation function using `Annotated` and `Depends`. The type annotation `CommonQueryParams` provides strong type hints for editor support, while `Depends(CommonQueryParams)` instructs FastAPI on how to resolve the dependency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_3

LANGUAGE: Python
CODE:
```
commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]
```

----------------------------------------

TITLE: Database Dependency Setup with Yield (Python)
DESCRIPTION: This snippet demonstrates the initial part of a database dependency using `yield`. The code before and including `yield` is executed before the path operation, setting up the database session. The yielded value (`db`) is then injected into the dependent function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: Python
CODE:
```
def get_db():
    db = DBSession()
    try:
        yield db
```

----------------------------------------

TITLE: Creating a Hero with HeroCreate and Returning HeroPublic in FastAPI
DESCRIPTION: This FastAPI endpoint handles the creation of new heroes. It accepts a `HeroCreate` model for input validation and uses `response_model=HeroPublic` to ensure the returned data is validated and serialized according to the public model, even though the internal `Hero` table model is returned.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_15

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter
from sqlmodel import Session, select
from typing import List

# Assuming Hero, HeroCreate, HeroPublic are defined
# class Hero(HeroBase, table=True):
#     id: Optional[int] = Field(default=None, primary_key=True)

router = APIRouter()

@router.post("/heroes/", response_model=HeroPublic)
def create_hero(*, session: Session, hero: HeroCreate):
    db_hero = Hero.from_orm(hero)
    session.add(db_hero)
    session.commit()
    session.refresh(db_hero)
    return db_hero
```

----------------------------------------

TITLE: Importing Request Parameter Functions in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to import the essential request parameter functions (Body, Cookie, File, Form, Header, Path, Query) directly from the `fastapi` library. These functions are crucial for defining how data is extracted from different parts of an HTTP request within FastAPI path operations or dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/parameters.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Body, Cookie, File, Form, Header, Path, Query
```

----------------------------------------

TITLE: Annotated Type Hint Example (Python 3.9+)
DESCRIPTION: This code demonstrates the use of `Annotated` from the `typing` module to add metadata to type hints. The `name` parameter is annotated with `str` as the type and `Field(title='User Name', max_length=32)` as metadata, providing additional information about the field for tools like FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/python-types.md#_snippet_22

LANGUAGE: Python
CODE:
```
from typing import Annotated

from pydantic import Field

name: Annotated[str, Field(title='User Name', max_length=32)]
```

----------------------------------------

TITLE: Optimizing Settings Instantiation with lru_cache - Python
DESCRIPTION: This snippet shows how to use the `@lru_cache` decorator from `functools` to ensure that the `get_settings` function, which instantiates the `Settings` object, is executed only once. This prevents redundant file reads or expensive object creations on subsequent calls, significantly improving performance in a web application context.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_16

LANGUAGE: Python
CODE:
```
from functools import lru_cache
from fastapi import Depends, FastAPI
from .config import Settings

@lru_cache
def get_settings():
    return Settings()

app = FastAPI()

@app.get("/info")
async def info(settings: Settings = Depends(get_settings)):
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email
    }
```

----------------------------------------

TITLE: Define SQLModel Model
DESCRIPTION: This code defines a SQLModel model named `Hero` with fields for `id`, `name`, `secret_name`, and `age`. The `id` field is set as the primary key, and `name` is indexed for faster lookups.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from sqlmodel import Field, SQLModel, create_engine


class Hero(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = None
```

----------------------------------------

TITLE: Query Parameter with min_length and max_length (Annotated)
DESCRIPTION: This snippet demonstrates how to define a query parameter with both minimum and maximum length constraints using the Annotated approach. It showcases the recommended way to validate string inputs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/query-params-str-validations.md#_snippet_8

LANGUAGE: Python
CODE:
```
q: Annotated[str, Query(min_length=3, max_length=50)] = "george"
```

----------------------------------------

TITLE: Asynchronous Route Definition in FastAPI
DESCRIPTION: This snippet shows how to define an asynchronous route in FastAPI using `async def`. The `await` keyword is used to call an asynchronous function (`get_burgers`) within the route.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/async.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Validating Query Max Length with Annotated (Python)
DESCRIPTION: Shows how to use `Annotated` to add `Query` metadata with a `max_length` constraint to an optional string query parameter `q`. This ensures the parameter, if provided, does not exceed 50 characters. FastAPI handles validation and error reporting.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#_snippet_3

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(max_length=50)] = None):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Returning Requested Scopes in JWT Token
DESCRIPTION: Modifies the route path to return the requested scopes as part of the JWT token. It uses `OAuth2PasswordRequestForm` which includes a `scopes` property (a list of strings) containing the scopes received in the request. The scopes are then added to the JWT token.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/security/oauth2-scopes.md#_snippet_1

LANGUAGE: Python
CODE:
```
access_token = create_access_token(
        data={"sub": username, "scopes": form_data.scopes},
        expires_delta=access_token_expires,
    )
```

----------------------------------------

TITLE: Running a Docker Container (Console)
DESCRIPTION: This console command runs a Docker container based on the `myimage` image. The `-d` flag runs the container in detached mode (in the background), `--name mycontainer` assigns a specific name to the container, and `-p 80:80` maps port 80 of the host to port 80 of the container, allowing external access to the application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_13

LANGUAGE: console
CODE:
```
docker run -d --name mycontainer -p 80:80 myimage
```

----------------------------------------

TITLE: Defining a Path Operation Function (Async)
DESCRIPTION: This code snippet shows an example of an asynchronous path operation function that returns a simple JSON response. FastAPI will call this function when it receives a GET request to the root path.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Running Uvicorn for Single-File App in Docker
DESCRIPTION: This command sets the default command to run when the Docker container starts for a single-file FastAPI application. It uses Uvicorn to serve the application, specifying the module `main` and the `app` object. The `--host` and `--port` options configure the server to listen on all interfaces and port 80, respectively.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_11

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Using a Nested Pydantic Submodel as an Attribute
DESCRIPTION: This snippet shows how to use a previously defined Pydantic model (e.g., `Image`) as the type for an attribute within another model. This allows for deeply nested JSON structures, with FastAPI providing automatic validation and documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_7

LANGUAGE: Python
CODE:
```
image: Image
```

----------------------------------------

TITLE: Function with type hints
DESCRIPTION: This example shows how to add type hints to the function parameters. By specifying the types, editors and tools can provide better code completion and error checking.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name

print(get_full_name("john", "doe"))
```

----------------------------------------

TITLE: Path Parameter with Type Data
DESCRIPTION: Defines a path parameter `item_id` with a specific data type (`int`) using Python's type annotations. FastAPI automatically converts and validates the input based on the declared type.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Installing Packages with pip
DESCRIPTION: This snippet demonstrates how to install a package using pip within the activated virtual environment. It installs the 'fastapi[standard]' package.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_10

LANGUAGE: Shell
CODE:
```
$ pip install "fastapi[standard]"

---> 100%
```

----------------------------------------

TITLE: Creating a Dockerfile with Uvicorn and Gunicorn
DESCRIPTION: This Dockerfile uses the tiangolo/uvicorn-gunicorn-fastapi base image to create a container for a FastAPI application. It copies the requirements file, installs the dependencies, and then copies the application code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_16

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app
```

----------------------------------------

TITLE: Create Database Tables
DESCRIPTION: This code creates the database tables based on the SQLModel metadata. It uses the `create_all` function to generate the tables defined by the models associated with the engine.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_2

LANGUAGE: Python
CODE:
```
def create_db_and_tables():
    SQLModel.metadata.create_all(engine)
```

----------------------------------------

TITLE: Adding ASGI Middleware with FastAPI - Python
DESCRIPTION: This snippet shows the recommended way to add ASGI middleware in FastAPI using `app.add_middleware`. It demonstrates passing the middleware class directly along with any required keyword arguments, allowing FastAPI to handle the middleware instantiation and integration correctly.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from unicorn import UnicornMiddleware

app = FastAPI()

app.add_middleware(UnicornMiddleware, some_config="rainbow")
```

----------------------------------------

TITLE: Startup Event Handler - FastAPI
DESCRIPTION: This code snippet demonstrates how to define a startup event handler in FastAPI. The function decorated with `@app.on_event("startup")` will be executed before the application starts receiving requests. In this example, it initializes a dictionary representing a database with some initial values.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/events.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

items = {}


@app.on_event("startup")
async def startup_event():
    items["foo"] = {"name": "Fighters"}
    items["bar"] = {"name": "Tenders"}
```

----------------------------------------

TITLE: Adding a Background Task to a Path Operation
DESCRIPTION: This line demonstrates how to add a background task using the `add_task()` method of the `BackgroundTasks` object. It takes the task function (`write_notification`), positional arguments (`email`), and keyword arguments (`message="some notification"`) for the task function. The task will execute after the HTTP response is sent.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#_snippet_2

LANGUAGE: Python
CODE:
```
    background_tasks.add_task(write_notification, email, message="some notification")
```

----------------------------------------

TITLE: Defining FastAPI Lifespan Context Manager (Yield Block)
DESCRIPTION: This snippet shows the core `yield` block within an `asynccontextmanager` decorated function. Code before `yield` runs on application startup, and code after `yield` runs on application shutdown. This is used for managing resources like database connections.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/events.md#_snippet_0

LANGUAGE: Python
CODE:
```
    await db.connect()
    print("Application startup complete.")
    yield
    await db.disconnect()
```

----------------------------------------

TITLE: Installing Uvicorn (Standard)
DESCRIPTION: This command installs Uvicorn with its standard dependencies, including `uvloop` for a high-performance `asyncio` event loop, which significantly improves performance for asynchronous operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/manually.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Create Database Engine
DESCRIPTION: Creates a SQLAlchemy engine using SQLite for database connectivity. The `check_same_thread=False` argument is used to allow FastAPI to use the same SQLite database in different threads.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_1

LANGUAGE: Python
CODE:
```
sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"

engine = create_engine(sqlite_url, echo=True, connect_args={"check_same_thread": False})
```

----------------------------------------

TITLE: Using OpenAPI-Specific Examples in FastAPI Body
DESCRIPTION: This snippet demonstrates how to use the `openapi_examples` parameter with `Body()` in FastAPI to provide multiple, richly described examples for a request body. Unlike `examples` which are part of JSON Schema, `openapi_examples` are specific to OpenAPI and are fully supported by Swagger UI, allowing for detailed summaries, descriptions (with Markdown), and distinct values for each example, enhancing API documentation significantly.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Body
from pydantic import BaseModel, Field

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Annotated[str | None, Field(examples=["A very long description"])] = None
    price: float
    tax: float | None = None


@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Annotated[
        Item,
        Body(
            openapi_examples={
                "normal": {
                    "summary": "A normal example",
                    "description": "A **normal** item works correctly.",
                    "value": {
                        "name": "Foo",
                        "description": "A very nice Item",
                        "price": 35.4,
                        "tax": 3.2,
                    },
                },
                "bad_tax": {
                    "summary": "An example with a bad tax",
                    "description": "The tax is too high, it will not be accepted.",
                    "value": {
                        "name": "Bar",
                        "price": 42,
                        "tax": 200,
                    },
                },
            }
        ),
    ],
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Required Query Parameters in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a required query parameter in FastAPI while still allowing `None` as a valid value. The ellipsis (`...`) is used as the default value to indicate that the parameter is required.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#_snippet_15

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Annotated[str | None, Query(min_length=3)] = ...
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Reading Multiple Heroes with HeroPublic in FastAPI
DESCRIPTION: This FastAPI endpoint retrieves a list of all heroes from the database. It uses `response_model=List[HeroPublic]` to ensure that each hero object in the returned list is validated and serialized according to the `HeroPublic` data model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_16

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter
from sqlmodel import Session, select
from typing import List

# Assuming Hero, HeroPublic are defined
router = APIRouter()

@router.get("/heroes/", response_model=List[HeroPublic])
def read_heroes(*, session: Session):
    heroes = session.exec(select(Hero)).all()
    return heroes
```

----------------------------------------

TITLE: Defining a Nested Pydantic Submodel (Image)
DESCRIPTION: This snippet defines a simple Pydantic `Image` model with `url` and `name` attributes. This model can then be used as a type for attributes in other Pydantic models, enabling nested data structures.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_6

LANGUAGE: Python
CODE:
```
class Image(BaseModel):
    url: str
    name: str
```

----------------------------------------

TITLE: Defining X-Token Dependency (Python 3.8+ Annotated)
DESCRIPTION: Defines a dependency function `get_token` that reads the `X-Token` header from the request using `Annotated` for type hints. It raises an `HTTPException` if the header value is not 'fake-super-secret-token'. This version uses `Header` without parentheses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Header, HTTPException


async def get_token(x_token: Annotated[str, Header]):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
```

----------------------------------------

TITLE: Main App with Dependency Injection
DESCRIPTION: Creates a FastAPI dependency that returns a new Settings instance. This allows for easy overriding of settings during testing. The settings are then injected into a path operation function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/settings.md#_snippet_9

LANGUAGE: Python
CODE:
```
from functools import lru_cache

from fastapi import Depends, FastAPI

from .config import Settings

app = FastAPI()


@lru_cache
def get_settings():
    return Settings()

```

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(settings: Settings = Depends(get_settings)):
    return {"admin_email": settings.admin_email, "items_per_user": settings.items_per_user}

```

----------------------------------------

TITLE: Asynchronous Path Operation with Await
DESCRIPTION: This code demonstrates how to define an asynchronous path operation function in FastAPI using `async def`. The `read_burgers` function uses `await` to call the `get_burgers` function asynchronously, allowing the application to handle other tasks while waiting for the burgers to be retrieved. The `hl_lines` directive highlights the lines where the `async` keyword and `await` are used.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/async.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Type Hinting Example in FastAPI with Pydantic
DESCRIPTION: Demonstrates how to use Python type hints and Pydantic models for data validation and automatic documentation in FastAPI. It shows a simple function with type hints and a Pydantic model defining user data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Déclare une variable comme étant une str
# et profitez de l'aide de votre IDE dans cette fonction
def main(user_id: str): 
    return user_id


# Un modèle Pydantic
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Awaiting Asynchronous Function Result in Python
DESCRIPTION: This code snippet demonstrates how to use the `await` keyword in Python to wait for an asynchronous function to complete before assigning its result to a variable. This allows the program to perform other tasks while waiting for the result.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
burgers = await get_burgers(2)
```

----------------------------------------

TITLE: Type Annotations with Metadata using Annotated (Python 3.8+)
DESCRIPTION: This code snippet demonstrates the use of `Annotated` in Python 3.8+ to add metadata to type annotations. It imports `Annotated` from `typing_extensions` and uses it to add a `Field` with a description to the `name` attribute of the `Item` class. FastAPI can then use this metadata for documentation or validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_23

LANGUAGE: Python
CODE:
```
from typing import Optional

from typing_extensions import Annotated

from pydantic import BaseModel, Field


class Item(BaseModel):
    name: Annotated[str, Field(description='Name of the item')] = 'Foo'
    description: Annotated[Optional[str], Field(description='A long description')] = None
    price: Annotated[float, Field(description='Price in USD')] = 35.4
    tax: Annotated[Optional[float], Field(description='Applicable tax')] = None
```

----------------------------------------

TITLE: Initializing FastAPI Application with Lifespan
DESCRIPTION: This snippet shows how to integrate the defined `lifespan` async context manager into a FastAPI application by passing it to the `lifespan` parameter during `FastAPI` instance creation. This tells FastAPI to use the specified startup and shutdown logic for the application's lifecycle.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_5

LANGUAGE: Python
CODE:
```
app = FastAPI(lifespan=lifespan)
```

----------------------------------------

TITLE: Using response_model_include and response_model_exclude
DESCRIPTION: This code snippet demonstrates how to use the `response_model_include` and `response_model_exclude` parameters in a FastAPI path operation decorator. These parameters allow you to specify which attributes to include or exclude from the response, providing a quick way to filter data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#_snippet_16

LANGUAGE: Python
CODE:
```
from typing import Optional, Set

from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: float = 10.5
    tags: list[str] = []


app = FastAPI()


@app.get("/items/{item_id}", response_model=Item, response_model_include={"name", "description"})
async def read_item(item_id: str):
    return {
        "name": "Foo",
        "description": "A very nice Item",
        "price": 50.2,
        "tax": 10.5,
        "tags": ["foo", "bar"],
    }


@app.get("/items2/{item_id}", response_model=Item, response_model_exclude={"tax", "tags"})
async def read_item2(item_id: str):
    return {
        "name": "Foo",
        "description": "A very nice Item",
        "price": 50.2,
        "tax": 10.5,
        "tags": ["foo", "bar"],
    }
```

----------------------------------------

TITLE: Pydantic v2: Reading Settings from .env
DESCRIPTION: Updates the config.py file to read settings from a .env file using Pydantic v2. The env_file setting is used to specify the path to the .env file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/settings.md#_snippet_11

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings


class Settings(BaseSettings):
    admin_email: str = "admin@example.com"
    items_per_user: int = 50

    model_config = {"env_file": ".env"}

```

----------------------------------------

TITLE: Using the Settings Object
DESCRIPTION: Instantiate the Settings class and access the configuration values. The values are automatically read from environment variables and converted to the specified data types.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/settings.md#_snippet_4

LANGUAGE: python
CODE:
```
from .config import settings


async def get_app_name():
    return {"app_name": settings.app_name}

```

----------------------------------------

TITLE: Function Definition with Explicit String Type Hints
DESCRIPTION: This snippet presents the `get_full_name` function with `str` type hints applied to its `first_name` and `last_name` parameters. This modification enables enhanced editor autocompletion and static analysis, improving developer productivity and code quality.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_4

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name

print(get_full_name("john", "doe"))
```

----------------------------------------

TITLE: Function with Simple Type Hints
DESCRIPTION: This Python function demonstrates the use of simple type hints for function parameters, including `int`, `float`, `bool`, and `bytes`. It shows how to specify the expected data types for the input arguments.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/python-types.md#_snippet_4

LANGUAGE: Python
CODE:
```
def process_data(id: int, price: float, is_active: bool, data: bytes):
    print(id, price, is_active, data)
```

----------------------------------------

TITLE: Función simple que concatena nombres con type hints
DESCRIPTION: Este snippet muestra la misma función que el anterior, pero con type hints agregados a los parámetros. Esto permite que los IDEs proporcionen un mejor autocompletado y detección de errores.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
def get_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name
```

----------------------------------------

TITLE: Running Uvicorn Server
DESCRIPTION: Defines the command to run the Uvicorn server, specifying the host and port. This command is executed from the working directory, allowing Uvicorn to import the app from app.main.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/deployment/docker.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Query Single Hero and return HeroPublic
DESCRIPTION: Demonstrates how to query a single hero by ID and return a `HeroPublic` data model. The `response_model` ensures that the data is validated and serialized correctly before being sent to the client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_16

LANGUAGE: Python
CODE:
```
@app.get("/heroes/{hero_id}", response_model=HeroPublic)
```

LANGUAGE: Python
CODE:
```
def read_hero(hero_id: int, db: Session = Depends(get_db)):
    hero = db.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    return hero
```

----------------------------------------

TITLE: Delete Hero Endpoint
DESCRIPTION: This code defines a FastAPI endpoint for deleting a `Hero` object from the database. It retrieves the hero by ID, deletes it from the session, commits the changes, and returns a success message.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_8

LANGUAGE: Python
CODE:
```
@router.delete("/heroes/{hero_id}")
async def delete_hero(hero_id: int, session: SessionDep):
    hero = session.get(Hero, hero_id)
    if hero:
        session.delete(hero)
        session.commit()
        return {"ok": True}
```

----------------------------------------

TITLE: Declaring a Pydantic Model as a Request Body Parameter
DESCRIPTION: This snippet shows how to declare a Pydantic `Item` model as a parameter in a FastAPI path operation. FastAPI automatically recognizes this as a request body, validates the incoming data against the model, and provides it as a Python object.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Testing FastAPI Application with Relative Import
DESCRIPTION: This snippet illustrates how to test a FastAPI application when the test file (`test_main.py`) resides in the same Python package as the application file (`main.py`). It uses a relative import to access the `app` object and then tests the root endpoint using `TestClient`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/testing.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient

from .main import app

client = TestClient(app)

def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Importing Depends for Dependency Injection - Python
DESCRIPTION: This snippet shows how to import the `Depends` function directly from the `fastapi` library. `Depends()` is a fundamental FastAPI utility used to declare dependencies, enabling dependency injection and the creation of reusable components in your application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/dependencies.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Depends
```

----------------------------------------

TITLE: Importing the Depends Function
DESCRIPTION: This code imports the `Depends` function from the `fastapi` module. `Depends` is used to declare dependencies in path operation functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
```

----------------------------------------

TITLE: Installing FastAPI
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It fetches and installs the latest version of FastAPI and its dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ pip install fastapi
```

----------------------------------------

TITLE: Multi-stage Dockerfile for Poetry-based FastAPI Applications
DESCRIPTION: This multi-stage Dockerfile is designed for FastAPI projects that use Poetry for dependency management. The first stage (`requirements-stage`) installs Poetry and exports dependencies to a `requirements.txt` file. The second stage then uses this `requirements.txt` to install dependencies efficiently, resulting in a smaller final image. This approach optimizes image size and build time.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_17

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9 as requirements-stage

WORKDIR /tmp

RUN pip install poetry

COPY ./pyproject.toml ./poetry.lock* /tmp/

RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

FROM python:3.9

WORKDIR /code

COPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app
```

----------------------------------------

TITLE: Union Type Annotation (Python 3.10+)
DESCRIPTION: This snippet demonstrates how to define a variable that can be of multiple types (int or str) in Python 3.10 and later using the `|` operator.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/python-types.md#_snippet_11

LANGUAGE: Python
CODE:
```
item: int | str = 123
```

----------------------------------------

TITLE: Declaring a Dependency in a Route
DESCRIPTION: Demonstrates how to use Depends to inject a dependency into a route operation function. The common_parameters function is passed to Depends, and its return value is assigned to the commons parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI


async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}


app = FastAPI()


@app.get("/items/")
async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons


@app.get("/users/")
async def read_users(commons: Annotated[dict, Depends(common_parameters)]):
    return commons
```

----------------------------------------

TITLE: Creating a Virtual Environment with venv
DESCRIPTION: This command creates a virtual environment using the venv module. It uses the python interpreter to run the venv module and creates a virtual environment in the .venv directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/virtual-environments.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ python -m venv .venv
```

----------------------------------------

TITLE: Defining HeroUpdate Data Model in Python
DESCRIPTION: This snippet defines the `HeroUpdate` Pydantic model, designed for updating existing hero records. All fields are re-declared as optional with a default value of `None`, allowing clients to send only the fields they wish to modify.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_14

LANGUAGE: Python
CODE:
```
from typing import Optional
from sqlmodel import Field, SQLModel

class HeroBase(SQLModel):
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = Field(default=None, index=True)

class HeroUpdate(SQLModel):
    name: Optional[str] = None
    secret_name: Optional[str] = None
    age: Optional[int] = None
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This code snippet shows how to declare a more complex `Item` model as a parameter in a FastAPI function.  This allows FastAPI to handle data validation and conversion for the `Item` object.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Filtering Response Data with response_model_include (Set) - FastAPI Python
DESCRIPTION: This snippet demonstrates how to use the `response_model_include` parameter with a `set` to specify which attributes of a Pydantic model should be included in the API response. Only 'name' and 'description' will be returned, even if the underlying data contains more fields. This is a quick way to filter output, but the OpenAPI schema will still show the full model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}", response_model=Item, response_model_include={"name", "description"})
async def read_item(item_id: str):
    return {
        "name": "Foo",
        "description": "Some description",
        "price": 10.0,
        "tax": 0.5,
    }
```

----------------------------------------

TITLE: FastAPI Example with Pydantic Models
DESCRIPTION: This FastAPI application defines endpoints that use Pydantic models for request and response payloads. The Item model is used for request data, and ResponseMessage is used for responses. This structure allows OpenAPI to generate schemas for client code generation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/generate-clients.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


class ResponseMessage(BaseModel):
    message: str


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.post("/items/{item_id}", response_model=ResponseMessage)
async def read_item(item_id: int, item: Item):
    return {"message": f"Item ID: {item_id}, Item Name: {item.name}"}


@app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Pydantic Model Definition (Python 3.10+)
DESCRIPTION: Defines a Pydantic model `User` with attributes `id`, `name`, and `signup_ts`. Pydantic validates and converts data to the appropriate types when an instance of the model is created.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_20

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: list[int] = []
```

----------------------------------------

TITLE: Simultaneous Dependencies
DESCRIPTION: This code demonstrates how to use multiple dependencies in a single path operation. It shows how to inject both the `get_current_user` dependency and another dependency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/users/me/items/")
async def read_own_items(current_user: User = Depends(get_current_user)):
    return [{"item_id": "Foo", "owner": current_user.username}]
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies
DESCRIPTION: This command installs FastAPI along with its standard dependencies using pip. The `fastapi[standard]` option includes commonly used packages for web development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/index.md#_snippet_0

LANGUAGE: Bash
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Install dependencies with pip
DESCRIPTION: This command installs the dependencies listed in the requirements.txt file using pip. The -r option specifies the requirements file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/deployment/docker.md#_snippet_2

LANGUAGE: Shell
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Raise HTTPException in FastAPI
DESCRIPTION: This code snippet demonstrates how to raise an HTTPException with a 404 status code when an item is not found. It takes an item_id as input and returns the item if found, otherwise raises the exception.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException

app = FastAPI()

items = {"foo": "The Foo Wrestlers"}


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item": items[item_id]}
```

----------------------------------------

TITLE: HeroCreate Data Model Definition
DESCRIPTION: Defines the `HeroCreate` Pydantic model, which is used to validate data received from clients when creating a new hero. It includes fields like `name`, `age`, and `secret_name`. The `secret_name` is stored in the database but not returned in API responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_12

LANGUAGE: Python
CODE:
```
name
age
secret_name
```

----------------------------------------

TITLE: Pydantic User Model Definition
DESCRIPTION: This code defines a Pydantic model for representing a user. It includes fields like username, email, and full_name. Pydantic models are used for data validation and serialization.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class User(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None
    disabled: Optional[bool] = None
```

----------------------------------------

TITLE: Declaring a Complex Object Type
DESCRIPTION: This code snippet shows how to declare a more complex object type (Item) in FastAPI using Python type hints. This allows FastAPI to handle data validation and conversion for the object.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Type Hints for Error Detection
DESCRIPTION: This example demonstrates how type hints can help detect errors. The `age` parameter is annotated as an integer, but the code attempts to concatenate it directly with a string, which would raise a TypeError without proper conversion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_2

LANGUAGE: Python
CODE:
```
def get_name_with_age(name: str, age: int):
    name_with_age = name + " is this old: " + age
    return name_with_age
```

----------------------------------------

TITLE: Returning a Token in FastAPI
DESCRIPTION: This snippet shows how to return a JSON object containing an access token and token type from a FastAPI endpoint. It emphasizes the importance of adhering to the specification by including 'access_token' and 'token_type' keys.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/security/simple-oauth2.md#_snippet_3

LANGUAGE: Python
CODE:
```
username
```

----------------------------------------

TITLE: Declaring an Integer Type in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare an integer type for a request parameter in FastAPI using Python's standard type annotations. This enables automatic data validation and editor support.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Dependency with Yield and Error Handling (Python)
DESCRIPTION: This example illustrates how to use `try`, `except`, and `finally` blocks within a `yield` dependency. This allows catching exceptions that occur during the dependency's usage (e.g., in a path operation) and ensures cleanup code in `finally` is always executed, regardless of errors.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_3

LANGUAGE: Python
CODE:
```
def get_db():
    db = DBSession()
    try:
        yield db
    except Exception as e:
        print(f"Error during DB session: {e}")
    finally:
        db.close()
```

----------------------------------------

TITLE: JWT Token Authentication and User Retrieval
DESCRIPTION: This snippet demonstrates how to decode a JWT token, verify its contents, and retrieve the current user based on the token's subject. It includes error handling for invalid or expired tokens.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#_snippet_3

LANGUAGE: Python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = get_user(username=token_data.username)
    if user is None:
        raise credentials_exception
    return user
```

----------------------------------------

TITLE: Adding Description Metadata to Query Parameter (FastAPI)
DESCRIPTION: This snippet shows how to include a detailed `description` for a query parameter using `Query`. This descriptive text is incorporated into the OpenAPI documentation, providing comprehensive information about the parameter's purpose and usage to API consumers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_20

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(
    q: str | None = Query(
        default=None,
        title="Query string",
        description="Query string for the items to search in the database that have a good match",
    )
):
    results = {"q": q}
    return results
```

----------------------------------------

TITLE: Create Session Dependency
DESCRIPTION: This code defines a FastAPI dependency that creates a new SQLModel session for each request. It ensures that each request has its own isolated session for database interactions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Annotated

from sqlmodel import Session


def get_session():
    with Session(engine) as session:
        yield session

SessionDep = Annotated[Session, Depends(get_session)]
```

----------------------------------------

TITLE: Unpacking Dictionary with Additional Keyword Arguments in Python
DESCRIPTION: This snippet shows how to create a Pydantic model instance by unpacking a dictionary (`user_in.dict()`) and simultaneously adding or overriding specific keyword arguments (`hashed_password`). This is useful for injecting new data or modifying existing fields when transforming data between models, such as adding a hashed password during user creation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_6

LANGUAGE: Python
CODE:
```
UserInDB(**user_in.dict(), hashed_password=hashed_password)
```

----------------------------------------

TITLE: Declaring a Synchronous FastAPI Path Operation Function
DESCRIPTION: This FastAPI path operation function is declared with a standard `def` because it calls a synchronous `some_library()` function that does not support `await`. FastAPI will run this function in a separate thread pool to prevent blocking the main event loop, ensuring the application remains responsive even during I/O-bound synchronous operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get('/')
def results():
    results = some_library()
    return results
```

----------------------------------------

TITLE: Defining PUT Path Operation Decorator - FastAPI Python
DESCRIPTION: This snippet demonstrates the `@app.put()` decorator, used in FastAPI to define a path operation for handling HTTP PUT requests. This method is commonly used for updating existing resources.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_10

LANGUAGE: Python
CODE:
```
@app.put()
```

----------------------------------------

TITLE: Read Heroes with Pagination
DESCRIPTION: This code defines a FastAPI endpoint for reading `Hero` objects from the database, with support for pagination using `offset` and `limit` parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import List

from sqlmodel import select


@app.get("/heroes/", response_model=List[Hero])
async def read_heroes(offset: int = 0, limit: int = Query(default=100, le=100), session: SessionDep):
    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()
    return heroes
```

----------------------------------------

TITLE: Read One Hero with HeroPublic
DESCRIPTION: Illustrates how to read a single hero.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_16

LANGUAGE: Python
CODE:
```

```

----------------------------------------

TITLE: Define Hero Table Model
DESCRIPTION: This snippet defines the `Hero` table model, inheriting from `HeroBase` and adding extra fields `id` and `secret_name`. It represents the database table structure for heroes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_10

LANGUAGE: Python
CODE:
```
class Hero(HeroBase, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    secret_name: str
```

----------------------------------------

TITLE: Updating a Single Hero with HeroUpdate
DESCRIPTION: Demonstrates updating a single `hero` using the HTTP `PATCH` method and the `HeroUpdate` model. The `exclude_unset=True` argument ensures that only the data sent by the client is used to update the hero, excluding any default values. The `hero_db.sqlmodel_update(hero_data)` function updates the `hero_db` with the data from `hero_data`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_18

LANGUAGE: Python
CODE:
```
@app.patch("/heroes/{hero_id}", response_model=HeroPublic)
async def update_hero(*, session: AsyncSession, hero_id: int, hero: HeroUpdate):
    hero_db = await session.get(Hero, hero_id)
    if not hero_db:
        raise HTTPException(status_code=404, detail="Hero not found")

    hero_data = hero.dict(exclude_unset=True)
    hero_db.sqlmodel_update(hero_data)
    await session.commit()
    await session.refresh(hero_db)
    return hero_db
```

----------------------------------------

TITLE: Defining a GET route in FastAPI
DESCRIPTION: This snippet shows how to define a GET route in FastAPI using the @app.get decorator. It demonstrates the similarity in syntax to the Requests library, where HTTP methods are used directly.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
     return {"message": "Hello World"}
```

----------------------------------------

TITLE: Reading Heroes with HeroPublic
DESCRIPTION: Demonstrates reading `Hero` data. The `response_model=list[HeroPublic]` ensures that the data is validated and serialized using the `HeroPublic` model before being returned to the client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_16

LANGUAGE: Python
CODE:
```
@app.get("/heroes/", response_model=list[HeroPublic])
async def read_heroes(*, session: AsyncSession, offset: int = 0, limit: int = Query(default=100, le=100)):
    heroes = await session.exec(select(Hero).offset(offset).limit(limit))
    return heroes.all()
```

----------------------------------------

TITLE: Pydantic Model Definition (Python 3.9+)
DESCRIPTION: Defines a Pydantic model `User` with attributes `id`, `name`, and `signup_ts`. Pydantic validates and converts data to the appropriate types when an instance of the model is created.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_21

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: list[int] = []
```

----------------------------------------

TITLE: Synchronous Path Operation Function without Await
DESCRIPTION: This code snippet shows how to define a synchronous path operation function in FastAPI using `def`. It's used when interacting with third-party libraries that do not support `await`. FastAPI still operates asynchronously, but this approach avoids unnecessary overhead when asynchronicity is not required.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/async.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/')
def results():
    results = some_library()
    return results
```

----------------------------------------

TITLE: Insecure Credential Comparison (Timing Attack Vulnerable)
DESCRIPTION: This snippet illustrates a common, but insecure, way to compare usernames and passwords. Using direct string equality (`==`) can be vulnerable to timing attacks, as comparison might stop early upon finding a mismatch, revealing information about the correct prefix length to an attacker.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/security/http-basic-auth.md#_snippet_2

LANGUAGE: Python
CODE:
```
if not (credentials.username == "stanleyjobson") or not (credentials.password == "swordfish"):
    # Return some error
    ...
```

----------------------------------------

TITLE: Type Hints with Metadata Annotations (Python 3.9+)
DESCRIPTION: Demonstrates how to use `Annotated` in Python 3.9+ to add metadata to type hints. This allows providing extra information about the type, such as a description, which can be used by FastAPI for validation and documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_17

LANGUAGE: Python
CODE:
```
from typing import Annotated

from typing import Optional

from fastapi import Query


async def read_items(
    q: Annotated[Optional[str], Query(title="Search query", max_length=50)] = None
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Defining OAuth2PasswordBearer Scheme
DESCRIPTION: This line initializes OAuth2PasswordBearer, specifying the relative tokenUrl where clients should send credentials to obtain an access token. This configuration is crucial for FastAPI to generate the correct OpenAPI security scheme documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Using Annotated for Metadata (Python 3.9+)
DESCRIPTION: Demonstrates the use of `Annotated` to add metadata to type hints. In this case, it's used to provide additional information about a string type.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_23

LANGUAGE: Python
CODE:
```
from typing import Annotated

from typing import Union

Annotated[str, 'some metadata']
```

----------------------------------------

TITLE: Importing Dependencies with Relative Path - FastAPI Python
DESCRIPTION: Demonstrates importing dependencies from a parent directory using relative import (`..`) within a FastAPI router module (`app/routers/items.py`). This is crucial for structuring larger applications across multiple files and directories.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends, HTTPException
from ..dependencies import get_token_header

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_token_header)],
    responses={404: {"description": "Not found"}},
)


@router.get("/")
async def read_items():
    return [{"item_id": "Foo", "owner": "Alice"}, {"item_id": "Bar", "owner": "Bob"}]


@router.get("/{item_id}")
async def read_item(item_id: str):
    return {"item_id": item_id}


@router.get("/open/", tags=["custom"], responses={403: {"description": "Operation forbidden"}})
async def read_open_item():
    return {"item_id": "open"}
```

----------------------------------------

TITLE: Create Hero with HeroCreate and return HeroPublic
DESCRIPTION: Demonstrates how to receive a `HeroCreate` data model in a request, create a `Hero` table model based on it, and return a `HeroPublic` data model as the response. FastAPI handles the validation and serialization using the specified `response_model`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_14

LANGUAGE: Python
CODE:
```
@app.post("/heroes/", response_model=HeroPublic)
```

LANGUAGE: Python
CODE:
```
def create_hero(hero: HeroCreate, db: Session = Depends(get_db)):
    db_hero = Hero.from_orm(hero)
    db.add(db_hero)
    db.commit()
    db.refresh(db_hero)
    return db_hero
```

----------------------------------------

TITLE: Combining Response Information in FastAPI
DESCRIPTION: This code snippet shows how to combine information from response_model, status_code, and responses in FastAPI. It declares a response_model with the default status code 200 and adds additional information for the same response in responses, including a custom example.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/additional-responses.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None


@app.post("/items/", response_model=Item, responses={
    200: {
        "description": "Successful Response",
        "content": {
            "application/json": {
                "example": {"name": "Foo", "description": "A very nice Item", "price": 35.4, "tax": 3.2}
            }
        },
    },
})
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Installing Packages from requirements.txt with uv
DESCRIPTION: This snippet demonstrates how to install Python packages from a requirements.txt file using uv. It uses the uv pip install command with the -r flag to specify the requirements file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_13

LANGUAGE: bash
CODE:
```
$ uv pip install -r requirements.txt
---> 100%
```

----------------------------------------

TITLE: Using Context Managers in FastAPI Dependencies with Yield
DESCRIPTION: This code snippet demonstrates how to use context managers within FastAPI dependencies using the `yield` keyword. It utilizes `with` inside the dependency function to ensure proper resource management. The dependency is then injected into a FastAPI endpoint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Generator

from fastapi import Depends, FastAPI


async def get_db() -> Generator:
    db = FakeDatabase()
    try:
        yield db
    finally:
        db.close()


app = FastAPI()


@app.get("/items/")
async def read_items(db: FakeDatabase = Depends(get_db)):
    item = db.get_item("portal gun")
    return item
```

----------------------------------------

TITLE: Define Pydantic Input Model with Password - Python
DESCRIPTION: Defines a Pydantic model intended for incoming request data. This example includes a potentially sensitive field like `password`, highlighting the need to control which fields are returned in the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_2

LANGUAGE: python
CODE:
```
from pydantic import BaseModel, EmailStr

class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None
```

----------------------------------------

TITLE: Raising HTTPException for Not Found Items in FastAPI
DESCRIPTION: This example shows how to raise an `HTTPException` with a `404 Not Found` status code when a requested item ID does not exist. The `detail` parameter provides a custom error message to the client, which FastAPI automatically converts to a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_1

LANGUAGE: Python
CODE:
```
items = {"foo": "The Foo Wrestlers"}

@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item": items[item_id]}
```

----------------------------------------

TITLE: Defining File and Form Parameters in FastAPI Path Operations
DESCRIPTION: This code defines parameters within a FastAPI path operation to accept both file uploads and form data. `file` receives raw bytes, `fileb` receives an `UploadFile` object for more metadata, and `token` captures a string from a form field. All are declared as required parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-forms-and-files.md#_snippet_2

LANGUAGE: Python
CODE:
```
file: bytes = File(...),
fileb: UploadFile = File(...),
token: str = Form(...),
```

----------------------------------------

TITLE: Pydantic Usage in FastAPI
DESCRIPTION: FastAPI utilizes Pydantic for data validation, serialization, and automatic documentation based on JSON Schema. It leverages Pydantic's ability to define data structures using Python type hints, providing excellent editor support and performance.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/alternatives.md#_snippet_2

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It fetches the latest version of FastAPI and its dependencies from the Python Package Index (PyPI).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/index.md#_snippet_0

LANGUAGE: Console
CODE:
```
$ pip install fastapi
```

----------------------------------------

TITLE: Installing Uvicorn for Serving FastAPI Applications
DESCRIPTION: This command installs Uvicorn, an ASGI server, with its standard dependencies. Uvicorn is a lightweight and fast server that is commonly used to run FastAPI applications in production environments.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_1

LANGUAGE: console
CODE:
```
pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Defining HeroPublic Data Model
DESCRIPTION: Defines the `HeroPublic` data model, which is used to return data to the API client. It includes the same fields as `HeroBase` and explicitly declares `id` as an integer to ensure a consistent API contract.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_12

LANGUAGE: Python
CODE:
```
class HeroPublic(HeroBase):
    id: int
```

----------------------------------------

TITLE: Implementing Custom Exception Handler (FastAPI) - Python
DESCRIPTION: Defines and registers a custom exception handler for a specific, non-standard application exception (`UnicornException`). The handler function takes the request and the exception as arguments and returns a custom `JSONResponse`, allowing for tailored error messages and status codes for application-specific errors.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#_snippet_3

LANGUAGE: Python
CODE:
```
class UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request,\n                                    exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={"message": f"Oops! {exc.name} did something. There goes a rainbow..."},\n    )\n\n@app.get("/unicorns/{name}")\nasync def read_unicorn(name: str):\n    if name != "yolo":\n        raise UnicornException(name)\n    return {"unicorn_name": name}
```

----------------------------------------

TITLE: Defining Startup and Shutdown Logic in FastAPI Lifespan (Core)
DESCRIPTION: This snippet illustrates the core logic within an async context manager for FastAPI's lifespan events. Code before `yield` runs on application startup (e.g., loading an ML model), and code after `yield` runs on shutdown (e.g., clearing resources). This ensures resources are managed once for the entire application lifecycle.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_0

LANGUAGE: Python
CODE:
```
ml_models["regression_model"] = RegressionModel()
yield
# Clean up the ML models
ml_models.clear()
```

----------------------------------------

TITLE: Regular Expression Validation for Query Parameters in FastAPI
DESCRIPTION: This code snippet demonstrates how to use regular expressions to validate query parameters in FastAPI. The `pattern` parameter in `Query` is used to define a regular expression that the query parameter must match.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Annotated[str | None, Query(pattern=r"^fixedquery$")] = None
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Pinning Pydantic Version Range
DESCRIPTION: This snippet demonstrates how to pin a compatible version range for Pydantic (e.g., `1.2.0` or newer, but less than `2.0.0`) in `requirements.txt`. This is crucial because FastAPI relies heavily on Pydantic, and ensuring a compatible Pydantic version prevents potential issues arising from major Pydantic updates.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/versions.md#_snippet_3

LANGUAGE: txt
CODE:
```
pydantic>=1.2.0,<2.0.0
```

----------------------------------------

TITLE: Injecting Settings into FastAPI Path Operations - Python
DESCRIPTION: This code demonstrates how to inject the `Settings` object into a FastAPI path operation using `Depends(get_settings)`. The `info` endpoint retrieves and returns the `app_name` and `admin_email` from the application settings, ensuring consistent configuration access across the API.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_12

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from .config import get_settings, Settings

app = FastAPI()

@app.get("/info")
async def info(settings: Settings = Depends(get_settings)):
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email
    }
```

----------------------------------------

TITLE: Implementing Full Data Update with FastAPI PUT and jsonable_encoder (Python)
DESCRIPTION: This snippet shows how to handle a full data replacement using the HTTP PUT method in FastAPI. It demonstrates converting the incoming Pydantic model (`item`) into a JSON-compatible format using `jsonable_encoder` before storing it, typically in a database or dictionary like `items`. This process completely replaces the existing item data with the new data provided in the request body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-updates.md#_snippet_0

LANGUAGE: Python
CODE:
```
update_item_encoded = jsonable_encoder(item)
items[item_id] = update_item_encoded
return update_item_encoded
```

----------------------------------------

TITLE: Declaración de tipos simples
DESCRIPTION: Este snippet muestra ejemplos de cómo declarar tipos simples en Python, como int, float, bool y bytes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_4

LANGUAGE: Python
CODE:
```
age: int
price: float
awake: bool
binary: bytes
```

----------------------------------------

TITLE: Generating a Secure Random Secret Key (Console)
DESCRIPTION: This console command uses `openssl` to generate a cryptographically secure random hexadecimal string of 32 bytes (64 characters). This string is intended to be used as a `SECRET_KEY` for signing JWT tokens, ensuring their integrity and preventing tampering.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#_snippet_3

LANGUAGE: console
CODE:
```
$ openssl rand -hex 32
```

----------------------------------------

TITLE: Running Uvicorn with main.py
DESCRIPTION: This Dockerfile command specifies how to run the FastAPI application using Uvicorn. It instructs Uvicorn to import the app object from the main module, bind to all interfaces (0.0.0.0), and listen on port 80.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/deployment/docker.md#_snippet_15

LANGUAGE: dockerfile
CODE:
```
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Defining a Synchronous Path Operation Function
DESCRIPTION: Defines a synchronous path operation function that returns a dictionary. This function is called when a GET request is made to a specific path, and its return value is automatically converted to JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pl/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Define Startup Command
DESCRIPTION: Defines the command to start the Uvicorn server, which serves the FastAPI application. It specifies the host and port for the server to listen on.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/deployment/docker.md#_snippet_6

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Setting FastAPI Application Command (Exec Form)
DESCRIPTION: Configures the Docker container to run the FastAPI application using `fastapi run` on port 80. This uses the recommended exec form for the `CMD` instruction, ensuring graceful shutdown and proper lifespan event handling.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
CMD ["fastapi", "run", "app/main.py", "--port", "80"]
```

----------------------------------------

TITLE: Class Constructor (`__init__`) for Dependencies
DESCRIPTION: This snippet highlights the `__init__` method within a class-based dependency. FastAPI calls this constructor to create an instance of the class, automatically injecting path, query, or other parameters defined in its signature. This mechanism allows the class to encapsulate and process request data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_5

LANGUAGE: Python
CODE:
```
def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):
```

----------------------------------------

TITLE: Overriding HTTPException Handler in FastAPI
DESCRIPTION: This code snippet shows how to override the default exception handler for `HTTPException` in FastAPI. It defines a custom exception handler using `@app.exception_handler` that returns a plain text response instead of the default JSON response. This allows for customizing the format of error responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException
from fastapi.responses import PlainTextResponse

app = FastAPI()

@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)

@app.get("/items/{item_id}")
async def read_item(item_id: int):
    if item_id == 3:
        raise HTTPException(status_code=400, detail="Item ID 3 is forbidden")
    return {"item_id": item_id}

```

----------------------------------------

TITLE: Ordering Path and Query Parameters with Annotated
DESCRIPTION: This snippet illustrates how `Annotated` simplifies parameter ordering in FastAPI. When using `Annotated`, the order of parameters (e.g., `item_id` and `q`) does not matter, as `Query()` and `Path()` are not used as default values for the function parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Path, Query

app = FastAPI()


@app.get("/items/{item_id}")
async def read_items(
    item_id: Annotated[int, Path(title="The ID of the item to get")],
    q: Annotated[str, Query(min_length=3)]
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Pydantic Model Example (Python 3.8+)
DESCRIPTION: This example demonstrates a Pydantic model definition with type annotations. Pydantic validates data, converts it to the appropriate type, and provides an object with all the data. This snippet is designed for Python 3.8 and above.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/python-types.md#_snippet_22

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial011.py!}
```

----------------------------------------

TITLE: Mixed Required, Default, and Optional Query Parameters - FastAPI Python
DESCRIPTION: This example illustrates the flexibility of FastAPI in handling a mix of query parameter types: `needy` is required, `skip` has a default value, and `limit` is optional. This allows for robust API design accommodating various input requirements.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_user_item(
    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None
):
    item = {"item_id": item_id, "needy": needy, "skip": skip, "limit": limit}
    return item
```

----------------------------------------

TITLE: Password Verification in FastAPI
DESCRIPTION: This snippet demonstrates how to verify a user's password against a stored hash using a (mock) password hashing system. It retrieves user data from a database, checks the password, and returns an error if they don't match.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/security/simple-oauth2.md#_snippet_2

LANGUAGE: Python
CODE:
```
UserInDB(**user_dict)
```

----------------------------------------

TITLE: Default Values for Query Parameters in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a default value for a query parameter in FastAPI. If the client does not provide a value for the query parameter, the default value will be used.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#_snippet_14

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Annotated[str, Query(min_length=3)] = "fixedquery"
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Defining Path Parameter
DESCRIPTION: Defines a path parameter `item_id` in a FastAPI route. The value of the `item_id` path parameter is passed to the function as an argument.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining a Hero Table Model
DESCRIPTION: This snippet defines the `Hero` table model, inheriting from `HeroBase` and adding extra fields like `id` and `secret_name`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_10

LANGUAGE: Python
CODE:
```
class Hero(HeroBase, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    secret_name: str
```

----------------------------------------

TITLE: Including and Excluding Attributes in Response Model - FastAPI
DESCRIPTION: This code snippet demonstrates how to use `response_model_include` and `response_model_exclude` parameters in FastAPI to include or exclude specific attributes from the response model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#_snippet_14

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}", response_model=Item, response_model_include={"name", "description"})
async def read_item(item_id: str): # (response_model_include)
    return Item(name="Foo", description="", price=50.2, tax=10.5, tags=[])
```

LANGUAGE: Python
CODE:
```
@app.get("/items2/{item_id}", response_model=Item, response_model_exclude={"tax", "tags"})
async def read_item2(item_id: str): # (response_model_exclude)
    return Item(name="Foo", description="", price=50.2, tax=10.5, tags=[])
```

----------------------------------------

TITLE: Declaring a Path Parameter with an Enum Type in FastAPI
DESCRIPTION: This snippet shows how to declare a path parameter `model_name` with a type annotation of `ModelName` (the Enum class). FastAPI automatically uses the Enum's predefined values for validation and documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_8

LANGUAGE: Python
CODE:
```
@app.get("/models/{model_name}")
```

----------------------------------------

TITLE: Defining a Path Parameter with Enum Type in FastAPI
DESCRIPTION: This code snippet shows how to define a path parameter in a FastAPI route using the Enum class created earlier. By annotating the path parameter with the Enum type (`ModelName`), FastAPI will automatically validate the input against the allowed values defined in the Enum.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/path-params.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
```

----------------------------------------

TITLE: Dependency with yield and try block
DESCRIPTION: This code snippet shows how to use a `try` block within a dependency that uses `yield`. This allows you to catch any exceptions that occur while using the dependency, such as a database transaction rollback or other errors. You can handle specific exceptions using `except SomeException` or ensure that cleanup steps are executed using `finally`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_1

LANGUAGE: python
CODE:
```
async def get_db():
    db = DBSession()
    try:
        yield db
    finally:
        db.close()
```

----------------------------------------

TITLE: Defining Pydantic Models (Python 3.10+)
DESCRIPTION: Demonstrates defining a Pydantic model using standard type hints, including `Optional` and `list[str]`, for data validation and structure. This example is tailored for Python 3.10+ syntax, showcasing how Pydantic validates and converts input data into structured objects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_27

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import Optional
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list[str] = []
```

----------------------------------------

TITLE: Install packages from requirements.txt using pip
DESCRIPTION: This command installs packages listed in the requirements.txt file using pip. The -r flag specifies the requirements file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_12

LANGUAGE: console
CODE:
```
$ pip install -r requirements.txt
```

----------------------------------------

TITLE: Query Parameter with Maximum Length Validation in FastAPI
DESCRIPTION: This snippet shows how to use the `Query` class to define a query parameter 'q' with a maximum length of 50 characters.  It demonstrates how to set a default value of None, making the parameter optional.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = Query(default=None, max_length=50)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare an integer parameter in a FastAPI application. The `item_id: int` syntax specifies that the `item_id` parameter should be an integer.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Simple type declarations
DESCRIPTION: This example shows how to declare simple types like `int`, `float`, `bool`, and `bytes` as type hints for function parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/python-types.md#_snippet_4

LANGUAGE: Python
CODE:
```
def process_data(value: int, factor: float, enabled: bool, data: bytes):
    pass
```

----------------------------------------

TITLE: Unterabhängigkeiten mit yield
DESCRIPTION: Verwenden von Unterabhängigkeiten und „Bäumen“ von Unterabhängigkeiten beliebiger Größe und Form, wobei einige oder alle davon `yield` verwenden. FastAPI stellt sicher, dass der „Exit-Code“ in jeder Abhängigkeit mit `yield` in der richtigen Reihenfolge ausgeführt wird.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def dependency_a():
    dep_a = generate_dep_a()
    try:
        yield dep_a
    finally:
        clean_dep_a(dep_a)


async def dependency_b(dep_a=Depends(dependency_a)):
    dep_b = generate_dep_b()
    try:
        yield dep_b
    finally:
        clean_dep_b(dep_b)


async def dependency_c(dep_b=Depends(dependency_b)):
    dep_c = generate_dep_c()
    try:
        yield dep_c
    finally:
        clean_dep_c(dep_c)
```

----------------------------------------

TITLE: Pydantic Model Example (Python 3.10+)
DESCRIPTION: This example demonstrates a Pydantic model definition with type annotations. Pydantic validates data, converts it to the appropriate type, and provides an object with all the data. This snippet is designed for Python 3.10 and above.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/python-types.md#_snippet_20

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial011_py310.py!}
```

----------------------------------------

TITLE: Token Generation Endpoint
DESCRIPTION: This snippet shows how to create a `/token` endpoint that accepts a username and password, authenticates the user, and returns a JWT access token upon successful authentication.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username},
        expires_delta=access_token_expires,
    )
    return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: Importing FastAPI Class in Python
DESCRIPTION: This code snippet shows how to import the FastAPI class from the fastapi package. This import is necessary to create an instance of the FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Importing FastAPI Class
DESCRIPTION: This snippet imports the FastAPI class, which provides all the functionality needed to create an API. FastAPI inherits directly from Starlette, allowing the use of Starlette's functionalities as well.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Importing FastAPI
DESCRIPTION: This Python code snippet demonstrates how to import the FastAPI class, which provides all the functionality for building an API. FastAPI is a direct descendant of Starlette, allowing you to use Starlette's functionalities as well.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Using OAuth2PasswordBearer as a dependency in FastAPI
DESCRIPTION: Demonstrates how to use the OAuth2PasswordBearer instance as a dependency in a FastAPI endpoint.  FastAPI uses this dependency to define a security scheme in the OpenAPI schema and automatically handles the retrieval and validation of the Bearer token from the Authorization header.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/security/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Defining Input Model with Password Field in FastAPI
DESCRIPTION: This example defines a Pydantic model `UserIn` that includes a plain text password field, extending a base model with common user attributes. It also shows how to use EmailStr and the necessary installation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel, EmailStr


class UserIn(BaseModel):
    email: EmailStr
    password: str
    first_name: str
    last_name: Optional[str] = None
```

----------------------------------------

TITLE: WebSocket Endpoint with FastAPI Dependencies (Path, Query, Cookie, Header)
DESCRIPTION: This example demonstrates how to integrate FastAPI's dependency injection system (e.g., `Path`, `Query`, `Cookie`, `Header`, `Depends`) directly into WebSocket endpoints. Parameters like `item_id`, `q`, and `cookie_or_token` are automatically resolved by FastAPI, functioning similarly to standard HTTP path operations. A `WebSocketException` is raised for policy violations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/websockets.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Annotated, Union

from fastapi import (
    Cookie,
    Depends,
    Header,
    Path,
    Query,
    WebSocket,
    WebSocketException,
    status,
)
from fastapi import FastAPI

app = FastAPI()

async def get_cookie_or_token(
    websocket: WebSocket,
    session: Annotated[Union[str, None], Cookie()] = None,
    token: Annotated[Union[str, None], Query()] = None,
    x_token: Annotated[Union[str, None], Header()] = None,
):
    if session is None and token is None and x_token is None:
        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)
    return session or token or x_token


@app.websocket("/ws/{item_id}")
async def websocket_endpoint(
    websocket: WebSocket,
    item_id: str,
    q: Annotated[Union[str, None], Query()] = None,
    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],
):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(
            f"Session cookie or query token value is: {cookie_or_token}, "
            f"Message text was: {data}, "
            f"And item ID is: {item_id}, "
            f"Query parameter q is: {q}"
        )
```

----------------------------------------

TITLE: Dockerfile Initialization
DESCRIPTION: This Dockerfile initializes the base image, sets the working directory, copies the requirements file, installs the dependencies, and copies the application code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_3

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app
```

----------------------------------------

TITLE: Defining a Basic FastAPI App
DESCRIPTION: This code defines a basic FastAPI application with a single endpoint that returns a JSON response. It imports FastAPI, creates an app instance, and defines a GET route at the root path ('/').
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Instalar Pacotes com pip
DESCRIPTION: Este comando instala os pacotes especificados usando o gerenciador de pacotes pip. No exemplo, instala o pacote fastapi com o extra standard.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/virtual-environments.md#_snippet_10

LANGUAGE: console
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Mounting Sub-Application to Main FastAPI App
DESCRIPTION: This snippet demonstrates how to integrate an independent FastAPI sub-application (subapi) into the main application (app) using app.mount(). The sub-application is mounted at the /subapi path, making its routes accessible under this prefix. This operation requires both the main app and the subapi instances to be defined and imported from fastapi.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()
subapi = FastAPI()

app.mount("/subapi", subapi)
```

----------------------------------------

TITLE: Initializing Data on Startup in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a startup event handler in FastAPI to initialize a 'database' (a simple dictionary) with some initial items. This function will be executed before the application starts receiving requests. It uses the `@app.on_event("startup")` decorator to register the function as a startup event handler.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/events.md#_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

items = {}


@app.on_event("startup")
async def startup_event():
    items["foo"] = {"name": "Fighters", "size": 42}
    items["bar"] = {"name": "Tenders", "size": 35}
```

----------------------------------------

TITLE: Optional Type Declaration (Python 3.8+)
DESCRIPTION: This snippet demonstrates how to declare a variable that can be a specific type or `None` using `Optional` from the `typing` module in Python 3.8 and above. The variable `item` can be either a string or `None`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_13

LANGUAGE: Python
CODE:
```
from typing import Optional

item: Optional[str] = None
```

----------------------------------------

TITLE: Delete Hero using SQLModel and FastAPI
DESCRIPTION: This snippet shows how to delete a hero from the database using a DELETE request in FastAPI with SQLModel. It retrieves the hero from the database, raises an HTTP 404 error if the hero is not found, and then deletes the hero from the database using `db.delete(hero)`. Finally, it commits the changes to the database.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_16

LANGUAGE: Python
CODE:
```
@app.delete("/heroes/{hero_id}")
async def delete_hero(
    hero_id: int,
    db: Session = Depends(get_db),
):
    hero = db.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    db.delete(hero)
    db.commit()
    return {"ok": True}
```

----------------------------------------

TITLE: Union Type Declaration (Python 3.8+)
DESCRIPTION: This snippet demonstrates how to declare a variable that can be either an integer or a string in Python 3.8+ using `Union` from the `typing` module.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Union


item: Union[int, str]
```

----------------------------------------

TITLE: Creating a Dependency Function with Query Parameters
DESCRIPTION: Defines a dependency function that accepts optional query parameters (q, skip, limit) and returns them as a dictionary. This function can be injected into path operation functions using Depends.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Importing Starlette HTTPException Alias (FastAPI) - Python
DESCRIPTION: Shows the standard practice of importing `HTTPException` from `starlette.exceptions` and aliasing it as `StarletteHTTPException`. This is recommended when defining handlers that should catch both FastAPI's and Starlette's `HTTPException`, ensuring broad coverage while still using FastAPI's version when *raising* the exception in your code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#_snippet_7

LANGUAGE: Python
CODE:
```
from starlette.exceptions import HTTPException as StarletteHTTPException
```

----------------------------------------

TITLE: Importing FastAPI Class
DESCRIPTION: This line imports the `FastAPI` class from the `fastapi` library. The `FastAPI` class is the core component that provides all the functionality for building your API, inheriting capabilities from Starlette.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Providing Body Parameter Examples in FastAPI (Python)
DESCRIPTION: This snippet shows how to provide examples for the request body parameter in a FastAPI path operation using the `Body` factory function and its `examples` parameter. This allows defining multiple named examples that will be displayed in the interactive API documentation UI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/schema-extra-example.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Body
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

class User(BaseModel):
    username: str
    full_name: str | None = None

@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(
        ...,
        examples={
            "normal": {
                "summary": "A normal example",
                "description": "A **normal** item works correctly.",
                "value": {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                },
            },
            "invalid": {
                "summary": "Invalid data is rejected",
                "value": {
                    "name": "Bar",
                    "price": "twenty five",
                },
                "description": "Price should be a number.",
            },
        },
    ),
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Build the Docker image
DESCRIPTION: This console command builds the Docker image using the Dockerfile in the current directory. The -t flag specifies the tag for the image (myimage). The . at the end specifies the build context as the current directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/deployment/docker.md#_snippet_11

LANGUAGE: console
CODE:
```
$ docker build -t myimage .
```

----------------------------------------

TITLE: Handle Incorrect Username or Password
DESCRIPTION: This code snippet shows how to retrieve user data from a database using the username from the form data and raise an HTTPException with a 400 status code if the user does not exist.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/security/simple-oauth2.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import HTTPException

# ...

user = fake_users_db.get(form_data.username)
if not user:
    raise HTTPException(status_code=400, detail="Incorrect username or password")
```

----------------------------------------

TITLE: Reading Multiple Heroes with Pagination in FastAPI
DESCRIPTION: This FastAPI endpoint retrieves a list of `Hero` objects from the database. It supports pagination through optional `offset` and `limit` query parameters, allowing clients to fetch a subset of heroes. It uses `session.exec(select(Hero).offset(offset).limit(limit))` to query the database.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.get("/heroes/", response_model=List[Hero])
def read_heroes(
    *,
    session: SessionDep,
    offset: int = 0,
    limit: Optional[int] = Query(default=100, le=100),
):
    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()
    return heroes
```

----------------------------------------

TITLE: Defining Pydantic Models (Python 3.8+)
DESCRIPTION: Shows how to define a Pydantic model using type hints for data validation and structure, suitable for Python 3.8+ environments. Pydantic leverages these definitions for automatic data handling, including `List` from the `typing` module for collections.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_29

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import Optional, List
from pydantic import BaseModel

class Order(BaseModel):
    order_id: int
    customer_name: str
    total_amount: float
    items: List[str] = []
    delivery_date: Optional[datetime] = None
```

----------------------------------------

TITLE: Import OAuth2PasswordRequestForm
DESCRIPTION: Imports `OAuth2PasswordRequestForm` and uses it as a dependency with `Depends` in the path operation for `/token`. `OAuth2PasswordRequestForm` is a class dependency that declares a form body with username, password, an optional scope field, an optional grant_type, an optional client_id, and an optional client_secret.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/security/simple-oauth2.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI, HTTPException
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
```

----------------------------------------

TITLE: Pydantic Model Definition in Python
DESCRIPTION: This code defines a Pydantic model named `User` with fields for `id` (integer), `name` (string), and `joined` (date). Pydantic uses type annotations to automatically validate data and provide helpful error messages.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
from datetime import date
from pydantic import BaseModel

# Модель Pydantic
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Path Parameter Numeric Validation: Greater Than and Less Than or Equal
DESCRIPTION: This snippet demonstrates applying multiple numeric validations to a path parameter. `gt=0` ensures `item_id` is strictly greater than 0, and `le=1000` ensures it is less than or equal to 1000, defining a valid range for the integer parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#_snippet_7

LANGUAGE: Python
CODE:
```
    item_id: Annotated[int, Path(title="The ID of the item to get", gt=0, le=1000)],
```

----------------------------------------

TITLE: Asynchronous Path Operation Function with await
DESCRIPTION: Defines an asynchronous path operation function using `async def` and `await` to call a third-party library. This is used when the library requires `await` to be called.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Dynamically Set HTTP Status Code with Response Parameter in Python
DESCRIPTION: This Python snippet shows how to include the `Response` object as a parameter in a FastAPI path operation function. By accessing and modifying the `status_code` attribute of this `Response` object, the application can dynamically determine and set the HTTP status code for the response returned by the endpoint, overriding any default or decorator-set status code. This method is useful for returning specific status codes like 201 upon resource creation or other context-dependent codes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/response-change-status-code.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()

# Assume some logic might decide the status code here
# For this example, we set it explicitly to 201 Created
@app.get("/items/")
def create_item(response: Response):
    # Perform some logic, e.g., create an item in the database
    # If creation is successful, set the status code to 201
    response.status_code = 201 # Setting status code dynamically
    return {"message": "Item created successfully!"} # Return response body
```

----------------------------------------

TITLE: Defining Asynchronous Functions in Python
DESCRIPTION: This code snippet shows how to define an asynchronous function in Python using the `async def` syntax.  Asynchronous functions can use the `await` keyword to pause execution until an asynchronous operation completes, allowing other tasks to run concurrently.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/async.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Opérations asynchrones pour créer les burgers
    return burgers
```

----------------------------------------

TITLE: Valid Query with Annotated
DESCRIPTION: This code shows the correct way to use Query within Annotated by providing the default value directly to the function parameter. This ensures clarity and consistency in the default value.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#_snippet_9

LANGUAGE: Python
CODE:
```
q: Annotated[str, Query()] = "rick"
```

----------------------------------------

TITLE: Using Context Managers in FastAPI Dependencies with yield
DESCRIPTION: This code demonstrates how to use context managers within FastAPI dependencies using `yield`. It shows how to define a dependency that acquires a resource, yields it for use in the route, and then releases the resource when the route is finished, ensuring proper cleanup.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_8

LANGUAGE: Python
CODE:
```
async def dependency_a():
    resource = get_resource()
    try:
        yield resource
    finally:
        await resource.close()
```

----------------------------------------

TITLE: Using a Nested Model as a Type in Pydantic
DESCRIPTION: This code snippet demonstrates how to use the `Image` model as a type for the `image` attribute in the `Item` model. This allows for nested JSON objects with specific attribute names, types, and validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/body-nested-models.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Image(BaseModel):
    url: str
    name: str


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list[str] = []
    image: Optional[Image] = None
```

----------------------------------------

TITLE: Install packages from requirements.txt using pip
DESCRIPTION: This command installs all the packages listed in the requirements.txt file using pip. The -r flag specifies that pip should read the list of packages from the specified file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_12

LANGUAGE: console
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Settings in a Separate Module - config.py
DESCRIPTION: Defines the settings class in a separate `config.py` module. This allows for better organization and separation of concerns in larger applications.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/advanced/settings.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50


settings = Settings()

```

----------------------------------------

TITLE: Declaring Pydantic v2 Model Examples for JSON Schema
DESCRIPTION: This snippet demonstrates how to add example data to a Pydantic v2 model's JSON Schema using the `model_config` attribute. The `json_schema_extra` dictionary, specifically its `examples` key, allows embedding sample data that will appear in the generated OpenAPI documentation, providing clear examples for API consumers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI
from pydantic import BaseModel, Field

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Annotated[str | None, Field(examples=["A very long description"])] = None
    price: float
    tax: float | None = None

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                }
            ]
        }
    }
```

----------------------------------------

TITLE: Using `fastapi.status` Constants for HTTP Status Codes
DESCRIPTION: This snippet illustrates how to use named constants from `fastapi.status` (e.g., `status.HTTP_201_CREATED`) to set HTTP status codes. This approach improves code readability, maintainability, and leverages editor autocompletion, making it less error-prone than using raw numeric codes directly.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/response-status-code.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, status

app = FastAPI()

@app.post("/items/", status_code=status.HTTP_201_CREATED)
async def create_item(name: str):
    return {"message": f"Item {name} created successfully"}
```

----------------------------------------

TITLE: Installing FastAPI with All Dependencies (pip)
DESCRIPTION: This command installs the `fastapi` package along with its `all` extras, which includes `pydantic-settings`. This is a convenient way to set up a FastAPI project with common dependencies, ensuring `BaseSettings` is available.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_1

LANGUAGE: Bash
CODE:
```
pip install "fastapi[all]"
```

----------------------------------------

TITLE: Creating a Project Directory
DESCRIPTION: These commands create a directory structure for a new Python project. It navigates to the home directory, creates a 'code' directory, enters it, creates a project directory named 'awesome-project', and enters that directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_0

LANGUAGE: console
CODE:
```
// Đi đến thư mục home
$ cd
// Tạo một thư mục cho tất cả các dự án của bạn
$ mkdir code
// Vào thư mục code
$ cd code
// Tạo một thư mục cho dự án này
$ mkdir awesome-project
// Vào thư mục dự án
$ cd awesome-project
```

----------------------------------------

TITLE: Running Uvicorn with Proxy Headers
DESCRIPTION: This command runs the Uvicorn server with added support for proxy headers. The `--proxy-headers` option is crucial when the application is behind a reverse proxy (like Nginx or Traefik) to correctly handle HTTPS requests and client IP addresses. The application module is `app.main:app`, it binds to all interfaces (`0.0.0.0`), and uses port 80.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/deployment/docker.md#_snippet_20

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Defining a Custom Exception Handler in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a custom exception handler for a specific exception (`UnicornException`) in FastAPI. It uses the `@app.exception_handler()` decorator to register the handler function, which takes a `Request` object and the exception instance as arguments. The handler returns a JSON response with a custom status code and message.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/handling-errors.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

app = FastAPI()


class UnicornException(Exception):
    def __init__(self, name: str):
        self.name = name


@app.exception_handler(UnicornException)
async def unicorn_exception_handler(request: Request, exc: UnicornException):
    return JSONResponse(
        status_code=418,
        content={"message": f"Oops! {exc.name} did something. There goes a rainbow..."},
    )


@app.get("/unicorns/{name}")
async def read_unicorn(name: str):
    if name == "yolo":
        raise UnicornException(name=name)
    return {"unicorn_name": name}
```

----------------------------------------

TITLE: HeroPublic Data Model Definition
DESCRIPTION: Defines the `HeroPublic` Pydantic model, which is used to represent the public data of a hero. It includes fields like `id`, `name`, and `age`, ensuring that the `id` is always an integer and never `None`. This model is used for API responses to clients.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_11

LANGUAGE: Python
CODE:
```
id: int
```

----------------------------------------

TITLE: Registering Lifespan Context Manager with FastAPI
DESCRIPTION: This snippet shows how to register the custom `lifespan` asynchronous context manager with a FastAPI application. By passing `lifespan=lifespan` to the `FastAPI` constructor, the application will automatically execute the `lifespan` function's startup and shutdown logic.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/events.md#_snippet_5

LANGUAGE: Python
CODE:
```
app = FastAPI(lifespan=lifespan)
```

----------------------------------------

TITLE: Other FastAPI HTTP Operation Decorators
DESCRIPTION: This snippet lists various HTTP method decorators available in FastAPI, beyond just `GET`. These decorators (`@app.post()`, `@app.put()`, `@app.delete()`, etc.) are used to define functions that handle specific HTTP operations for a given path, allowing for comprehensive API design based on standard HTTP verbs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_8

LANGUAGE: Python
CODE:
```
@app.post()
@app.put()
@app.delete()
@app.options()
@app.head()
@app.patch()
@app.trace()
```

----------------------------------------

TITLE: Declaring an Optional Query Parameter with Annotated and Query in FastAPI
DESCRIPTION: This snippet shows how to declare an optional query parameter in FastAPI using `Annotated` and `Query`, while also applying a `min_length` validation. The parameter is made optional by explicitly setting its default value to `None`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_15

LANGUAGE: Python
CODE:
```
q: Annotated[str | None, Query(min_length=3)] = None
```

----------------------------------------

TITLE: Using response_model to Filter Output
DESCRIPTION: The `response_model` parameter is used to specify the `UserOut` model, ensuring that the API response only includes the fields defined in `UserOut`, effectively filtering out the password.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.post("/users/", response_model=UserOut)
async def create_user(user: UserIn): # (1)
    return user
```

----------------------------------------

TITLE: Optional File Upload with Default Value - Python
DESCRIPTION: Shows how to make a file upload optional by using standard type annotations and setting the default value to `None`. This allows the API to handle requests where the file is not provided.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, File, UploadFile

app = FastAPI()


@app.post("/files/")
async def create_file(
    file: Union[bytes, None] = File(default=None)
):
    if not file:
        return {"message": "No file sent"}
    else:
        return {"file_size": len(file)}


@app.post("/uploadfiles/")
async def create_upload_file(
    file: Union[UploadFile, None] = File(default=None)
):
    if not file:
        return {"message": "No upload file sent"}
    else:
        return {"filename": file.filename}
```

----------------------------------------

TITLE: Handle Incorrect Username or Password
DESCRIPTION: Retrieves user data from a (fake) database for the username from the form field. If there is no such user, returns the error message "Incorrect username or password" using the HTTPException exception.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/security/simple-oauth2.md#_snippet_1

LANGUAGE: Python
CODE:
```
raise HTTPException(status_code=400, detail="Incorrect username or password")
```

----------------------------------------

TITLE: Using async with with lifespan
DESCRIPTION: This code snippet shows how to use an asynchronous context manager with `async with`. The code before the `yield` statement in the context manager is executed before entering the `with` block, and the code after the `yield` statement is executed after exiting the `with` block.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/advanced/events.md#_snippet_3

LANGUAGE: Python
CODE:
```
async with lifespan(app):
    await do_stuff()
```

----------------------------------------

TITLE: Securing Host Headers with TrustedHostMiddleware - Python
DESCRIPTION: Demonstrates how to integrate `TrustedHostMiddleware` to protect against HTTP Host Header attacks by validating the `Host` header of incoming requests against a predefined list of allowed domain names. Requests with invalid host headers will result in a `400 Bad Request` response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/middleware.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.trustedhost import TrustedHostMiddleware

app = FastAPI()

app.add_middleware(TrustedHostMiddleware, allowed_hosts=["example.com", "*.example.com"])
```

----------------------------------------

TITLE: Awaiting Asynchronous Operation in Python
DESCRIPTION: This code snippet shows how to use the `await` keyword to wait for the result of an asynchronous function call. The `await` keyword pauses the execution of the current function until the awaited function completes and returns its result.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/async.md#_snippet_3

LANGUAGE: Python
CODE:
```
burgers = await get_burgers(2)
```

----------------------------------------

TITLE: Importing Depends
DESCRIPTION: Imports the Depends class from FastAPI, which is used to declare dependencies in route operation functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI
```

----------------------------------------

TITLE: Declaring Optional Query Parameters in Python
DESCRIPTION: These Python snippets show two ways to declare an optional query parameter `q` in a FastAPI path operation, using `typing.Union` (Python < 3.10) and the new `|` operator (Python 3.10+).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#_snippet_6

LANGUAGE: Python
CODE:
```
q: Union[str, None] = None
```

LANGUAGE: Python
CODE:
```
q: str | None = None
```

----------------------------------------

TITLE: Adding a Task to BackgroundTasks - FastAPI Python
DESCRIPTION: Inside the path operation function, use the `.add_task()` method of the `background_tasks` object to register the function you want to run in the background. Pass the task function, followed by positional arguments, and then keyword arguments.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/background-tasks.md#_snippet_2

LANGUAGE: Python
CODE:
```
background_tasks.add_task(write_notification, email, message="some notification")
```

----------------------------------------

TITLE: Defining a Custom GzipRequest Class in FastAPI
DESCRIPTION: This class extends FastAPI's `Request` to automatically decompress gzipped request bodies. It overrides the `body()` method to check for the 'Content-Encoding: gzip' header and decompresses the body if present, caching the result for subsequent access. This allows route handlers to receive uncompressed data transparently.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#_snippet_0

LANGUAGE: Python
CODE:
```
class GzipRequest(Request):
    async def body(self) -> bytes:
        if not hasattr(self, "_body"):
            body = await super().body()
            if "gzip" in self.headers.get("Content-Encoding", ""):
                body = gzip.decompress(body)
            self._body = body
        return self._body
```

----------------------------------------

TITLE: Defining FastAPI App with Tags
DESCRIPTION: This Python snippet demonstrates how to organize multiple route operations in a FastAPI application using the `tags` parameter in the route decorators. Tags are used in the OpenAPI specification to group related endpoints, which can influence how clients are generated, often creating separate service classes per tag.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/generate-clients.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    price: float
    is_offer: bool | None = None


class ResponseMessage(BaseModel):
    message: str


app = FastAPI()


@app.get("/items/", tags=["items"])
def read_items():
    return [{"name": "Portal Gun", "price": 42}]


@app.post("/items/", response_model=ResponseMessage, tags=["items"])
def create_item(item: Item):
    return {"message": f"Item '{item.name}' received"}


@app.get("/users/", tags=["users"])
def read_users():
    return [{"username": "Rick"}]


@app.post("/users/", tags=["users"])
def create_user(user: dict):
    return user
```

----------------------------------------

TITLE: Instantiating Pydantic Models in Python
DESCRIPTION: This code illustrates two ways to instantiate a Pydantic `User` model. The first method directly passes keyword arguments, while the second uses dictionary unpacking (`**`) to create an instance from a dictionary. This demonstrates Pydantic's flexibility in accepting data for model creation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Instalar Pacotes a partir de requirements.txt com uv
DESCRIPTION: Este comando instala os pacotes listados no arquivo requirements.txt usando o gerenciador de pacotes uv.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/virtual-environments.md#_snippet_13

LANGUAGE: console
CODE:
```
uv pip install -r requirements.txt
```

----------------------------------------

TITLE: Installing Packages with pip
DESCRIPTION: This snippet shows how to install Python packages using pip within an activated virtual environment. It installs the fastapi package with the standard extras.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_10

LANGUAGE: bash
CODE:
```
$ pip install "fastapi[standard]"

---> 100%
```

----------------------------------------

TITLE: Build Docker Image
DESCRIPTION: Builds a Docker image from the Dockerfile in the current directory. The -t flag is used to tag the image with the name 'myimage'. The '.' specifies the current directory as the build context.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/deployment/docker.md#_snippet_10

LANGUAGE: console
CODE:
```
$ docker build -t myimage .
```

----------------------------------------

TITLE: Initializing OAuth2PasswordBearer in FastAPI
DESCRIPTION: This code snippet initializes the OAuth2PasswordBearer scheme, specifying the token URL. The token URL is the endpoint clients use to request an access token by providing their username and password.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/security/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Pydantic Model Usage Example
DESCRIPTION: Illustrates how to create and use Pydantic models with data, including initializing a model directly and from a dictionary. It showcases the flexibility of Pydantic in handling data input.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Defining an Async Path Operation Function in FastAPI
DESCRIPTION: This code snippet shows how to define an asynchronous path operation function in FastAPI. This function is associated with a specific path and HTTP method using a decorator (e.g., `@app.get("/")`). FastAPI calls this function whenever it receives a request to the specified URL with the corresponding HTTP method.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Path Operation Ordering
DESCRIPTION: This example demonstrates the importance of path operation ordering in FastAPI. The `/users/me` path must be declared before `/users/{user_id}` to prevent the latter from incorrectly matching `/users/me`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Initializing FastAPI Application
DESCRIPTION: This code snippet demonstrates how to create an instance of the FastAPI class, which serves as the entry point for building and interacting with the API. The 'app' variable is used by Uvicorn to run the application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It downloads and installs the latest version of FastAPI from the Python Package Index (PyPI).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ pip install fastapi
```

----------------------------------------

TITLE: Integrating BackgroundTasks with Dependency Injection
DESCRIPTION: This example illustrates how `BackgroundTasks` can be integrated with FastAPI's Dependency Injection system. A dependency function (`get_background_tasks_from_dependency`) can receive and add tasks to the `BackgroundTasks` object, which is then passed to the path operation function. This allows multiple parts of the application, including dependencies, to contribute background tasks that are executed after the response is sent.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, BackgroundTasks, Depends

app = FastAPI()

def write_log(message: str):
    with open("log.txt", "a") as log:
        log.write(message + "\n")

# Dependency that adds a background task
def get_background_tasks_from_dependency(background_tasks: BackgroundTasks):
    background_tasks.add_task(write_log, "Task added by a dependency.")
    return background_tasks

@app.post("/send-notification/{email}")
async def send_notification(
    email: str,
    background_tasks: BackgroundTasks = Depends(get_background_tasks_from_dependency),
    message: str = "some notification"
):
    # This task is added by the path operation function
    background_tasks.add_task(write_log, f"Notification for {email}: {message}")
    return {"message": "Notification sent in the background"}
```

----------------------------------------

TITLE: Creating a FastAPI Instance
DESCRIPTION: This code snippet shows how to create an instance of the FastAPI class. This instance, typically named 'app', serves as the main point of interaction for defining and managing the API.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Creating a FastAPI Instance
DESCRIPTION: This code snippet creates an instance of the FastAPI class, which serves as the main entry point for building the API. The 'app' variable is used to define routes and handle incoming requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Basic FastAPI Application
DESCRIPTION: This code defines a simple FastAPI application with two endpoints: `/` which returns a greeting, and `/items/{item_id}` which returns the item ID and an optional query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/deployment/docker.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Path Parameter with Type Annotation
DESCRIPTION: Declares the type of the path parameter `item_id` as an integer using type annotations. FastAPI uses this type information for data validation and automatic documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Overriding HTTPException Handler in FastAPI
DESCRIPTION: This code snippet demonstrates how to override the default exception handler for `HTTPException` in FastAPI. It imports `HTTPException` from `fastapi` and uses it in `@app.exception_handler()` to decorate a custom handler function. The handler receives a `Request` object and the `HTTPException` instance, and returns a plain text response with the exception's status code and detail message.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/handling-errors.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import PlainTextResponse

app = FastAPI()


@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    if item_id == 3:
        raise HTTPException(status_code=418, detail="Nope! I don't like 3")
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Deleting a Hero
DESCRIPTION: Deletes a hero from the database based on the provided hero ID. It checks for the existence of the hero before attempting deletion and returns a 404 error if not found.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_18

LANGUAGE: Python
CODE:
```
@app.delete("/heroes/{hero_id}")
async def delete_hero(hero_id: int):
    with Session(engine) as session:
        hero = session.get(Hero, hero_id)
        if not hero:
            raise HTTPException(status_code=404, detail="Hero not found")
        session.delete(hero)
        session.commit()
        return {"ok": True}
```

----------------------------------------

TITLE: Creating a Hero in the Database
DESCRIPTION: This snippet shows how to create a new hero in the database using SQLModel and FastAPI. It defines a `Hero` model and uses it as a type annotation for the request body. It adds the new hero to the database session, commits the changes, refreshes the data, and returns the created hero.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def create_hero(
    *, session: AsyncSession, hero: HeroCreate
) -> Hero:
    db_hero = Hero.model_validate(hero)
    session.add(db_hero)
    await session.commit()
    await session.refresh(db_hero)
    return db_hero
```

----------------------------------------

TITLE: Asynchronous Path Operation Function with await
DESCRIPTION: Declares an asynchronous path operation function using `async def` and `await` to call a third-party library function. This is suitable when the library requires the use of `await`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh-hant/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Configuring CORS Middleware in FastAPI
DESCRIPTION: This snippet demonstrates how to configure Cross-Origin Resource Sharing (CORS) in a FastAPI application using `CORSMiddleware`. It sets up a list of allowed origins, enables credentials, and allows all HTTP methods and headers for cross-origin requests. This middleware intercepts incoming requests to handle CORS preflight and simple requests, ensuring proper communication between different origins.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/cors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

origins = [
    "http://localhost:8080",
    "http://localhost",
    "https://example.org",
    "https://www.example.org",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
```

----------------------------------------

TITLE: Function with type hints
DESCRIPTION: This example shows how to add type hints to function parameters in Python. It specifies that `first_name` and `last_name` should be strings.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/bn/docs/python-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name

print(get_full_name("john", "doe"))
```

----------------------------------------

TITLE: Activating Virtual Environment
DESCRIPTION: This command activates a Python virtual environment. It modifies the shell's environment variables to use the Python interpreter and packages installed within the specified virtual environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_32

LANGUAGE: bash
CODE:
```
source .venv/bin/activate
```

----------------------------------------

TITLE: Updating the /token Path Operation
DESCRIPTION: This snippet demonstrates how to update the `/token` path operation to create and return a JWT access token. It includes creating a `timedelta` with the token's expiration time and generating the actual JWT access token.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/security/oauth2-jwt.md#_snippet_5

LANGUAGE: Python
CODE:
```
from datetime import timedelta, datetime
from typing import Annotated

from fastapi import Depends, HTTPException, status, APIRouter
from fastapi.security import OAuth2PasswordRequestForm, OAuth2PasswordBearer
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel

router = APIRouter()
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: str | None = None


fake_users_db = {
    "johndoe": {
        "username": "johndoe",
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",
    }
}


SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


@router.post("/token", response_model=Token)
async def login_for_access_token(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):
    user = authenticate_user(form_data)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user["username"]},
        expires_delta=access_token_expires,
    )
    return {"access_token": access_token, "token_type": "bearer"}
```