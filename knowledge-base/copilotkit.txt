TITLE: Configure CopilotKit Provider in React Application
DESCRIPTION: This snippet demonstrates how to set up the CopilotKit provider by wrapping your application's content with the `<CopilotKit>` component. It requires a public API key from the Copilot Cloud dashboard and allows specifying the name of the agent to be used.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_83

LANGUAGE: tsx
CODE:
```
import "./globals.css";
import { ReactNode } from "react";
import { CopilotKit } from "@copilotkit/react-core";

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body>
        {/* Use the public api key you got from Copilot Cloud  */}
        <CopilotKit
          publicApiKey="<your-copilot-cloud-public-api-key>"
          agent="sample_agent" // the name of the agent you want to use
        >
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Configure OpenAI API Key for Agents
DESCRIPTION: Sets up the OpenAI API key for both Python and JavaScript agents. Create a `.env` file in the respective agent directory (`./agent-py` or `./agent-js`) and ensure the provided key supports `gpt-4o`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter/README.md#_snippet_2

LANGUAGE: sh
CODE:
```
OPENAI_API_KEY=...
```

----------------------------------------

TITLE: Setting Up CrewAI Agent with CopilotKit for HITL
DESCRIPTION: This Python snippet illustrates the setup of a CrewAI agent for Human-in-the-Loop (HITL) interactions. The `AgentState` inherits from `CopilotKitState` to integrate CopilotKit actions. The `check_for_user_feedback` method processes user responses ('SEND' or 'CANCEL') from the frontend, updating the agent's messages. The `chat` method uses `copilotkit_stream` with `litellm.completion` to interact with the LLM, binding CopilotKit actions as tools and streaming responses back to the agent's state.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/human-in-the-loop/flow.mdx#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Any, cast
from crewai.flow.flow import Flow, start, listen
from copilotkit import CopilotKitState
from copilotkit.crewai import copilotkit_stream
from litellm import completion


class AgentState(CopilotKitState):
    pass


class SampleAgentFlow(Flow[AgentState]):

    @start()
    async def check_for_user_feedback(self):
        if not self.state.get("messages"):
            return

        last_message = cast(Any, self.state["messages"][-1])

        # Expecting the result of a CopilotKit tool call (SEND/CANCEL)
        if last_message["role"] == "tool":
            user_response = last_message.get("content")

            if user_response == "SEND":
                self.state["messages"].append({
                    "role": "assistant",
                    "content": "✅ Great! Sending your essay via email.",
                })
                return

            if user_response == "CANCEL":
                self.state["messages"].append({
                    "role": "assistant",
                    "content": "❌ Okay, we can improve the draft. What would you like to change?",
                })
                return

        # If no tool result yet, or it's a user message, prompt next step
        if last_message.get("role") == "user":
            self.state["messages"].append({
                "role": "system",
                "content": (
                    "You write essays. Use your tools to write an essay; "
                    "don’t just write it in plain text."
                )
            })

    @listen(check_for_user_feedback)
    async def chat(self):
        messages = self.state.get("messages", [])

        system_message = {
            "role": "system",
            "content": (
                "You write essays. Use your tools to write an essay; "
                "don’t just write it in plain text."
            )
        }

        response = await copilotkit_stream(
            completion(
                model="openai/gpt-4o",
                messages=[system_message, *messages],
                tools=self.state["copilotkit"]["actions"],
                stream=True
            )
        )

        self.state["messages"].append(response.choices[0].message)

```

----------------------------------------

TITLE: Integrate LangChainAdapter for CopilotKit LangSmith Tracing
DESCRIPTION: This code demonstrates how to use the `LangChainAdapter` from `@copilotkit/runtime` to trace CopilotKit runs with LangSmith. It shows how to set up a `ChatOpenAI` model, bind tools, and pass the `threadId` as `conversation_id` metadata for observability.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_175

LANGUAGE: JavaScript
CODE:
```
const { LangChainAdapter } = await import("@copilotkit/runtime");
const { ChatOpenAI } = await import("@langchain/openai");

async function getLangChainOpenAIAdapter() {
  return new LangChainAdapter({
    chainFn: async ({ messages, tools, threadId }) => {
      const model = new ChatOpenAI({
        modelName: "gpt-4-1106-preview",
      }).bindTools(tools, {
        strict: true,
      });
      return model.stream(messages, {
        tools,
        metadata: { conversation_id: threadId },
      });
    },
  });
}
```

----------------------------------------

TITLE: Implement Custom Chat Interface with useCopilotChat Hook
DESCRIPTION: Illustrates how to use the useCopilotChat hook from @copilotkit/react-core to build a fully custom headless chat interface. This hook provides essential functionalities like managing messages, sending user input, and controlling generation states.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_107

LANGUAGE: tsx
CODE:
```
import { useCopilotChat } from "@copilotkit/react-core";
import { Role, TextMessage } from "@copilotkit/runtime-client-gql";

export function CustomChatInterface() {
  const {
    visibleMessages,
    appendMessage,
    setMessages,
    deleteMessage,
    reloadMessages,
    stopGeneration,
    isLoading,
  } = useCopilotChat();

  const sendMessage = (content: string) => {
    appendMessage(new TextMessage({ content, role: Role.User }));
  };

  return (
    <div>
      {/* Implement your custom chat UI here */}
    </div>
  );
}
```

----------------------------------------

TITLE: Making Copilot Aware of Email Thread State with useCopilotReadable
DESCRIPTION: This TypeScript/React code snippet demonstrates how to use the `useCopilotReadable` hook from `@copilotkit/react-core` within a React context provider (`EmailsProvider`) to expose the application's email history state to the CopilotKit assistant. It passes a `description` for context and the `emails` array as the `value` to enable context-aware AI autocompletions.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-powered-textarea/step-4-copilot-readable-state.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// ... the rest of the file

import { useCopilotReadable } from "@copilotkit/react-core"; // [!code highlight]

export const EmailsProvider = ({ children }: { children: ReactNode }) => {
  const [emails, setEmails] = useState<Email[]>(emailHistory);

  // [!code highlight:5]
  useCopilotReadable({
    description: "The history of this email thread",
    value: emails
  });

  // ... the rest of the file
}
```

----------------------------------------

TITLE: Configure CopilotKit Runtime Endpoints for Various Frameworks
DESCRIPTION: These examples demonstrate how to set up a CopilotKit Runtime endpoint to handle AI interactions, integrating with OpenAI and optionally connecting to remote agents via LangGraph Platform. Each example is tailored for a specific framework or router.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-langgraph-endpoint.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import {
  CopilotRuntime,
  OpenAIAdapter,
  copilotRuntimeNextJSAppRouterEndpoint,
  langGraphPlatformEndpoint
} from "@copilotkit/runtime";
import OpenAI from "openai";
import { NextRequest } from "next/server";

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const serviceAdapter = new OpenAIAdapter({ openai } as any);

const runtime = new CopilotRuntime({
  remoteEndpoints: [
    // [!code highlight:12]
    langGraphPlatformEndpoint({
      deploymentUrl: "your-api-url", // make sure to replace with your real deployment url,
      langsmithApiKey: process.env.LANGSMITH_API_KEY, // only used in LangGraph Platform deployments
      agents: [ // List any agents available under "graphs" list in your langgraph.json file; give each a description explaining when it should be called.
        {
          name: 'my_agent', 
          description: 'A helpful LLM agent.',
          assistantId: 'your-assistant-ID' // optional, but recommended!
        }
      ]
    }),
  ],
});

export const POST = async (req: NextRequest) => {
  const { handleRequest } = copilotRuntimeNextJSAppRouterEndpoint({
    runtime,
    serviceAdapter,
    endpoint: "/api/copilotkit",
  });

  return handleRequest(req);
};
```

LANGUAGE: TypeScript
CODE:
```
import {
  CopilotRuntime,
  OpenAIAdapter,
  copilotRuntimeNextJSPagesRouterEndpoint,
  langGraphPlatformEndpoint
} from '@copilotkit/runtime';
import OpenAI from "openai";
import { NextApiRequest, NextApiResponse } from 'next';

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const serviceAdapter = new OpenAIAdapter({ openai } as any);

const handler = async (req: NextApiRequest, res: NextApiResponse) => {
  const runtime = new CopilotRuntime({
    remoteEndpoints: [
      // [!code highlight:12]
      langGraphPlatformEndpoint({
        deploymentUrl: "your-api-url", // make sure to replace with your real deployment url
        langsmithApiKey: process.env.LANGSMITH_API_KEY, // only used in LangGraph Platform deployments
        agents: [ // List any agents available under "graphs" list in your langgraph.json file; give each a description explaining when it should be called.
          {
            name: 'my_agent',
            description: 'A helpful LLM agent.',
            assistantId: 'your-assistant-ID' // optional, but recommended!
          }
        ]
      }),
    ],
  });

  const handleRequest = copilotRuntimeNextJSPagesRouterEndpoint({
    endpoint: '/api/copilotkit',
    runtime,
    serviceAdapter,
  });

  return await handleRequest(req, res);
};

export default handler;
```

LANGUAGE: TypeScript
CODE:
```
import express from 'express';
import {
  CopilotRuntime,
  OpenAIAdapter,
  copilotRuntimeNodeHttpEndpoint,
  langGraphPlatformEndpoint
} from '@copilotkit/runtime';
import OpenAI from "openai";

const app = express();
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const serviceAdapter = new OpenAIAdapter({ openai } as any);

app.use('/copilotkit', (req, res, next) => {
  const runtime = new CopilotRuntime({
    remoteEndpoints: [
```

----------------------------------------

TITLE: Define Copilot Action in a React Component
DESCRIPTION: This snippet demonstrates how to use the `useCopilotAction` hook within a React component to define a frontend action. It shows how to specify the action's name, description, parameters (e.g., `todoText`), and an asynchronous handler function to perform the desired task, such as updating component state. The `"use client"` directive is included for Next.js App Router compatibility.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/frontend-actions.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
"use client" // only necessary if you are using Next.js with the App Router. 
import { useCopilotAction } from "@copilotkit/react-core"; 

export function MyComponent() {
  const [todos, setTodos] = useState<string[]>([]);

  // Define Copilot action
  useCopilotAction({
    name: "addTodoItem",
    description: "Add a new todo item to the list",
    parameters: [
      {
        name: "todoText",
        type: "string",
        description: "The text of the todo item to add",
        required: true,
      },
    ],
    handler: async ({ todoText }) => {
      setTodos([...todos, todoText]);
    },
  });

  return (
    <ul>
      {todos.map((todo, index) => (
        <li key={index}>{todo}</li>
      ))}
    </ul>
  );
}
```

----------------------------------------

TITLE: Integrate CopilotKit Provider in Next.js Root Layout
DESCRIPTION: This code snippet demonstrates how to wrap your Next.js application with the `<CopilotKit>` provider in `layout.tsx`. It imports `CopilotKit` from `@copilotkit/react-core` and passes a `publicApiKey` obtained from Copilot Cloud. This setup ensures that all child components within the provider's scope can access Copilot functionalities.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/copilot-cloud-configure-copilotkit-provider.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import "./globals.css";

import { ReactNode } from "react";
import { CopilotKit } from "@copilotkit/react-core";

export default function RootLayout({ children }: { children: ReactNode }) {
    return (
      <html lang="en">
        <body> 
          {/* Use the public api key you got from Copilot Cloud  */}
          <CopilotKit publicApiKey="<your-copilot-cloud-public-api-key>"> 
            {children}
          </CopilotKit>
        </body>
      </html>
    );
}
```

----------------------------------------

TITLE: Configure CopilotKit Provider in React Application
DESCRIPTION: Example of how to integrate the `CopilotKit` provider into a React application's root component (`ui/app/page.tsx`). It demonstrates importing `CopilotKit` and passing the `publicApiKey` from environment variables to enable Copilot Cloud functionality.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-3-setup-copilotkit.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
"use client";

import { CopilotKit } from "@copilotkit/react-core";

export default function Home() {
  return (
    <CopilotKit
      publicApiKey={process.env.NEXT_PUBLIC_CPK_PUBLIC_API_KEY}
    >
      <TooltipProvider>
        <TripsProvider>
          <main className="h-screen w-screen">
            <MapCanvas />
          </main>
        </TripsProvider>
      </TooltipProvider>
    </CopilotKit>
  );
}
```

----------------------------------------

TITLE: Defining a Copilot Action with useCopilotAction Hook
DESCRIPTION: Demonstrates how to use the `@copilotkit/react-core`'s `useCopilotAction` hook to define a custom action for the Copilot. This example shows adding a todo item, including defining parameters and an asynchronous handler function. It highlights the need for the 'use client' directive in Next.js App Router.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_78

LANGUAGE: typescript
CODE:
```
"use client" // only necessary if you are using Next.js with the App Router.
import { useCopilotAction } from "@copilotkit/react-core";

export function MyComponent() {
  const [todos, setTodos] = useState<string[]>([]);

  // Define Copilot action
  useCopilotAction({
    name: "addTodoItem",
    description: "Add a new todo item to the list",
    parameters: [
      {
        name: "todoText",
        type: "string",
        description: "The text of the todo item to add",
        required: true,
      }
    ],
    handler: async ({ todoText }) => {
      setTodos([...todos, todoText]);
    }
  });

  return (
    <ul>
      {todos.map((todo, index) => (
        <li key={index}>{todo}</li>
      ))}
    </ul>
  );
}
```

----------------------------------------

TITLE: Implementing Generative UI with CopilotKit Actions
DESCRIPTION: This example illustrates the Generative UI pattern in CopilotKit, where tool calls are streamed and rendered to visualize agent progress. It shows how to use `useCopilotAction` with a `renderAndWaitForResponse` callback to display dynamic UI components like `ShowCar` and handle user interactions to guide the agent's flow.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_24

LANGUAGE: TypeScript
CODE:
```
export function useStageBuildCar() {
  const { setSelectedCar, stage, setStage } = useGlobalState();

  // ...

  useCopilotAction({
    name: "showCar",
    description: "Show a single car that you have in mind. Do not call this more than once, call `showMultipleCars` if you have multiple cars to show.",
    available: stage === "buildCar" ? "enabled" : "disabled",
    parameters: [\
      // excluded for brevity, see source code link above for more detail\
    ],
    renderAndWaitForResponse: ({ args, status, respond }) => {
      const { car } = args;
      return (

        <ShowCar
          car={(car as Car) || ({} as Car)}
          status={status}
          onSelect={() => {
            setSelectedCar((car as Car) || ({} as Car));
            respond?.("User has selected a car you can see it in your readables, the system will now move to the next state, do not call call nextState.");
            setStage("sellFinancing");
          }}
          onReject={() => respond?.("User wants to select a different car, please stay in this state and help them select a different car")}
        />
      );
    },
  }, [stage]);
  // ...
}
```

----------------------------------------

TITLE: Define and Configure LangGraph Nodes for Human-in-the-Loop Feedback
DESCRIPTION: This Python snippet defines two LangGraph nodes: `interrupt_node` as a buffer and `user_feedback_node` for handling user responses. It configures a `StateGraph` workflow, adding these nodes and setting up an edge for interruption, allowing CopilotKit to inject user feedback before `user_feedback_node` execution. The workflow is then compiled with `interrupt_after` to enable human intervention.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_253

LANGUAGE: Python
CODE:
```
def interrupt_node(state: AgentState, config: RunnableConfig):
  pass

def user_feedback_node(state: AgentState, config: RunnableConfig) -> Command[Literal["chat_node"]]:

    # 3.1 Get the last message from the state, this will be
    #     what is returned by respond() in the frontend
    last_message = state["messages"][-1]

    # 3.2 If the user declined the essay, ask them how they'd like to improve it
    if last_message.content != "SEND":
        return Command(goto="chat_node", update={
            "messages": [SystemMessage(content="The user declined they essay, please ask them how they'd like to improve it")]
        })

    # 3.3 If the user approved the essay, ask them if they'd like anything else
    return Command(goto="chat_node", update={
        "messages": [SystemMessage(content="The user approved the essay, ask them if they'd like anything else")]
    })

workflow = StateGraph(AgentState)
workflow.add_node("chat_node", chat_node)
workflow.add_node("interrupt_node", interrupt_node)
workflow.add_node("user_feedback_node", user_feedback_node)
workflow.add_edge("interrupt_node", "user_feedback_node")
workflow.set_entry_point("chat_node")

graph = workflow.compile(MemorySaver(), interrupt_after=["interrupt_node"])
```

----------------------------------------

TITLE: Update Agent State and Re-run with Delta Hint in React
DESCRIPTION: This React component demonstrates using the `useCoAgent` hook to manage an agent's shared state. It shows how to use `setState` to update the `language` property of the agent's state and then `run` to re-execute the agent, providing a `TextMessage` hint based on the `previousState` and `currentState` to inform the agent about the language change.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_257

LANGUAGE: TypeScript
CODE:
```
import { useCoAgent } from "@copilotkit/react-core";
import { TextMessage, MessageRole } from "@copilotkit/runtime-client-gql";

// ...

function YourMainContent() {
  const { state, setState, run } = useCoAgent<AgentState>({
    name: "sample_agent",
    initialState: { language: "spanish" }  // optionally provide an initial state
  });

  // setup to be called when some event in the app occurs
  const toggleLanguage = () => {
    const newLanguage = state.language === "english" ? "spanish" : "english";
    setState({ language: newLanguage });

    // re-run the agent and provide a hint about what's changed
    run(({ previousState, currentState }) => {
      return new TextMessage({
        role: MessageRole.User,
        content: `the language has been updated to ${currentState.language}`,
      });
    });
  };

  return (
    // ...
  );
}
```

----------------------------------------

TITLE: Configure LangGraph Message Persistence with AsyncPostgresSaver in FastAPI
DESCRIPTION: This Python code demonstrates how to set up asynchronous message persistence for LangGraph using `AsyncPostgresSaver` within a FastAPI application's `lifespan` function. It initializes the checkpointer, calls `setup()` to prepare the database, compiles a LangGraph workflow with the checkpointer, and integrates the graph into a `CopilotKitRemoteEndpoint` for agent management.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/persistence/message-persistence.mdx#_snippet_0

LANGUAGE: python
CODE:
```
from contextlib import asynccontextmanager
from langgraph.checkpoint.postgres.aio import AsyncPostgresSaver

@asynccontextmanager
async def lifespan(app: FastAPI):
    async with AsyncPostgresSaver.from_conn_string(
        "postgresql://postgres:postgres@127.0.0.1:5432/postgres"
    ) as checkpointer:
        # NOTE: you need to call .setup() the first time you're using your checkpointer
        await checkpointer.setup()
        # Create an async graph
        graph = workflow.compile(checkpointer=checkpointer)

        # Create SDK with the graph
        sdk = CopilotKitRemoteEndpoint(
            agents=[
                LangGraphAgent(
                    name="research_agent",
                    description="Research agent.",
                    graph=graph,
                ),
            ],
        )

        # Add the CopilotKit FastAPI endpoint
        add_fastapi_endpoint(app, sdk, "/copilotkit")
        yield

app = FastAPI(lifespan=lifespan)
```

----------------------------------------

TITLE: Wrap Application with CopilotKit Provider
DESCRIPTION: Demonstrates how to wrap your application or a sub-tree with the CopilotKit component, providing the necessary context for copilot features. Replace `<your-runtime-url>` with the actual endpoint for your Copilot Runtime instance.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/CopilotKit.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { CopilotKit } from "@copilotkit/react-core";
 
<CopilotKit runtimeUrl="<your-runtime-url>">
  // ... your app ...
</CopilotKit>
```

----------------------------------------

TITLE: Handle Authenticated Backend Requests in TypeScript
DESCRIPTION: This example illustrates how a backend endpoint written in TypeScript automatically receives authentication headers (like `Authorization` and `x-user-id`) propagated by CopilotKit Cloud. It shows how to access these headers and perform standard authentication verification before processing the request.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/authenticated-actions.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
// Example backend endpoint
async function handleCalendarRequest(req, res) {
  // Auth headers from the frontend are automatically available
  const authHeader = req.headers.authorization;
  const userId = req.headers["x-user-id"];

  // Verify authentication as you normally would
  if (!isValidAuth(authHeader)) {
    return res.status(401).json({ error: "Unauthorized" });
  }

  // Proceed with authenticated operation
  const calendar = await getCalendarForUser(userId);
  return res.json(calendar);
}
```

----------------------------------------

TITLE: Make Agent Aware of Interrupts with `copilotkit_interrupt`
DESCRIPTION: This Python snippet demonstrates how to integrate `copilotkit_interrupt` to capture user responses and update the agent's state. It ensures the LLM is notified of human-in-the-loop interactions by appending new messages and setting an agent name.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_267

LANGUAGE: Python
CODE:
```
from copilotkit import copilotkit_interrupt

# ...
agent_name, new_messages = copilotkit_interrupt(message="Before we start, what would you like to call me?")
state["messages"] = state["messages"] + new_messages
state["agent_name"] = agent_name
# ...
```

----------------------------------------

TITLE: Using useCopilotReadable with Nested Components and Parent IDs
DESCRIPTION: Illustrates how to maintain hierarchical information structure by passing a `parentId` to `useCopilotReadable`. This is particularly useful for nested React components or list elements, allowing the Copilot to understand parent-child relationships within the application state, such as employee details linked to an employee context.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotReadable.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { useCopilotReadable } from "@copilotkit/react-core";
 
function Employee(props: EmployeeProps) {
  const { employeeName, workProfile, metadata } = props;
 
  // propagate any information to copilot
  const employeeContextId = useCopilotReadable({
    description: "Employee name",
    value: employeeName
  });
 
  // Pass a parentID to maintain a hierarchical structure.
  // Especially useful with child React components, list elements, etc.
  useCopilotReadable({
    description: "Work profile",
    value: workProfile.description(),
    parentId: employeeContextId
  });
 
  useCopilotReadable({
    description: "Employee metadata",
    value: metadata.description(),
    parentId: employeeContextId
  });
 
  return (
    // Render as usual...
  );
}
```

----------------------------------------

TITLE: LLM-Driven Stage Transitions with Multiple Copilot Actions
DESCRIPTION: Demonstrates how to enable LLM-driven stage transitions based on user input or AI actions. It uses `useCopilotReadable` to provide context to the AI and defines two `useCopilotAction` hooks (`selectFinancing`, `selectNoFinancing`) that allow the LLM to choose the next stage ('getFinancingInfo' or 'getPaymentInfo') based on the user's financing choice, enabling dynamic flow control.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
function useStageSellFinancing() {
  const { stage, setStage } = useGlobalState();
  const isActive = stage === "sellFinancing";

  // Provide context to the AI
  useCopilotReadable({
    description: "Financing Information",
    value: "Current promotion: 0% financing for 60 months...",
    available: isActive ? "enabled" : "disabled"
  });

  // Different paths based on financing choice by user, LLM will decide which path to take
  useCopilotAction({
    name: "selectFinancing",
    description: "Select the financing option",
    available: stage === "sellFinancing" ? "enabled" : "disabled",
    handler: () => setStage("getFinancingInfo"),
  }, [stage]);
 
  useCopilotAction({
    name: "selectNoFinancing",
    description: "Select the no financing option",
    available: stage === "sellFinancing" ? "enabled" : "disabled",
    handler: () => setStage("getPaymentInfo"),
  }, [stage]);

}
```

----------------------------------------

TITLE: Adding `useCopilotAction` for User Approval in React
DESCRIPTION: This snippet demonstrates how to integrate `useCopilotAction` into a React frontend to manage a human-in-the-loop workflow. It defines an action named 'writeEssay' that takes a 'draft' argument, renders the draft using Markdown, and provides 'Try Again' and 'Approve Draft' buttons for user interaction. The `renderAndWaitForResponse` callback handles the UI rendering and captures user responses ('CANCEL' or 'SEND') to be sent back to the agent.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/human-in-the-loop/flow.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCopilotAction } from "@copilotkit/react-core"
import { Markdown } from "@copilotkit/react-ui"

function YourMainContent() {
  // ...

  useCopilotAction({
    name: "writeEssay",
    available: "remote",
    description: "Writes an essay and takes the draft as an argument.",
    parameters: [
      { name: "draft", type: "string", description: "The draft of the essay", required: true },
    ],
    // [!code highlight:25]
    renderAndWaitForResponse: ({ args, respond, status }) => {
      return (
        <div>
          <Markdown content={args.draft || 'Preparing your draft...'} />

          <div className={`flex gap-4 pt-4 ${status !== "executing" ? "hidden" : ""}`}>
            <button
              onClick={() => respond?.("CANCEL")}
              disabled={status !== "executing"}
              className="border p-2 rounded-xl w-full"
            >
              Try Again
            </button>
            <button
              onClick={() => respond?.("SEND")}
              disabled={status !== "executing"}
              className="bg-blue-500 text-white p-2 rounded-xl w-full"
            >
              Approve Draft
            </button>
          </div>
        </div>
      );
    },
  });

  // ...
}
```

----------------------------------------

TITLE: Make Dashboard Data Readable by AI with useCopilotReadable
DESCRIPTION: Illustrates using the `useCopilotReadable` hook in `components/Dashboard.tsx` to expose structured dashboard data (sales, products, metrics) to the AI, enabling it to understand and analyze real-time metrics.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-chat-with-your-data/README.md#_snippet_5

LANGUAGE: tsx
CODE:
```
useCopilotReadable({
  description: "Dashboard data including sales trends, product performance, and category distribution",
  value: {
    salesData,
    productData,
    categoryData,
    regionalData,
    demographicsData,
    metrics: {
      totalRevenue,
      totalProfit,
      totalCustomers,
      conversionRate,
      averageOrderValue,
      profitMargin
    }
  }
});
```

----------------------------------------

TITLE: Compile CopilotKit Agent State Graph
DESCRIPTION: Constructs and compiles the complete agent state graph using `StateGraph`. It defines the `chatNode`, `getFeedback`, and `handleFeedback` nodes, establishes their transitions, and configures interruption points for user interaction.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/node-flow.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
        // 6. Define the graph and compile the graph
        export const graph = new StateGraph(AgentStateAnnotation)
          .addNode("chatNode", chatNode, { ends: ["getFeedback"] })
          .addNode("getFeedback", getFeedback)
          .addNode("handleFeedback", handleFeedback)
          .addEdge("__start__", "chatNode")
          .addEdge("getFeedback", "handleFeedback")
          .addEdge("handleFeedback", "chatNode")
          .compile({
            checkpointer: new MemorySaver(),
            interruptAfter: ["getFeedback"]
          });
```

----------------------------------------

TITLE: Render Agent Tool Call in React Frontend with useCopilotAction
DESCRIPTION: This React/TSX snippet shows how to use the `useCopilotAction` hook from `@copilotkit/react-core` to render an agent's tool call in the UI. It configures the `get_weather` action to be `disabled` for direct calling and provides a `render` function to display custom UI feedback based on the tool's status and arguments.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/generative-ui/tool-based.mdx#_snippet_1

LANGUAGE: TSX
CODE:
```
import { useCopilotAction } from "@copilotkit/react-core"; // [!code highlight]
// ...

const YourMainContent = () => {
  // ...
  // [!code highlight:13]
  useCopilotAction({
    name: "get_weather",
    available: "disabled", // Don't allow the agent or UI to call this tool as its only for rendering
    render: ({ status, args }) => {
      return (
        <p className="text-gray-500 mt-2">
          {status !== "complete" && "Calling weather API..."}
          {status === "complete" &&
            `Called the weather API for ${args.location}.`}
        </p>
      );
    },
  });
  // ...
};
```

----------------------------------------

TITLE: Guiding AI Tool Calls in a CopilotKit State Machine Stage
DESCRIPTION: This TypeScript snippet demonstrates how to use `useCopilotAdditionalInstructions` within a React hook (`useStageGetPaymentInfo`) to guide the AI agent. When the application enters the 'getPaymentInfo' stage, the instructions ensure the AI explicitly calls the `getPaymentInformation` tool after a specific conversational prompt. This pattern is crucial for controlling AI behavior in multi-stage conversational flows.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_26

LANGUAGE: TypeScript
CODE:
```
export function useStageGetPaymentInfo() {
  const { setCardInfo, stage, setStage } = useGlobalState();

  // Conditionally add additional instructions for the agent's prompt.
  useCopilotAdditionalInstructions({
    available: stage === "getPaymentInfo" ? "enabled" : "disabled",

    instructions: `
        CURRENT STATE: You are now getting the payment information of the user.
        Say, 'Great! Now I need to get your payment information.' and MAKE SURE
        to then call the 'getPaymentInformation' action.
    `,
  }, [stage]);

  // ...

}
```

----------------------------------------

TITLE: Dividing Agent State into Input, Output, and Overall Schemas in Python
DESCRIPTION: This example demonstrates how to logically separate an agent's state into distinct schemas: `InputState` for user-provided data, `OutputState` for LLM responses, and `OverallState` which combines both and includes internal resources. It also shows how to integrate these schemas into a LangGraph `StateGraph` and define a node that processes the state.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_215

LANGUAGE: Python
CODE:
```
from copilotkit import CopilotKitState
from typing import Literal

# Divide the state to 3 parts

# Input schema for inputs you are willing to accept from the frontend
class InputState(CopilotKitState):
  question: str

# Output schema for output you are willing to pass to the frontend
class OutputState(CopilotKitState):
  answer: str

# The full schema, including the inputs, outputs and internal state ("resources" in our case)
class OverallState(InputState, OutputState):
  resources: List[str]

async def answer_node(state: OverallState, config: RunnableConfig):
  """
  Standard chat node, meant to answer general questions.
  """

  model = ChatOpenAI()

  # add the input question in the system prompt so it's passed to the LLM
  system_message = SystemMessage(
    content=f"You are a helpful assistant. Answer the question: {state.get('question')}"
  )

  response = await model.ainvoke([
    system_message,
    *state["messages"],
  ], config)

  # ...add the rest of the agent implementation

  # extract the answer, which will be assigned to the state soon
  answer = response.content

  return {
     "messages": response,
      # include the answer in the returned state
     "answer": answer
  }


# finally, before compiling the graph, we define the 3 state components
builder = StateGraph(OverallState, input=InputState, output=OutputState)

# add all the different nodes and edges and compile the graph
builder.add_node("answer_node", answer_node)
builder.add_edge(START, "answer_node")
builder.add_edge("answer_node", END)
graph = builder.compile()
```

----------------------------------------

TITLE: Building a Custom Chat Interface with useCopilotChat Hook
DESCRIPTION: This code snippet demonstrates how to create a fully custom chat interface using the `useCopilotChat` hook from `@copilotkit/react-core`. It provides access to essential chat functionalities such as managing messages, sending new messages, and controlling the loading state, enabling complete UI customization.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/headless-ui.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCopilotChat } from "@copilotkit/react-core";
import { Role, TextMessage } from "@copilotkit/runtime-client-gql";

export function CustomChatInterface() {
  const {
    visibleMessages,
    appendMessage,
    setMessages,
    deleteMessage,
    reloadMessages,
    stopGeneration,
    isLoading,
  } = useCopilotChat();

  const sendMessage = (content: string) => {
    appendMessage(new TextMessage({ content, role: Role.User }));
  };

  return (
    <div>
      {/* Implement your custom chat UI here */}
    </div>
  );
}
```

----------------------------------------

TITLE: Install CopilotKit Frontend Packages
DESCRIPTION: This snippet shows how to install the necessary CopilotKit React UI and Core packages into your frontend project using npm.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_0

LANGUAGE: javascript
CODE:
```
npm install @copilotkit/react-ui @copilotkit/react-core
```

----------------------------------------

TITLE: Install CopilotKit React Packages
DESCRIPTION: Install the core React UI and core packages for CopilotKit using npm. These packages provide the necessary components and functionalities to build Copilot-aware applications.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_69

LANGUAGE: npm
CODE:
```
npm install @copilotkit/react-ui @copilotkit/react-core
```

----------------------------------------

TITLE: Registering Copilot Actions with useCopilotAction Hook in React
DESCRIPTION: This snippet demonstrates how to use the `useCopilotAction` hook within a React component to expose specific functions (addTask, deleteTask, setTaskStatus) to a copilot. Each action is defined with a name, a description for the AI, a list of parameters following JSON Schema, and a handler function that executes the corresponding application logic.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-todo-app/step-4-copilot-actions.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
// ... the rest of the file

import { useCopilotReadable, useCopilotAction } from "@copilotkit/react-core";

export const TasksProvider = ({ children }: { children: ReactNode }) => {
  const [tasks, setTasks] = useState<Task[]>(defaultTasks);

  useCopilotAction({
    name: "addTask",
    description: "Adds a task to the todo list",
    parameters: [
      {
        name: "title",
        type: "string",
        description: "The title of the task",
        required: true,
      }
    ],
    handler: ({ title }) => {
      addTask(title);
    }
  });

  useCopilotAction({
    name: "deleteTask",
    description: "Deletes a task from the todo list",
    parameters: [
      {
        name: "id",
        type: "number",
        description: "The id of the task",
        required: true,
      }
    ],
    handler: ({ id }) => {
      deleteTask(id);
    }
  });

  useCopilotAction({
    name: "setTaskStatus",
    description: "Sets the status of a task",
    parameters: [
      {
        name: "id",
        type: "number",
        description: "The id of the task",
        required: true,
      },
      {
        name: "status",
        type: "string",
        description: "The status of the task",
        enum: Object.values(TaskStatus),
        required: true,
      }
    ],
    handler: ({ id, status }) => {
      setTaskStatus(id, status);
    }
  });

  // ... the rest of the file
};
```

----------------------------------------

TITLE: Persist CopilotKit Agent State by Setting threadId
DESCRIPTION: The `threadId` property in CopilotKit is used to load and restore the complete state of a conversation thread, including messages and agent states, from the database. When using the LangGraph platform, the `threadId` must be a UUID. This ensures continuity across user sessions.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_199

LANGUAGE: typescript
CODE:
```
<CopilotKit threadId="2140b272-7180-410d-9526-f66210918b13">
  <YourApp />
</CopilotKit>
```

----------------------------------------

TITLE: Configure CopilotKit in React Root Layout
DESCRIPTION: This snippet demonstrates how to set up the `CopilotKit` provider in your application's root layout (e.g., `layout.tsx` in Next.js). It's crucial for making CopilotKit functionalities available throughout your application. The `publicApiKey` prop is required to authenticate your application with Copilot Cloud.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/cloud/cloud-copilotkit-provider.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import "./globals.css";
import { ReactNode } from "react";
import { CopilotKit } from "@copilotkit/react-core";
 
export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body>
        {/* Use the public api key you got from Copilot Cloud  */}
        <CopilotKit publicApiKey="<your-copilot-cloud-public-api-key>"> 
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Configure CopilotKit Provider in React Root Layout
DESCRIPTION: This snippet demonstrates how to set up the CopilotKit provider in a Next.js or similar React application's root layout (e.g., `layout.tsx`). It imports `CopilotKit` from `@copilotkit/react-core` and wraps the application's children with it. Essential properties like `runtimeUrl` (pointing to the backend API) and `agent` (specifying the AI agent to use) are configured.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/coagents/self-host-configure-copilotkit-provider.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import "./globals.css";
import { ReactNode } from "react";
import { CopilotKit } from "@copilotkit/react-core";

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body> 
        {/* Use the public api key you got from Copilot Cloud  */}
        <CopilotKit 
          runtimeUrl="/api/copilotkit"
          agent="sample_agent" // the name of the agent you want to use
        > 
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Update Agent State with useCoAgent Hook in React
DESCRIPTION: This React component demonstrates how to interact with and update the agent's state from a frontend application using the `useCoAgent` hook. It shows how to retrieve the current state and use the `setState` function to modify it, enabling real-time feedback to the user based on agent activities.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_272

LANGUAGE: TypeScript
CODE:
```
import { useCoAgent } from "@copilotkit/react-core";

// Define the agent state type, should match the actual state of your agent
type AgentState = {
  language: "english" | "spanish";
}

// Example usage in a pseudo React component
function YourMainContent() {
  const { state, setState } = useCoAgent<AgentState>({
    name: "sample_agent",
    initialState: { language: "spanish" }  // optionally provide an initial state
  });

  // ...

  const toggleLanguage = () => {
    setState({ language: state.language === "english" ? "spanish" : "english" });
  };

  // ...

  return (
    // style excluded for brevity
    <div>
      <h1>Your main content</h1>
      <p>Language: {state.language}</p>
      <button onClick={toggleLanguage}>Toggle Language</button>
    </div>
  );
}
```

----------------------------------------

TITLE: Interacting with a CoAgent and Observing State Changes in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to use the `useCoAgent` hook from `@copilotkit/react-core` to interact with a named agent. It shows how to define the expected agent state type and initialize the agent with an input question, then observe how the state (specifically the 'answer' property) updates as the agent processes the request, while other properties like 'question' are not returned.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_216

LANGUAGE: TypeScript
CODE:
```
import { useCoAgent } from "@copilotkit/react-core";

type AgentState = {
  question: string;
  answer: string;
}

const { state } = useCoAgent<AgentState>({
  name: "sample_agent",
  initialState: {
    question: "How's is the weather in SF?",
  }
});

console.log(state) // You can expect seeing "answer" change, while the others are not returned from the agent
```

----------------------------------------

TITLE: Read Agent State with `useCoAgent` Hook in React
DESCRIPTION: This snippet illustrates how to use the `useCoAgent` hook from `@copilotkit/react-core` to access and react to the agent's real-time state within a React application. It involves defining the agent state type to match the backend agent's state and optionally providing an initial state. The `state` variable returned by the hook is reactive and automatically updates as the agent's state changes.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_261

LANGUAGE: TypeScript
CODE:
```
import { useCoAgent } from "@copilotkit/react-core";

// Define the agent state type, should match the actual state of your agent
type AgentState = {
  language: "english" | "spanish";
}

function YourMainContent() {
  const { state } = useCoAgent<AgentState>({
    name: "sample_agent",
    initialState: { language: "spanish" }  // optionally provide an initial state
  });

  // ...

  return (
    // style excluded for brevity
    <div>
      <h1>Your main content</h1>
      <p>Language: {state.language}</p>
    </div>
  );
}
```

----------------------------------------

TITLE: Create Reactive UI with useCoAgent State
DESCRIPTION: Shows how to build a reactive user interface by leveraging the `state` and `setState` properties from `useCoAgent`, enabling bidirectional updates between the UI and the agent's state.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCoAgent.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
const { state, setState } = useCoAgent<AgentState>({
  name: "my-agent",
  initialState: {
    count: 0,
  },
});
 
return (
  <div>
    <p>Count: {state.count}</p>
    <button onClick={() => setState({ count: state.count + 1 })}>Increment</button>
  </div>
);
```

----------------------------------------

TITLE: Re-run CoAgent with State Updates and Contextual Hint in TypeScript
DESCRIPTION: Demonstrates how to use the `useCoAgent` hook to manage an agent's state, update it using `setState`, and then manually re-run the agent with a `run` callback. The callback generates a `TextMessage` hint based on the difference between the previous and current agent states, providing context for the agent's re-execution.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_273

LANGUAGE: typescript
CODE:
```
import { useCoAgent } from "@copilotkit/react-core";
import { TextMessage, MessageRole } from "@copilotkit/runtime-client-gql";

// ...

function YourMainContent() {
  const { state, setState, run } = useCoAgent<AgentState>({
    name: "sample_agent",
    initialState: { language: "spanish" }  // optionally provide an initial state
  });

  // setup to be called when some event in the app occurs
  const toggleLanguage = () => {
    const newLanguage = state.language === "english" ? "spanish" : "english";
    setState({ language: newLanguage });

    // re-run the agent and provide a hint about what's changed
    run(({ previousState, currentState }) => {
      return new TextMessage({
        role: MessageRole.User,
        content: `the language has been updated to ${currentState.language}`,
      });
    });
  };

  return (
    // ...
  );
}
```

----------------------------------------

TITLE: Integrate LangChain.js Actions with CopilotRuntime
DESCRIPTION: This example demonstrates how to integrate LangChain.js chains as backend actions in your CopilotKit application, specifically within the `/api/copilotkit/route.ts` file. CopilotKit allows actions to return LangChain streams directly. The `actions` property is an array generator that can dynamically expose different backend actions based on the frontend URL or custom properties. The example shows a `generateJokeForTopic` action that uses LangChain to stream a pirate-themed joke.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/langchain-js-backend-actions.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { ChatOpenAI } from "@langchain/openai";
import { ChatPromptTemplate } from "@langchain/core/prompts";

const runtime = new CopilotRuntime({
  // ... existing configuration
  actions: ({properties, url}) => {
    // Note that actions returns not an array, but an array **generator**.
    // You can use the input parameters to the actions generator to expose different backend actions to the Copilot at different times: 
    // `url` is the current URL on the frontend application.
    // `properties` contains custom properties you can pass from the frontend application.

    return [
      {
        name: "generateJokeForTopic",
        description: "Generates a joke for a given topic.",
        parameters: [
          {
            name: "topic",
            type: "string",
            description: "The topic to generate a joke about.",
            required: true,
          }
        ],
        handler: async ({topic}: {topic: string}) => {
          const prompt = ChatPromptTemplate.fromMessages([
            [
              "system",
              "You are a witty comedian. Generate a short, funny joke about the given topic. But make it sound like a pirate joke!"
            ],
            ["user", "Topic: {topic}"]
          ]);
          const chain = prompt.pipe(new ChatOpenAI());
          return chain.stream({ // return directly chain.stream
            topic: topic
          });
        }
      }
    ]
  }
});

// ... rest of your route definition
```

----------------------------------------

TITLE: Divide Agent State into Input, Output, and Overall Schemas
DESCRIPTION: This section illustrates how to refine the agent's state management by separating it into `InputState` (for frontend inputs), `OutputState` (for frontend outputs), and `OverallState` (combining inputs, outputs, and internal state like `resources`). It also provides a Python example of an `answer_node` that processes the state and a LangGraph builder setup, demonstrating how these schemas are used in a complete agent flow.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/state-inputs-outputs.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
from copilotkit import CopilotKitState
from typing import Literal

# Divide the state to 3 parts

# Input schema for inputs you are willing to accept from the frontend
class InputState(CopilotKitState):
  question: str

# Output schema for output you are willing to pass to the frontend
class OutputState(CopilotKitState):
  answer: str

# The full schema, including the inputs, outputs and internal state ("resources" in our case)
class OverallState(InputState, OutputState):
  resources: List[str]

async def answer_node(state: OverallState, config: RunnableConfig):
  """
  Standard chat node, meant to answer general questions.
  """

  model = ChatOpenAI()

  # add the input question in the system prompt so it's passed to the LLM
  system_message = SystemMessage(
    content=f"You are a helpful assistant. Answer the question: {state.get('question')}"
  )

  response = await model.ainvoke([
    system_message,
    *state["messages"],
  ], config)

  # ...add the rest of the agent implementation

  # extract the answer, which will be assigned to the state soon
  answer = response.content

  return {
     "messages": response,
      # include the answer in the returned state
     "answer": answer
  }


# finally, before compiling the graph, we define the 3 state components
builder = StateGraph(OverallState, input=InputState, output=OutputState)

# add all the different nodes and edges and compile the graph
builder.add_node("answer_node", answer_node)
builder.add_edge(START, "answer_node")
builder.add_edge("answer_node", END)
graph = builder.compile()
```

LANGUAGE: TypeScript
CODE:
```
import { Annotation } from "@langchain/langgraph";
import { CopilotKitStateAnnotation } from "@copilotkit/sdk-js/langgraph";

// Divide the state to 3 parts

// An input schema for inputs you are willing to accept from the frontend
const InputAnnotation = Annotation.Root({
  ...CopilotKitStateAnnotation.spec,
  question: Annotation<string>,
});

// Output schema for output you are willing to pass to the frontend
const OutputAnnotation = Annotation.Root({
  ...CopilotKitStateAnnotation.spec,
  answer: Annotation<string>,
});

// The full schema, including the inputs, outputs and internal state ("resources" in our case)
```

----------------------------------------

TITLE: Render Agent State Inside Chat with useCoAgentStateRender (React/TypeScript)
DESCRIPTION: This snippet demonstrates how to use the `useCoAgentStateRender` hook from `@copilotkit/react-core` to render the agent's state directly within the chat interface. It defines the `AgentState` type and provides a `render` function to dynamically display the `searches` array, showing progress with emojis.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_98

LANGUAGE: TypeScript
CODE:
```
// ...
import { useCoAgentStateRender } from "@copilotkit/react-core";
// ...

// Define the state of the agent, should match the state of the agent in your LangGraph.
type AgentState = {
  searches: {
    query: string;
    done: boolean;
  }[];
};

function YourMainContent() {
  // ...


  // styles omitted for brevity
  useCoAgentStateRender<AgentState>({
    name: "sample_agent", // the name the agent is served as
    render: ({ state }) => (
      <div>
        {state.searches?.map((search, index) => (
          <div key={index}>
            {search.done ? "✅" : "❌"} {search.query}{search.done ? "" : "..."}
          </div>
        ))}
      </div>
    ),
  });

  // ...

  return <div>...</div>;
}
```

----------------------------------------

TITLE: Install CopilotKit JavaScript SDK
DESCRIPTION: This command installs the CopilotKit JavaScript SDK, `@copilotkit/sdk-js`, via npm, making it available for use in JavaScript projects.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_132

LANGUAGE: JavaScript
CODE:
```
npm install @copilotkit/sdk-js
```

----------------------------------------

TITLE: Integrate CopilotKit into React Root Layout
DESCRIPTION: This snippet shows how to wrap your React application with `CopilotKit` in the `RootLayout` component. It imports `CopilotKit` from `@copilotkit/react-core` and configures the `runtimeUrl` to point to the backend API endpoint. Ensure the `runtimeUrl` matches your configured API route for proper communication with the CopilotKit backend.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-configure-copilotkit-provider.mdx#_snippet_0

LANGUAGE: TSX
CODE:
```
import "./globals.css";
import { ReactNode } from "react";
import { CopilotKit } from "@copilotkit/react-core";

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body> 
        {/* Make sure to use the URL you configured in the previous step  */}
        <CopilotKit runtimeUrl="/api/copilotkit"> 
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Setup CopilotKit Provider in Root Layout
DESCRIPTION: Wrap the Copilot-aware parts of your application with the `<CopilotKit>` component, typically in your `layout.tsx` file, using your public API key to enable CopilotKit functionalities.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_41

LANGUAGE: tsx
CODE:
```
import "./globals.css";
import { ReactNode } from "react";
import { CopilotKit } from "@copilotkit/react-core";

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body>
        {/* Use the public api key you got from Copilot Cloud  */}
        <CopilotKit publicApiKey="<your-copilot-cloud-public-api-key>">
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Integrate CopilotKit Provider in Root Layout
DESCRIPTION: Wraps the application's children components with `CopilotKit`, providing the necessary chat context throughout the application. It requires a `publicApiKey` for authentication.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-form-filling/README.md#_snippet_4

LANGUAGE: tsx
CODE:
```
export default function RootLayout({children}: Readonly<{children: React.ReactNode}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <CopilotKit publicApiKey={process.env.NEXT_PUBLIC_COPILOT_PUBLIC_API_KEY}>
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Configure CopilotKit Provider in Root Layout
DESCRIPTION: Wrap your application with the <CopilotKit> component, typically in layout.tsx, to enable Copilot-aware features. This component requires a public API key obtained from Copilot Cloud for authentication.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_70

LANGUAGE: TypeScript
CODE:
```
import "./globals.css";
import { ReactNode } from "react";
import { CopilotKit } from "@copilotkit/react-core";

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body>
        {/* Use the public api key you got from Copilot Cloud  */}
        <CopilotKit publicApiKey="<your-copilot-cloud-public-api-key>">
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Install CopilotKit Python SDK
DESCRIPTION: Instructions to install the CopilotKit Python SDK using pip.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/LangGraphAgent.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
pip install copilotkit
```

----------------------------------------

TITLE: Render Custom UI Components with useCopilotAction
DESCRIPTION: This code snippet demonstrates how to use the `useCopilotAction` hook from `@copilotkit/react-core` to render custom React components within a chat UI. It defines an action named `showCalendarMeeting` with specific parameters (`date`, `time`, `meetingName`) and a `render` function. The `render` function dynamically displays a `LoadingView` during `inProgress` status or a `CalendarMeetingCardComponent` with the action's arguments upon completion. This allows the LLM to trigger the display of rich, interactive UI elements.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_73

LANGUAGE: TypeScript
CODE:
```
"use client" // only necessary if you are using Next.js with the App Router.
import { useCopilotAction } from "@copilotkit/react-core";

export function YourComponent() {
  useCopilotAction({
    name: "showCalendarMeeting",
    description: "Displays calendar meeting information",
    parameters: [
      {
        name: "date",
        type: "string",
        description: "Meeting date (YYYY-MM-DD)",
        required: true
      },
      {
        name: "time",
        type: "string",
        description: "Meeting time (HH:mm)",
        required: true
      },
      {
        name: "meetingName",
        type: "string",
        description: "Name of the meeting",
        required: false
      }
    ],

    render: ({ status, args }) => {
      const { date, time, meetingName } = args;

      if (status === 'inProgress') {
        return <LoadingView />; // Your own component for loading state
      } else {
        const meetingProps: CalendarMeetingCardProps = {
          date: date,
          time,
          meetingName
        };
        return <CalendarMeetingCardComponent {...meetingProps} />;
      }
    },
  });

  return (
    <>...</>
  );
}
```

----------------------------------------

TITLE: Set up a Backend Action with CopilotRuntime
DESCRIPTION: This code defines a backend action named 'fetchUser' using CopilotRuntime. It fetches user data based on a provided userId and returns the user's name. This action is designed to be executed in a secured backend environment, handling data retrieval logic.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/front-backend-action-pairing.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
const runtime = new CopilotRuntime({
// ... existing configuration
actions: ({properties, url}) => {
return [
    {
        name: "fetchUser",
        description: "Fetches user name from the database for a given ID.",
        parameters: [
    {
        name: "userId",
        type: "string",
        description: "The ID of the user to fetch data for.",
        required: true,
    },
        ],
        handler: async ({userId}: {userId: string}) => {
        // do something with the userId
        // return the user data
        return {
        name: "Darth Doe",
    };
    },
    },
        ]
    }
    });

        // ... rest of your route definition
```

----------------------------------------

TITLE: Render Emitted Agent State in React Frontend
DESCRIPTION: This TypeScript/TSX code snippet shows how to use the `useCoAgentStateRender` hook from `@copilotkit/react-core` to display the agent's emitted state in the chat UI. The hook listens for state updates named 'agent' and conditionally renders a `Progress` component if there are logs, providing real-time visual feedback to the user.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-7-generative-ui.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { useCoAgentStateRender, useLangGraphInterrupt } from "@copilotkit/react-core";

export default function HomePage() {
    //...
    const { state: researchState, setResearchState } = useResearch()
    // ...

    useCoAgentStateRender<ResearchState>({
        name: 'agent',
        render: ({ state }) => {
            if (state.logs?.length > 0) {
                return <Progress logs={state.logs} />;
            }
            return null;
        }
    }, [researchState]);

    // ...
}
```

----------------------------------------

TITLE: Restrict CopilotKit Actions Based on User Context
DESCRIPTION: Illustrates how to use a callable for the `actions` parameter to conditionally provide different sets of actions to the Copilot based on properties in the `context` object, such as user roles or tokens.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_125

LANGUAGE: Python
CODE:
```
from copilotkit import CopilotKitRemoteEndpoint, Action

sdk = CopilotKitRemoteEndpoint(
    actions=lambda context: (
        [action_a, action_b] if is_admin(context["properties"]["token"]) else [action_a]
    )
)
```

----------------------------------------

TITLE: Python LangGraph Workflow with User Feedback and Interruption
DESCRIPTION: This Python snippet demonstrates how to define an agent workflow using LangGraph, incorporating an `interrupt_node` for controlled pauses and a `user_feedback_node` to process user responses. It shows how to configure the state graph, add nodes, define edges, and compile the workflow with `interrupt_after` to enable frontend interaction via CopilotKit's `renderAndWaitForResponse`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/node-flow.mdx#_snippet_2

LANGUAGE: Python
CODE:
```
# 3. Define an empty interrupt node to act as buffer as we use the interrupt_after property
def interrupt_node(state: AgentState, config: RunnableConfig):
  pass

# 4. Define the user_feedback_node, this node will be interrupted before execution
#    where CopilotKit's renderAndWaitForResponse provide the user's response.
def user_feedback_node(state: AgentState, config: RunnableConfig) -> Command[Literal["chat_node"]]:
    # 3.1 Get the last message from the state, this will be 
    #     what is returned by respond() in the frontend
    last_message = state["messages"][-1]

    # 3.2 If the user declined the essay, ask them how they'd like to improve it
    if last_message.content != "SEND":
        return Command(goto="chat_node", update={
            "messages": [SystemMessage(content="The user declined they essay, please ask them how they'd like to improve it")]
        })

    # 3.3 If the user approved the essay, ask them if they'd like anything else
    return Command(goto="chat_node", update={
        "messages": [SystemMessage(content="The user approved the essay, ask them if they'd like anything else")]
    })

# 5. Configure the workflow
workflow = StateGraph(AgentState)
workflow.add_node("chat_node", chat_node)
workflow.add_node("interrupt_node", interrupt_node)
workflow.add_node("user_feedback_node", user_feedback_node)
workflow.add_edge("interrupt_node", "user_feedback_node")
workflow.set_entry_point("chat_node")

# 6. Compile the workflow and set the interrupt_after property
graph = workflow.compile(MemorySaver(), interrupt_after=["interrupt_node"])
```

----------------------------------------

TITLE: Create CopilotKit API Endpoint in Next.js App Router
DESCRIPTION: This TypeScript code defines a Next.js App Router API route for CopilotKit. It initializes `CopilotRuntime` and `OpenAIAdapter` to handle incoming requests at `/api/copilotkit`, enabling the backend for CopilotKit's AI functionalities.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_10

LANGUAGE: TypeScript
CODE:
```
import {
  CopilotRuntime,
  OpenAIAdapter,
  copilotRuntimeNextJSAppRouterEndpoint,
} from '@copilotkit/runtime';

import { NextRequest } from 'next/server';


const serviceAdapter = new OpenAIAdapter();
const runtime = new CopilotRuntime();

export const POST = async (req: NextRequest) => {
  const { handleRequest } = copilotRuntimeNextJSAppRouterEndpoint({
    runtime,
    serviceAdapter,
    endpoint: '/api/copilotkit',
  });

  return handleRequest(req);
};
```

----------------------------------------

TITLE: Configure CopilotRuntime for TypeScript/Node.js Actions
DESCRIPTION: This snippet demonstrates how to configure `CopilotRuntime` to include TypeScript/Node.js backend actions. It shows how the `actions` property, which is an array generator, can dynamically expose different actions based on frontend URL and custom properties. An example action `fetchNameForUserId` is provided, illustrating parameter definition and handler implementation.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/typescript-backend-actions.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
const runtime = new CopilotRuntime({
  // ... existing configuration
  actions: ({properties, url}) => {
    // Note that actions returns not an array, but an array **generator**.
    // You can use the input parameters to the actions generator to expose different backend actions to the Copilot at different times: 
    // `url` is the current URL on the frontend application.
    // `properties` contains custom properties you can pass from the frontend application.
    
    return [
      {
        name: "fetchNameForUserId",
        description: "Fetches user name from the database for a given ID.",
        parameters: [
          {
            name: "userId",
            type: "string",
            description: "The ID of the user to fetch data for.",
            required: true,
          },
        ],
        handler: async ({userId}: {userId: string}) => {
          // do something with the userId
          // return the user data
          return {
            name: "Darth Doe"
          };
        }
      }
    ]
  }
});

// ... rest of your route definition
```

----------------------------------------

TITLE: Render Agent Tool Calls with useCopilotAction Hook
DESCRIPTION: This snippet demonstrates how to use the `useCopilotAction` hook from `@copilotkit/react-core` within a React component to render custom UI for an agent's tool call. It's crucial that the `name` property of the action matches the tool's name. The `available: "disabled"` setting ensures the tool is only used for rendering feedback, not for direct invocation by the agent or UI.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/generative-ui/tool-based.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { useCopilotAction } from "@copilotkit/react-core";
// ...

const YourMainContent = () => {
  // ...
  useCopilotAction({
    name: "get_weather",
    available: "disabled", // Don't allow the agent or UI to call this tool as its only for rendering
    render: ({status, args}) => {
      return (
        <p className="text-gray-500 mt-2">
          {status !== "complete" && "Calling weather API..."}
          {status === "complete" && `Called the weather API for ${args.location}.`}
        </p>
      );
    }
  });
  // ...
}
```

----------------------------------------

TITLE: Creating a Frontend Action with useCopilotAction in TSX
DESCRIPTION: This snippet demonstrates how to define a frontend action using the `useCopilotAction` hook from `@copilotkit/react-core`. It defines a simple action named `sayHello` that takes a `name` parameter and displays an alert message. The `available: "remote"` option restricts the action's availability to the agent.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/ag2/frontend-actions.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCopilotAction } from "@copilotkit/react-core"

export function Page() {
  // ...

  useCopilotAction({
    name: "sayHello",
    description: "Say hello to the user",
    available: "remote", // optional, makes it so the action is *only* available to the agent
    parameters: [
      {
        name: "name",
        type: "string",
        description: "The name of the user to say hello to",
        required: true,
      }
    ],
    handler: async ({ name }) => {
      alert(`Hello, ${name}!`);
    }
  });

  // ...
}
```

----------------------------------------

TITLE: Setting threadId in CopilotKit for State Restoration
DESCRIPTION: Demonstrates how to set the `threadId` property on the `CopilotKit` component. This action restores the complete state of the thread, including messages, from the database. When using LangGraph, the `threadId` must be a UUID.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/persistence/loading-agent-state.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
<CopilotKit threadId="2140b272-7180-410d-9526-f66210918b13">
  <YourApp />
</CopilotKit>
```

----------------------------------------

TITLE: Simple Usage of useCopilotReadable Hook
DESCRIPTION: Demonstrates the basic usage of `useCopilotReadable` to make a simple piece of application state, such as a list of employees, available to the Copilot as context. The hook accepts a `description` and the `value` to be read.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotReadable.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCopilotReadable } from "@copilotkit/react-core";
 
export function MyComponent() {
  const [employees, setEmployees] = useState([]);
 
  useCopilotReadable({
    description: "The list of employees",
    value: employees,
  });
}
```

----------------------------------------

TITLE: Setup LangGraph Agent with CopilotKit
DESCRIPTION: Provides a complete example of setting up a LangGraph agent that inherits from `CopilotKitState` to incorporate CopilotKit actions. It illustrates how to bind CopilotKit actions as tools to an OpenAI model and define a chat node that checks for specific tool calls (e.g., 'writeEssay') to transition the agent's state or interrupt for user feedback.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/node-flow.mdx#_snippet_1

LANGUAGE: python
CODE:
```
from typing_extensions import Literal
from langchain_openai import ChatOpenAI
from langchain_core.messages import SystemMessage, AIMessage
from langchain_core.runnables import RunnableConfig
from langgraph.graph import StateGraph, END
from langgraph.checkpoint.memory import MemorySaver
from langgraph.types import Command
from copilotkit import CopilotKitState

# 1. Define our agent's state and inherit from CopilotKitState, this brings in the CopilotKit actions
class AgentState(CopilotKitState): # [!code highlight]
    # 1.1 Define any other state variables
    pass

# 2. Define the chat node, this will be where the agent will talk to user and
#    decide if it needs to call the writeEssay tool
async def chat_node(state: AgentState, config: RunnableConfig) -> Command[Literal["user_feedback_node", "__end__"]]:
    # 2.1 Define the model and bind CopilotKit's actions as tools
    model = ChatOpenAI(model="gpt-4o")
    model_with_tools = model.bind_tools([*state.get("copilotkit", {}).get("actions", [])]) # [!code highlight]

    # 2.2 Define the system message
    system_message = SystemMessage(
        content="You write essays. Use your tools to write an essay, don't just write it in plain text."
    )

    # 2.3 Run the model to generate a response
    response = await model_with_tools.ainvoke([
        system_message,
        *state["messages"],
    ], config)

    # [!code highlight:6]
    # 2.4 Check for the writeEssay tool call and, if found, go  to the
    #     user_feedback_node to handle the user's response
    if isinstance(response, AIMessage) and response.tool_calls:
        if response.tool_calls[0].get("name") == "writeEssay":
            return Command(goto="interrupt_node", update={"messages": response})

    # 2.5 If no tool call is found, end the agent
    return Command(goto=END, update={"messages": response})
```

----------------------------------------

TITLE: Install CopilotKit Python SDK
DESCRIPTION: Instructions to install the CopilotKit Python SDK using pip, with an option to include CrewAI for agent capabilities.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/RemoteEndpoints.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
pip install copilotkit
# or to include crewai
pip install copilotkit[crewai]
```

----------------------------------------

TITLE: Implement Custom Headless UI with CopilotKit's useCopilotChat Hook
DESCRIPTION: This TypeScript React component demonstrates how to build a fully custom chat interface using CopilotKit's `useCopilotChat` hook. It provides access to chat state and actions like `visibleMessages`, `appendMessage`, and `isLoading`, enabling developers to create highly customizable UI experiences without relying on built-in components.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_254

LANGUAGE: TypeScript
CODE:
```
import { useCopilotChat } from "@copilotkit/react-core";
import { Role, TextMessage } from "@copilotkit/runtime-client-gql";

export function CustomChatInterface() {
  const {
    visibleMessages,
    appendMessage,
    setMessages,
    deleteMessage,
    reloadMessages,
    stopGeneration,
    isLoading,
  } = useCopilotChat();

  const sendMessage = (content: string) => {
    appendMessage(new TextMessage({ content, role: Role.User }));
  };

  return (
    <div>
      {/* Implement your custom chat UI here */}
    </div>
  );
}
```

----------------------------------------

TITLE: Integrating LangChain JS Action with CopilotRuntime
DESCRIPTION: This example demonstrates how to integrate a LangChain JS chain as a backend action within your `CopilotRuntime` instance. It shows how to define an `actions` generator that can dynamically expose different backend actions based on frontend properties or URL, and how to return a LangChain stream directly from an action handler.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_259

LANGUAGE: TypeScript
CODE:
```
import { ChatOpenAI } from "@langchain/openai";
import { ChatPromptTemplate } from "@langchain/core/prompts";

const runtime = new CopilotRuntime({
  // ... existing configuration
  actions: ({properties, url}) => {
    // Note that actions returns not an array, but an array **generator**.
    // You can use the input parameters to the actions generator to expose different backend actions to the Copilot at different times:
    // `url` is the current URL on the frontend application.
    // `properties` contains custom properties you can pass from the frontend application.

    return [
      {
        name: "generateJokeForTopic",
        description: "Generates a joke for a given topic.",
        parameters: [
          {
            name: "topic",
            type: "string",
            description: "The topic to generate a joke about.",
            required: true,
          },
        ],
        handler: async ({topic}: {topic: string}) => {
          const prompt = ChatPromptTemplate.fromMessages([
            [
              "system",
              "You are a witty comedian. Generate a short, funny joke about the given topic. But make it sound like a pirate joke!",
            ],
            ["user", "Topic: {topic}"],
          ]);
          const chain = prompt.pipe(new ChatOpenAI());

          return chain.stream({ // return directly chain.stream
            topic: topic,
          });
        },
      },
    ]
  }
});

// ... rest of your route definition
```

----------------------------------------

TITLE: Simulate Agent State Updates in Python
DESCRIPTION: This code illustrates how to simulate state updates within an agent's `chat_node` function. It initializes a list of searches, emits the initial state, then iteratively updates each search item's 'done' status, emitting the state after each update. It also demonstrates how to integrate with an OpenAI model for response generation.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_97

LANGUAGE: Python
CODE:
```
import asyncio
from typing import TypedDict
from langchain_core.runnables import RunnableConfig
from langchain_openai import ChatOpenAI
from langchain_core.messages import SystemMessage
from copilotkit import CopilotKitState
from copilotkit.langgraph import copilotkit_emit_state

class Searches(TypedDict):
    query: str
    done: bool

class AgentState(CopilotKitState):
    searches: list[Searches] = []

async def chat_node(state: AgentState, config: RunnableConfig):
    state["searches"] = \
        [{"query": "Initial research", "done": False},\n        {"query": "Retrieving sources", "done": False},\n        {"query": "Forming an answer", "done": False},\n    ]
    await copilotkit_emit_state(config, state)

    # Simulate state updates
    for search in state["searches"]:
        await asyncio.sleep(1)
        search["done"] = True
        await copilotkit_emit_state(config, state)

    # Run the model to generate a response
    response = await ChatOpenAI(model="gpt-4o").ainvoke([\
        SystemMessage(content="You are a helpful assistant."),\
        *state["messages"],\
    ], config)
```

----------------------------------------

TITLE: Create a Frontend Action with useCopilotAction Hook
DESCRIPTION: Define a new frontend action using the `useCopilotAction` hook in a React component. This example creates a 'sayHello' action that takes a 'name' parameter and displays an alert.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/frontend-actions.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCopilotAction } from "@copilotkit/react-core"
            
export function Page() {
  // ...

  useCopilotAction({
    name: "sayHello",
    description: "Say hello to the user",
    available: "remote", // optional, makes it so the action is *only* available to the agent
    parameters: [
      {
        name: "name",
        type: "string",
        description: "The name of the user to say hello to",
        required: true,
      },
    ],
    handler: async ({ name }) => {
      alert(`Hello, ${name}!`);
    },
  });

  // ...
}
```

----------------------------------------

TITLE: Human-in-the-Loop Interaction with renderAndWaitForResponse
DESCRIPTION: The `renderAndWaitForResponse` method allows for returning values asynchronously from the render function, enabling Human-in-the-Loop flows where the AI assistant can prompt the end-user with a choice rendered inside the chat UI.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/generative-ui.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
"use client" // only necessary if you are using Next.js with the App Router. 
import { useCopilotAction } from "@copilotkit/react-core"; 

useCopilotAction({
  name: "handleMeeting",
  description: "Handle a meeting by booking or canceling",
  parameters: [
    {
      name: "meeting",
      type: "string",
      description: "The meeting to handle",
      required: true
    }
```

----------------------------------------

TITLE: Advanced Stage Transition with CopilotKit Action and Generative UI
DESCRIPTION: This advanced example demonstrates a stage transition driven by a `useCopilotAction` and a generative UI component. It shows how to render a `ContactInfo` component, wait for user input, commit data to global state, notify the agent, and then deterministically transition to the 'buildCar' stage upon submission.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_22

LANGUAGE: typescript
CODE:
```
// imports ...

export function useStageGetContactInfo() {
  const { setContactInfo, stage, setStage } = useGlobalState();

  // ...

  // Render the ContactInfo component and wait for the user's response.
  useCopilotAction(
    {
      name: "getContactInformation",
      description: "Get the contact information of the user",
      available: stage === "getContactInfo" ? "enabled" : "disabled",
      renderAndWaitForResponse: ({ status, respond }) => {
        return (
          <ContactInfo
            status={status}

            onSubmit={(name, email, phone) => {
              // Commit the contact information to the global state.
              setContactInfo({ name, email, phone });

              // Let the agent know that the user has submitted their contact information.
              respond?.("User has submitted their contact information.");

              // This move the state machine to the next stage, buildCar deterministically.
              setStage("buildCar");
            }}
          />
        );
      },
    },
    [stage],
  );
}
```

----------------------------------------

TITLE: Handle Multiple Interrupt Types in React UI with `useLangGraphInterrupt`
DESCRIPTION: This TypeScript React snippet demonstrates how to implement multiple `useLangGraphInterrupt` hooks to handle different types of agent interruptions. It uses the `enabled` property to conditionally activate each hook based on the `eventValue.type`, ensuring the correct UI component (e.g., `AskComponent`, `ApproveComponent`) is rendered for the specific interrupt.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_269

LANGUAGE: TypeScript
CODE:
```
import { useLangGraphInterrupt } from "@copilotkit/react-core";
// ...

const ApproveComponent = ({ content, onAnswer }: { content: string; onAnswer: (approved: boolean) => void }) => (
    // styles omitted for brevity
    <div>
        <h1>Do you approve?</h1>
        <button onClick={() => onAnswer(true)}>Approve</button>
        <button onClick={() => onAnswer(false)}>Reject</button>
    </div>
)

const AskComponent = ({ question, onAnswer }: { question: string; onAnswer: (answer: string) => void }) => (
// styles omitted for brevity
    <div>
        <p>{question}</p>
        <form onSubmit={(e) => {
            e.preventDefault();
            onAnswer((e.target as HTMLFormElement).response.value);
        }}>
            <input type="text" name="response" placeholder="Enter your response" />
            <button type="submit">Submit</button>
        </form>
    </div>
)

const YourMainContent = () => {
    // ...

    useLangGraphInterrupt({
        enabled: ({ eventValue }) => eventValue.type === 'ask',
        render: ({ event, resolve }) => (
            <AskComponent question={event.value.content} onAnswer={answer => resolve(answer)} />
        )
    });

    useLangGraphInterrupt({
        enabled: ({ eventValue }) => eventValue.type === 'approval',
        render: ({ event, resolve }) => (
            <ApproveComponent content={event.value.content} onAnswer={answer => resolve(answer)} />
        )
    });

    // ...
}
```

----------------------------------------

TITLE: Integrate CopilotKit useCoAgent Hook in React Context
DESCRIPTION: This TypeScript/React code demonstrates integrating the `useCoAgent` hook from `@copilotkit/react-core` into a `ResearchContext` provider. It replaces a local `useState` with `useCoAgent` to establish a bidirectional connection between the React application's state and the LangGraph agent's state, enabling real-time synchronization of research data and agent control.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-6-shared-state.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
// ...
import { useCoAgent } from "@copilotkit/react-core"; // [!code ++]
// ...

interface ResearchContextType {
    state: ResearchState;
    setResearchState: (newState: ResearchState | ((prevState: ResearchState) => ResearchState)) => void
    sourcesModalOpen: boolean
    setSourcesModalOpen: (open: boolean) => void
    runAgent: () => void
}

const ResearchContext = createContext<ResearchContextType | undefined>(undefined)

export function ResearchProvider({ children }: { children: ReactNode }) {
    const [sourcesModalOpen, setSourcesModalOpen] = useState<boolean>(false)
    // [!code ++:5]
    const { state, setState, run } = useCoAgent<ResearchState>({
        name: 'agent',
        initialState: {},
    });
    const [state, setState] = useState<ResearchState>({} as ResearchState) // [!code --]

    // ...

    return (
        <ResearchContext.Provider 
            value={{
              state, 
              setResearchState: setState as ResearchContextType['setResearchState'], 
              setSourcesModalOpen, 
              sourcesModalOpen, 
              runAgent: run  // [!code ++]
              runAgent: () => {} // [!code --]
            }}>
            {children}
        </ResearchContext.Provider>
    )
}

export function useResearch() {
    const context = useContext(ResearchContext)
    if (context === undefined) {
        throw new Error('useResearch must be used within a ResearchProvider')
    }
    return context
}
```

----------------------------------------

TITLE: Dynamically Restrict Agents Based on Context in CopilotKit
DESCRIPTION: This snippet illustrates how to conditionally return different sets of agents based on the `context` provided to the `CopilotKitRemoteEndpoint`. This allows for fine-grained control over which agents are available, for example, restricting certain agents to admin users.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_128

LANGUAGE: Python
CODE:
```
from copilotkit import CopilotKitRemoteEndpoint
from my_agents import agent_a, agent_b, is_admin

sdk = CopilotKitRemoteEndpoint(
    agents=lambda context: (
        [agent_a, agent_b] if is_admin(context["properties"]["token"]) else [agent_a]
    )
)
```

----------------------------------------

TITLE: Expose Data to AI with useCopilotReadable Hook
DESCRIPTION: The `useCopilotReadable` hook allows the application to provide specific data, such as form fields or user information, to the AI. This enables the AI to understand the current state and context of the application.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-form-filling/README.md#_snippet_5

LANGUAGE: tsx
CODE:
```
useCopilotReadable({
  description: "The security incident form fields and their current values",
  value: formState
});
```

LANGUAGE: tsx
CODE:
```
useCopilotReadable({
  description: "The current user information",
  value: retrieveUserInfo(),
})
```

----------------------------------------

TITLE: Define a State Machine Stage with CopilotKit Hooks
DESCRIPTION: This code snippet illustrates how to implement a single stage within a state machine pattern using CopilotKit's React hooks. It demonstrates the use of `useCopilotAdditionalInstructions` for stage-specific prompts, `useCopilotReadable` for providing context, and `useCopilotAction` for defining actions that can transition the state. The `available` prop is crucial for conditionally enabling these elements based on the current `stage` variable, ensuring the assistant's behavior is aligned with the conversation's current phase.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_18

LANGUAGE: TypeScript
CODE:
```
import {
  useCopilotAdditionalInstructions,
  useCopilotAction,
  useCopilotReadable
} from "@copilotkit/react-core";

// ...

/*
 * Not required, but it is convenient to use a dedicated hook to define each
 * stage of the state machine
 */
function useStageOne(
  stage: string,
  setStage: (stage: string) => void,
  setName: (name: string) => void
) {

  /*
   * Each stage can define its own instructions, context, and transitions
   * (implemented via copilotActions). We transition between stages by simply
   * setting the `stage` variable from the handler of the transition:
   */

  // Add additional instructions to the system prompt if this stage is active
  useCopilotAdditionalInstructions({
    instructions: "Ask for the user's name politely.",
    // Use "available" argument to enable this only when the stage is correct!
    available: stage === "one" ? "available" : "disabled"
  })

  // Add context to the system prompt if this stage is active
  useCopilotReadable({
    description: "Other names",
    value: ["John", "Jane", "Jim"],
    available: stage === "one" ? "available" : "disabled"
  })

  // Add an action to the assistant that transitions to the next stage if this stage is active
  useCopilotAction({
    name: "transitionToNextStage",
    description: "Moves to the next stage, only call is the user's name is not in the list of other names",
    available: stage === "one" ? "available" : "disabled",
    parameters: [
      { name: "name", type: "string", description: "The name of the user", required: true }
    ],
    handler: ({ name }) => {
      // Perform any state updates given the user's input
      setName(name);

      // Transition to the next stage
      setStage("two");
    }
  });
}
```

----------------------------------------

TITLE: Saving and Restoring Message History with localStorage in TypeScript
DESCRIPTION: This example demonstrates how to save and restore chat message history using `localStorage` in a React application with `@copilotkit/react-core`. It uses `useEffect` hooks to persist messages when they change and to load them on initial component mount, handling different message types like `TextMessage`, `ActionExecutionMessage`, and `ResultMessage`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/messages-localstorage.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import { useCopilotMessagesContext } from "@copilotkit/react-core";
import { ActionExecutionMessage, ResultMessage, TextMessage } from "@copilotkit/runtime-client-gql";

const { messages, setMessages } = useCopilotMessagesContext();

// save to local storage when messages change
useEffect(() => {
  if (messages.length !== 0) {
    localStorage.setItem("copilotkit-messages", JSON.stringify(messages));
  }
}, [JSON.stringify(messages)]);

// initially load from local storage
useEffect(() => {
  const messages = localStorage.getItem("copilotkit-messages");
  if (messages) {
    const parsedMessages = JSON.parse(messages).map((message: any) => {
      if (message.type === "TextMessage") {
        return new TextMessage({
          id: message.id,
          role: message.role,
          content: message.content,
          createdAt: message.createdAt,
        });
      } else if (message.type === "ActionExecutionMessage") {
        return new ActionExecutionMessage({
          id: message.id,
          name: message.name,
          scope: message.scope,
          arguments: message.arguments,
          createdAt: message.createdAt,
        });
      } else if (message.type === "ResultMessage") {
        return new ResultMessage({
          id: message.id,
          actionExecutionId: message.actionExecutionId,
          actionName: message.actionName,
          result: message.result,
          createdAt: message.createdAt,
        });
      } else {
        throw new Error(`Unknown message type: ${message.type}`);
      }
    });
    setMessages(parsedMessages);
  }
}, []);
```

----------------------------------------

TITLE: Implement CopilotPopup UI Component
DESCRIPTION: The `CopilotPopup` component provides a floating chat interface that can be toggled. This example demonstrates how to integrate `CopilotPopup` into your React application, including setting custom instructions and labels for the assistant.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_185

LANGUAGE: typescript
CODE:
```
import { CopilotPopup } from "@copilotkit/react-ui";

export function YourApp() {
  return (
    <>
      <YourMainContent />
      <CopilotPopup
        instructions={"You are assisting the user as best as you can. Answer in the best way possible given the data you have."}
        labels={{
          title: "Popup Assistant",
          initial: "Need any help?",
        }}
      />
    </>
  );
}
```

----------------------------------------

TITLE: Render arbitrary tool calls with a catch-all useCopilotAction
DESCRIPTION: Illustrates how to implement a catch-all mechanism using `useCopilotAction` with `name: "*"` to render any tool call that does not have a specific UI component defined. This generic fallback displays the tool's name, arguments (as JSON), and completion status, ensuring all agent actions are visible to the user.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_231

LANGUAGE: TypeScript
CODE:
```
import {
  useCopilotAction,
  CatchAllActionRenderProps
} from "@copilotkit/react-core";

useCopilotAction({
  name: "*",
  followUp: false,
  render: ({ name, args, status, result }: CatchAllActionRenderProps<[]>) => {
    return (
      <div className="m-4 p-4 bg-gray-100 rounded shadow">
        <h2 className="text-sm font-medium">Tool: {name}</h2>
        <pre className="mt-2 text-xs overflow-auto">
          {JSON.stringify(args, null, 2)}
        </pre>
        {status === "complete" && (
          <div className="mt-2 text-xs text-green-600">✓ Complete</div>
        )}
      </div>
    );
  }
});
```

----------------------------------------

TITLE: Render Specific Tool Calls with useCopilotAction in React
DESCRIPTION: This snippet demonstrates how to use the `useCopilotAction` hook from `@copilotkit/react-core` to render a specific tool call (e.g., `research_crew`) in the UI. It shows how to define parameters and a `render` function to display custom UI based on the tool's arguments and status. The name of the action must match the name of the tool.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/generative-ui/tool-based.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCopilotAction } from "@copilotkit/react-core";
// ...

const YourMainContent = () => {
  // ...
  useCopilotAction({
    name: "research_crew",
    parameters: [
      {
        name: "topic",
      },
      {
        name: "current_year",
      },
    ],
    render({ args, status }) {
      return (
        <div className="m-4 p-4 bg-gray-100 rounded shadow">
          <h1 className="text-center text-sm">
            Researching {args.topic} in {args.current_year}{" "}
            {status == "complete" ? "✅" : "⏳"}
          </h1>
        </div>
      );
    },
  });
  // ...
};
```

----------------------------------------

TITLE: Configure CopilotKit in React RootLayout
DESCRIPTION: This snippet demonstrates how to set up CopilotKit in your React application's root layout (e.g., layout.tsx). It involves importing the CopilotKit component, wrapping your application's children with it, and providing your public API key obtained from Copilot Cloud, along with the desired agent name. This global configuration ensures that CopilotKit functionalities are available throughout your application.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/coagents/cloud-configure-copilotkit-provider.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import "./globals.css";
import { ReactNode } from "react";
import { CopilotKit } from "@copilotkit/react-core";

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body> 
        {/* Use the public api key you got from Copilot Cloud  */}
        <CopilotKit 
          publicApiKey="<your-copilot-cloud-public-api-key>"
          agent="sample_agent" 
        > 
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Adding Human-in-the-Loop UI with useCopilotAction in React
DESCRIPTION: This snippet demonstrates how to use the `useCopilotAction` hook from `@copilotkit/react-core` to create a UI component that requests feedback from the user on a CrewAI agent's output. It displays the agent's arguments and provides interactive buttons ('Cancel', 'Approve Kickoff') to allow the user to respond, enabling Human-in-the-Loop (HITL) control over the agent's execution flow. This component requires a running CrewAI agent connected to CopilotKit Cloud to function end-to-end.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/human-in-the-loop/flow.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCopilotAction } from "@copilotkit/react-core";
import { Markdown } from "@copilotkit/react-ui";

function YourMainContent() {
  useCopilotAction({
    name: "crew_requesting_feedback",
    description: "Request feedback from the user on the crew's output",
    renderAndWaitForResponse: ({ args, respond, status }) => (
      <div>
        <pre>{args}</pre>
        <div className={`flex gap-4 pt-4 ${status !== "executing" ? "hidden" : ""}`}>
          <button
            onClick={() => respond?.("Reject")}
            disabled={status !== "executing"}
            className="border p-2 rounded-xl w-full"
          >
            Cancel
          </button>
          <button
            onClick={() => respond?.("Approve")}
            disabled={status !== "executing"}
            className="bg-blue-500 text-white p-2 rounded-xl w-full"
          >
            Approve Kickoff
          </button>
        </div>
      </div>
    )
  });
}
```

----------------------------------------

TITLE: Stream Messages and Tool Calls with Copilotkit in Python
DESCRIPTION: To enable streaming of messages and tool calls from a CrewAI agent to the frontend, wrap the LiteLLM `completion` function with `copilotkit_stream`. This ensures that responses are streamed rather than returned as a single block, which is not the default behavior of `completion`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/concepts/copilotkit-stream.mdx#_snippet_0

LANGUAGE: python
CODE:
```
response = copilotkit_stream(
    completion(
        model="openai/gpt-4o",
        messages=[
            {"role": "system", "content": my_prompt},
            *self.state["messages"]
        ],
        stream=True
    )
)
```

----------------------------------------

TITLE: Define CopilotKit Backend Actions and Initialize Remote Endpoint
DESCRIPTION: Demonstrates how to define a custom backend action (`fetchNameForUserId`) using `CopilotAction`, initialize the `CopilotKitRemoteEndpoint` with defined actions, and integrate it into a FastAPI application using `add_fastapi_endpoint`. Includes a `main` function to run the Uvicorn server.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/remote-backend-endpoint.mdx#_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from copilotkit.integrations.fastapi import add_fastapi_endpoint
from copilotkit import CopilotKitRemoteEndpoint, Action as CopilotAction

app = FastAPI()

# Define your backend action
async def fetch_name_for_user_id(userId: str):
    # Replace with your database logic
    return {"name": "User_" + userId}

# this is a dummy action for demonstration purposes
action = CopilotAction(
    name="fetchNameForUserId",
    description="Fetches user name from the database for a given ID.",
    parameters=[
        {
            "name": "userId",
            "type": "string",
            "description": "The ID of the user to fetch data for.",
            "required": True,
        }
    ],
    handler=fetch_name_for_user_id
)

# Initialize the CopilotKit SDK # [!code highlight:2]
sdk = CopilotKitRemoteEndpoint(actions=[action])

# Add the CopilotKit endpoint to your FastAPI app # [!code highlight:2]
add_fastapi_endpoint(app, sdk, "/copilotkit_remote")

def main():
    """Run the uvicorn server."""
    import uvicorn
    uvicorn.run("server:app", host="0.0.0.0", port=8000, reload=True)

if __name__ == "__main__":
    main()
```

----------------------------------------

TITLE: Implementing a Custom Headless Chat UI with useCopilotChat
DESCRIPTION: This example demonstrates how to create a fully custom chat interface using CopilotKit's `useCopilotChat` hook. It provides access to essential message management functions such as `visibleMessages`, `appendMessage`, `setMessages`, `deleteMessage`, `reloadMessages`, `stopGeneration`, and `isLoading` to enable the development of a bespoke chat experience.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/headless-ui.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { useCopilotChat } from "@copilotkit/react-core";
import { Role, TextMessage } from "@copilotkit/runtime-client-gql";

export function CustomChatInterface() {
  const {
    visibleMessages,
    appendMessage,
    setMessages,
    deleteMessage,
    reloadMessages,
    stopGeneration,
    isLoading,
  } = useCopilotChat();

  const sendMessage = (content: string) => {
    appendMessage(new TextMessage({ content, role: Role.User }));
  };

  return (
    <div>
      {/* Implement your custom chat UI here */}
    </div>
  );
}
```

----------------------------------------

TITLE: Configure CopilotKit for Specific Tool Call Emission (Python)
DESCRIPTION: This Python snippet demonstrates how to use `copilotkit_customize_config` to explicitly define which tool calls (e.g., `add_trips`, `update_trips`, `delete_trips`) should be emitted and handled by CopilotKit. This prevents the emission of all tool calls, ensuring only specified ones are managed, which is crucial for maintaining agent state integrity.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#_snippet_3

LANGUAGE: python
CODE:
```
from copilotkit.langchain import copilotkit_customize_config
async def chat_node(state: AgentState, config: RunnableConfig):
    """Handle chat operations"""
    config = copilotkit_customize_config(
        config,
        emit_tool_calls=["add_trips", "update_trips", "delete_trips"],
    )
```

----------------------------------------

TITLE: Integrate Copilot Textarea with AI Autosuggestions
DESCRIPTION: These examples demonstrate how to integrate the `CopilotTextarea` component into a React application, manage its state, and configure its AI-powered autosuggestion capabilities. The first example shows basic setup with a defined `textareaPurpose`, while the second includes advanced API configuration options like `maxTokens` and `stop` sequences for the suggestions API.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/copilot-textarea.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { FC, useState } from "react";
import { CopilotTextarea } from '@copilotkit/react-textarea';

const ExampleComponent: FC = () => {
  const [text, setText] = useState<string>('');

  return (
    <CopilotTextarea
      className="w-full p-4 border border-gray-300 rounded-md"
      value={text}
      onValueChange={setText}
      autosuggestionsConfig={{
        textareaPurpose: "the body of an email message",
        chatApiConfigs: {},
      }}
    />
  );
};
```

LANGUAGE: tsx
CODE:
```
import { FC, useState } from "react";
import { CopilotTextarea } from "@copilotkit/react-textarea";

const TextAreaComponent: FC = () => {
  const [text, setText] = useState<string>("");

  return (
    <CopilotTextarea
      // standard textarea args
      className="w-full p-4 border border-gray-300 rounded-md"
      value={text}
      onValueChange={setText}
      placeholder="Start typing..."

      // ai-specific configs
      autosuggestionsConfig={{
        textareaPurpose: "Write your message here",
        chatApiConfigs: {
          suggestionsApiConfig: {
            maxTokens: 50,
            stop: ["\n", ".", "?"]
          }
        }
      }}
    />
  );
};
```

----------------------------------------

TITLE: Defining LangGraph Agent State and Workflow
DESCRIPTION: This snippet demonstrates how to define the state schema for a LangGraph agent using `Annotation.Root` and integrate it with CopilotKit's state annotations. It also shows how to implement an asynchronous agent node (`answerNode`) that processes messages and updates the state, and how to construct and compile the agent's workflow using `StateGraph`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/state-inputs-outputs.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
export const AgentStateAnnotation = Annotation.Root({
  ...CopilotKitStateAnnotation.spec,
  ...OutputAnnotation.spec,
  ...InputAnnotation.spec,
  resources: Annotation<string[]>,
});

// Define a typed state that supports the entire
export type AgentState = typeof AgentStateAnnotation.State;

async function answerNode(state: AgentState, config: RunnableConfig) {
  const model = new ChatOpenAI()

  const systemMessage = new SystemMessage({
    content: `You are a helpful assistant. Answer the question: ${state.question}.`,
  });

  const response = await modelWithTools.invoke(
    [systemMessage, ...state.messages],
    config
  );

  // ...add the rest of the agent implementation
  // extract the answer, which will be assigned to the state soon
  const answer = response.content

  return {
    messages: response,
    // include the answer in the returned state
    answer,
  }
}

// finally, before compiling the graph, we define the 3 state components
const workflow = new StateGraph({
  input: InputAnnotation,
  output: OutputAnnotation,
  // @ts-expect-error -- LangGraph does not expect a "full schema with internal properties".
  stateSchema: AgentStateAnnotation,
})
  .addNode("answer_node", answerNode) // add all the different nodes and edges and compile the graph
  .addEdge(START, "answer_node")
  .addEdge("answer_node", END)
export const graph = workflow.compile()
```

----------------------------------------

TITLE: Configure Frontend Authentication State with CopilotKit
DESCRIPTION: This snippet demonstrates how to configure authentication state in a React application using `CopilotKit`'s `authConfig_c` property. It shows defining an `AuthState` interface, implementing a `SignInComponent` to handle authentication logic, and passing the resulting `authState` to `CopilotKit`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/authenticated-actions.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { CopilotKit } from "@copilotkit/react-core";

interface AuthState {
  status: "authenticated" | "unauthenticated";
  authHeaders: Record<string, string>;
  userId?: string;
  metadata?: Record<string, any>;
}

// Your SignInComponent component
function SignInComponent({
  onSignInComplete,
}: {
  onSignInComplete: (authState: AuthState) => void;
}) {
  const handleAuth = async () => {
    // Your auth logic (e.g., OAuth, custom auth)
    const authState = {
      status: "authenticated",
      authHeaders: {
        Authorization: "Bearer your_token",
        // Add any other headers needed by your backend
      },
      userId: "user_123",
      metadata: {
        email: "user@example.com",
        // Any other user context needed by tools
      },
    };

    onSignInComplete(authState);
  };

  return <button onClick={handleAuth}>Authenticate</button>;
}

// Root configuration
export default function App() {
  return (
    <CopilotKit
      publicApiKey={process.env.COPILOTKIT_PUBLIC_API_KEY}
      authConfig_c={{
        SignInComponent,
      }}
    >
      {/* Your app */}
    </CopilotKit>
  );
}
```

----------------------------------------

TITLE: Registering Functions with Human-in-the-Loop Approval (Python)
DESCRIPTION: This code defines the main workflow function 'hitl_workflow', sets up the 'travel_agent' and 'customer' agents, and crucially registers the 'lookup_member' and 'create_itinerary' functions, specifying that the 'travel_agent' calls them but the 'customer' (representing the human user) must approve their execution. It also includes basic FastAPI setup to expose the workflow.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/ag2/human-in-the-loop/hitl.mdx#_snippet_5

LANGUAGE: python
CODE:
```
@wf.register(name="hitl_workflow", description="A travel itinerary generator with human approval")
def hitl_workflow(ui: UI, params: dict[str, Any]) -> str:
    initial_message = ui.text_input(
        sender="Workflow",
        recipient="User",
        prompt=INITIAL_MESSAGE,
    )
    
    # Create the travel agent
    with llm_config:
        travel_agent = ConversableAgent(
                name="travel_agent",
                system_message=SYSTEM_MESSAGE
            )
        
    # Create the customer agent (human input)
    customer = ConversableAgent(
        name="customer",
        human_input_mode="ALWAYS",  # Always ask for human input
    )

    # Register the functions for the travel agent
    register_function(
        lookup_member,
        caller=travel_agent,  # The agent that can call this function
        executor=customer,    # The agent that must approve the call
        description="Look up member details from the database"
    )

    register_function(
        create_itinerary,
        caller=travel_agent,  # The agent that can call this function
        executor=customer,    # The agent that must approve the call
        description="Create a personalized travel itinerary based on member details"
    )

    # Start the conversation
    response = customer.run(
        travel_agent,
        message=initial_message,
        summary_method="reflection_with_llm"
    )

    return ui.process(response)

# Set up FastAPI with the AWP adapter
def without_customer_messages(message: Any) -> bool:
    return not (message.type == "text" and message.content.sender == "customer")


adapter = AWPAdapter(
    provider=wf, wf_name="hitl_workflow", filter=without_customer_messages
)
app = FastAPI()
app.include_router(adapter.router)
```

----------------------------------------

TITLE: Serve CopilotKit SDK with FastAPI
DESCRIPTION: Demonstrates how to integrate and serve the CopilotKit SDK using FastAPI. It shows how to add the CopilotKit endpoint to a FastAPI application and run it with Uvicorn.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/RemoteEndpoints.mdx#_snippet_7

LANGUAGE: python
CODE:
```
from copilotkit.integrations.fastapi import add_fastapi_endpoint
from fastapi import FastAPI

app = FastAPI()
sdk = CopilotKitRemoteEndpoint(...)
add_fastapi_endpoint(app, sdk, "/copilotkit")

def main():
    uvicorn.run(
        "your_package:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
    )
```

----------------------------------------

TITLE: Simulate Agent State Updates in Python with CopilotKit
DESCRIPTION: This Python code snippet demonstrates how to simulate real-time state updates within a CopilotKit agent. It defines custom `TypedDict` classes for agent state, initializes a list of 'searches', and then iteratively updates their 'done' status, emitting each change using `copilotkit_emit_state` to reflect progress. The snippet also includes an example of invoking an OpenAI model.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_226

LANGUAGE: Python
CODE:
```
import asyncio
from typing import TypedDict
from langchain_core.runnables import RunnableConfig
from langchain_openai import ChatOpenAI
from langchain_core.messages import SystemMessage
from copilotkit import CopilotKitState
from copilotkit.langgraph import copilotkit_emit_state

class Searches(TypedDict):
    query: str
    done: bool

class AgentState(CopilotKitState):
    searches: list[Searches] = []

async def chat_node(state: AgentState, config: RunnableConfig):
    state["searches"] = [\
        {"query": "Initial research", "done": False},\n        {"query": "Retrieving sources", "done": False},\n        {"query": "Forming an answer", "done": False},\n    ]
    await copilotkit_emit_state(config, state)

    # Simulate state updates
    for search in state["searches"]:
        await asyncio.sleep(1)
        search["done"] = True
        await copilotkit_emit_state(config, state)

    # Run the model to generate a response
    response = await ChatOpenAI(model="gpt-4o").ainvoke([\
        SystemMessage(content="You are a helpful assistant."),\
        *state["messages"],\
    ], config)
```

----------------------------------------

TITLE: Configure LangGraph Message Persistence with CopilotKit and FastAPI
DESCRIPTION: This Python example shows how to set up asynchronous message persistence for LangGraph agents using `AsyncPostgresSaver` within a FastAPI application's lifespan function. It demonstrates initializing the checkpointer, compiling the LangGraph workflow, and integrating it with `CopilotKitRemoteEndpoint`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_278

LANGUAGE: Python
CODE:
```
from contextlib import asynccontextmanager
from langgraph.checkpoint.postgres.aio import AsyncPostgresSaver

@asynccontextmanager
async def lifespan(app: FastAPI):
    async with AsyncPostgresSaver.from_conn_string(
        "postgresql://postgres:postgres@127.0.0.1:5432/postgres"
    ) as checkpointer:
        # NOTE: you need to call .setup() the first time you're using your checkpointer
        await checkpointer.setup()
        # Create an async graph
        graph = workflow.compile(checkpointer=checkpointer)

        # Create SDK with the graph
        sdk = CopilotKitRemoteEndpoint(
            agents=[
                LangGraphAgent(
                    name="research_agent",
                    description="Research agent.",
                    graph=graph,
                ),
            ],
        )

        # Add the CopilotKit FastAPI endpoint
        add_fastapi_endpoint(app, sdk, "/copilotkit")
        yield

app = FastAPI(lifespan=lifespan)
```

----------------------------------------

TITLE: Integrating Weather Tool with a Mastra Agent in TypeScript
DESCRIPTION: This TypeScript snippet defines a `Weather Agent` using `@mastra/core/agent` and `@ai-sdk/openai`. It configures the agent with specific instructions to use the `weatherInfo` tool (defined previously) when asked about weather, enabling the agent to interact with the tool for data retrieval.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/mastra/generative-ui/tool-based.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { Agent } from "@mastra/core/agent";
import { openai } from "@ai-sdk/openai";
import { weatherInfo } from "../tools/weatherInfo";
 
export const weatherAgent = new Agent({
  name: "Weather Agent",
  instructions:
    "You are a helpful assistant that provides current weather information. When asked about the weather, use the weather information tool to fetch the data.",
  model: openai("gpt-4o-mini"),
  tools: {
    weatherInfo,
  },
});
```

----------------------------------------

TITLE: Add useCopilotAction to Frontend Component
DESCRIPTION: Demonstrates how to integrate `useCopilotAction` into a React component to define an AI action, such as 'writeEssay'. It shows how to use the `renderAndWaitForResponse` callback to display a draft and allow user interaction (approve/cancel) before the action completes.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/node-flow.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCopilotAction } from "@copilotkit/react-core"
import { Markdown } from "@copilotkit/react-ui"

function YourMainContent() {
  // ...

  useCopilotAction({ 
    name: "writeEssay",
    available: "remote",
    description: "Writes an essay and takes the draft as an argument.",
    parameters: [
      { name: "draft", type: "string", description: "The draft of the essay", required: true },
    ],
    // [!code highlight:25]
    renderAndWaitForResponse: ({ args, respond, status }) => {
      return (
        <div>
          <Markdown content={args.draft || 'Preparing your draft...'} />
          
          <div className={`flex gap-4 pt-4 ${status !== "executing" ? "hidden" : ""}`}>
            <button 
              onClick={() => respond?.("CANCEL")}
              disabled={status !== "executing"}
              className="border p-2 rounded-xl w-full"
            >
              Try Again
            </button>
            <button
              onClick={() => respond?.("SEND")}
              disabled={status !== "executing"} 
              className="bg-blue-500 text-white p-2 rounded-xl w-full"
            >
              Approve Draft
            </button>
          </div>
        </div>
      );
    },
  });

  // ...
}
```

----------------------------------------

TITLE: Adding Frontend Data to Copilot with useCopilotReadable Hook
DESCRIPTION: Demonstrates how to provide context-specific data to CopilotKit using the `useCopilotReadable` hook in a React component. It shows defining a state variable (e.g., `colleagues`) and making its value available to the Copilot with a descriptive label.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/connect-your-data/frontend.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
"use client" // only necessary if you are using Next.js with the App Router.
import { useCopilotReadable } from "@copilotkit/react-core";
import { useState } from 'react';

export function YourComponent() {
  // Create colleagues state with some sample data
  const [colleagues, setColleagues] = useState([
    { id: 1, name: "John Doe", role: "Developer" },
    { id: 2, name: "Jane Smith", role: "Designer" },
    { id: 3, name: "Bob Wilson", role: "Product Manager" }
  ]);

  // Define Copilot readable state
  useCopilotReadable({
    description: "The current user's colleagues",
    value: colleagues,
  });
  return (
    // Your custom UI component
    <>...</>
  );
}
```

----------------------------------------

TITLE: Synchronizing React State with LangGraph Agent using `useCoAgent`
DESCRIPTION: This TypeScript/React snippet demonstrates how to use the `useCoAgent` hook to connect a React component's state with a LangGraph agent's state. It highlights the use of a generic type (`AgentState`) for type safety, and explains the `name` and `initialState` parameters for configuring the agent connection.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-4-integrate-the-agent.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
// ...
import { Trip, Place, AgentState, defaultTrips} from "@/lib/trips"; 
import { useCoAgent } from "@copilotkit/react-core"; 

export const TripsProvider = ({ children }: { children: ReactNode }) => {
  const [state, setState] = useState<{ trips: Trip[], selected_trip_id: string | null }>({ 
    trips: defaultTrips, 
    selected_trip_id: defaultTrips && defaultTrips[0] ? defaultTrips[0].id : null 
  });
  const { state, setState } = useCoAgent<AgentState>({
    name: "travel",
    initialState: {
      trips: defaultTrips,
      selected_trip_id: defaultTrips[0].id,
    },
  });

  // ...
```

----------------------------------------

TITLE: Handling Contact Information Submission and Stage Transition in CopilotKit
DESCRIPTION: Illustrates a `useCopilotAction` hook within a custom React hook (`useStageGetContactInfo`) to capture user contact information. Upon submission, it updates global state and deterministically transitions the application to the 'buildCar' stage, showcasing a code-driven transition after an AI-assisted interaction.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
// imports ...

export function useStageGetContactInfo() {
  const { setContactInfo, stage, setStage } = useGlobalState();

  // ...

  // Render the ContactInfo component and wait for the user's response.
  useCopilotAction(
    {
      name: "getContactInformation",
      description: "Get the contact information of the user",
      available: stage === "getContactInfo" ? "enabled" : "disabled",
      renderAndWaitForResponse: ({ status, respond }) => {
        return (
          <ContactInfo
            status={status}
            onSubmit={(name, email, phone) => {
              // Commit the contact information to the global state.
              setContactInfo({ name, email, phone });

              // Let the agent know that the user has submitted their contact information.
              respond?.("User has submitted their contact information.");

              // This move the state machine to the next stage, buildCar deterministically.
              setStage("buildCar");
            }}
          />
        );
      },
    },
    [stage],
  );
}
```

----------------------------------------

TITLE: Configure CopilotKit Runtime with Express.js (Partial)
DESCRIPTION: This partial code snippet demonstrates how to integrate CopilotKit Runtime into an Express.js application. It shows the configuration of a LangGraph Platform endpoint with agents, the setup of the copilotRuntimeNodeHttpEndpoint handler, and the Express app.listen call, implying an endpoint at '/copilotkit'.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-langgraph-endpoint.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
langGraphPlatformEndpoint({
  deploymentUrl: "your-api-url", // make sure to replace with your real deployment url
  langsmithApiKey: process.env.LANGSMITH_API_KEY, // only used in LangGraph Platform deployments
  agents: [ // List any agents available under "graphs" list in your langgraph.json file; give each a description explaining when it should be called.
    {
      name: 'my_agent',
      description: 'A helpful LLM agent.',
      assistantId: 'your-assistant-ID' // optional, but recommended!
    }
  ]
}),
],
});

const handler = copilotRuntimeNodeHttpEndpoint({
  endpoint: '/copilotkit',
  runtime,
  serviceAdapter,
});

return handler(req, res, next);
});

app.listen(4000, () => {
  console.log('Listening at http://localhost:4000/copilotkit');
});
```

----------------------------------------

TITLE: Adding useCopilotAction for HITL UI (TSX)
DESCRIPTION: This snippet demonstrates how to use the `useCopilotAction` hook in a React component to define an action that requires human intervention. The `renderAndWaitForResponse` function is used to display a UI (an essay draft) and wait for the user to click a button (Approve Draft or Try Again) before the agent continues. It requires `@copilotkit/react-core` and `@copilotkit/react-ui` dependencies.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/mastra/human-in-the-loop/tool-based.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCopilotAction } from "@copilotkit/react-core"
import { Markdown } from "@copilotkit/react-ui"

function YourMainContent() {
  // ...

  useCopilotAction({
    name: "writeEssay",
    available: "remote",
    description: "Writes an essay and takes the draft as an argument.",
    parameters: [
      { name: "draft", type: "string", description: "The draft of the essay", required: true },
    ],
    // [!code highlight:25]
    renderAndWaitForResponse: ({ args, respond, status }) => {
      return (
        <div>
          <Markdown content={args.draft || 'Preparing your draft...'} />

          <div className={`flex gap-4 pt-4 ${status !== "executing" ? "hidden" : ""}`}>
            <button
              onClick={() => respond?.("CANCEL")}
              disabled={status !== "executing"}
              className="border p-2 rounded-xl w-full"
            >
              Try Again
            </button>
            <button
              onClick={() => respond?.("SEND")}
              disabled={status !== "executing"}
              className="bg-blue-500 text-white p-2 rounded-xl w-full"
            >
              Approve Draft
            </button>
          </div>
        </div>
      );
    },
  });

  // ...
}
```

----------------------------------------

TITLE: Integrate CopilotKit Stages into a Chat Component
DESCRIPTION: This example shows how to integrate multiple CopilotKit stages into a single React chat component. It uses `useState` to manage the current stage and user's name, `useCopilotReadable` to make context available, and initializes custom stage hooks within the `CopilotKit` and `CopilotChat` components.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_20

LANGUAGE: typescript
CODE:
```
import { useState } from "react";
import { CopilotKit, useCopilotReadable } from "@copilotkit/react-core";
import { CopilotChat } from "@copilotkit/react-ui";

// ...

function StateMachineChat() {
  // Track the current stage and user's name
  const [stage, setStage] = useState<string>("one");
  const [name, setName] = useState<string>("");

  // Readable context available across all stages
  useCopilotReadable({
    description: "User's name",
    value: name,
  }, [name])

  // Initialize all stages with their required props
  useStageOne(stage, setStage, setName);
  useStageTwo(stage);
  // any additional stages...

  return (
    <CopilotKit>
      <CopilotChat/>
    </CopilotKit>
  )
}
```

----------------------------------------

TITLE: Define a Simple Copilot Action with useCopilotAction Hook
DESCRIPTION: This React hook example demonstrates how to define a simple AI action using `useCopilotAction`. It allows the Copilot to call a `sayHello` function with a `name` parameter, providing a handler to execute custom logic and display an alert.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_13

LANGUAGE: JavaScript
CODE:
```
useCopilotAction({
  name: "sayHello",
  description: "Say hello to someone.",
  parameters: [\
    {\
      name: "name",\
      type: "string",\
      description: "name of the person to say greet",\
    },\
  ],
  handler: async ({ name }) => {
    alert(`Hello, ${name}!`);
  },
});
```

----------------------------------------

TITLE: Install CopilotKit SDK for Python
DESCRIPTION: Instructions for installing the CopilotKit SDK using Poetry, with an option to include CrewAI support for enhanced agent capabilities.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_250

LANGUAGE: Python
CODE:
```
poetry add copilotkit
# including support for crewai
poetry add copilotkit[crewai]
```

----------------------------------------

TITLE: Initialize and Run CopilotKit
DESCRIPTION: Demonstrates a quick start for initializing a Copilot instance, adding a custom tool for specific functionality, and running a task to receive a response from the copilot.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/sdk-python/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from copilotkit import Copilot

# Initialize a copilot
copilot = Copilot()

# Add your tools and configure the copilot
copilot.add_tool(my_custom_tool)

# Run the copilot
response = copilot.run("Your task description here")
```

----------------------------------------

TITLE: Configure Emitting Tool Calls for CoAgents
DESCRIPTION: This Python snippet shows how to enable and configure the emission of tool calls from a LangGraph agent to the Copilotkit frontend. By setting `emit_tool_calls` to `True` or a list of specific tool names (e.g., `["tool_name"]`), the agent can send information about potential tool calls before they are executed, which is useful for frontend rendering and interaction.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/concepts/copilotkit-config.mdx#_snippet_1

LANGUAGE: python
CODE:
```
config = copilotkit_customize_config(
    config,
    # Can set to True, False, or a list of tool call names to emit.
    emit_tool_calls=["tool_name"],
)
```

----------------------------------------

TITLE: Interrupting Agent Flow to Ask Name (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates using `copilotKitInterrupt` within an agent's node function (`chat_node`) to pause execution if the agent's name is not set. It prompts the user for the agent's name, updates the agent's state with the response and messages, and then proceeds with the conversation, ensuring the agent uses its newly acquired name. It relies on a pre-configured 'AskName' action.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_12

LANGUAGE: TypeScript
CODE:
```
import { copilotKitInterrupt } from "@copilotkit/sdk-js/langgraph";
import { SystemMessage } from "@langchain/core/messages";
import { ChatOpenAI } from "@langchain/openai";

// ... add here the agent state from previous step

async function chat_node(state: AgentState, config: RunnableConfig) {
  if (!state.agentName) {
    const { answer, messages } = copilotKitInterrupt({
      action: 'AskName', // The action name you defined in an existing useCopilotAction hook
      args: { message: 'Before we start, what would you like to call me?' }, // The arguments to pass when the tool is called.
    });
    state.agentName = answer
    state.messages = [...state.messages, ...messages]
  }

// Tell the agent its name
  const systemMessage = new SystemMessage({
    content: `You are a helpful assistant named ${state.agentName}...`,
  });

  const response = await new ChatOpenAI({ model: "gpt-4o" }).invoke(
    [systemMessage, ...state.messages],
    config
  );

  return {
    ...state,
    // messages receives from the interrupt are not automatically saved to state, don't forget to add them!
    messages: [...state.messages, response],
  };
}
```

----------------------------------------

TITLE: agent-js/src/agent.ts
DESCRIPTION: This TypeScript snippet demonstrates using `copilotKitInterrupt` within an asynchronous `chat_node` function. It extracts the agent name and messages from the interrupt and updates the agent's state accordingly, making the agent aware of the interrupt interaction.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_14

LANGUAGE: typescript
CODE:
```
import { copilotKitInterrupt } from "@copilotkit/sdk-js/langgraph";

// ...
async function chat_node(state: AgentState, config: RunnableConfig) {
    const { agentName, messages } = copilotKitInterrupt({ message: "Before we start, what would you like to call me?" });
    state.messages = [...state.messages, ...messages];
    state.agentName = agentName;
    // ... add the rest of the node implementation, including LLM calls etc.

    // Don't forget to return the messages list with our newly added interrupt messages, and the new agent name
    return { messages: state.messages, agentName: state.agentName }
}
```

----------------------------------------

TITLE: TypeScript LangGraph Agent with Dynamic CopilotKit Actions
DESCRIPTION: This TypeScript snippet illustrates how to define an `AgentState` that integrates with CopilotKit's state management and implements a `chatNode` for an agent. It demonstrates binding dynamic CopilotKit actions (defined in the frontend) to the `ChatOpenAI` model, enabling the agent to call these tools. The example specifically handles a `writeEssay` tool call, showing how to transition to a `getFeedback` node for user interaction.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/node-flow.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { z } from "zod";
import { RunnableConfig } from "@langchain/core/runnables";
import { tool } from "@langchain/core/tools";
import { ToolNode } from "@langchain/langgraph/prebuilt";
import { AIMessage, HumanMessage, SystemMessage, ToolMessage } from "@langchain/core/messages";
import { Command, END, MemorySaver, START, StateGraph } from "@langchain/langgraph";
import { Annotation } from "@langchain/langgraph";
import { ChatOpenAI } from "@langchain/openai";

// // 1. Import necessary helpers for CopilotKit actions
import { convertActionsToDynamicStructuredTools } from "@copilotkit/sdk-js/langgraph";
import { CopilotKitStateAnnotation } from "@copilotkit/sdk-js/langgraph";

// 2. Define graph state, inherit from CopilotKitState to bring in CopilotKit actions
//    and messages.
export const AgentStateAnnotation = Annotation.Root({
    ...CopilotKitStateAnnotation.spec,
});
export type AgentState = typeof AgentStateAnnotation.State;

// 3. Define the chat node, this will be the main entry point that a user interacts with
async function chatNode(state: AgentState, config: RunnableConfig) {
  // 3.1 Define the model, lower temperature for deterministic responses
  const model = new ChatOpenAI({ temperature: 0, model: "gpt-4o" });

  // 3.2 Bind the tools to the model, include CopilotKit actions. This allows
  //     the model to call tools that are defined in CopilotKit by the frontend.
  const modelWithTools = model.bindTools!(
    [ ...convertActionsToDynamicStructuredTools(state.copilotkit?.actions || [])],
  );

  // 3.3 Define the system message, which will be used to guide the model.
  const systemMessage = new SystemMessage({
    content: `You are a helpful assistant.`,
  });

  // 3.4 Invoke the model with the system message and the messages in the state
  const response = await modelWithTools.invoke(
    [systemMessage, ...state.messages],
    config
  );

  // 3.5 Check if the response contains a tool call
  if (response.tool_calls?.length) {
    const toolCall = response.tool_calls[0];

    // 3.5.1 If the tool call is "writeEssay", we need to get feedback from the user
    //       by going to the getFeedback node which will be interrupted after
    //       execution, giving CopilotKit a chance to get feedback from the user.
    //       
    //       The "writeEssay" tool is a CopilotKit action and is binded in step 3.2.
    if (toolCall.name === "writeEssay") {
      return new Command({
        goto: "getFeedback",
        update: {
          messages: [response],
        }
      });
    }
  }
```

----------------------------------------

TITLE: Define Dynamic Agents with Context
DESCRIPTION: Illustrates how to dynamically build agents using a callable that returns a list of agents. The example uses the `context` object to pass configuration, such as a token, to the agent.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/RemoteEndpoints.mdx#_snippet_5

LANGUAGE: python
CODE:
```
from copilotkit import CopilotKitRemoteEndpoint, LangGraphAgent
from my_agent.agent import graph

sdk = CopilotKitRemoteEndpoint(
    agents=lambda context: [
        LangGraphAgent(
            name="email_agent",
            description="This agent sends emails",
            graph=graph,
            langgraph_config={
                "token": context["properties"]["token"]
            }
        )
    ]
)
```

----------------------------------------

TITLE: LLM-Driven Stage Transitions with CopilotKit Actions
DESCRIPTION: This snippet demonstrates how to manage state transitions in a CopilotKit application using `useCopilotAction` hooks. It allows an LLM to decide the next stage based on user input or predefined actions, providing dynamic navigation within a state machine. It also uses `useCopilotReadable` to provide context to the AI.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_23

LANGUAGE: TypeScript
CODE:
```
function useStageSellFinancing() {
  const { stage, setStage } = useGlobalState();
  const isActive = stage === "sellFinancing";

  // Provide context to the AI
  useCopilotReadable({
    description: "Financing Information",
    value: "Current promotion: 0% financing for 60 months...",
    available: isActive ? "enabled" : "disabled"
  });

  // Different paths based on financing choice by user, LLM will decide which path to take

  useCopilotAction({
    name: "selectFinancing",
    description: "Select the financing option",
    available: stage === "sellFinancing" ? "enabled" : "disabled",
    handler: () => setStage("getFinancingInfo"),
  }, [stage]);

  useCopilotAction({
    name: "selectNoFinancing",
    description: "Select the no financing option",
    available: stage === "sellFinancing" ? "enabled" : "disabled",
    handler: () => setStage("getPaymentInfo"),
  }, [stage]);

}
```

----------------------------------------

TITLE: Dynamically Configure CopilotKit Agents
DESCRIPTION: This Python code illustrates how to dynamically configure agents for `CopilotKitRemoteEndpoint` by providing a function to the `agents` parameter instead of a static list. This function receives a `context` object, enabling agents to be built based on frontend properties or other dynamic data, offering greater flexibility in agent behavior.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_242

LANGUAGE: Python
CODE:
```
def build_agents(context):
    return [\
        LangGraphAgent(\
            name="some_agent",\
            description="This agent does something",\
            graph=graph,\
            langgraph_config={\
                "some_property": context["properties"]["someProperty"]\
            }\
        )\
    ]


app = FastAPI()
sdk = CopilotKitRemoteEndpoint(
    agents=build_agents,
)
```

----------------------------------------

TITLE: Define and Bind a Weather Tool to an Agent
DESCRIPTION: This snippet demonstrates how to define a `get_weather` tool using LangChain in Python or `@langchain/core/tools` in TypeScript, and then bind it to an OpenAI chat model. The tool allows the agent to retrieve weather information for a given location, making it available for the LLM to call.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/generative-ui/tool-based.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
from langchain_openai import ChatOpenAI
from langchain.tools import tool
# ...

@tool
def get_weather(location: str):
    """
    Get the weather for a given location.
    """
    return f"The weather for {location} is 70 degrees."

# ...

async def chat_node(state: AgentState, config: RunnableConfig):
    model = ChatOpenAI(model="gpt-4o")
    model_with_tools = model.bind_tools([get_weather])

    response = await model_with_tools.ainvoke([
        SystemMessage(content=f"You are a helpful assistant.")
        *state["messages"],
    ], config)

    # ...
```

LANGUAGE: TypeScript
CODE:
```
import { ChatOpenAI } from "@langchain/openai";
import { tool } from "@langchain/core/tools";

const get_weather = tool(
  (args) => {
    return `The weather for ${args.location} is 70 degrees.`;
  },
  {
    name: "get_weather",
    description: "Get the weather for a given location.",
    schema: z.object({
      location: z.string().describe("The location to get weather for"),
    }),
  }
);

async function chat_node(state: AgentState, config: RunnableConfig) {
  const model = new ChatOpenAI({ temperature: 0, model: "gpt-4o" });
  const modelWithTools = model.bindTools([get_weather]);

  const response = await modelWithTools.invoke([
    new SystemMessage("You are a helpful assistant."),
    ...state.messages,
  ], config);

  // ...
}
```

----------------------------------------

TITLE: Inherit CopilotKitState for Agent State Definition (Python)
DESCRIPTION: This snippet illustrates how to extend an agent's state definition by inheriting from `CopilotKitState`. This inheritance enables the agent to access frontend actions provided by CopilotKit through the `copilotkit` property in its state, facilitating seamless integration.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_38

LANGUAGE: Python
CODE:
```
from copilotkit import CopilotKitState

class YourAgentState(CopilotKitState):
    your_additional_properties: str
```

----------------------------------------

TITLE: Render Arbitrary Tool Calls with Catch-All useCopilotAction
DESCRIPTION: This snippet shows how to use a catch-all `useCopilotAction` with `name: "*"` to render any tool call that doesn't have a specific UI component defined for it. It displays the tool name, arguments, and completion status, providing a generic fallback UI for agent actions.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/generative-ui/tool-based.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import {
  useCopilotAction,
  CatchAllActionRenderProps,
} from "@copilotkit/react-core";

useCopilotAction({
  name: "*",
  followUp: false,
  render: ({ name, args, status, result }: CatchAllActionRenderProps<[]>) => {
    return (
      <div className="m-4 p-4 bg-gray-100 rounded shadow">
        <h2 className="text-sm font-medium">Tool: {name}</h2>
        <pre className="mt-2 text-xs overflow-auto">
          {JSON.stringify(args, null, 2)}
        </pre>
        {status === "complete" && (
          <div className="mt-2 text-xs text-green-600">✓ Complete</div>
        )}
      </div>
    );
  },
});
```

----------------------------------------

TITLE: Configure Frontend Authentication with CopilotKit React
DESCRIPTION: This code demonstrates how to set up authentication state in a React application using `@copilotkit/react-core`. It defines an `AuthState` interface and integrates a `SignInComponent` to capture user authentication details (like headers and user ID) and pass them to the `CopilotKit` provider via `authConfig_c`, enabling secure propagation to backend tools.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_243

LANGUAGE: TypeScript
CODE:
```
import { CopilotKit } from "@copilotkit/react-core";

interface AuthState {
  status: "authenticated" | "unauthenticated";
  authHeaders: Record<string, string>;
  userId?: string;
  metadata?: Record<string, any>;
}

// Your SignInComponent component
function SignInComponent({
  onSignInComplete,
}: {
  onSignInComplete: (authState: AuthState) => void;
}) {
  const handleAuth = async () => {
    // Your auth logic (e.g., OAuth, custom auth)
    const authState = {
      status: "authenticated",
      authHeaders: {
        Authorization: "Bearer your_token",
        // Add any other headers needed by your backend
      },
      userId: "user_123",
      metadata: {
        email: "user@example.com",
        // Any other user context needed by tools
      },
    };

    onSignInComplete(authState);
  };

  return <button onClick={handleAuth}>Authenticate</button>;
}

// Root configuration
export default function App() {
  return (
    <CopilotKit
      publicApiKey={process.env.COPILOTKIT_PUBLIC_API_KEY}
      authConfig_c={{
        SignInComponent,
      }}
    >
      {/* Your app */}
    </CopilotKit>
  );
}
```

----------------------------------------

TITLE: Create CopilotKit Endpoint for Next.js App Router
DESCRIPTION: This snippet demonstrates how to set up a new API route (`/api/copilotkit`) in a Next.js App Router project. It initializes `CopilotRuntime` and `OpenAIAdapter` to handle incoming requests, making the CopilotKit backend accessible.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_182

LANGUAGE: typescript
CODE:
```
import {
  CopilotRuntime,
  OpenAIAdapter,
  copilotRuntimeNextJSAppRouterEndpoint,
} from '@copilotkit/runtime';

import { NextRequest } from 'next/server';


const serviceAdapter = new OpenAIAdapter();
const runtime = new CopilotRuntime();

export const POST = async (req: NextRequest) => {
  const { handleRequest } = copilotRuntimeNextJSAppRouterEndpoint({
    runtime,
    serviceAdapter,
    endpoint: '/api/copilotkit',
  });

  return handleRequest(req);
};
```

----------------------------------------

TITLE: Initialize CopilotKit SDK and Run FastAPI Server
DESCRIPTION: This snippet demonstrates how to initialize the `CopilotKitRemoteEndpoint` with actions, integrate it into a FastAPI application using `add_fastapi_endpoint`, and then run the FastAPI server using `uvicorn`. It sets up the backend for CopilotKit actions, making them available to the CopilotKit runtime.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_238

LANGUAGE: Python
CODE:
```
sdk = CopilotKitRemoteEndpoint(actions=[action])

# Add the CopilotKit endpoint to your FastAPI app
add_fastapi_endpoint(app, sdk, "/copilotkit_remote")

def main():
    """Run the uvicorn server."""
    import uvicorn
    uvicorn.run("server:app", host="0.0.0.0", port=8000, reload=True)

if __name__ == "__main__":
    main()
```

----------------------------------------

TITLE: Exposing App State with useCopilotReadable
DESCRIPTION: This snippet demonstrates how to use the `useCopilotReadable` hook within a React `TasksProvider` to expose the application's task state to the Copilot. It highlights providing a concise description and the JSON stringified value of the tasks array to the hook, allowing the Copilot to understand the current state of the todo list.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-todo-app/step-3-copilot-readable-state.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
// ... the rest of the file

import { useCopilotReadable } from "@copilotkit/react-core";

export const TasksProvider = ({ children }: { children: ReactNode }) => {
  const [tasks, setTasks] = useState<Task[]>(defaultTasks);

  useCopilotReadable({
    description: "The state of the todo list",
    value: JSON.stringify(tasks)
  });

  // ... the rest of the file
}
```

----------------------------------------

TITLE: Implementing CopilotTextarea in Reply Component
DESCRIPTION: This snippet demonstrates how to replace a standard HTML textarea with the `CopilotTextarea` component from `@copilotkit/react-textarea`. It shows the necessary import and how to configure the component as a drop-in replacement, including setting up `autosuggestionsConfig` for specific AI instructions and styling.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-powered-textarea/step-3-copilot-textarea.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
// ... the rest of the file

import { CopilotTextarea } from "@copilotkit/react-textarea"; // [!code highlight]

export function Reply() {
  // ...
  return (
    <div className="mt-4 pt-4 space-y-2 bg-background p-4 rounded-md border">
      <CopilotTextarea // [!code highlight]
        className="min-h-40 border h-40 p-2 overflow-hidden"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        placeholder="Write your reply..."
        // [!code highlight:5]
        autosuggestionsConfig={{
          textareaPurpose: `Assist me in replying to this email thread. Remember all important details.`,
          chatApiConfigs: {}
        }}
      />
      <Button disabled={!input} onClick={handleReply}>
        Reply
      </Button>
    </div>
  );
}
```

----------------------------------------

TITLE: Configure LangGraph Agent with CopilotKitState and Tool Binding
DESCRIPTION: Provides a complete implementation of a LangGraph agent that integrates with CopilotKit. It defines an agent state inheriting from `CopilotKitState`, binds CopilotKit actions as tools to an OpenAI model, and includes logic to transition to a user feedback node upon detecting a `writeEssay` tool call, allowing for user interruption.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_252

LANGUAGE: Python
CODE:
```
from typing_extensions import Literal
from langchain_openai import ChatOpenAI
from langchain_core.messages import SystemMessage, AIMessage
from langchain_core.runnables import RunnableConfig
from langgraph.graph import StateGraph, END
from langgraph.checkpoint.memory import MemorySaver
from langgraph.types import Command
from copilotkit import CopilotKitState

# 1. Define our agent's state and inherit from CopilotKitState, this brings in the CopilotKit actions
class AgentState(CopilotKitState):
    # 1.1 Define any other state variables
    pass

# 2. Define the chat node, this will be where the agent will talk to user and
#    decide if it needs to call the writeEssay tool
async def chat_node(state: AgentState, config: RunnableConfig) -> Command[Literal["user_feedback_node", "__end__"]]:
    # 2.1 Define the model and bind CopilotKit's actions as tools
    model = ChatOpenAI(model="gpt-4o")
    model_with_tools = model.bind_tools([*state.get("copilotkit", {}).get("actions", [])])

    # 2.2 Define the system message
    system_message = SystemMessage(
        content="You write essays. Use your tools to write an essay, don't just write it in plain text."
    )

    # 2.3 Run the model to generate a response
    response = await model_with_tools.ainvoke([\
        system_message,\
        *state["messages"],\
    ], config)


    # 2.4 Check for the writeEssay tool call and, if found, go  to the
    #     user_feedback_node to handle the user's response
    if isinstance(response, AIMessage) and response.tool_calls:
        if response.tool_calls[0].get("name") == "writeEssay":
            return Command(goto="interrupt_node", update={"messages": response})

    # 2.5 If no tool call is found, end the agent
    return Command(goto=END, update={"messages": response})
```

----------------------------------------

TITLE: CrewAI Agent Setup and State Rendering with CopilotKit
DESCRIPTION: This TypeScript React component (`crew-quickstart.tsx`) demonstrates a complete single-file setup for a CrewAI agent using CopilotKit. It includes real-time rendering of the Crew's steps and tasks, highlighting new activity, and auto-scrolling. It also defines an interface for Crew feedback and sets up the basic structure for handling agent state and status.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/crew-quickstart.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
"use client";

import {
  CrewsAgentState,
  CrewsResponseStatus,
  CrewsStateItem,
  CrewsTaskStateItem,
  CrewsToolStateItem,
  useCoAgent,
  useCoAgentStateRender,
  useCopilotAction,
  useCopilotChat,
  useCopilotAdditionalInstructions,
} from "@copilotkit/react-core";
import { useEffect, useMemo, useRef, useState } from "react";

import { MessageRole, TextMessage } from "@copilotkit/runtime-client-gql";

interface CrewsFeedback extends CrewsStateItem {
  /**
   * Output of the task execution
   */
  task_output?: string;
}

/**
 * Renders your Crew's steps & tasks in real-time.
 */
function CrewStateRenderer({
  state,
  status,
}: {
  state: CrewsAgentState;
  status: CrewsResponseStatus;
}) {
  const [isCollapsed, setIsCollapsed] = useState(true);
  const contentRef = useRef<HTMLDivElement>(null);
  const prevItemsLengthRef = useRef<number>(0);
  const [highlightId, setHighlightId] = useState<string | null>(null);

  // Combine steps + tasks
  const items = useMemo(() => {
    if (!state) return [];
    return [...(state.steps || []), ...(state.tasks || [])].sort(
      (a, b) =>
        new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()
    );
  }, [state]);

  // Highlight newly added item & auto-scroll
  useEffect(() => {
    if (!state) return;
    if (items.length > prevItemsLengthRef.current) {
      const newestItem = items[items.length - 1];
      setHighlightId(newestItem.id);
      setTimeout(() => setHighlightId(null), 1500);

      if (contentRef.current && !isCollapsed) {
        contentRef.current.scrollTop = contentRef.current.scrollHeight;
      }
    }
    prevItemsLengthRef.current = items.length;
  }, [items, isCollapsed, state]);

  if (!state) {
    return <div>Loading crew state...</div>;
  }

  // Hide entirely if collapsed & empty & not in progress
  if (isCollapsed && items.length === 0 && status !== "inProgress") return null;

  return (
    <div style={{ marginTop: "8px", fontSize: "0.9rem" }}>
      <div
        style={{ cursor: "pointer", display: "flex", alignItems: "center" }}
        onClick={() => setIsCollapsed(!isCollapsed)}
      >
        <span style={{ marginRight: 4 }}>{isCollapsed ? "▶" : "▼"}</span>
        {status === "inProgress" ? "Crew is analyzing..." : "Crew analysis"}
      </div>

      {!isCollapsed && (
        <div
          ref={contentRef}
          style={{
            maxHeight: "200px",
            overflow: "auto",
            borderLeft: "1px solid #ccc",
            paddingLeft: "8px",
            marginLeft: "4px",
            marginTop: "4px",
          }}
        >
          {items.length > 0 ? (
            items.map((item) => {
              const isTool = (item as CrewsToolStateItem).tool !== undefined;
              const isHighlighted = item.id === highlightId;
              return (
                <div
                  key={item.id}
                  style={{
                    marginBottom: "8px",
                    animation: isHighlighted ? "fadeIn 0.5s" : undefined,
                  }}
                >
                  <div style={{ fontWeight: "bold" }}>
                    {isTool
                      ? (item as CrewsToolStateItem).tool
                      : (item as CrewsTaskStateItem).name}
                  </div>
                  {"thought" in item && item.thought && (
                    <div style={{ opacity: 0.8, marginTop: "4px" }}>
                      Thought: {item.thought}
                    </div>
                  )}
                  {"result" in item && item.result !== undefined && (
                    <pre style={{ fontSize: "0.85rem", marginTop: "4px" }}>
                      {JSON.stringify(item.result, null, 2)}
                    </pre>
                  )}
                  {"description" in item && item.description && (
                    <div style={{ marginTop: "4px" }}>{item.description}</div>
                  )}
                </div>
              );
            })
          ) : (
            <div style={{ opacity: 0.7 }}>No activity yet...</div>
          )}
        </div>
      )}

      {/* Simple fadeIn animation */}
      <style>{`
        @keyframes fadeIn {
          0% { opacity: 0; transform: translateY(4px); }
          100% { opacity: 1; transform: translateY(0); }
        }
      `}</style>
    </div>
  );
}

/**
 * Renders a simple UI for agent-requested user feedback (Approve / Reject).
 */
function CrewHumanFeedbackRenderer({
  feedback,
  respond,
  status,
}: {
```

----------------------------------------

TITLE: Configure CopilotKit Provider in React Root Layout
DESCRIPTION: This code snippet demonstrates how to wrap your React application with the `<CopilotKit>` provider in `layout.tsx`, configuring it with a public API key and specifying the agent name.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_154

LANGUAGE: tsx
CODE:
```
import "./globals.css";
import { ReactNode } from "react";
import { CopilotKit } from "@copilotkit/react-core";

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body>
        {/* Use the public api key you got from Copilot Cloud  */}
        <CopilotKit
          publicApiKey="<your-copilot-cloud-public-api-key>"
          agent="sample_agent" // the name of the agent you want to use
        >
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Simple Usage of useCopilotChatSuggestions Hook
DESCRIPTION: This example demonstrates basic integration of `useCopilotChatSuggestions` within a React component. It provides instructions to the GPT model based on the current `employees` state, allowing the chat to suggest actions relevant to the employee list.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_75

LANGUAGE: JavaScript
CODE:
```
import { useCopilotChatSuggestions } from "@copilotkit/react-ui";

export function MyComponent() {
  const [employees, setEmployees] = useState([]);

  useCopilotChatSuggestions({
    instructions: `The following employees are on duty: ${JSON.stringify(employees)}`,
  });
}
```

----------------------------------------

TITLE: Integrating CopilotKit Components in React
DESCRIPTION: Demonstrates how to wrap application components with `CopilotKit` and include core components like `McpServerManager`, `CopilotChat`, and `ToolRenderer` within a flex container.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/model-context-protocol.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
<CopilotKit publicApiKey="<replace_with_your_own>">
  <div className="flex h-screen p-4">
    <McpServerManager />
    <CopilotChat
      instructions="You are a helpful assistant with access to MCP servers."
      className="flex-grow rounded-lg w-full"
    />
    <ToolRenderer />
  </div>
</CopilotKit>
```

----------------------------------------

TITLE: Saving and Restoring CopilotKit Messages with localStorage
DESCRIPTION: This example demonstrates how to save and restore message history using `localStorage` in a React component. It utilizes `useEffect` hooks to persist messages to `localStorage` when they change and to load them initially. The loading logic includes parsing different message types (`TextMessage`, `ActionExecutionMessage`, `ResultMessage`) back into their respective classes to maintain data integrity.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_44

LANGUAGE: TypeScript
CODE:
```
import { useCopilotMessagesContext } from "@copilotkit/react-core";
import { ActionExecutionMessage, ResultMessage, TextMessage } from "@copilotkit/runtime-client-gql";

const { messages, setMessages } = useCopilotMessagesContext();

// save to local storage when messages change
useEffect(() => {
  if (messages.length !== 0) {
    localStorage.setItem("copilotkit-messages", JSON.stringify(messages));
  }
}, [JSON.stringify(messages)]);

// initially load from local storage
useEffect(() => {
  const messages = localStorage.getItem("copilotkit-messages");
  if (messages) {
    const parsedMessages = JSON.parse(messages).map((message: any) => {
      if (message.type === "TextMessage") {
        return new TextMessage({
          id: message.id,
          role: message.role,
          content: message.content,
          createdAt: message.createdAt,
        });
      } else if (message.type === "ActionExecutionMessage") {
        return new ActionExecutionMessage({
          id: message.id,
          name: message.name,
          scope: message.scope,
          arguments: message.arguments,
          createdAt: message.createdAt,
        });
      } else if (message.type === "ResultMessage") {
        return new ResultMessage({
          id: message.id,
          actionExecutionId: message.actionExecutionId,
          actionName: message.actionName,
          result: message.result,
          createdAt: message.createdAt,
        });
      } else {
        throw new Error(`Unknown message type: ${message.type}`);
      }
    });
    setMessages(parsedMessages);
  }
}, []);
```

----------------------------------------

TITLE: Set up Copilot Runtime with Node.js HTTP Server
DESCRIPTION: Configure a basic Node.js HTTP server to serve the Copilot Runtime endpoint. This example demonstrates using 'createServer' and 'copilotRuntimeNodeHttpEndpoint' to handle requests at '/copilotkit'.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-create-endpoint.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
import { createServer } from 'node:http';
import {
  CopilotRuntime,
  {{adapterImport}},
  copilotRuntimeNodeHttpEndpoint,
} from '@copilotkit/runtime';
{{extraImports}}

{{clientSetup}}
{{adapterSetup}}

const server = createServer((req, res) => {
  const runtime = new CopilotRuntime();
  const handler = copilotRuntimeNodeHttpEndpoint({
    endpoint: '/copilotkit',
    runtime,
    serviceAdapter,
  });

  return handler(req, res);
});

server.listen(4000, () => {
  console.log('Listening at http://localhost:4000/copilotkit');
});
```

----------------------------------------

TITLE: Integrate CopilotKit Stages into Chat UI
DESCRIPTION: Shows how to combine the defined stages into a main React component. It manages the current stage and user data, makes context available globally, and renders the `CopilotKit` and `CopilotChat` components to create the conversational interface.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { useState } from "react";
import { CopilotKit, useCopilotReadable } from "@copilotkit/react-core";
import { CopilotChat } from "@copilotkit/react-ui";

// ...

function StateMachineChat() {
  // Track the current stage and user's name
  const [stage, setStage] = useState<string>("one");
  const [name, setName] = useState<string>("");

  // Readable context available across all stages
  useCopilotReadable({
    description: "User's name",
    value: name,
  }, [name])

  // Initialize all stages with their required props
  useStageOne(stage, setStage, setName);
  useStageTwo(stage);
  // any additional stages...

  return (
    <CopilotKit>
      <CopilotChat/>
    </CopilotKit>
  )
}
```

----------------------------------------

TITLE: Change CopilotKit Thread using `setThreadId` from `useCopilotContext`
DESCRIPTION: Shows how to access the current `threadId` and a `setThreadId` function from the `useCopilotContext` hook. This function allows programmatic changing of the active thread within a CopilotKit application.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_190

LANGUAGE: jsx
CODE:
```
import { useCopilotContext } from "@copilotkit/react-core";

const ChangeThreadButton = () => {
  const { threadId, setThreadId } = useCopilotContext();
  return (
    <Button onClick={() => setThreadId("d73c22f3-1f8e-4a93-99db-5c986068d64f")}>
      Change Thread
    </Button>
  )
}
```

----------------------------------------

TITLE: Simple Usage of useLangGraphInterrupt Hook in React
DESCRIPTION: Demonstrates how to integrate `useLangGraphInterrupt` into a React component to render a custom form and resolve the interrupt with user input. This example shows a basic text input and submit button.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useLangGraphInterrupt.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useLangGraphInterrupt } from "@copilotkit/react-core";
// ...

const YourMainContent = () => {
  // ...
  // styles omitted for brevity
  useLangGraphInterrupt<string>({
    render: ({ event, resolve }) => (
      <div>
        <p>{event.value}</p>
        <form onSubmit={(e) => {
          e.preventDefault();
          resolve((e.target as HTMLFormElement).response.value);
        }}>
          <input type="text" name="response" placeholder="Enter your response" />
          <button type="submit">Submit</button>
        </form>
      </div>
    )
  });
  // ...

  return <div>{/* ... */}</div>
}
```

----------------------------------------

TITLE: React Component for User Action Buttons (`ActionButtons.tsx`)
DESCRIPTION: This component provides the user interface for approving or rejecting an agent's proposed action. It takes `status`, `handler`, `approve` (ReactNode for the approve button), and `reject` (ReactNode for the reject button) as props. The `onClick` handlers for the buttons call the provided `handler` function with 'SEND' for approval or 'CANCEL' for rejection, communicating the user's decision back to the agent.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { RenderFunctionStatus } from "@copilotkit/react-core";
import { Button } from "../ui/button";

export type ActionButtonsProps = {
    status: RenderFunctionStatus;
    handler: any;
    approve: React.ReactNode;
    reject: React.ReactNode;
}

export const ActionButtons = ({ status, handler, approve, reject }: ActionButtonsProps) => (
  <div className="flex gap-4 justify-between">
    <Button 
      className="w-full"
      variant="outline"
      disabled={status === "complete" || status === "inProgress"} 
      onClick={() => handler?.("CANCEL")}
    >
      {reject}
    </Button>
    <Button 
      className="w-full"
      disabled={status === "complete" || status === "inProgress"} 
      onClick={() => handler?.("SEND")}
    >
      {approve}
    </Button>
  </div>
);
```

----------------------------------------

TITLE: Emit LangGraph Agent Intermediate Search Progress
DESCRIPTION: Demonstrates how to manually emit the `search_progress` state using `copilotkit_emit_state` within the `search_node`. This code initializes the `search_progress` state, populates it with queries, and then emits the current state to CopilotKit.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-5-stream-progress.mdx#_snippet_2

LANGUAGE: python
CODE:
```
# ...
async def search_node(state: AgentState, config: RunnableConfig):
    """
    The search node is responsible for searching the for places.
    """
    ai_message = cast(AIMessage, state["messages"][-1])

    config = copilotkit_customize_config(
        config,
        emit_intermediate_state=[{
            "state_key": "search_progress",
            "tool": "search_for_places",
            "tool_argument": "search_progress"
        }]
    )

    # ^ Previous code

    state["search_progress"] = state.get("search_progress", [])
    queries = ai_message.tool_calls[0]["args"]["queries"]

    for query in queries:
        state["search_progress"].append({
            "query": query,
            "results": [],
            "done": False
        })

    await copilotkit_emit_state(config, state)

    # ...
```

----------------------------------------

TITLE: Python Agent Search Node State Emission
DESCRIPTION: This Python function, `search_node`, is responsible for searching for places. It demonstrates how to configure and use `copilotkit_emit_state` to send intermediate progress updates (specifically, `search_progress`) to the client. The state is updated and emitted after each query completes, and then cleared at the end.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-5-stream-progress.mdx#_snippet_3

LANGUAGE: Python
CODE:
```
async def search_node(state: AgentState, config: RunnableConfig):
    """
    The search node is responsible for searching the for places.
    """
    ai_message = cast(AIMessage, state["messages"][-1])
  
    config = copilotkit_customize_config(
        config,
        emit_intermediate_state=[{
            "state_key": "search_progress",
            "tool": "search_for_places",
            "tool_argument": "search_progress",
        }],
    )
  
    state["search_progress"] = state.get("search_progress", [])
    queries = ai_message.tool_calls[0]["args"]["queries"]
  
    for query in queries:
        state["search_progress"].append({
            "query": query,
            "results": [],
            "done": False
        })
  
    await copilotkit_emit_state(config, state) 

    # ^ Previous code

    places = []
    for i, query in enumerate(queries):
        response = gmaps.places(query)
        for result in response.get("results", []):
            place = {
                "id": result.get("place_id", f"{result.get('name', '')}-{i}"),
                "name": result.get("name", ""),
                "address": result.get("formatted_address", ""),
                "latitude": result.get("geometry", {}).get("location", {}).get("lat", 0),
                "longitude": result.get("geometry", {}).get("location", {}).get("lng", 0),
                "rating": result.get("rating", 0),
            }
            places.append(place)
        state["search_progress"][i]["done"] = True
        await copilotkit_emit_state(config, state) 

    state["search_progress"] = []
    await copilotkit_emit_state(config, state)
```

----------------------------------------

TITLE: Define Stage Two Logic with CopilotKit Instructions
DESCRIPTION: This function sets up the behavior for 'stage two' of the state machine. It uses `useCopilotAdditionalInstructions` to provide stage-specific directives to the AI assistant, instructing it to interact with the user in a particular tone. The `available` prop ensures these instructions are active only when the `stage` variable is 'two'.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
function useStageTwo(stage: string): void {
  // Add stage-specific instructions - only available in stage "two"
  useCopilotAdditionalInstructions({
    instructions: "Talk to the user about their name and refer to them like a pirate would.",
    available: stage === "two" ? "available" : "disabled"
  });
}
```

----------------------------------------

TITLE: Setup CopilotKit Runtime Endpoint for Next.js App Router
DESCRIPTION: TypeScript code for creating a `/api/copilotkit` route in a Next.js App Router project, integrating `CopilotRuntime` and a service adapter to handle incoming requests.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-create-endpoint.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import {
  CopilotRuntime,
  {{adapterImport}},
  copilotRuntimeNextJSAppRouterEndpoint,
} from '@copilotkit/runtime';
{{extraImports}}
import { NextRequest } from 'next/server';

{{clientSetup}}
{{adapterSetup}}
const runtime = new CopilotRuntime();

export const POST = async (req: NextRequest) => {
  const { handleRequest } = copilotRuntimeNextJSAppRouterEndpoint({
    runtime,
    serviceAdapter,
    endpoint: '/api/copilotkit',
  });

  return handleRequest(req);
};
```

----------------------------------------

TITLE: Define First Stage with CopilotKit Hooks
DESCRIPTION: Illustrates defining the initial stage of a state machine using `useCopilotAdditionalInstructions`, `useCopilotReadable`, and `useCopilotAction`. It shows conditional availability based on the current stage, user input extraction, and stage transition logic.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { 
  useCopilotAdditionalInstructions, 
  useCopilotAction, 
  useCopilotReadable 
} from "@copilotkit/react-core";

// ...

/*
 * Not required, but it is convenient to use a dedicated hook to define each 
 * stage of the state machine
 */
function useStageOne(
  stage: string, 
  setStage: (stage: string) => void, 
  setName: (name: string) => void
) {

  /*
   * Each stage can define its own instructions, context, and transitions
   * (implemented via copilotActions). We transition between stages by simply
   * setting the `stage` variable from the handler of the transition:
   */

  // Add additional instructions to the system prompt if this stage is active
  useCopilotAdditionalInstructions({
    instructions: "Ask for the user's name politely.",
    // Use "available" argument to enable this only when the stage is correct! // [!code highlight:2]
    available: stage === "one" ? "available" : "disabled"
  })

  // Add context to the system prompt if this stage is active
  useCopilotReadable({
    description: "Other names",
    value: ["John", "Jane", "Jim"],
    available: stage === "one" ? "available" : "disabled" // [!code highlight]
  })

  // Add an action to the assistant that transitions to the next stage if this stage is active
  useCopilotAction({
    name: "transitionToNextStage",
    description: "Moves to the next stage, only called when the user's name is not in the list of other names",
    available: stage === "one" ? "available" : "disabled", // [!code highlight]
    parameters: [
      { name: "name", type: "string", description: "The name of the user", required: true },
    ],
    handler: ({ name }) => {
      // Perform any state updates given the user's input
      setName(name);

      // Transition to the next stage // [!code highlight:2]
      setStage("two"); 
    }
  });
}
```

----------------------------------------

TITLE: Installing Project Dependencies (Bash)
DESCRIPTION: Installs the necessary project dependencies using the pnpm package manager.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-anthropic-pinecone/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
pnpm i
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: This snippet provides commands to start the Next.js development server locally using different package managers. The server will typically run on http://localhost:3000, allowing you to view and interact with your application.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/examples/next-pages-router/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Emit Intermediate Agent State Updates Manually
DESCRIPTION: This snippet illustrates how to manually emit intermediate state updates within a LangGraph node using `copilotkit_emit_state`. It simulates a long-running task by progressively updating the `observed_steps` field and emitting the state, providing continuous feedback to the user and preventing long loading indicators.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_219

LANGUAGE: Python
CODE:
```
from copilotkit.langgraph import copilotkit_emit_state
# ...
async def chat_node(state: AgentState, config: RunnableConfig) -> Command[Literal["cpk_action_node", "tool_node", "__end__"]]:
    # ...

    # Simulate executing steps one by one
    steps = [\
        "Analyzing input data...",\
        "Identifying key patterns...",\
        "Generating recommendations...",\
        "Formatting final output..."\
    ]

    for step in steps:
        self.state["observed_steps"] = self.state.get("observed_steps", []) + [step]
        await copilotkit_emit_state(config, state)
        await asyncio.sleep(1)

    # ...
```

----------------------------------------

TITLE: Re-run Agent with State Change Hint using useCoAgent
DESCRIPTION: This advanced usage example shows how to manually re-run the agent after a state update using the `run` argument of the `useCoAgent` hook. It demonstrates providing a hint to the agent about the state delta (difference between previous and current state), allowing the agent to react intelligently to specific changes, such as a language update, by sending a user message.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/in-app-agent-write.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { useCoAgent } from "@copilotkit/react-core";
import { TextMessage, MessageRole } from "@copilotkit/runtime-client-gql";

// ...

function YourMainContent() {
  const { state, setState, run } = useCoAgent<AgentState>({
    name: "sample_agent",
    initialState: { language: "spanish" }  // optionally provide an initial state
  });

  // setup to be called when some event in the app occurs
  const toggleLanguage = () => {
    const newLanguage = state.language === "english" ? "spanish" : "english";
    setState({ language: newLanguage });

    // re-run the agent and provide a hint about what's changed
    run(({ previousState, currentState }) => {
      return new TextMessage({
        role: MessageRole.User,
        content: `the language has been updated to ${currentState.language}`,
      });
    });
  };

  return (
    // ...
  );
}
```

----------------------------------------

TITLE: Observe CoAgent Predictive State Updates in React
DESCRIPTION: This snippet demonstrates how to observe and render intermediate predictive states from a CoAgent using CopilotKit's `useCoAgent` and `useCoAgentStateRender` hooks in a React application. It allows tracking the agent's progress (e.g., `observed_steps`) before the final state is determined, providing real-time feedback to the user.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_220

LANGUAGE: tsx
CODE:
```
import { useCoAgent, useCoAgentStateRender } from '@copilotkit/react-core';

// ...
type AgentState = {
    observed_steps: string[];
};

const YourMainContent = () => {
    // Get access to both predicted and final states
    const { state } = useCoAgent<AgentState>({ name: "sample_agent" });

    // Add a state renderer to observe predictions
    useCoAgentStateRender({
        name: "sample_agent",
        render: ({ state }) => {
            if (!state.observed_steps?.length) return null;
            return (
                <div>
                    <h3>Current Progress:</h3>
                    <ul>
                        {state.observed_steps.map((step, i) => (
                            <li key={i}>{step}</li>
                        ))}
                    </ul>
                </div>
            );
        },
    });

    return (
        <div>
            <h1>Agent Progress</h1>
            {state.observed_steps?.length > 0 && (
                <div>
                    <h3>Final Steps:</h3>
                    <ul>
                        {state.observed_steps.map((step, i) => (
                            <li key={i}>{step}</li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    )
}
```

----------------------------------------

TITLE: Properties Returned by useCopilotChat Hook
DESCRIPTION: Lists the properties returned by the `useCopilotChat` hook, including functions for managing chat messages (`appendMessage`, `setMessages`, `deleteMessage`, `reloadMessages`, `stopGeneration`, `reset`) and state indicators (`visibleMessages`, `isLoading`).
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_248

LANGUAGE: TypeScript
CODE:
```
const {
  visibleMessages, // An array of messages that are currently visible in the chat.
  appendMessage, // A function to append a message to the chat.
  setMessages, // A function to set the messages in the chat.
  deleteMessage, // A function to delete a message from the chat.
  reloadMessages, // A function to reload the messages from the API.
  stopGeneration, // A function to stop the generation of the next message.
  reset, // A function to reset the chat.
  isLoading, // A boolean indicating if the chat is loading.
} = useCopilotChat();
```

----------------------------------------

TITLE: Rendering Agent State in Chat UI with useCoAgentStateRender
DESCRIPTION: This snippet demonstrates how to render an agent's state directly within the chat UI using the `useCoAgentStateRender` hook from `@copilotkit/react-core`. It defines a type for the agent's state and shows how to use the hook's `render` function to display specific state properties. The `state` object passed to the render function is reactive and updates automatically when the agent's state changes.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/in-app-agent-read.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { useCoAgentStateRender } from "@copilotkit/react-core";

// Define the agent state type, should match the actual state of your agent
type AgentState = {
  language: "english" | "spanish";
}

function YourMainContent() {
  // ...
  useCoAgentStateRender({
    name: "sample_agent",
    render: ({ state }) => {
      if (!state.language) return null;
      return <div>Language: {state.language}</div>;
    },
  });
  // ...
}
```

----------------------------------------

TITLE: Configure CopilotKit for Intermediate State Emission in LangGraph Search Node
DESCRIPTION: Adds necessary imports and configures the `search_node` in a LangGraph agent to emit intermediate state using `copilotkit_customize_config`. This setup specifies `search_progress` as the state key for the `search_for_places` tool.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-5-stream-progress.mdx#_snippet_1

LANGUAGE: python
CODE:
```
# ...
from copilotkit.langgraph import copilotkit_emit_state, copilotkit_customize_config

async def search_node(state: AgentState, config: RunnableConfig):
    """
    The search node is responsible for searching the for places.
    """
    ai_message = cast(AIMessage, state["messages"][-1])

    config = copilotkit_customize_config(
        config,
        emit_intermediate_state=[{
            "state_key": "search_progress",
            "tool": "search_for_places",
            "tool_argument": "search_progress"
        }]
    )

    # ...
```

----------------------------------------

TITLE: Return Messages from LangGraph Nodes for CopilotKit Chat
DESCRIPTION: In CopilotKit v0.3, messages are synced between LangGraph and CopilotKit by sharing the same message history. To ensure messages appear in the CopilotKit chat, LangGraph nodes must explicitly return them. This example demonstrates how to return an LLM response as part of the state's 'messages' field.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/troubleshooting/migrate-from-v0.2-to-v0.3.mdx#_snippet_0

LANGUAGE: python
CODE:
```
def my_node(state: State, config: RunnableConfig) -> State:
    response = # ... llm call ...
    return {
        "messages": response,
    }
```

----------------------------------------

TITLE: Implementing Generative UI with useCopilotAction in Build Car Stage
DESCRIPTION: This TypeScript/React snippet demonstrates how to integrate Generative UI within a state machine using `useCopilotAction`. It defines a `showCar` action that, when triggered, renders a `ShowCar` component to allow user interaction. The `renderAndWaitForResponse` callback handles displaying the UI and managing state transitions based on user selection or rejection, enabling human-in-the-loop control.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
export function useStageBuildCar() {
  const { setSelectedCar, stage, setStage } = useGlobalState();

  // ...

  useCopilotAction({
    name: "showCar",
    description: "Show a single car that you have in mind. Do not call this more than once, call `showMultipleCars` if you have multiple cars to show.",
    available: stage === "buildCar" ? "enabled" : "disabled", // [!code highlight]
    parameters: [
      // excluded for brevity, see source code link above for more detail
    ],
    renderAndWaitForResponse: ({ args, status, respond }) => {
      const { car } = args;
      return (
        // [!code highlight:11]
        <ShowCar
          car={(car as Car) || ({} as Car)}
          status={status}
          onSelect={() => {
            setSelectedCar((car as Car) || ({} as Car));
            respond?.("User has selected a car you can see it in your readables, the system will now move to the next state, do not call call nextState.");
            setStage("sellFinancing");
          }}
          onReject={() => respond?.("User wants to select a different car, please stay in this state and help them select a different car")}
        />
      );
    },
  }, [stage]);
  // ...
}
```

----------------------------------------

TITLE: Add `useLangGraphInterrupt` to the frontend
DESCRIPTION: This code snippet demonstrates how to integrate the `useLangGraphInterrupt` hook from `@copilotkit/react-core` into a Next.js `page.tsx` file. It configures the hook to render a `ProposalViewer` component when LangGraph is interrupted, allowing the user to review and approve a research proposal before proceeding. The `resolve` function is used to send the user's decision back to the LangGraph.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-5-human-in-the-loop.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
// ...
import { useLangGraphInterrupt } from "@copilotkit/react-core"; // [!code ++]
// ...

export default function HomePage() {
    // ...
    const { state: researchState, setResearchState } = useResearch()

    const streamingSection = useStreamingContent(researchState);

    // [!code ++:12]
    useLangGraphInterrupt<Proposal>({
      render: ({ resolve, event }) => {
        return <ProposalViewer
          proposal={event.value}
          onSubmit={(approved, proposal) => resolve(
            JSON.stringify({
              ...proposal,
              approved,
            })
          )}
        />
      }
    })
    // ...
}
```

----------------------------------------

TITLE: Define a Simple Copilot Action with useCopilotAction Hook
DESCRIPTION: This example demonstrates the basic usage of the `useCopilotAction` hook to define a 'sayHello' action. It specifies a 'name' parameter of type string and an asynchronous handler function that displays an alert with the greeting, showcasing how the AI can trigger app-specific functionality.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotAction.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
useCopilotAction({
  name: "sayHello",
  description: "Say hello to someone.",
  parameters: [
    {
      name: "name",
      type: "string",
      description: "name of the person to say greet"
    }
  ],
  handler: async ({ name }) => {
    alert(`Hello, ${name}!`);
  }
});
```

----------------------------------------

TITLE: Consuming LangGraph Agent State in React UI with CopilotKit
DESCRIPTION: This example illustrates how to integrate and interact with the defined LangGraph agent from a React application using the `useCoAgent` hook from `@copilotkit/react-core`. It demonstrates initializing the agent with a question and observing changes in its state, specifically noting which state properties are managed by the UI versus returned by the agent.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/state-inputs-outputs.mdx#_snippet_3

LANGUAGE: TSX
CODE:
```
import { useCoAgent } from "@copilotkit/react-core";

type AgentState = {
  question: string;
  answer: string;
}

const { state } = useCoAgent<AgentState>({
  name: "sample_agent",
  initialState: {
    question: "How's is the weather in SF?",
  }
});

console.log(state) // You can expect seeing "answer" change, while the others are not returned from the agent
```

----------------------------------------

TITLE: Customizing Message Display in CopilotKit (TypeScript)
DESCRIPTION: This snippet shows how to customize the `Messages` component, which manages the display of various message types (text, action execution, results, agent states). It iterates through messages and renders them using provided render props, ensuring proper styling and scroll behavior. It highlights handling `TextMessage`, `ActionExecutionMessage`, `ResultMessage`, and `AgentStateMessage`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/bring-your-own-components.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { MessagesProps, CopilotSidebar } from "@copilotkit/react-ui";
import { useCopilotChat } from "@copilotkit/react-core";
import { CopilotKit } from "@copilotkit/react-core";
import "@copilotkit/react-ui/styles.css";
function CustomMessages({
  messages,
  inProgress,
  RenderTextMessage,
  RenderActionExecutionMessage,
  RenderResultMessage,
  RenderAgentStateMessage,
}: MessagesProps) {
  const wrapperStyles = "p-4 flex flex-col gap-2 h-full overflow-y-auto bg-indigo-300";

  /*
    Message types handled:
    - TextMessage: Regular chat messages
    - ActionExecutionMessage: When the LLM executes an action
    - ResultMessage: Results from actions
    - AgentStateMessage: Status updates from CoAgents
  */
  // [!code highlight:40]
  return (
    <div className={wrapperStyles}>
      {messages.map((message, index) => {
        if (message.isTextMessage()) {
          return <RenderTextMessage 
            key={message.id} 
            message={message} 
            inProgress={inProgress} 
            index={index} 
            isCurrentMessage={index === messages.length - 1}
          />;
        } else if (message.isActionExecutionMessage()) {
          return <RenderActionExecutionMessage 
            key={message.id} 
            message={message} 
            inProgress={inProgress} 
            index={index} 
            isCurrent
```

----------------------------------------

TITLE: Configure CopilotKit Runtime with NestJS Controller (Partial)
DESCRIPTION: This partial code snippet illustrates how to configure a NestJS controller (CopilotkitController) to manage the CopilotKit Runtime endpoint. It shows the setup of the CopilotRuntime with a LangGraph Platform endpoint and an OpenAIAdapter, handling requests to '/copilotkit'.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-langgraph-endpoint.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { All, Controller, Req, Res } from '@nestjs/common';
import { 
  CopilotRuntime, 
  copilotRuntimeNestEndpoint, 
  OpenAIAdapter,
  langGraphPlatformEndpoint 
} from '@copilotkit/runtime';
import { Request, Response } from 'express';
import OpenAI from "openai";

@Controller()
export class CopilotkitController {
  @All('/copilotkit')
  copilotkit(@Req() req: Request, @Res() res: Response) {
    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
    const serviceAdapter = new OpenAIAdapter({ openai } as any);
    
    const runtime = new CopilotRuntime({
      remoteEndpoints: [
        langGraphPlatformEndpoint({
          deploymentUrl: "your-api-url", // make sure to replace with your real deployment url
          langsmithApiKey: process.env.LANGSMITH_API_KEY, // only used in LangGraph Platform deployments
          agents: [ // List any agents available under "graphs" list in your langgraph.json file; give each a description explaining when it should be called.
            {
              name: 'my_agent',
```

----------------------------------------

TITLE: Creating a Frontend Action with useCopilotAction (TSX)
DESCRIPTION: Demonstrates how to define a frontend action using the `useCopilotAction` hook from `@copilotkit/react-core`. This example creates a simple 'sayHello' action that takes a 'name' parameter and displays an alert. It also shows how to make the action available only to the agent using `available: "remote"`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/mastra/frontend-actions.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCopilotAction } from "@copilotkit/react-core" // [!code highlight]

export function Page() {
  // ...

  // [!code highlight:16]
  useCopilotAction({
    name: "sayHello",
    description: "Say hello to the user",
    available: "remote", // optional, makes it so the action is *only* available to the agent
    parameters: [
      {
        name: "name",
        type: "string",
        description: "The name of the user to say hello to",
        required: true,
      },
    ],
    handler: async ({ name }) => {
      alert(`Hello, ${name}!`);
    },
  });

  // ...
}
```

----------------------------------------

TITLE: Self-Hosted LangGraph Agent Deployment with FastAPI and CopilotKit
DESCRIPTION: Guide for deploying Python LangGraph agents using FastAPI and CopilotKit. This method involves setting up a LangSmith API key in a .env file and configuring a FastAPI server to expose the LangGraph agent.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/langgraph-platform-deployment-tabs.mdx#_snippet_1

LANGUAGE: plaintext
CODE:
```
LANGSMITH_API_KEY=your_langsmith_api_key
```

LANGUAGE: python
CODE:
```
import os
from fastapi import FastAPI
import uvicorn
from copilotkit.integrations.fastapi import add_fastapi_endpoint
from copilotkit import CopilotKitRemoteEndpoint, LangGraphAgent
from sample_agent.agent import graph

from dotenv import load_dotenv
load_dotenv()

app = FastAPI()
sdk = CopilotKitRemoteEndpoint(
    agents=[
        LangGraphAgent(
            name="sample_agent", # the name of your agent defined in langgraph.json
            description="Describe your agent here, will be used for multi-agent orchestration",
            graph=graph, # the graph object from your langgraph import
        )
    ],
)

# Use CopilotKit's FastAPI integration to add a new endpoint for your LangGraph agents
add_fastapi_endpoint(app, sdk, "/copilotkit", use_thread_pool=False)

# add new route for health check
@app.get("/health")
def health():
    """Health check."""
    return {"status": "ok"}

def main():
    """Run the uvicorn server."""
    port = int(os.getenv("PORT", "8000"))
    uvicorn.run(
        "sample_agent.demo:app", # the path to your FastAPI file, replace this if its different
        host="0.0.0.0",
        port=port,
        reload=True,
    )
```

----------------------------------------

TITLE: Configure CopilotKit Provider for Self-Hosted Runtime in Next.js
DESCRIPTION: This TypeScript React (TSX) snippet demonstrates how to set up the CopilotKit provider in a Next.js app/page.tsx file. It wraps the application's main components with <CopilotKit>, pointing to a self-hosted runtime endpoint at /api/copilotkit, and includes necessary CSS imports for the textarea component.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-powered-textarea/step-2-setup-copilotkit.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
"use client";

import { EmailThread } from "@/components/EmailThread";
import { EmailsProvider } from "@/lib/hooks/use-emails";
import { CopilotKit } from "@copilotkit/react-core";
import "@copilotkit/react-textarea/styles.css";

export default function Home() {
  return (
    <CopilotKit runtimeUrl="/api/copilotkit">
      <EmailsProvider>
        <EmailThread />
      </EmailsProvider>
    </CopilotKit>
  );
}
```

----------------------------------------

TITLE: Render Custom React Component with useCopilotAction
DESCRIPTION: This snippet demonstrates how to define action parameters and render a custom React component (MeetingConfirmationDialog) using the `renderAndWaitForResponse` method within a `useCopilotAction` definition. It enables interactive user responses by calling `respond` on confirmation or cancellation.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/generative-ui.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
},
        {
          name: "date",
          type: "string",
          description: "The date of the meeting",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "The title of the meeting",
          required: true,
        },
      ],
      renderAndWaitForResponse: ({ args, respond, status }) => {
        const { meeting, date, title } = args;
        return (
          <MeetingConfirmationDialog
            meeting={meeting}
            date={date}
            title={title}
            onConfirm={() => respond?.('meeting confirmed')}
            onCancel={() => respond?.('meeting canceled')}
          />
        );
      },
    });
```

----------------------------------------

TITLE: Implement Main State Machine Chat Component with CopilotKit
DESCRIPTION: This React component orchestrates the state machine flow. It manages the current `stage` and `name` using `useState`. It provides global context (`User's name`) and integrates `useStageOne` and `useStageTwo` to dynamically control the AI assistant's capabilities based on the active stage. The component is wrapped in `CopilotKit` to enable AI chat functionality.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
function StateMachineChat() {
  const [stage, setStage] = useState<string>("one");
  const [ name, setName ] = useState<string>("");

  // Context available across all stages
  useCopilotReadable({
    description: "User's name",
    value: name,
    available: stage === "one" ? "available" : "disabled"
  }, [name]);

  useStageOne(stage, setName, setStage);
  useStageTwo(stage);
  // any other stages you want to add ...

  return (
    <CopilotKit>
      <CopilotChat/>
    </CopilotKit>
  );
}
```

----------------------------------------

TITLE: Conditionally Restrict Actions Based on Context
DESCRIPTION: Shows how to restrict the actions available to the Copilot based on the `context` object. This allows for dynamic access control, such as providing different actions for admin users versus regular users.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/RemoteEndpoints.mdx#_snippet_3

LANGUAGE: python
CODE:
```
from copilotkit import CopilotKitRemoteEndpoint, Action

sdk = CopilotKitRemoteEndpoint(
    actions=lambda context: (
        [action_a, action_b] if is_admin(context["properties"]["token"]) else [action_a]
    )
)
```

----------------------------------------

TITLE: Render Agent State Outside Chat with useCoAgent
DESCRIPTION: Demonstrates how to use the `useCoAgent` hook from `@copilotkit/react-core` to access and render an AI agent's state anywhere in the application, outside of the chat interface. It retrieves the agent's state and maps over its `searches` property to display query status.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/generative-ui/agentic.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { useCoAgent } from "@copilotkit/react-core";
// ...

// Define the state of the agent, should match the state of the agent in your LangGraph.
type AgentState = {
  searches: {
    query: string;
    done: boolean;
  }[];
};

function YourMainContent() {
  // ... 

  const { state } = useCoAgent<AgentState>({
    name: "sample_agent", // the name the agent is served as
  })

  // ...

  return (
    <div>
      {/* ... */}
      <div className="flex flex-col gap-2 mt-4">
        {state.searches?.map((search, index) => (
          <div key={index} className="flex flex-row">
            {search.done ? "✅" : "❌"} {search.query}
          </div>
        ))}
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Define LangGraph Agent State with CopilotKit in Python
DESCRIPTION: This snippet demonstrates how to define a state object for a LangGraph agent that inherits from `CopilotKitState`. This state object is passed between nodes and can be rendered in the UI to provide user feedback, allowing for dynamic UI updates based on agent progress.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_225

LANGUAGE: Python
CODE:
```
# ...
from copilotkit import CopilotKitState # extends MessagesState
# ...

# This is the state of the agent.
# It inherits from the CopilotKitState properties from CopilotKit.
class AgentState(CopilotKitState):
    searches: list[dict]
```

----------------------------------------

TITLE: Show Car Component for Generative UI Display
DESCRIPTION: This TypeScript/React component, `ShowCar`, is responsible for rendering the details of a single car within the Generative UI flow. It displays car attributes like make, model, year, color, and price. The component includes interactive buttons for 'Select' and 'Other options', allowing users to choose a car or request alternative suggestions, thereby facilitating human intervention in the agent's process.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
export function ShowCar({ car, onSelect, onReject, status, className }: ShowCarProps) {
  const carDetails = [
    { label: "Make", value: car.make },
    { label: "Model", value: car.model },
    { label: "Year", value: car.year },
    { label: "Color", value: <ColorDisplay color={car.color} /> },
    { label: "Price", value: `$${car.price?.toLocaleString()}`, bold: true },
  ];

  const cardStyles = cn("min-w-[300px] max-w-sm bg-white rounded-xl overflow-hidden p-0 gap-0", className);
  const informationWrapperStyles = "space-y-6 pt-4 pb-4";
  const acceptButtonStyles = "flex-1 bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-all duration-200 shadow-sm hover:shadow-md";
  const rejectButtonStyles = "flex-1 bg-gray-50 text-gray-700 px-6 py-3 rounded-lg font-medium hover:bg-gray-100 transition-all duration-200";

  return (
    <AnimatedCard status={status} className={cardStyles}>
      <CarImage car={car} />

      <div className={informationWrapperStyles}>
        <div className="space-y-2 px-6">
          <div className="text-2xl font-semibold text-gray-900">
            {car.year} {car.make} {car.model}
          </div>
          {carDetails.map(({ label, value, bold }) => (
            <div key={label} className="flex justify-between items-center py-1">
              <span className="text-gray-500 text-sm">{label}</span>
              <span className={cn("text-gray-900", bold ? "font-semibold text-lg" : "text-sm")}>
                {value}
              </span>
            </div>
          ))}
        </div>

        <div className={cn("px-6 pt-2", status === "complete" ? "hidden" : "animate-fade-in")}>
          <hr className="mb-4 border-gray-100" />
          <div className="flex gap-3">
            {onReject && (
              <button className={rejectButtonStyles} onClick={onReject}>
                Other options
              </button>
            )}
            <button className={acceptButtonStyles} onClick={onSelect}>
              Select
            </button>
          </div>
        </div>
      </div>
    </AnimatedCard>
  );
}
```

----------------------------------------

TITLE: Configure Copilot Runtime for LangGraph Remote Endpoint (Self-Hosted)
DESCRIPTION: This snippet demonstrates how to update the `CopilotRuntime` configuration to include a `remoteEndpoints` property. It uses the `langGraphPlatformEndpoint` function to specify the deployment URL, LangSmith API key, and a list of agents defined in your `langgraph.json` file, enabling your CopilotKit application to interact with the LangGraph agent.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/langgraph-platform-endpoint.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
const runtime = new CopilotRuntime({
    // ...existing configuration
    remoteEndpoints: [ // [!code highlight:9]
        langGraphPlatformEndpoint({
            deploymentUrl: "your-api-url",
            langsmithApiKey: "your-langsmith-api-key",
            // List of all agents which are available under "graphs" list in your langgraph.json file.
            agents: [{ name: 'my_agent', description: 'A helpful LLM agent', assistantId: 'ID-of-the-agent' }]
        }),
    ],
});
```

----------------------------------------

TITLE: useCopilotAction Hook API Reference
DESCRIPTION: API documentation for the `useCopilotAction` hook, detailing its configuration options. It includes properties like name, description, availability, parameters (with type, description, and required status), and the handler function for executing the action.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_36

LANGUAGE: APIDOC
CODE:
```
useCopilotAction(options: object):
  options:
    name: string (required)
      The unique name of the action.
    description: string (required)
      A brief description of what the action does.
    available: "remote" | "local" | "both" (optional, default: "both")
      Specifies where the action is available (e.g., only to the agent).
    parameters: Array<object> (optional)
      An array of parameter definitions for the action.
      Each parameter object:
        name: string (required)
          The name of the parameter.
        type: "string" | "number" | "boolean" | "object" | "array" (required)
          The data type of the parameter.
        description: string (optional)
          A description of the parameter.
        required: boolean (optional, default: false)
          Indicates if the parameter is required.
    handler: Function (required)
      An asynchronous function that executes the action.
      Arguments: An object containing the parameters defined in 'parameters'.
      Example: async ({ name }) => { alert(`Hello, ${name}!`); }
```

----------------------------------------

TITLE: Setup CopilotKit Runtime Endpoint for Next.js Pages Router
DESCRIPTION: TypeScript code for creating a `/api/copilotkit` endpoint in a Next.js Pages Router project, using `CopilotRuntime` to process API requests.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-create-endpoint.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { NextApiRequest, NextApiResponse } from 'next';
import {
  CopilotRuntime,
  {{adapterImport}},
  copilotRuntimeNextJSPagesRouterEndpoint,
} from '@copilotkit/runtime';
{{extraImports}}

{{clientSetup}}
{{adapterSetup}}
```

----------------------------------------

TITLE: Define Copilot Action in React Component (TSX)
DESCRIPTION: This React component snippet demonstrates how to define a custom Copilot action using the `useCopilotAction` hook. It registers an action named 'AskName' with a description, a required 'message' parameter, and a render function to display the message argument.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_9

LANGUAGE: TSX
CODE:
```
                        "use client" // only necessary if you are using Next.js with the App Router.
                        import { useCopilotAction } from "@copilotkit/react-core";

                        export function YourComponent() {
                          useCopilotAction({
                            name: "AskName",
                            description: "Ask the user how they would like to call you",
                            parameters: [
                              {
                                  name: "message",
                                  type: "string",
                                  description: "The message that asks for the name",
                                  required: true
                              },
                            ],
                            render: ({ status, args }) => {
                              const { message } = args;

                              return <div>{ message }</div>;
                            },
                          });

                          return (
                            <>...</>
                          );
                        }
                        
```

----------------------------------------

TITLE: Integrate CopilotKit Provider and Chat UI in Next.js
DESCRIPTION: This TypeScript React snippet demonstrates how to wrap your application with `<CopilotKit>`, import necessary styles and components, and set up a `CopilotChat` interface with a `useCopilotAction` for dynamic interactions.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/quickstart.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
"use client";
import "@copilotkit/react-ui/styles.css";
import { CopilotKit, useCopilotAction } from "@copilotkit/react-core";
import { CopilotChat } from "@copilotkit/react-ui";
import React, { useState } from "react";

const publicApiKey = process.env.NEXT_PUBLIC_COPILOT_API_KEY || "";
/**
 * AgentName refers to the Crew Flow Agent you have saved via CLI during setup.
 * It is used to identify the agent you want to use for the chat.
 */
const agentName =
  process.env.NEXT_PUBLIC_COPILOTKIT_AGENT_NAME || "DefaultAgent";

// Main Chat Component: Handles chat interface and background customization
const Chat = () => {
  const [background, setBackground] = useState(
    "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
  );

  // Action: Allow AI to change background color dynamically
  useCopilotAction({
    name: "change_background",
```

----------------------------------------

TITLE: Access and Utilize Frontend Actions in Agent Logic (Python)
DESCRIPTION: This snippet demonstrates how an agent can access and invoke frontend actions from its state. It shows retrieving actions from the `copilotkit` property and binding them as tools to a language model, making them available for the agent's workflow and decision-making.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_39

LANGUAGE: Python
CODE:
```
async def agent_node(state: YourAgentState, config: RunnableConfig):
    # Access the actions from the copilotkit property

    actions = state.get("copilotkit", {}).get("actions", [])
    model = ChatOpenAI(model="gpt-4o").bind_tools(actions)

    # ...
```

----------------------------------------

TITLE: Invoking Frontend Actions via Agent Tools (Python)
DESCRIPTION: This Python snippet demonstrates how an agent can invoke frontend actions by passing them as tools to a language model completion. The actions are accessed through self.state["copilotkit"]["actions"], allowing the agent to programmatically trigger UI interactions defined in the frontend.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/frontend-actions.mdx#_snippet_2

LANGUAGE: python
CODE:
```
async def agent(self):
    response = await copilotkit_stream(
        completion(
            model="openai/gpt-4o",
            messages=[
                {"role": "system", "content": prompt},
                *self.state.get("messages", [])
            ],
            tools=self.state["copilotkit"]["actions"],
            tool_choice="required",
            stream=True
        )
    )

    # ...
```

----------------------------------------

TITLE: Define a Frontend Action with useCopilotAction Hook
DESCRIPTION: This snippet demonstrates how to define a frontend action using the `useCopilotAction` hook in a React component. It specifies the action's name, description, availability, required parameters, and an asynchronous handler function that displays an alert to the user.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_35

LANGUAGE: TypeScript
CODE:
```
import { useCopilotAction } from "@copilotkit/react-core"

export function Page() {
  // ...


  useCopilotAction({
    name: "sayHello",
    description: "Say hello to the user",
    available: "remote", // optional, makes it so the action is *only* available to the agent
    parameters: [
      {
        name: "name",
        type: "string",
        description: "The name of the user to say hello to",
        required: true,
      },
    ],
    handler: async ({ name }) => {
      alert(`Hello, ${name}!`);
    },
  });

  // ...
}
```

----------------------------------------

TITLE: React Component for Managing AI Crew Feedback
DESCRIPTION: This React component displays the status and output of an AI crew's task. It allows users to provide feedback (Approve/Reject) which is then forwarded to the AI agent. The component dynamically renders based on the crew's status (complete, inProgress, executing) and provides options to show/hide detailed task output.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/crew-quickstart.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
  feedback: CrewsFeedback;
  respond?: (input: string) => void;
  status: CrewsResponseStatus;
}) {
  const [isExpanded, setIsExpanded] = useState(true);
  const [userResponse, setUserResponse] = useState<string | null>(null);

  if (status === "complete") {
    return (
      <div style={{ marginTop: 8, textAlign: "right" }}>
        {userResponse || "Feedback submitted."}
      </div>
    );
  }

  if (status === "inProgress" || status === "executing") {
    return (
      <div style={{ marginTop: 8 }}>
        {isExpanded && (
          <div
            style={{
              border: "1px solid #ddd",
              padding: "8px",
              marginBottom: "8px",
            }}
          >
            {feedback.task_output}
          </div>
        )}
        <div style={{ textAlign: "right" }}>
          <button
            style={{ marginRight: 8 }}
            onClick={() => setIsExpanded(!isExpanded)}
          >
            {isExpanded ? "Hide" : "Show"} Feedback
          </button>
          <button
            style={{
              marginRight: 8,
              backgroundColor: "#222222",
              border: "none",
              padding: "8px 16px",
              color: "white",
              cursor: "pointer",
              borderRadius: "4px",
            }}
            onClick={() => {
              setUserResponse("Approved");
              /**
               * This string is arbitrary. It can be any serializable input that will be forwarded to your Crew as feedback.
               */
              respond?.("Approve");
            }}
          >
            Approve
          </button>
          <button
            style={{
              backgroundColor: "#222222",
              border: "none",
              padding: "8px 16px",
              color: "white",
              cursor: "pointer",
              borderRadius: "4px",
            }}
            onClick={() => {
              setUserResponse("Rejected");
              /**
               * This string is arbitrary. It can be any serializable input that will be forwarded to your Crew as feedback.
               */
              respond?.("Reject");
            }}
          >
            Reject
          </button>
        </div>
      </div>
    );
  }

  return null;
}
```

----------------------------------------

TITLE: Emit Messages During Long-Running CoAgent Tasks
DESCRIPTION: This snippet shows how to use the `copilotkit_emit_message` function to make users aware of progress during long-running tasks. By default, LangGraph only emits messages on node transitions, but CopilotKit allows for real-time message emission.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/concepts/message-management.mdx#_snippet_1

LANGUAGE: python
CODE:
```
async def ask_name_node(state: GreetAgentState, config: RunnableConfig):
    """
    Ask the user for their name.
    """

    content = "Hey, what is your name? 🙂"
 
    await copilotkit_emit_message(config, content)

    # something long running here...
 
    return {
        "messages": AIMessage(content=content),
    }
```

----------------------------------------

TITLE: Integrate CopilotSidebar Component (Cloud Hosted)
DESCRIPTION: This snippet demonstrates how to integrate the CopilotSidebar component into a Next.js application using a cloud-hosted CopilotKit setup. It shows importing the component and its styles, then wrapping the application with CopilotKit and configuring CopilotSidebar with labels and a public API key.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-3-setup-copilotkit.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
"use client";

import { TasksList } from "@/components/TasksList";
import { TasksProvider } from "@/lib/hooks/use-tasks";
import { CopilotKit } from "@copilotkit/react-core";
import { CopilotSidebar } from "@copilotkit/react-ui"; // [!code ++]
import "@copilotkit/react-ui/styles.css"; // [!code ++]

export default function Home() {
  return (
    <CopilotKit
      publicApiKey={process.env.NEXT_PUBLIC_CPK_PUBLIC_API_KEY}
    >
      /* [!code ++:9] */
      <CopilotSidebar
        defaultOpen={true}
        clickOutsideToClose={false}
        labels={{
          title: "Travel Planner",
          initial: "Hi! 👋 I'm here to plan your trips. I can help you manage your trips, add places to them, or just generally work with you to plan a new one.",
        }}
      />
      <TooltipProvider>
        <TripsProvider>
          <main className="h-screen w-screen">
            <MapCanvas />
          </main>
        </TripsProvider>
      </TooltipProvider>
    </CopilotKit>
  );
}
```

----------------------------------------

TITLE: Emit Messages for Long-Running Tasks with CopilotKit
DESCRIPTION: This example illustrates how to use the `copilotkit_emit_message` function to send real-time updates to the user during a long-running asynchronous task. This ensures the user remains informed about the progress, enhancing the user experience by providing immediate feedback before the task fully completes.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/concepts/message-management.mdx#_snippet_1

LANGUAGE: python
CODE:
```
@listen("route_to_ask_name")
async def ask_name():
    """
    Ask the user for their name.
    """

    content = "Hey, what is your name? 🙂"

    await copilotkit_emit_message(content)

    # something long running here...

    self.state["messages"].append({"role": "assistant", "content": content, "id": str(uuid.uuid4())})
```

----------------------------------------

TITLE: Add Basic Instructions to Copilot with useCopilotAdditionalInstructions
DESCRIPTION: Demonstrates the most basic usage of `useCopilotAdditionalInstructions`, accepting a single string argument for instructions to the Copilot. These instructions will always be active.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotAdditionalInstructions.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCopilotAdditionalInstructions } from "@copilotkit/react-core";

export function MyComponent() {
  useCopilotAdditionalInstructions({
    instructions: "Do not answer questions about the weather.",
  });
}
```

----------------------------------------

TITLE: Stream Tool Calls as State to CopilotKit with Python
DESCRIPTION: This function allows you to emit a tool call as streaming CrewAI state to CopilotKit. You can specify the destination key in the state, the tool name, and optionally the tool argument. If no argument name is provided, all arguments are emitted under the specified state key.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/CrewAI.mdx#_snippet_0

LANGUAGE: python
CODE:
```
from copilotkit.crewai import copilotkit_predict_state

await copilotkit_predict_state(
    {
        "steps": {
            "tool_name": "SearchTool",
            "tool_argument": "steps",
        },
    }
)
```

----------------------------------------

TITLE: Configuring Predictive State Updates for Tool Calls
DESCRIPTION: This snippet illustrates how to configure CopilotKit to automatically emit intermediate state updates based on specific tool calls. It shows how to use `copilotkit_customize_config` to map a tool's invocation (e.g., `step_progress_tool`) to an update of a state key (e.g., `observed_steps`), enabling predictive state communication for long-running operations. Examples are provided for Python and TypeScript.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/predictive-state-updates.mdx#_snippet_2

LANGUAGE: Python
CODE:
```
from copilotkit.langgraph import copilotkit_customize_config
from copilotkit import CopilotKitState
from langgraph.types import Command
from langgraph.graph import END
from langchain.tools import tool
from langchain_openai import ChatOpenAI
from langchain_core.messages import SystemMessage, AIMessage
from langchain_core.runnables import RunnableConfig

# Define a step progress tool for the llm to report the steps
@tool
def step_progress_tool(steps: list[str])
    """Reads and reports steps"""

async def frontend_actions_node(state: AgentState, config: RunnableConfig):
    # Configure CopilotKit to treat step progress tool calls as predictive of the final state
    config = copilotkit_customize_config(
        config,
        emit_intermediate_state=[
            {
                "state_key": "observed_steps",
                "tool": "step_progress_tool",
                "tool_argument": "steps"
            },
        ]
    )

    system_message = SystemMessage(
        content=f"You are a task performer. Pretend doing tasks you are given, report the steps using step_progress_tool."
    )

    # Provide the actions to the LLM
    model = ChatOpenAI(model="gpt-4").bind_tools(
        [
            *state["copilotkit"]["actions"],
            step_progress_tool
            # your other tools here
        ],
    )

    # Call the model with CopilotKit's modified config
    response = await model.ainvoke([
        system_message,
        *state["messages"],
    ], config)

    # Set the steps in state so they are persisted and communicated to the frontend
    if isinstance(response, AIMessage) and response.tool_calls and response.tool_calls[0].get("name") == 'step_progress_tool':
        return Command(
            goto=END,
            update={
                "messages": response,
                "observed_steps": response.tool_calls[0].get("args", None).get('steps')
            }
        )

    return Command(goto=END, update={"messages": response})
```

LANGUAGE: TypeScript
CODE:
```
import { copilotkitCustomizeConfig } from '@copilotkit/sdk-js/langgraph';

async function frontendActionsNode(state: AgentState, config: RunnableConfig): Promise<AgentState> {
    const modifiedConfig = copilotkitCustomizeConfig(config, {
        emitIntermediateState: [
        {
            stateKey: "observed_steps",
            tool: "StepProgressTool",
            toolArgument: "steps",
        },
        ],
    });

    const stepProgress = tool(
        async (args) => args,
        {
            name: "StepProgressTool",
```

----------------------------------------

TITLE: Render Custom UI Component with useCopilotAction
DESCRIPTION: `useCopilotAction` can be used with a `render` function and without a `handler` to display information or UI elements within the chat. This example demonstrates how to render a calendar meeting card.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/generative-ui.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
"use client" // only necessary if you are using Next.js with the App Router. 
import { useCopilotAction } from "@copilotkit/react-core"; 

export function YourComponent() {
  useCopilotAction({
    name: "showCalendarMeeting",
    description: "Displays calendar meeting information",
    parameters: [
      {
        name: "date",
        type: "string",
        description: "Meeting date (YYYY-MM-DD)",
        required: true
      },
      {
        name: "time",
        type: "string",
        description: "Meeting time (HH:mm)",
        required: true
      },
      {
        name: "meetingName",
        type: "string",
        description: "Name of the meeting",
        required: false
      }
    ],
    render: ({ status, args }) => {
      const { date, time, meetingName } = args;

      if (status === 'inProgress') {
        return <LoadingView />; // Your own component for loading state
      } else {
        const meetingProps: CalendarMeetingCardProps = {
          date: date,
          time,
          meetingName
        };
        return <CalendarMeetingCardComponent {...meetingProps} />;
      }
    }
  });

  return (
    <>...</>
  );
}
```

----------------------------------------

TITLE: Load Existing Conversation Thread in React
DESCRIPTION: Demonstrates how to initialize CopilotKit with a predefined `threadId` to load an existing conversation session, ensuring continuity across user interactions.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/persistence/loading-message-history.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { CopilotKit } from "@copilotkit/react-core";

<CopilotKit threadId="37aa68d0-d15b-45ae-afc1-0ba6c3e11353">
  <YourApp />
</CopilotKit>;
```

----------------------------------------

TITLE: Conditionally Enable Instructions for Copilot with useCopilotAdditionalInstructions
DESCRIPTION: Shows how to conditionally apply instructions to the Copilot based on application state using the `available` property of `useCopilotAdditionalInstructions`. Instructions are only active when 'available' is 'enabled'.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotAdditionalInstructions.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { useCopilotAdditionalInstructions } from "@copilotkit/react-core";

export function MyComponent() {
  const [showInstructions, setShowInstructions] = useState(false);

  useCopilotAdditionalInstructions({
    available: showInstructions ? "enabled" : "disabled",
    instructions: "Do not answer questions about the weather.",
  });
}
```

----------------------------------------

TITLE: Visualize MCP Tool Calls (TSX)
DESCRIPTION: Implement a component using `useCopilotAction` with the "*" name to catch and render all tool calls made by the copilot, allowing visualization of their status and results.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/model-context-protocol.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
"use client";

import {
  useCopilotAction,
  CatchAllActionRenderProps,
} from "@copilotkit/react-core";
import McpToolCall from "./McpToolCall";

export function ToolRenderer() {
  useCopilotAction({
    /**
     * The asterisk (*) matches all tool calls
     */
    name: "*",
    render: ({ name, status, args, result }: CatchAllActionRenderProps<[]>) => (
      <McpToolCall status={status} name={name} args={args} result={result} />
    ),
  });
  return null;
}
```

----------------------------------------

TITLE: Rendering Custom UI for LangGraph Interrupts (React/TSX)
DESCRIPTION: Demonstrates how to use the `render` property of `useLangGraphInterrupt` to display specific React components (`AskComponent`, `ApproveComponent`) when different interrupt events (`question`, `approval`) occur. The `render` function receives the event data and a `resolve` function to handle user interaction.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_18

LANGUAGE: tsx
CODE:
```
useLangGraphInterrupt({
    enabled: ({ eventValue }) => eventValue.type === 'question',
    render: ({ event, resolve }) => (
        <AskComponent question={event.value.content} onAnswer={answer => resolve(answer)} />
    )
});

useLangGraphInterrupt({
    enabled: ({ eventValue }) => eventValue.type === 'approval',
    render: ({ event, resolve }) => (
        <ApproveComponent content={event.value.content} onAnswer={answer => resolve(answer)} />
    )
});

// ...
```

----------------------------------------

TITLE: Interrupting Agent Flow to Ask Name (Python)
DESCRIPTION: This Python snippet shows how to use `copilotkit_interrupt` within an agent's node to pause execution, prompt the user for input (the agent's name), update the agent's state with the received answer and messages, and then continue the conversation with the agent aware of its name. It requires a pre-defined 'AskName' action.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_11

LANGUAGE: Python
CODE:
```
answer, messages = copilotkit_interrupt(
 action='AskName', # The action name you defined in an existing useCopilotAction hook
 args={ "message": "Before we start, what would you like to call me?" } # The arguments to pass when the tool is called.
)
state["agent_name"] = answer
state["messages"] = [*state["messages"], *messages]

# Tell the agent its name
system_message = SystemMessage(
 content=f"You are a helpful assistant named {state.get('agent_name')}..."
)

response = ChatOpenAI(model="gpt-4o").invoke(
 [system_message, *state["messages"]],
 config
)

return {
 **state,
 # messages receives from the interrupt are not automatically saved to state, don't forget to add them!
 "messages": [*state["messages"], response],
}
```

----------------------------------------

TITLE: Implementing User Feedback with useCopilotAction Hook
DESCRIPTION: This code utilizes the `useCopilotAction` hook to define an AI action named `crew_requesting_feedback`. When this action is triggered by the AI, the `renderAndWaitForResponse` function is invoked, rendering a `CrewHumanFeedbackRenderer` component. This component is responsible for displaying the AI's feedback request (`args`) to the user and providing a mechanism (`respond`) for the user to provide input back to the AI.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/crew-quickstart.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
useCopilotAction({
  name: "crew_requesting_feedback",
  description: "Request feedback from the user",
  renderAndWaitForResponse(props) {
    const { status, args, respond } = props;
    return (
      <CrewHumanFeedbackRenderer
        feedback={args as unknown as CrewsFeedback}
        respond={respond}
        status={status as CrewsResponseStatus}
      />
    );
  },
});
```

----------------------------------------

TITLE: CopilotKit: Render Custom UI Components with useCopilotAction
DESCRIPTION: Learn how to embed custom UI components within the chat window using `useCopilotAction`. This hook allows the LLM to render your custom component via its `render` property, enabling dynamic UI display based on LLM interactions. The example demonstrates rendering a calendar meeting card, showing how to handle different action statuses like 'inProgress'.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_224

LANGUAGE: TypeScript
CODE:
```
"use client" // only necessary if you are using Next.js with the App Router.
import { useCopilotAction } from "@copilotkit/react-core";

export function YourComponent() {
  useCopilotAction({
    name: "showCalendarMeeting",
    description: "Displays calendar meeting information",
    parameters: [
      {
        name: "date",
        type: "string",
        description: "Meeting date (YYYY-MM-DD)",
        required: true
      },
      {
        name: "time",
        type: "string",
        description: "Meeting time (HH:mm)",
        required: true
      },
      {
        name: "meetingName",
        type: "string",
        description: "Name of the meeting",
        required: false
      }
    ],

    render: ({ status, args }) => {
      const { date, time, meetingName } = args;

      if (status === 'inProgress') {
        return <LoadingView />; // Your own component for loading state
      } else {
        const meetingProps: CalendarMeetingCardProps = {
          date: date,
          time,
          meetingName
        };
        return <CalendarMeetingCardComponent {...meetingProps} />;
      }
    }
  });

  return (
    <>...</>
  );
}
```

----------------------------------------

TITLE: Initializing CopilotKit in Agent Lock Mode (TSX)
DESCRIPTION: This snippet shows how to configure the `CopilotKit` provider for Agent Lock Mode. In this mode, CopilotKit is exclusively configured to work with a specific agent, identified by the `agent` prop. All requests will stay within the workflow graph of the specified agent, providing precise control over the workflow.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/multi-agent-flows.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
<CopilotKit runtimeUrl="<copilot-runtime-url>" agent="<the-name-of-the-agent>">
  {/* Your application components */}
</CopilotKit>
```

----------------------------------------

TITLE: React: Programmatically Set Chat Instructions with useCopilotContext
DESCRIPTION: Demonstrates how to dynamically set AI chat instructions using the `setChatInstructions` method from `useCopilotContext`. This approach is suitable for scenarios where instructions need to be updated based on user interactions or application state, providing fine-grained control over AI behavior.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-ai-assistant-behavior.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { useEffect } from 'react';
import { useCopilotContext } from "@copilotkit/react-core";

const Home: React.FC = () => {
  const { setChatInstructions } = useCopilotContext();

  useEffect(() => {
    setChatInstructions("You are assisting the user as best as you can. Answer in the best way possible given the data you have.");
  }, [setChatInstructions]);

  return <>{/* Your components */}</>;
};
```

----------------------------------------

TITLE: Change Thread ID using useCopilotContext Hook
DESCRIPTION: Shows how to access the current `threadId` and a `setThreadId` function from the `useCopilotContext` hook. This allows programmatic control over the active thread, enabling features like changing threads based on user actions or application logic.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/persistence/loading-message-history.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { useCopilotContext } from "@copilotkit/react-core";

const ChangeThreadButton = () => {
  const { threadId, setThreadId } = useCopilotContext(); 
  return (
    <Button onClick={() => setThreadId("d73c22f3-1f8e-4a93-99db-5c986068d64f")}> 
      Change Thread
    </Button>
  )
}
```

----------------------------------------

TITLE: Wrap Application with CopilotKit Provider
DESCRIPTION: Integrates the `CopilotKit` provider into the `RootLayout` of the Next.js application. It imports necessary components and wraps the application's children, passing the public API key from environment variables. This enables core CopilotKit functionality throughout the app.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-3-setup-copilotkit.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
"use client";

// ...
import { CopilotKit } from "@copilotkit/react-core"; // [!code ++]
import "@copilotkit/react-ui/styles.css"; // [!code ++]
// ...

export default function RootLayout({ children }: Readonly<{ children: React.ReactNode }>) {
    return (
      <html lang="en" className="h-full">
        <body className={`${lato.variable} ${noto.className} antialiased h-full`}>
          // [!code ++:4]
          <CopilotKit
            publicApiKey={process.env.NEXT_PUBLIC_CPK_PUBLIC_API_KEY}
          >
            <TooltipProvider>
              <ResearchProvider>
                {children}
              </ResearchProvider>
            </TooltipProvider>
          </CopilotKit> // [!code ++]
        </body>
      </html>
    );
}
```

----------------------------------------

TITLE: Specify 'use client' Directive in Next.js App Router
DESCRIPTION: This snippet demonstrates how to add the 'use client' directive at the very top of a file in a Next.js App Router project. This directive is crucial for marking components or files that utilize client-side React hooks such as `useState` and `useEffect`, ensuring they are correctly rendered and hydrated on the client-side.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/use-client-callout.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
"use client"
```

----------------------------------------

TITLE: Client Directive for CopilotKit Hooks in Next.js App Router
DESCRIPTION: This snippet demonstrates the necessary `'use client'` directive for components that utilize client-side React hooks, such as `useCopilotChatSuggestions`, when working with the Next.js App Router. This directive ensures the component is rendered on the client side, enabling the use of browser-specific APIs and hooks.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_46

LANGUAGE: TypeScript
CODE:
```
"use client"
```

----------------------------------------

TITLE: Render Agent State In-Chat with useCoAgentStateRender
DESCRIPTION: Utilizes the `useCoAgentStateRender` hook from `@copilotkit/react-core` to display the real-time state of an AI agent directly within the chat interface. It defines the agent's state type and provides a render function to visualize search queries and their completion status.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/generative-ui/agentic.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
// ...
import { useCoAgentStateRender } from "@copilotkit/react-core";
// ...

// Define the state of the agent, should match the state of the agent in your LangGraph.
type AgentState = {
  searches: {
    query: string;
    done: boolean;
  }[];
};

function YourMainContent() {
  // ... 

  // styles omitted for brevity
  useCoAgentStateRender<AgentState>({
    name: "sample_agent", // the name the agent is served as
    render: ({ state }) => (
      <div>
        {state.searches?.map((search, index) => (
          <div key={index}>
            {search.done ? "✅" : "❌"} {search.query}{search.done ? "" : "..."}
          </div>
        ))}
      </div>
    ),
  });

  // ...

  return <div>...</div>;
}
```

----------------------------------------

TITLE: Define Agent State for CopilotKit
DESCRIPTION: This snippet defines the structure of the agent's state using `CopilotKitState` in Python and `Annotation.Root` with `CopilotKitStateAnnotation` in TypeScript. It shows how to declare a `language` property and how a `chat_node` function would interact with and return this state, making it available for subsequent nodes and the frontend.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/in-app-agent-read.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
from copilotkit import CopilotKitState
from typing import Literal

class AgentState(CopilotKitState):
    language: Literal["english", "spanish"] = "spanish"

def chat_node(state: AgentState, config: RunnableConfig):
  # If language is not defined, set a value.
  # this is because a default value in a state class is not read on runtime
  language = state.get("language", "spanish")

  # ... add the rest of the node implementation and use the language variable

  return {
    # ... add the rest of state to return
    # return the language to make it available for the next nodes & frontend to read
    "language": language
  }
```

LANGUAGE: TypeScript
CODE:
```
import { Annotation } from "@langchain/langgraph";
import { CopilotKitStateAnnotation } from "@copilotkit/sdk-js/langgraph";

export const AgentStateAnnotation = Annotation.Root({
    language: Annotation<"english" | "spanish">,
    ...CopilotKitStateAnnotation.spec,
});
export type AgentState = typeof AgentStateAnnotation.State;

async function chat_node(state: AgentState, config: RunnableConfig) {
  // If language is not defined, use a default value.
  const language = state.language ?? 'spanish'

  // ... add the rest of the node implementation and use the language variable

  return {
    // ... add the rest of state to return
    // return the language to make it available for the next nodes & frontend to read
    language
  }
}
```

----------------------------------------

TITLE: Simulating Agent State Updates in CrewAI Flow (Python)
DESCRIPTION: This code shows how to simulate and emit state updates within a CrewAI Flow agent. It initializes a `searches` list within `AgentState` and then iteratively updates the `done` status of each search item, emitting the updated state using `copilotkit_emit_state`. This allows the UI to react to real-time agent progress.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/generative-ui/agentic.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
from crewai.flow.flow import start
from litellm import completion
from copilotkit.crewai import copilotkit_stream, CopilotKitState, copilotkit_emit_state
import asyncio
from typing import TypedDict

class Searches(TypedDict):
    query: str
    done: bool

class AgentState(CopilotKitState):
    searches: list[Searches] = [] # [!code highlight]

@start
async def chat(self):
    self.state.searches = [
        {"query": "Initial research", "done": False},
        {"query": "Retrieving sources", "done": False},
        {"query": "Forming an answer", "done": False},
    ]
    await copilotkit_emit_state(self.state)

    # Simulate state updates # [!code highlight:5]
    for search in self.state.searches:
        await asyncio.sleep(1)
        search["done"] = True
        await copilotkit_emit_state(self.state)

    # Run the model to generate a response
    response = await copilotkit_stream(
        completion(
            model="openai/gpt-4o",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                *self.state.get("messages", [])
            ],
            stream=True
        )
    )
```

----------------------------------------

TITLE: Simulate LangGraph Agent State Updates and Emit
DESCRIPTION: This code illustrates how to simulate dynamic state updates within a LangGraph agent and emit these changes using `copilotkit_emit_state` (Python) or `copilotkitEmitState` (TypeScript). It shows an example of updating a 'searches' list and notifying CopilotKit of each step's completion, allowing the application to reflect the agent's progress in real-time.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/generative-ui/agentic.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
import asyncio
from typing import TypedDict
from langchain_core.runnables import RunnableConfig
from langchain_openai import ChatOpenAI
from langchain_core.messages import SystemMessage
from copilotkit import CopilotKitState
from copilotkit.langgraph import copilotkit_emit_state

class Searches(TypedDict):
    query: str
    done: bool

class AgentState(CopilotKitState):
    searches: list[Searches] = []

async def chat_node(state: AgentState, config: RunnableConfig):
    state["searches"] = [
        {"query": "Initial research", "done": False},
        {"query": "Retrieving sources", "done": False},
        {"query": "Forming an answer", "done": False},
    ]
    await copilotkit_emit_state(config, state)

    # Simulate state updates
    for search in state["searches"]:
        await asyncio.sleep(1)
        search["done"] = True
        await copilotkit_emit_state(config, state)

    # Run the model to generate a response
    response = await ChatOpenAI(model="gpt-4o").ainvoke([
        SystemMessage(content="You are a helpful assistant."),
        *state["messages"],
    ], config)
```

LANGUAGE: TypeScript
CODE:
```
import { RunnableConfig } from "@langchain/core/runnables";
import { ChatOpenAI } from "@langchain/openai";
import { Annotation } from "@langchain/langgraph";
import { SystemMessage } from "@langchain/core/messages";
import { copilotkitEmitState, CopilotKitStateAnnotation } from "@copilotkit/sdk-js/langgraph";

type Search = {
  query: string;
  done: boolean;
}

export const AgentStateAnnotation = Annotation.Root({
  searches: Annotation<Search[]>,
  ...CopilotKitStateAnnotation.spec,
});

async function chat_node(state: AgentState, config: RunnableConfig) {
  state.searches = [
    { query: "Initial research", done: false },
    { query: "Retrieving sources", done: false },
    { query: "Forming an answer", done: false },
  ];
  await copilotkitEmitState(config, state);

  // Simulate state updates
  for (const search of state.searches) {
    await new Promise(resolve => setTimeout(resolve, 1000));
    search.done = true;
    await copilotkitEmitState(config, state);
  }
```

----------------------------------------

TITLE: Example Usage of copilotkitEmitState
DESCRIPTION: This example shows how to use `copilotkitEmitState` to periodically update CopilotKit with the current progress within a long-running operation inside a node.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_140

LANGUAGE: JavaScript
CODE:
```
import { copilotkitEmitState } from "@copilotkit/sdk-js";

for (let i = 0; i < 10; i++) {
  await someLongRunningOperation(i);
  await copilotkitEmitState(config, { progress: i });
}
```

----------------------------------------

TITLE: Add Frontend Data to Copilot using useCopilotReadable Hook
DESCRIPTION: This snippet demonstrates how to use the `useCopilotReadable` hook from `@copilotkit/react-core` to make frontend data, such as a list of colleagues, available as context to the Copilot. It shows state management with `useState` and how to pass the data with a description to the hook.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_186

LANGUAGE: tsx
CODE:
```
"use client" // only necessary if you are using Next.js with the App Router.
import { useCopilotReadable } from "@copilotkit/react-core";
import { useState } from 'react';

export function YourComponent() {
  // Create colleagues state with some sample data
  const [colleagues, setColleagues] = useState([
    { id: 1, name: "John Doe", role: "Developer" },\
    { id: 2, name: "Jane Smith", role: "Designer" },\
    { id: 3, name: "Bob Wilson", role: "Product Manager" }\
  ]);

  // Define Copilot readable state

  useCopilotReadable({
    description: "The current user's colleagues",
    value: colleagues,
  });
  return (
    // Your custom UI component
    <>...</>
  );
}
```

----------------------------------------

TITLE: Serve CopilotKit SDK with FastAPI Integration
DESCRIPTION: This code demonstrates how to integrate and serve the `CopilotKitRemoteEndpoint` using FastAPI. It utilizes `add_fastapi_endpoint` to expose the SDK at a specified path and includes a `uvicorn` setup for running the FastAPI application.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_129

LANGUAGE: Python
CODE:
```
from copilotkit.integrations.fastapi import add_fastapi_endpoint
from fastapi import FastAPI

app = FastAPI()
sdk = CopilotKitRemoteEndpoint(...)
add_fastapi_endpoint(app, sdk, "/copilotkit")

def main():
    uvicorn.run(
        "your_package:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
    )
```

----------------------------------------

TITLE: Install CopilotKit with CrewAI Support
DESCRIPTION: Installs the CopilotKit Python SDK including optional dependencies for CrewAI integration, enabling advanced multi-agent workflows.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/sdk-python/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
pip install "copilotkit[crewai]"
```

----------------------------------------

TITLE: Access Realtime Agent State with useCoAgent Hook in React
DESCRIPTION: This React (TSX) example demonstrates how to integrate the `useCoAgent` hook from `@copilotkit/react-core` into your application. It allows you to subscribe to and reactively display the agent's current state, defining the expected state type and optionally providing an initial state for immediate display.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/in-app-agent-read.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { useCoAgent } from "@copilotkit/react-core"; // [!code highlight]

// Define the agent state type, should match the actual state of your agent
type AgentState = {
  language: "english" | "spanish";
}

function YourMainContent() {
  const { state } = useCoAgent<AgentState>({ // [!code highlight:4]
    name: "sample_agent",
    initialState: { language: "spanish" }  // optionally provide an initial state
  });

  // ...

  return (
    // style excluded for brevity
    <div>
      <h1>Your main content</h1>
      <p>Language: {state.language}</p> // [!code highlight]
    </div>
  );
}
```

----------------------------------------

TITLE: Accessing Restored Agent State with useCoAgent
DESCRIPTION: Illustrates how to access the restored state of a specific agent (e.g., 'research_agent') using the `useCoAgent` hook. The agent's state is automatically loaded when a `threadId` is provided to the `CopilotKit` component, ensuring continuity across sessions.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/persistence/loading-agent-state.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
const { state } = useCoAgent({name: "research_agent"});

// state will now be the state of research_agent in the thread id given above
```

----------------------------------------

TITLE: Set up Node.js Server for Copilot Runtime Endpoint
DESCRIPTION: This snippet demonstrates how to initialize a basic Node.js HTTP server that listens on port 4000. It logs the URL where the Copilot Runtime endpoint will be accessible, typically `http://localhost:4000/copilotkit`. This server setup is a prerequisite for integrating CopilotKit's backend functionalities.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-starter.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
server.listen(4000, () => {
  console.log('Listening at http://localhost:4000/copilotkit');
});
```

----------------------------------------

TITLE: Configure CopilotRuntime with TypeScript Backend Actions
DESCRIPTION: This code snippet demonstrates how to modify the `CopilotRuntime` instance to include TypeScript/Node.js backend actions. The `actions` property is configured as an array generator, which receives `properties` and `url` as input, allowing for dynamic exposure of actions based on the frontend context. An example action, `fetchNameForUserId`, is defined with parameters and an asynchronous handler function to process requests.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_229

LANGUAGE: TypeScript
CODE:
```
const runtime = new CopilotRuntime({
  // ... existing configuration
  actions: ({properties, url}) => {
    // Note that actions returns not an array, but an array **generator**.
    // You can use the input parameters to the actions generator to expose different backend actions to the Copilot at different times:
    // `url` is the current URL on the frontend application.
    // `properties` contains custom properties you can pass from the frontend application.

    return [
      {
        name: "fetchNameForUserId",
        description: "Fetches user name from the database for a given ID.",
        parameters: [
          {
            name: "userId",
            type: "string",
            description: "The ID of the user to fetch data for.",
            required: true,
          }
        ],
        handler: async ({userId}: {userId: string}) => {
          // do something with the userId
          // return the user data
          return {
            name: "Darth Doe"
          };
        }
      }
    ]
  }
});

// ... rest of your route definition
```

----------------------------------------

TITLE: Configure Content Moderation Guardrails in CopilotKit React App
DESCRIPTION: This code demonstrates how to configure content moderation guardrails within a React application using the `CopilotKit` component. The `guardrails_c` prop allows specifying `invalidTopics` to block and `validTopics` to explicitly allow, leveraging OpenAI's content moderation to ensure safe AI interactions. This feature requires a `publicApiKey` and is exclusive to CopilotKit Cloud.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/guardrails.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { CopilotKit } from "@copilotkit/react-core";

export default function App() {
  return (
    <CopilotKit
      publicApiKey={process.env.COPILOTKIT_PUBLIC_API_KEY}
      guardrails_c={{
        // Topics to explicitly block
        invalidTopics: ["politics", "explicit-content", "harmful-content"],
        // Topics to explicitly allow
        validTopics: ["business", "technology", "general-assistance"]
      }}
    >
      {/* Your app */}
    </CopilotKit>
  );
}
```

----------------------------------------

TITLE: Configure CopilotKit in Router Mode
DESCRIPTION: This snippet demonstrates how to configure the CopilotKit provider component to operate in Router Mode. Router Mode is the default behavior and requires specifying a `runtimeUrl` prop while omitting the `agent` prop. In this mode, CopilotKit acts as a central hub, dynamically selecting and routing requests between different agents or actions based on the user's input.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_145

LANGUAGE: jsx
CODE:
```
<CopilotKit runtimeUrl="<copilot-runtime-url>">
  {/* Your application components */}
</CopilotKit>
```

----------------------------------------

TITLE: Define Agent State for CrewAI Flows in Python
DESCRIPTION: This Python snippet illustrates how to define the structure of your agent's state for CrewAI Flows, inheriting from `CopilotKitState`. It shows how to declare state variables, such as `language`, with specific literal types, making the state available for updates throughout the flow.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/in-app-agent-read.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
from copilotkit.crewai import CopilotKitState
from typing import Literal

class AgentState(CopilotKitState):
    language: Literal["english", "spanish"] = "english"
```

----------------------------------------

TITLE: Define and Use Step Progress Tool with OpenAI Agent
DESCRIPTION: This snippet defines a `StepProgressTool` using a Zod schema to record task steps. It then initializes a `ChatOpenAI` model, binds the tool, and invokes the model with a system message, returning observed steps from tool calls to track agent progress.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/predictive-state-updates.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
                                    description: "Records progress by updating the steps array",
                                    schema: z.object({
                                        steps: z.array(z.string()),
                                    }),
                                }
                            );

                            const model = new ChatOpenAI({
                                model: "gpt-4o",
                            }).bindTools([stepProgress]);

                            const system_message = new SystemMessage("You are a task performer. Pretend doing tasks you are given, report the steps using StepProgressTool.")
                            const response = await model.invoke([system_message, ...state.messages], modifiedConfig);


                            if (response.tool_calls?.length) {
                                return {
                                    messages: response;
                                    observed_steps: response.tool_calls[0].args.steps,
                                }

                            return { messages: response };
                        }
```

----------------------------------------

TITLE: Defining a Basic Agent State Schema in Python
DESCRIPTION: This snippet defines a simple `AgentState` class using `CopilotKitState` to represent the agent's overall state, including user questions, LLM answers, and internal resources. This state is passed and updated as the agent transitions between nodes in LangGraph.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_214

LANGUAGE: Python
CODE:
```
from copilotkit import CopilotKitState
from typing import Literal

class AgentState(CopilotKitState):
    question: str
    answer: str
    resources: List[str]
```

----------------------------------------

TITLE: Emit Messages for Long-Running Tasks in CopilotKit
DESCRIPTION: This example shows how to use `copilotkit_emit_message` to send real-time updates to the user during long-running tasks within a LangGraph node. By default, LangGraph only emits messages on node transitions, but CopilotKit extends this functionality to provide better user feedback for asynchronous operations.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_275

LANGUAGE: python
CODE:
```
async def ask_name_node(state: GreetAgentState, config: RunnableConfig):
    """
    Ask the user for their name.
    """

    content = "Hey, what is your name? 🙂"

    await copilotkit_emit_message(config, content)

    # something long running here...

    return {
        "messages": AIMessage(content=content),
    }
```

----------------------------------------

TITLE: Customize CopilotChat AI Behavior with Instructions
DESCRIPTION: The `instructions` parameter is the recommended way to customize the AI assistant's behavior in CopilotKit. It allows you to define the assistant's persona and purpose, ensuring compatibility with platform optimizations. This example demonstrates setting a tax preparation assistant persona.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_197

LANGUAGE: typescript
CODE:
```
import { CopilotChat } from "@copilotkit/react-ui";

<CopilotChat
  instructions="You are a helpful assistant specializing in tax preparation. Provide concise and accurate answers to tax-related questions."
  labels={{
    title: "Tax Preparation Assistant",
    initial: "How can I help you with your tax preparation today?",
  }}
/>
```

----------------------------------------

TITLE: Configure CopilotKit Provider in Root Layout
DESCRIPTION: Wraps the entire application with the `CopilotKit` provider, establishing the connection to the AI agent's runtime endpoint. This is essential for making CopilotKit functionalities available throughout the application.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/mastra/quickstart.mdx#_snippet_8

LANGUAGE: TSX
CODE:
```
import { CopilotKit } from "@copilotkit/react-core";
import "@copilotkit/react-ui/styles.css";

const MASTRA_URL = process.env.MASTRA_URL || "http://localhost:4111";

export default function RootLayout({ children }: {children: React.ReactNode}) {
    return (
        <html lang="en">
            <body>
                <CopilotKit runtimeEndpoint={`${MASTRA_URL}/copilotkit`}>
                    {children}
                </CopilotKit>
            </body>
        </html>
    );
}
```

----------------------------------------

TITLE: Inherit CopilotKitState in Agent Definition
DESCRIPTION: Modify your agent's state definition to inherit from `CopilotKitState` (Python) or use `CopilotKitStateAnnotation` (TypeScript). This grants your agent access to the `copilotkit` property, which contains frontend actions.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/frontend-actions.mdx#_snippet_1

LANGUAGE: python
CODE:
```
from copilotkit import CopilotKitState

class YourAgentState(CopilotKitState):
    your_additional_properties: str
```

LANGUAGE: typescript
CODE:
```
import { Annotation } from "@langchain/langgraph";
import { CopilotKitStateAnnotation } from "@copilotkit/sdk-js/langgraph";

export const YourAgentStateAnnotation = Annotation.Root({
    yourAdditionalProperty: Annotation<string>,
    ...CopilotKitStateAnnotation.spec,
});
export type YourAgentState = typeof YourAgentStateAnnotation.State;
```

----------------------------------------

TITLE: Using useCopilotChat for Headless UI (TSX)
DESCRIPTION: Demonstrates how to use the `useCopilotChat` hook to access chat state and functions (`visibleMessages`, `appendMessage`, `reset`, etc.) for building a fully custom, headless chat interface component in React/TypeScript.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/custom-look-and-feel/headless-ui.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCopilotChat } from "@copilotkit/react-core";
import { Role, TextMessage } from "@copilotkit/runtime-client-gql";

export function CustomChatInterface() {
  const {
    visibleMessages,
    appendMessage,
    setMessages,
    deleteMessage,
    reloadMessages,
    stopGeneration,
    isLoading,
  } = useCopilotChat();

  const sendMessage = (content: string) => {
    appendMessage(new TextMessage({ content, role: Role.User }));
  };

  return (
    <div>
      {/* Implement your custom chat UI here */}
    </div>
  );
}
```

----------------------------------------

TITLE: Updating CrewAI Agent State with useCoAgent's setState Hook
DESCRIPTION: The `useCoAgent` hook returns a `setState` function, which allows you to update the agent's state and trigger UI re-renders. This example shows how to use `setState` within a React component to modify the `inputs` of a CrewAI agent, specifically updating a 'topic' field based on user input.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/shared-state/in-app-agent-write.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCoAgent } from "@copilotkit/react-core";

// Define the agent state type, should match the actual state of your agent
type AgentState = {
  language: "english" | "spanish";
}

// Example usage in a pseudo React component
function YourMainContent() {
  const { state, setState } = useCoAgent({
    name: "research_crew",
    initialState: { // optionally provide an initial state
      inputs: {
        topic: "",
        current_year: "2025"
      },
      outputs: "Report will appear here"
    }
  });
  // ...

  return (
    // style excluded for brevity
    <div>
      <label htmlFor="topic">
        Topic
      </label>
      <input
        type="text"
        value={state.inputs.topic}
        onChange={(e) =>
          setState({
            ...state,
            inputs: { ...state.inputs, topic: e.target.value }
          })
        }
      />
    </div>
  );
}
```

----------------------------------------

TITLE: Configure CopilotKit React Provider in Next.js Layout
DESCRIPTION: This React component demonstrates how to wrap your application with the `<CopilotKit>` provider. It's essential for making CopilotKit functionalities available throughout your React application, connecting it to the backend runtime endpoint.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_11

LANGUAGE: TypeScript
CODE:
```
import "./globals.css";
import { ReactNode } from "react";
import { CopilotKit } from "@copilotkit/react-core";

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body>
        {/* Make sure to use the URL you configured in the previous step  */}
        <CopilotKit runtimeUrl="/api/copilotkit">
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Clone CopilotKit Starter Template
DESCRIPTION: Instructions to clone the pre-configured CopilotKit starter template from GitHub and navigate into its directory.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/mastra/quickstart.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/CopilotKit/coagents-starter-mastra
cd coagents-starter-mastra
```

----------------------------------------

TITLE: Connect CopilotKit App to Remote Endpoint (Frontend)
DESCRIPTION: This command uses `npx` to run the CopilotKit development server, allowing a frontend application to connect to a remote backend endpoint. This is typically used during development to proxy requests to your local FastAPI server. Replace `<port_number>` with the appropriate port where your CopilotKit runtime is listening.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_240

LANGUAGE: NPM
CODE:
```
npx copilotkit@latest dev --port <port_number>
```

----------------------------------------

TITLE: Integrate CopilotPopup UI Component in React App
DESCRIPTION: This code snippet shows how to import CopilotKit's UI styles and integrate the `<CopilotPopup>` component into your `page.tsx` file, providing a chat interface with customizable labels.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_155

LANGUAGE: tsx
CODE:
```

import "@copilotkit/react-ui/styles.css";
import { CopilotPopup } from "@copilotkit/react-ui";

export function YourApp() {
  return (
    <main>
      <h1>Your main content</h1>

      <CopilotPopup
        labels={{
            title: "Popup Assistant",
            initial: "Hi! I'm connected to an agent. How can I help?",
        }}
      />
    </main>
  );
}
```

----------------------------------------

TITLE: Creating Reactive UI with useCoAgent State
DESCRIPTION: Shows how to build a reactive user interface that displays and updates the agent's state using `state` and `setState` from the `useCoAgent` hook. It demonstrates a simple counter increment example.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_29

LANGUAGE: typescript
CODE:
```
const { state, setState } = useCoAgent<AgentState>({
  name: "my-agent",
  initialState: {
    count: 0,
  },
});

return (
  <div>
    <p>Count: {state.count}</p>
    <button onClick={() => setState({ count: state.count + 1 })}>Increment</button>
  </div>
);
```

----------------------------------------

TITLE: Integrate LangChainAdapter for CopilotKit Tracing
DESCRIPTION: Demonstrates how to use the `LangChainAdapter` from `@copilotkit/runtime` to enable LangSmith tracing for CopilotKit runs. This TypeScript/TSX example shows configuring a `ChatOpenAI` model, binding tools, and passing `threadId` as `conversation_id` in the model's metadata for comprehensive tracing in a `route.ts` file.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/observability/langsmith.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
const { LangChainAdapter } = await import("@copilotkit/runtime");
const { ChatOpenAI } = await import("@langchain/openai");

async function getLangChainOpenAIAdapter() {
  return new LangChainAdapter({
    chainFn: async ({ messages, tools, threadId }) => {
      const model = new ChatOpenAI({
        modelName: "gpt-4-1106-preview",
      }).bindTools(tools, {
        strict: true,
      });
      return model.stream(messages, {
        tools,
        metadata: { conversation_id: threadId },
      });
    }
  });
}
```

----------------------------------------

TITLE: Configure CopilotRuntime with LangServe Integration in TypeScript
DESCRIPTION: Integrate LangServe functionality into your CopilotKit application by modifying the CopilotRuntime. Add an array of LangServe function sources to the 'langserve' property, specifying the chain URL, name, and description. Input and output types for the chain are automatically fetched from LangServe.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/langserve-backend-actions.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
const runtime = new CopilotRuntime({
  // ... existing configuration
  langserve: [
    {
      chainUrl: "http://my-langserve.chain",
      name: "performResearch",
      description: "Performs research on a given topic.",
    },
  ],
});

// ... rest of your route definition
```

----------------------------------------

TITLE: Setup CopilotKit Provider in React Layout
DESCRIPTION: Demonstrates how to wrap your React application with the <CopilotKit> component, typically in `layout.tsx`, to enable Copilot-aware functionality using a public API key from Copilot Cloud.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_192

LANGUAGE: TypeScript
CODE:
```
import "./globals.css";
import { ReactNode } from "react";
import { CopilotKit } from "@copilotkit/react-core";

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body>
        {/* Use the public api key you got from Copilot Cloud  */}
        <CopilotKit publicApiKey="<your-copilot-cloud-public-api-key>">
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Pairing Frontend Action with Backend Action using useCopilotAction
DESCRIPTION: This React component demonstrates how to define a frontend-only action 'displayUser' that is paired with a backend action 'fetchUser'. The frontend action updates the UI with the user name returned from the backend, ensuring UI implications of backend operations are handled by reflecting the result in the user interface.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/front-backend-action-pairing.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
"use client" // only necessary if you are using Next.js with the App Router.
import { useCopilotAction } from "@copilotkit/react-core"; // [!code highlight]

export function MyComponent() {
const [userName, setUserName] = useState<string>('stranger');

// Define Copilot action
useCopilotAction({
name: "displayUser", // Names of the actions match between Backend and Frontend // [!code highlight]
description: "Display the user name fetched from the backend",
pairedAction: "fetchUser", // Choose which backed action this is paired with // [!code highlight]
available: "frontend", // Optional :mark it as frontend only if the FE and BE action name matches // [!code highlight]
parameters: [
    {
        name: "name",
        type: "string",
        description: "The user name",
    },
        ],
handler: async ({ name }) => {
setUserName(name);
    },
    });

        return (
        <h1>
        hello {userName}
    </ul>
    );
    }
```

----------------------------------------

TITLE: Implement `useCopilotAction` for Human-in-the-Loop Tool Rendering (TypeScript)
DESCRIPTION: This TypeScript code shows how to use the `useCopilotAction` hook within a React component to render specific tool calls (`add_trips`, `update_trips`, `delete_trips`) and pause execution, waiting for user interaction. The `renderAndWait` option integrates custom components (e.g., `AddTrips`, `EditTrips`, `DeleteTrips`) to facilitate human-in-the-loop decision-making before proceeding with the agent's flow.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
// ...
import { AddTrips, EditTrips, DeleteTrips } from "@/components/humanInTheLoop";
import { useCoAgent, useCoAgentStateRender, useCopilotAction } from "@copilotkit/react-core";
// ...

export const TripsProvider = ({ children }: { children: ReactNode }) => {
  // ...

  useCoAgentStateRender<AgentState>({
    name: "travel",
    render: ({ state }) => {
      return <SearchProgress progress={state.search_progress} />
    },
  });

  useCopilotAction({ 
    name: "add_trips",
    description: "Add some trips",
    parameters: [
      {
        name: "trips",
        type: "object[]",
        description: "The trips to add",
        required: true,
      },
    ],
    renderAndWait: AddTrips,
  });

  useCopilotAction({
    name: "update_trips",
    description: "Update some trips",
    parameters: [
      {
        name: "trips",
        type: "object[]",
        description: "The trips to update",
        required: true,
      },
    ],
    renderAndWait: EditTrips,
  });

  useCopilotAction({
    name: "delete_trips",
    description: "Delete some trips",
    parameters: [
      {
        name: "trip_ids",
        type: "string[]",
        description: "The ids of the trips to delete",
        required: true,
      },
    ],
    renderAndWait: (props) => DeleteTrips({ ...props, trips: state.trips }),
  });

  // ...
}
```

----------------------------------------

TITLE: Implement useCopilotAction for User Feedback in React Frontend
DESCRIPTION: Demonstrates how to use the `useCopilotAction` hook within a React component to render an essay draft and provide buttons for user approval or retrial. This action is configured as 'remote' and expects a 'draft' string parameter.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_251

LANGUAGE: TypeScript
CODE:
```
import { useCopilotAction } from "@copilotkit/react-core"
import { Markdown } from "@copilotkit/react-ui"

function YourMainContent() {
  // ...

  useCopilotAction({
    name: "writeEssay",
    available: "remote",
    description: "Writes an essay and takes the draft as an argument.",
    parameters: [\
      { name: "draft", type: "string", description: "The draft of the essay", required: true },\
    ],

    renderAndWaitForResponse: ({ args, respond, status }) => {
      return (
        <div>
          <Markdown content={args.draft || 'Preparing your draft...'} />

          <div className={`flex gap-4 pt-4 ${status !== "executing" ? "hidden" : ""}`}>
            <button
              onClick={() => respond?.("CANCEL")}
              disabled={status !== "executing"}
              className="border p-2 rounded-xl w-full"
            >
              Try Again
            </button>
            <button
              onClick={() => respond?.("SEND")}
              disabled={status !== "executing"}
              className="bg-blue-500 text-white p-2 rounded-xl w-full"
            >
              Approve Draft
            </button>
          </div>
        </div>
      );
    },
  });

  // ...
}
```

----------------------------------------

TITLE: useCopilotAction Hook Parameters
DESCRIPTION: Defines the configuration options for the `useCopilotAction` hook, including properties for the action itself, its handler, and detailed definitions for its input parameters.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_14

LANGUAGE: APIDOC
CODE:
```
useCopilotAction Hook Parameters:
  action: Action (required)
    description: The function made available to the Copilot. See Action.
  name: string (required)
    description: The name of the action.
  handler: (args) => Promise<any> (required)
    description: The handler of the action.
  description: string
    description: A description of the action. This is used to instruct the Copilot on how to use the action.
  available: 'enabled' | 'disabled' | 'remote'
    description: Use this property to control when the action is available to the Copilot. When set to "remote", the action is available only for remote agents.
  followUp: boolean (Default: true)
    description: Whether to report the result of a function call to the LLM which will then provide a follow-up response. Pass false to disable.
  parameters: Parameter[]
    description: The parameters of the action. See Parameter.
    Parameter Definition:
      name: string (required)
        description: The name of the parameter.
      type: "string" | "number" | "boolean" | "object" | "object[]" | "string[]" | "number[]" | "boolean[]" (required)
        description: The type of the argument.
      description: string
        description: A description of the argument. This is used to instruct the Copilot on what this argument is used for.
      enum: string[]
        description: For string arguments, you can provide an array of possible values.
      required: boolean (Default: true)
        description: Whether or not the argument is required. Defaults to true.
      attributes: Parameter[]
        description: If the argument is of a complex type, i.e. object or object[], this field lets you define the attributes of the object.
```

----------------------------------------

TITLE: Configure CopilotKit Provider in Next.js Layout
DESCRIPTION: To enable CopilotKit functionality throughout your application, wrap your root layout with the `CopilotKit` provider. This snippet shows how to import `CopilotKit` and pass the `runtimeUrl` to connect to your backend endpoint.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_183

LANGUAGE: typescript
CODE:
```
import "./globals.css";
import { ReactNode } from "react";
import { CopilotKit } from "@copilotkit/react-core";

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body>
        {/* Make sure to use the URL you configured in the previous step  */}
        <CopilotKit runtimeUrl="/api/copilotkit">
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Handling and Preprocessing LangGraph Interrupts with Handler and Render (React/TSX)
DESCRIPTION: Illustrates the use of both the `handler` and `render` properties in `useLangGraphInterrupt`. The `handler` preprocesses the interrupt event (e.g., checking user authorization) and can resolve the interrupt directly or return data for the `render` function. The `render` function then displays a custom UI based on the result from the handler.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_19

LANGUAGE: tsx
CODE:
```
// We will assume an interrupt event in the following shape
type Department = 'finance' | 'engineering' | 'admin'
interface AuthorizationInterruptEvent {
    type: 'auth',
    accessDepartment: Department,
}

import { useLangGraphInterrupt } from "@copilotkit/react-core";

const YourMainContent = () => {
    const [userEmail, setUserEmail] = useState({ email: 'example@user.com' })
    function getUserByEmail(email: string): { id: string; department: Department } {
        // ... an implementation of user fetching
    }

    // ...
    // styles omitted for brevity
    // [!code highlight:30]
    useLangGraphInterrupt({
        handler: async ({ result, event, resolve }) => {
            const { department } = await getUserByEmail(userEmail)
            if (event.value.accessDepartment === department || department === 'admin') {
                // Following the resolution of the event, we will not proceed to the render method
                resolve({ code: 'AUTH_BY_DEPARTMENT' })
                return;
            }

            return { department, userId }
        },
        render: ({ result, event, resolve }) => (
            <div>
                <h1>Request for {event.value.type}</h1>
                <p>Members from {result.department} department cannot access this information</p>
                <p>You can request access from an administrator to continue.</p>
                <button
                    onClick={() => resolve({ code: 'REQUEST_AUTH', data: { department: result.department, userId: result.userId } })}
                >
                    Request Access
                </button>
                <button
                    onClick={() => resolve({ code: 'CANCEL' })}
                >
                    Cancel
                </button>
            </div>
        )
    });
    // ...

    return <div>{/* ... */}</div>
}
```

----------------------------------------

TITLE: CopilotKit Chat Component Properties Reference
DESCRIPTION: Detailed reference for all configurable properties of the CopilotKit chat component, including their types and descriptions. These properties enable fine-grained control over the chat's functionality, from system message instructions to custom UI rendering and event callbacks.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/CopilotChat.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
instructions: string
  Custom instructions to be added to the system message. Use this property to
  provide additional context or guidance to the language model, influencing
  its responses. These instructions can include specific directions,
  preferences, or criteria that the model should consider when generating
  its output, thereby tailoring the conversation more precisely to the
  user's needs or the application's requirements.
onInProgress: (inProgress: boolean) => void
  A callback that gets called when the in progress state changes.
onSubmitMessage: (message: string) => void | Promise<void>
  A callback that gets called when a new message it submitted.
onStopGeneration: OnStopGeneration
  A custom stop generation function.
onReloadMessages: OnReloadMessages
  A custom reload messages function.
onRegenerate: (messageId: string) => void
  A callback function to regenerate the assistant's response
onCopy: (message: string) => void
  A callback function when the message is copied
onThumbsUp: (message: TextMessage) => void
  A callback function for thumbs up feedback
onThumbsDown: (message: TextMessage) => void
  A callback function for thumbs down feedback
markdownTagRenderers: ComponentsMap
  A list of markdown components to render in assistant message.
  Useful when you want to render custom elements in the message (e.g a reference tag element)
icons: CopilotChatIcons
  Icons can be used to set custom icons for the chat window.
labels: CopilotChatLabels
  Labels can be used to set custom labels for the chat window.
imageUploadsEnabled: boolean
  Enable image upload button (image inputs only supported on some models)
inputFileAccept: string
  The 'accept' attribute for the file input used for image uploads.
  Defaults to "image".
makeSystemMessage: SystemMessageFunction
  A function that takes in context string and instructions and returns
  the system message to include in the chat request.
  Use this to completely override the system message, when providing
  instructions is not enough.
AssistantMessage: React.ComponentType<AssistantMessageProps>
  A custom assistant message component to use instead of the default.
UserMessage: React.ComponentType<UserMessageProps>
  A custom user message component to use instead of the default.
Messages: React.ComponentType<MessagesProps>
  A custom Messages component to use instead of the default.
RenderTextMessage: React.ComponentType<RenderMessageProps>
  A custom RenderTextMessage component to use instead of the default.
RenderActionExecutionMessage: React.ComponentType<RenderMessageProps>
  A custom RenderActionExecutionMessage component to use instead of the default.
RenderAgentStateMessage: React.ComponentType<RenderMessageProps>
  A custom RenderAgentStateMessage component to use instead of the default.
RenderResultMessage: React.ComponentType<RenderMessageProps>
  A custom RenderResultMessage component to use instead of the default.
RenderImageMessage: React.ComponentType<RenderMessageProps>
  A custom RenderImageMessage component to use instead of the default.
RenderSuggestionsList: React.ComponentType<RenderSuggestionsListProps>
  A custom suggestions list component to use instead of the default.
Input: React.ComponentType<InputProps>
  A custom Input component to use instead of the default.
className: string
  A class name to apply to the root element.
children: React.ReactNode
  Children to render.
```

----------------------------------------

TITLE: Example CopilotKit Agent Configuration
DESCRIPTION: Illustrates how to configure agents within the `agents` parameter of the CopilotKit runtime constructor, mapping agent names to `AbstractAgent` instances.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/CopilotRuntime.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
import { AbstractAgent } from "@ag-ui/client";
// ...
agents: {
  "support": new CustomerSupportAgent(),
  "technical": new TechnicalAgent()
}
```

----------------------------------------

TITLE: Control Streaming Behavior with copilotkit_stream in Python
DESCRIPTION: This snippet demonstrates two ways to manage state streaming in CopilotKit. The first approach shows how to disable all streaming (messages and tool calls) by directly calling `litellm.completion`. The second approach illustrates how to enable streaming of message tokens by wrapping the `completion` call with `copilotkit_stream`, ensuring `stream=True` is passed to the inner `completion` call.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/advanced/disabling-state-streaming.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
from copilotkit.crewai import copilotkit_stream
from typing import cast, Any
from litellm import completion

@start()
async def start(self):

    # 1) Do not emit messages or tool calls, keeping the LLM call private.
    response = completion(
        model="openai/gpt-4o",
        messages=[
            {"role": "system", "content": "You are a helpful assistant"},
            *self.state.messages
        ],
    )
    message = response.choices[0].message

    # 2) Or wrap the LLM call with `copilotkit_stream` to stream message tokens.
    #    Note that we pass `stream=True` to the inner `completion` call.
    response = await copilotkit_stream(
        completion(
            model="openai/gpt-4o",
            messages=[
                {"role": "system", "content": "You are a helpful assistant"},
                *self.state.messages
            ],
            stream=True
        )
    )
    message = cast(Any, response).choices[0]["message"]
```

----------------------------------------

TITLE: useCopilotAction Hook API Reference
DESCRIPTION: Detailed API reference for the `useCopilotAction` React hook, outlining its configuration options for defining AI-callable actions within an application. This includes properties for action naming, description, parameter definition, handler implementation, and custom UI rendering.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotAction.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
useCopilotAction(options: object): void

Options:
  name: string
    The unique name of the action.
  description: string (optional)
    A detailed explanation of the action's purpose and conditions for its use, providing context to the Copilot.
  parameters: Array<object>
    An array defining the input parameters for the action. Each parameter object has:
      name: string
        The name of the parameter.
      type: string
        The data type of the parameter (e.g., "string", "number", "object", "array").
      description: string (optional)
        A description of the parameter's purpose.
  handler: (params: object) => Promise<any> | any
    An asynchronous function that executes when the action is called by the AI. It receives an object containing the defined parameters as arguments and returns a result.
  render: () => React.ReactNode | string (optional)
    A function that returns a React component or a string to be displayed as custom UI in the copilot chat when the action is invoked.
```

----------------------------------------

TITLE: Conditionally append instructions to CopilotKit AI assistant prompt
DESCRIPTION: This example extends the use of `useCopilotAdditionalInstructions` to conditionally apply instructions based on application state. The `available` property is used with a `useState` hook to enable or disable the instructions dynamically, allowing for flexible AI behavior control.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_196

LANGUAGE: TypeScript
CODE:
```
function Chat() {
  const [showWeather, setShowWeather] = useState(false);

  useCopilotAdditionalInstructions({
    instructions: "Do not answer questions about the weather.",
    available: showWeather ? "enabled" : "disabled"
  }, showWeather);
}
```

----------------------------------------

TITLE: Integrate CopilotPopup for Floating Chat UI
DESCRIPTION: `CopilotPopup` is a convenience wrapper for `CopilotChat` that provides a floating chat interface. This React component can be toggled on and off and allows for custom instructions and labels.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_159

LANGUAGE: JavaScript
CODE:
```
import { CopilotPopup } from "@copilotkit/react-ui";

export function YourApp() {
  return (
    <>
      <YourMainContent />
      <CopilotPopup
        instructions={"You are assisting the user as best as you can. Answer in the best way possible given the data you have."}
        labels={{
          title: "Popup Assistant",
          initial: "Need any help?",
        }}
      />
    </>
  );
}
```

----------------------------------------

TITLE: Update Agent State using useCoAgent Hook in React
DESCRIPTION: This example demonstrates how to use the `useCoAgent` hook from `@copilotkit/react-core` to manage and update an agent's state within a React component. It shows how to define the agent state type, initialize the hook with an optional initial state, read the current state, and use the `setState` function to trigger state updates and UI re-renders based on user interactions.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/in-app-agent-write.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { useCoAgent } from "@copilotkit/react-core";

// Define the agent state type, should match the actual state of your agent
type AgentState = {
  language: "english" | "spanish";
}

// Example usage in a pseudo React component
function YourMainContent() {
  const { state, setState } = useCoAgent<AgentState>({
    name: "sample_agent",
    initialState: { language: "spanish" }  // optionally provide an initial state
  });

  // ...

  const toggleLanguage = () => {
    setState({ language: state.language === "english" ? "spanish" : "english" });
  };

  // ...

  return (
    // style excluded for brevity
    <div>
      <h1>Your main content</h1>
      <p>Language: {state.language}</p>
      <button onClick={toggleLanguage}>Toggle Language</button>
    </div>
  );
}
```

----------------------------------------

TITLE: Update Agent State in React with useCoAgent Hook
DESCRIPTION: This example demonstrates how to use the `useCoAgent` hook from `@copilotkit/react-core` to manage and update the agent's state within a React component. It shows how to define the agent state type, initialize the hook with an optional initial state, read the current state, and use the `setState` function to trigger state updates and subsequent UI re-renders.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/in-app-agent-write.mdx#_snippet_1

LANGUAGE: TSX
CODE:
```
import { useCoAgent } from "@copilotkit/react-core"; // [!code highlight]

// Define the agent state type, should match the actual state of your agent
type AgentState = {
  language: "english" | "spanish";
}

// Example usage in a pseudo React component
function YourMainContent() {
  const { state, setState } = useCoAgent<AgentState>({ // [!code highlight]
    name: "sample_agent",
    initialState: { language: "spanish" }  // optionally provide an initial state
  });

  // ...

  const toggleLanguage = () => {
    setState({ language: state.language === "english" ? "spanish" : "english" }); // [!code highlight]
  };

  // ...

  return (
    // style excluded for brevity
    <div>
      <h1>Your main content</h1>
      <p>Language: {state.language}</p> // [!code highlight:2]
      <button onClick={toggleLanguage}>Toggle Language</button>
    </div>
  );
}
```

----------------------------------------

TITLE: Read Agent State with useCoAgent Hook in React
DESCRIPTION: This React component demonstrates how to use the `useCoAgent` hook from `@copilotkit/react-core` to read and react to the agent's real-time state. It defines the `AgentState` type, connects to a named agent, provides an optional initial state, and displays the `language` property from the agent's state in the UI, which updates reactively.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/in-app-agent-read.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { useCoAgent } from "@copilotkit/react-core";

// Define the agent state type, should match the actual state of your agent
type AgentState = {
  language: "english" | "spanish";
}

function YourMainContent() {
  const { state } = useCoAgent<AgentState>({
    name: "sample_agent",
    initialState: { language: "spanish" }
  });

  // ...

  return (
    // style excluded for brevity
    <div>
      <h1>Your main content</h1>
      <p>Language: {state.language}</p>
    </div>
  );
}
```

----------------------------------------

TITLE: Defining Agent State with CopilotKit in Python
DESCRIPTION: This snippet demonstrates how to define the agent's state in a CrewAI Flow by inheriting from `CopilotKitState`. It adds a `searches` property to the state, which will be used to track the agent's progress. This state object is crucial for preserving session context and enabling UI rendering.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/generative-ui/agentic.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
# ...
from copilotkit.crewai import CopilotKitState # extends MessagesState
# ...

# This is the state of the agent.
# It inherits from the CopilotKitState properties from CopilotKit.
class AgentState(CopilotKitState):
    searches: list[dict]
```

----------------------------------------

TITLE: Define Agent State with CopilotKit
DESCRIPTION: This snippet demonstrates how to define the agent's state by adding an `observed_steps` field to track the progress of a long-running task. It extends `CopilotKitState` in Python and uses `Annotation.Root` with `CopilotKitStateAnnotation` in TypeScript.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/predictive-state-updates.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
from copilotkit import CopilotKitState
from typing import Literal

class AgentState(CopilotKitState):
    observed_steps: list[str]  # Array of completed steps
```

LANGUAGE: TypeScript
CODE:
```
import { Annotation } from "@langchain/langgraph";
import { CopilotKitStateAnnotation } from "@copilotkit/sdk-js/langgraph";

export const AgentStateAnnotation = Annotation.Root({
    observed_steps: Annotation<string[]>,
    ...CopilotKitStateAnnotation.spec,
});
export type AgentState = typeof AgentStateAnnotation.State;
```

----------------------------------------

TITLE: Integrate CopilotKit Chat Popup in Next.js Page
DESCRIPTION: Demonstrates how to import and use the `<CopilotPopup />` component from `@copilotkit/react-ui` within a Next.js `app/page.tsx` file, wrapping the application with `<CopilotKit>` and importing necessary styles.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-todo-app/step-2-setup-copilotkit.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
"use client";

import { TasksList } from "@/components/TasksList";
import { TasksProvider } from "@/lib/hooks/use-tasks";
import { CopilotKit } from "@copilotkit/react-core";
import { CopilotPopup } from "@copilotkit/react-ui";
import "@copilotkit/react-ui/styles.css";

export default function Home() {
  return (
    <>
      <TasksProvider>
        <TasksList />
      </TasksProvider>
      <CopilotPopup />
    </>
  );
}
```

----------------------------------------

TITLE: CopilotKit `useCopilotAction` Hook API Reference
DESCRIPTION: Reference documentation for the `useCopilotAction` hook, used in React applications to define and manage actions that can be triggered by an AI agent. It allows for custom rendering and human intervention before an action is fully executed.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#_snippet_5

LANGUAGE: APIDOC
CODE:
```
useCopilotAction(options: object):
  options:
    name: string
      The unique name of the action.
    description: string
      A brief description of what the action does.
    parameters: object[]
      An array of parameter definitions for the action.
      Each parameter object has:
        name: string
          The name of the parameter.
        type: string
          The data type of the parameter (e.g., "object[]", "string[]").
        description: string
          A description of the parameter's purpose.
        required: boolean
          Indicates if the parameter is mandatory.
    renderAndWait: React.ComponentType | Function
      A React component or function to render when the action is called, allowing for human-in-the-loop interaction. The agent waits for this component to complete before proceeding.
```

----------------------------------------

TITLE: Implement User Decision Handling in perform_trips_node
DESCRIPTION: This snippet adds conditional logic to the `perform_trips_node` in `agent/travel/trips.py` to handle user decisions. It imports `copilotkit_emit_message` and checks if the `tool_message.content` is 'CANCEL'. If the user decides to cancel the operation, a cancellation message is emitted to the UI using `copilotkit_emit_message`, and the current state is returned, effectively stopping the operation. Otherwise, the agent proceeds with the requested actions.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#_snippet_2

LANGUAGE: python
CODE:
```
from copilotkit.langchain import copilotkit_emit_message

# ...
async def perform_trips_node(state: AgentState, config: RunnableConfig):
    """Execute trip operations"""
    ai_message = cast(AIMessage, state["messages"][-2])
    tool_message = cast(ToolMessage, state["messages"][-1])

    if tool_message.content == "CANCEL":
      await copilotkit_emit_message(config, "Cancelled operation of trip.")
      return state
    
    # handle the edge case where the AI message is not an AIMessage or does not have tool calls, should never happen.
    if not isinstance(ai_message, AIMessage) or not ai_message.tool_calls:
        return state
    
    # ...
```

----------------------------------------

TITLE: Install Next.js UI Dependencies and Configure OpenAI API Key
DESCRIPTION: This section details the setup for the Next.js user interface. It includes installing frontend dependencies with pnpm and configuring the OpenAI API key in a .env file for UI-related operations.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-flows/README.md#_snippet_2

LANGUAGE: sh
CODE:
```
cd ./ui
pnpm i
```

LANGUAGE: plaintext
CODE:
```
OPENAI_API_KEY=...
```

----------------------------------------

TITLE: Dynamically Switch CopilotKit Threads with `useState`
DESCRIPTION: Illustrates how to dynamically change the active thread in CopilotKit using React's `useState` hook. When the `threadId` state changes, CopilotKit automatically loads the corresponding message history.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_189

LANGUAGE: jsx
CODE:
```
import { useState } from "react";
import { CopilotKit } from "@copilotkit/react-core";

const Page = () => {
  const [threadId, setThreadId] = useState("af2fa5a4-36bd-4e02-9b55-2580ab584f89");
  return (
    <CopilotKit threadId={threadId}>
      <YourApp setThreadId={setThreadId} />
    </CopilotKit>
  )
}

const YourApp = () => {
  return (
    <Button onClick={() => setThreadId("679e8da5-ee9b-41b1-941b-80e0cc73a008")}>
      Change Thread
    </Button>
  )
}
```

----------------------------------------

TITLE: Simple Usage of useCopilotChat Hook
DESCRIPTION: Demonstrates how to import and use the `useCopilotChat` hook to append messages to the chat. It shows both a standard message append and an optional append without triggering chat completion.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotChat.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCopilotChat } from "@copilotkit/react-core";
import { Role, TextMessage } from "@copilotkit/runtime-client-gql";
 
export function YourComponent() {
  const { appendMessage } = useCopilotChat();
 
  appendMessage(
    new TextMessage({
      content: "Hello World",
      role: Role.User,
    }),
  );
 
  // optionally, you can append a message without running chat completion
  appendMessage(yourMessage, { followUp: false });
}
```

----------------------------------------

TITLE: Configure CopilotKit Provider in React Application
DESCRIPTION: Demonstrates how to wrap the application with the <CopilotKit> component, typically in layout.tsx, to provide Copilot-aware functionality. This setup requires a public API key obtained from Copilot Cloud.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_105

LANGUAGE: tsx
CODE:
```
import "./globals.css";
import { ReactNode } from "react";
import { CopilotKit } from "@copilotkit/react-core";

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body>
        {/* Use the public api key you got from Copilot Cloud  */}
        <CopilotKit publicApiKey="<your-copilot-cloud-public-api-key>">
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Configure Self-Hosted LangGraph Platform Endpoint
DESCRIPTION: This code shows how to integrate a self-hosted LangGraph agent into your CopilotKit application by configuring the `CopilotRuntime` in a Next.js API route. It specifies the `deploymentUrl` of your LangGraph agent, a `langsmithApiKey`, and defines the agent's `name` and `description` for CopilotKit to recognize and route requests.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-4-integrate-the-agent.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { langGraphPlatformEndpoint } from '@copilotkit/runtime';

// ...

const runtime = new CopilotRuntime({
    remoteEndpoints: [
      langGraphPlatformEndpoint({
        deploymentUrl: "http://localhost:<port_number>",
        langsmithApiKey: "your-langsmith-api-key",
        agents: [{
          name: 'travel',
          description: 'A travel assistant that can help with planning trips.'
        }]
      }),
    ],
});

// ...
```

----------------------------------------

TITLE: React: Add Static Instructions with useCopilotAdditionalInstructions
DESCRIPTION: Demonstrates how to use the `useCopilotAdditionalInstructions` hook from `@copilotkit/react-core` to append static instructions to the AI assistant's prompt. This method is recommended for adding fixed behavioral constraints, such as preventing answers on specific topics.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-ai-assistant-behavior.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { CopilotKit, useCopilotAdditionalInstructions } from "@copilotkit/react-core";
import { CopilotPopup } from "@copilotkit/react-ui"
 
function Chat() {
  useCopilotAdditionalInstructions({
    instructions: "Do not answer questions about the weather.",
  });
  return <CopilotPopup />
}

export function Home() {
  return (
    <CopilotKit>
      <Chat />
    </CopilotKit>
  )
}
```

----------------------------------------

TITLE: Configure CopilotKit in Router Mode
DESCRIPTION: Demonstrates how to configure the `CopilotKit` provider component to enable Router Mode. In this mode, CopilotKit acts as a central hub, dynamically selecting and routing requests between different agents or actions based on user input, making it suitable for chat-first experiences.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/multi-agent-flows.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
<CopilotKit runtimeUrl="<copilot-runtime-url>">
  {/* Your application components */}
</CopilotKit>
```

----------------------------------------

TITLE: Basic Usage of CopilotKit Provider Component
DESCRIPTION: Demonstrates how to wrap an application or a sub-tree with the `CopilotKit` provider component. It highlights the `runtimeUrl` prop, which is essential for connecting to the CopilotKit backend.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_31

LANGUAGE: typescript
CODE:
```
import { CopilotKit } from "@copilotkit/react-core";

<CopilotKit runtimeUrl="<your-runtime-url>">
  // ... your app ...
</CopilotKit>
```

----------------------------------------

TITLE: Configure CopilotKit Runtime Endpoint in NestJS
DESCRIPTION: This JavaScript code demonstrates how to set up a CopilotKit runtime endpoint in a NestJS application. It initializes the runtime with an agent configuration and creates a handler using `copilotRuntimeNestEndpoint` to expose the endpoint, typically at `/copilotkit`. Remember to point your client-side `runtimeUrl` to the correct endpoint, such as `http://localhost:PORT/copilotkit`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-langgraph-endpoint.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
                    description: 'A helpful LLM agent.',
                    assistantId: 'your-assistant-ID' // optional, but recommended!
                  }
                ]
              }),
            ],
          });

          const handler = copilotRuntimeNestEndpoint({
            runtime,
            serviceAdapter,
            endpoint: '/copilotkit',
          });
          return handler(req, res);
        }
      }
```

----------------------------------------

TITLE: Set OpenAI API Key in .env File
DESCRIPTION: To authenticate with OpenAI, add your API key to a .env file at the root of your project. This key is used by the CopilotKit runtime. Be aware that models like GPT-4o require a paid OpenAI API key; for free accounts, consider using gpt-3.5-turbo.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_180

LANGUAGE: .env
CODE:
```
OPENAI_API_KEY=your_api_key_here
```

----------------------------------------

TITLE: Configure CopilotKitRemoteEndpoint with Dynamic LangGraph Agents
DESCRIPTION: This example shows how to provide a callable function to the `agents` parameter of `CopilotKitRemoteEndpoint`. This function dynamically returns a list of `LangGraphAgent` instances based on the provided `context`, allowing for context-aware agent configuration like token-based settings.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_127

LANGUAGE: Python
CODE:
```
from copilotkit import CopilotKitRemoteEndpoint, LangGraphAgent
from my_agent.agent import graph

sdk = CopilotKitRemoteEndpoint(
    agents=lambda context: [
        LangGraphAgent(
            name="email_agent",
            description="This agent sends emails",
            graph=graph,
            langgraph_config={
                "token": context["properties"]["token"]
            }
        )
    ]
)
```

----------------------------------------

TITLE: Configure LangGraph Breakpoint for Human Approval
DESCRIPTION: This snippet modifies the LangGraph definition in `agent/travel/agent.py` to introduce a breakpoint at the `trips_node`. By adding `interrupt_after=["trips_node"]` to the `compile` function, the agent's execution will pause at this specific node, awaiting human approval before proceeding. This ensures that mutative actions proposed by the agent are reviewed by a user.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#_snippet_0

LANGUAGE: python
CODE:
```
# ...

graph = graph_builder.compile(
    checkpointer=MemorySaver(),
    interrupt_after=["trips_node"],
)
```

----------------------------------------

TITLE: Define Frontend Action and Integrate CopilotChat in React
DESCRIPTION: This snippet demonstrates how to define a frontend action (e.g., changing chat background) within a React component, likely using a CopilotKit hook like `useCopilotAction`. It also shows the integration of the `CopilotChat` component and the main `CrewAIFlow` component wrapping the application with `CopilotKit` context, enabling agent-powered chat functionality.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/quickstart.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
                description:
                  "Change the background color of the chat. Can be anything that the CSS background attribute accepts. Regular colors, linear of radial gradients etc.",
                parameters: [
                  {
                    name: "background",
                    type: "string",
                    description: "The background. Prefer gradients.",
                  },
                ],
                handler: ({ background }) => setBackground(background),
                followUp: false,
              });

              return (
                <div
                  className="h-screen w-full flex items-center justify-center"
                  style={{ background }}
                >
                  <div className="w-full max-w-3xl h-[80vh] px-4">
                    <div className="h-full bg-white/10 backdrop-blur-lg rounded-2xl shadow-2xl overflow-hidden">
                      <CopilotChat
                        className="h-full"
                        labels={{
                          initial: "Hi, I'm an agent. Want to chat?",
                          placeholder: "Type a message..."
                        }}
                      />
                    </div>
                  </div>
                </div>
              );

            // App Component: Main wrapper that provides CopilotKit context
            const CrewAIFlow: React.FC = () => (
              <CopilotKit publicApiKey={publicApiKey} agent={agentName}>
                <Chat />
              </CopilotKit>
            );

            export default CrewAIFlow;
```

----------------------------------------

TITLE: Fetch Data and Render UI with useCopilotAction
DESCRIPTION: The `useCopilotAction` hook accepts both `handler` and `render` methods. The `handler` executes an action, such as fetching data, while `render` displays UI in the copilot chat window based on the action's status or result.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/generative-ui.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
"use client" // only necessary if you are using Next.js with the App Router. 
import { useCopilotAction } from "@copilotkit/react-core"; 

useCopilotAction({
  name: "showLastMeetingOfDay",
  description: "Displays the last calendar meeting for a given day",
  parameters: [
    {
      name: "date",
      type: "string",
      description: "Date to fetch the last meeting for (YYYY-MM-DD)",
      required: true
    }
  ],
  handler: async ({ date }) => {
    // some async operation which can return a result:
    const lastMeeting = await fetchLastMeeting(new Date(date));
    return lastMeeting;
  },
  render: ({ status, result }) => {
    if (status === 'executing' || status === 'inProgress') {
      // show a loading view while the action is executing, i.e. while the meeting is being fetched
      return <LoadingView />;
    } else if (status === 'complete') {
      // show the meeting card once the action is complete
      return <CalendarMeetingCardComponent {...result} />;
    } else {
      return <div className="text-red-500">No meeting found</div>;
    }
  }
});
```

----------------------------------------

TITLE: Implement Agent Chat Node with Interrupt (TypeScript)
DESCRIPTION: This TypeScript snippet defines a `chat_node` function for an agent state. It uses `copilotKitInterrupt` to prompt the user for the agent's name if not set, updates the state, and invokes a ChatOpenAI model with system and user messages, returning the updated state including the model's response.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_8

LANGUAGE: TypeScript
CODE:
```
                                    import { copilotKitInterrupt } from "@copilotkit/sdk-js/langgraph"; // [!code highlight]
                                    import { SystemMessage } from "@langchain/core/messages";
                                    import { ChatOpenAI } from "@langchain/openai";

                                    // ... add here the agent state from previous step

                                    async function chat_node(state: AgentState, config: RunnableConfig) {
                                      if (!state.agentName) {
                                        const { answer, messages } = copilotKitInterrupt({ message: 'Before we start, what would you like to call me?' }); // [!code highlight]
                                        state.agentName = answer
                                        state.messages = [...state.messages, ...messages]
                                      }

                                      // Tell the agent its name
                                      const systemMessage = new SystemMessage({
                                        content: `You are a helpful assistant named ${state.agentName}...`,
                                      });

                                      const response = await new ChatOpenAI({ model: "gpt-4o" }).invoke(
                                        [systemMessage, ...state.messages],
                                        config
                                      );

                                      return {
                                        ...state,
                                        // messages receives from the interrupt are not automatically saved to state, remember to add them!
                                        messages: [...state.messages, response],
                                      };
                                    }
                                    
```

----------------------------------------

TITLE: Configure OpenAI API Key for Agent
DESCRIPTION: Create a .env file inside the agent directory and add your OpenAI API key. Ensure the key supports gpt-4o.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-wait-user-input/README.md#_snippet_1

LANGUAGE: env
CODE:
```
OPENAI_API_KEY=...
```

----------------------------------------

TITLE: Configure API Keys in .env
DESCRIPTION: Add your OpenAI and Google Maps API keys to the newly created .env file. Replace the placeholders with your actual keys to enable the agent's functionality.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-2-langgraph-agent.mdx#_snippet_2

LANGUAGE: txt
CODE:
```
OPENAI_API_KEY=<your-openai-api-key>
GOOGLE_MAPS_API_KEY=<your-google-maps-api-key>
```

----------------------------------------

TITLE: Emit Intermediate Messages in LangGraph Agent Nodes
DESCRIPTION: The `copilotkit_emit_message` (Python) and `copilotkitEmitMessage` (TypeScript) methods allow agents to send immediate status updates or feedback to users during a node's execution, rather than waiting for completion. This is crucial for long-running tasks. Ensure the emitted message is included in the final message history.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/advanced/emit-messages.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
from langchain_core.messages import SystemMessage, AIMessage
from langchain_openai import ChatOpenAI
from langchain_core.runnables import RunnableConfig
from copilotkit.langgraph import copilotkit_emit_message
# ...

async def chat_node(state: AgentState, config: RunnableConfig):
    model = ChatOpenAI(model="gpt-4o")

    intermediate_message = "Thinking really hard..."
    await copilotkit_emit_message(config, intermediate_message)

    # simulate a long running task
    await asyncio.sleep(2) 

    response = await model.ainvoke([
        SystemMessage(content="You are a helpful assistant."),
        *state["messages"]
    ], config)
    
    return Command(
        goto=END,
        update={
            # Make sure to include the emitted message in the messages history
            "messages": [AIMessage(content=intermediate_message), response]
        }
    )
```

LANGUAGE: TypeScript
CODE:
```
import { AIMessage, SystemMessage } from "@langchain/core/messages";
import { ChatOpenAI } from "@langchain/openai";
import { RunnableConfig } from "@langchain/core/runnables";
import { copilotkitEmitMessage } from "@copilotkit/sdk-js/langgraph";
// ...

async function chat_node(state: AgentState, config: RunnableConfig) {
    const model = new ChatOpenAI({ model: "gpt-4o" });

    const intermediateMessage = "Thinking really hard...";
    await copilotkitEmitMessage(config, intermediateMessage);

    // simulate a long-running task
    await new Promise(resolve => setTimeout(resolve, 2000));

    const response = await model.invoke([
        new SystemMessage({content: "You are a helpful assistant."}),
        ...state.messages
    ], config);

    return {
        // Make sure to include the emitted message in the messages history
        messages: [new AIMessage(intermediateMessage), response],
    };
}
```

----------------------------------------

TITLE: Append static instructions to CopilotKit AI assistant prompt
DESCRIPTION: This snippet demonstrates how to use the `useCopilotAdditionalInstructions` hook from `@copilotkit/react-core` to add static instructions to the AI assistant's prompt. In this example, the instruction 'Do not answer questions about the weather.' is added, guiding the AI's behavior.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_195

LANGUAGE: TypeScript
CODE:
```
import { CopilotKit, useCopilotAdditionalInstructions } from "@copilotkit/react-core";
import { CopilotPopup } from "@copilotkit/react-ui"

function Chat() {
  useCopilotAdditionalInstructions({
    instructions: "Do not answer questions about the weather.",
  });
  return <CopilotPopup />
}

export function Home() {
  return (
    <CopilotKit>
      <Chat />
    </CopilotKit>
  )
}
```

----------------------------------------

TITLE: Configure CopilotKit Endpoint for Next.js App Router
DESCRIPTION: This snippet demonstrates how to create a new route in a Next.js App Router project to handle the `/api/copilotkit` endpoint. It imports necessary components from `@copilotkit/runtime` and sets up a `POST` handler that uses `copilotRuntimeNextJSAppRouterEndpoint` with an `ExperimentalEmptyAdapter` to process incoming `NextRequest` objects, returning a `NextResponse`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-starter.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
import {
  CopilotRuntime,
  ExperimentalEmptyAdapter,
  copilotRuntimeNextJSAppRouterEndpoint,
  langGraphPlatformEndpoint
} from "@copilotkit/runtime";;
import { NextRequest } from "next/server";

// You can use any service adapter here for multi-agent support.
const serviceAdapter = new ExperimentalEmptyAdapter();

const runtime = new CopilotRuntime({
  remoteEndpoints: [
    // added in next step...
  ],
});

export const POST = async (req: NextRequest) => {
  const { handleRequest } = copilotRuntimeNextJSAppRouterEndpoint({
    runtime,
    serviceAdapter,
    endpoint: "/api/copilotkit",
  });

  return handleRequest(req);
};
```

----------------------------------------

TITLE: Re-run CopilotKit Agent with State-Based Hint (TSX)
DESCRIPTION: This snippet demonstrates how to use the `useCoAgent` hook to manage an agent's state and manually re-run the agent. It shows how to provide a hint to the agent based on the delta between the previous and current state, specifically when toggling a language setting. The hint is provided as a `TextMessage` to the agent, allowing the agent to react to specific state changes.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/in-app-agent-write.mdx#_snippet_2

LANGUAGE: TSX
CODE:
```
import { useCoAgent } from "@copilotkit/react-core";
import { TextMessage, MessageRole } from "@copilotkit/runtime-client-gql";

// ...

function YourMainContent() {
  const { state, setState, run } = useCoAgent<AgentState>({
    name: "sample_agent",
    initialState: { language: "spanish" }
  });

  // setup to be called when some event in the app occurs
  const toggleLanguage = () => {
    const newLanguage = state.language === "english" ? "spanish" : "english";
    setState({ language: newLanguage });

    // re-run the agent and provide a hint about what's changed
    run(({ previousState, currentState }) => {
      return new TextMessage({
        role: MessageRole.User,
        content: `the language has been updated to ${currentState.language}`,
      });
    });
  };

  return (
    // ...
  );
}
```

----------------------------------------

TITLE: Initialize useCoAgent Hook
DESCRIPTION: Demonstrates the basic initialization of the `useCoAgent` hook in TypeScript/React, defining an `AgentState` type and providing an `initialState` for the agent.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCoAgent.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCoAgent } from "@copilotkit/react-core";
 
type AgentState = {
  count: number;
}
 
const agent = useCoAgent<AgentState>({
  name: "my-agent",
  initialState: {
    count: 0,
  },
});
```

----------------------------------------

TITLE: Initialize LangChainAdapter with Copilot Runtime
DESCRIPTION: This example demonstrates how to initialize the LangChainAdapter with Copilot Runtime, integrating with LangChain's ChatOpenAI model. It shows how to bind tools and stream messages using a custom `chainFn`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/llm-adapters/LangChainAdapter.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
import { CopilotRuntime, LangChainAdapter } from "@copilotkit/runtime";
import { ChatOpenAI } from "@langchain/openai";

const copilotKit = new CopilotRuntime();

const model = new ChatOpenAI({
  model: "gpt-4o",
  apiKey: "<your-api-key>",
});

return new LangChainAdapter({
  chainFn: async ({ messages, tools }) => {
    return model.bindTools(tools).stream(messages);
    // or optionally enable strict mode
    // return model.bindTools(tools, { strict: true }).stream(messages);
  }
});
```

----------------------------------------

TITLE: Instantiating OpenAIAssistantAdapter with OpenAI Client (TypeScript)
DESCRIPTION: This code snippet demonstrates how to create a new instance of the OpenAIAssistantAdapter. It requires an initialized OpenAI client instance and the ID of the assistant to be used. The example also shows how to configure optional features like code interpretation and file search during instantiation.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/llm-adapters/OpenAIAssistantAdapter.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { CopilotRuntime, OpenAIAssistantAdapter } from "@copilotkit/runtime";
import OpenAI from "openai";

const copilotKit = new CopilotRuntime();

const openai = new OpenAI({
  organization: "<your-organization-id>",
  apiKey: "<your-api-key>",
});

return new OpenAIAssistantAdapter({
  openai,
  assistantId: "<your-assistant-id>",
  codeInterpreterEnabled: true,
  fileSearchEnabled: true,
});
```

----------------------------------------

TITLE: Properties Returned by useCopilotChat Hook
DESCRIPTION: Lists the properties and functions returned by the `useCopilotChat` hook, providing access to chat state, message manipulation, and control over chat generation.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotChat.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
const {
  visibleMessages, // An array of messages that are currently visible in the chat.
  appendMessage, // A function to append a message to the chat.
  setMessages, // A function to set the messages in the chat.
  deleteMessage, // A function to delete a message from the chat.
  reloadMessages, // A function to reload the messages from the API.
  stopGeneration, // A function to stop the generation of the next message.
  reset, // A function to reset the chat.
  isLoading, // A boolean indicating if the chat is loading.
} = useCopilotChat();
```

----------------------------------------

TITLE: useCopilotChat Hook Parameters
DESCRIPTION: Documents the configurable parameters for the `useCopilotChat` hook, including identifiers, HTTP headers, initial messages, and system message generation functions.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotChat.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Parameters for useCopilotChat:
- id:
    Type: string
    Description: A unique identifier for the chat. If not provided, a random one will be generated. When provided, the `useChat` hook with the same `id` will have shared states across components.
- headers:
    Type: Record<string, string> | Headers
    Description: HTTP headers to be sent with the API request.
- initialMessages:
    Type: Message[]
    Description: System messages of the chat. Defaults to an empty array.
- makeSystemMessage:
    Type: SystemMessageFunction
    Description: A function to generate the system message. Defaults to `defaultSystemMessage`.
```

----------------------------------------

TITLE: Implement CopilotChat Component
DESCRIPTION: Creates a `Chat` component that wraps the `<CopilotChat/>` component from `@copilotkit/react-ui`. It configures the chat interface with initial instructions, title, and a callback for message submission, providing a non-modal chat experience.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-3-setup-copilotkit.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
"use client"

import { CopilotChat } from "@copilotkit/react-ui";
import { INITIAL_MESSAGE, MAIN_CHAT_INSTRUCTIONS, MAIN_CHAT_TITLE } from "@/lib/consts";

export default function Chat({ onSubmitMessage }: { onSubmitMessage: () => void }) {
  return (
      // [!code ++:10]
      <CopilotChat
          instructions={MAIN_CHAT_INSTRUCTIONS}
          labels={{
              title: MAIN_CHAT_TITLE,
              initial: INITIAL_MESSAGE,
          }}
          className="h-full w-full font-noto"
          onSubmitMessage={onSubmitMessage}
      />
      // [!code --:4]
      <h1 className="text-2xl font-bold flex items-center justify-center h-full mx-auto mr-20">
        It'd be really cool if we had chat here!
      </h1>
  )
}
```

----------------------------------------

TITLE: Manually Emit a Message to CopilotKit with copilotkit_emit_message
DESCRIPTION: Use `copilotkit_emit_message` to manually send a message to CopilotKit, providing real-time updates to the user during long-running operations within a LangGraph node. Remember to also return the message from the node.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_117

LANGUAGE: python
CODE:
```
from copilotkit.langgraph import copilotkit_emit_message

message = "Step 1 of 10 complete"
await copilotkit_emit_message(config, message)

# Return the message from the node
return {
    "messages": [AIMessage(content=message)]
}
```

----------------------------------------

TITLE: Rendering UI for Copilot Actions (TSX)
DESCRIPTION: Illustrates how to use the `useCopilotAction` hook to define an action callable by the LLM and provide a custom React component (`render` function) to visualize the action's execution and results based on its status and arguments.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/custom-look-and-feel/bring-your-own-components.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
"use client" // only necessary if you are using Next.js with the App Router.
import { useCopilotAction } from "@copilotkit/react-core"; 
 
export function YourComponent() {
  useCopilotAction({ 
    name: "showCalendarMeeting",
    description: "Displays calendar meeting information",
    parameters: [
      {
        name: "date",
        type: "string",
        description: "Meeting date (YYYY-MM-DD)
",
        required: true
      },
      {
        name: "time",
        type: "string",
        description: "Meeting time (HH:mm)
",
        required: true
      },
      {
        name: "meetingName",
        type: "string",
        description: "Name of the meeting",
        required: false
      }
    ],
    render: ({ status, args }) => {
      const { date, time, meetingName } = args;
 
      if (status === 'inProgress') {
        return <LoadingView />; // Your own component for loading state
      } else {
        const meetingProps: CalendarMeetingCardProps = {
          date: date,
          time,
          meetingName
        };
        return <CalendarMeetingCardComponent {...meetingProps} />;
      }
    },
  });
 
  return (
    <>...</>
  );
}
```

----------------------------------------

TITLE: Start LangGraph Development Server
DESCRIPTION: These commands start a local development server and LangGraph Studio session for your LangGraph agent. Choose the command based on your agent's language (Python 3.11+ or TypeScript/Node 18+). Both methods require a LangSmith account.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_1

LANGUAGE: python
CODE:
```
# For Python 3.11 or above
langgraph dev --host localhost --port 8000
```

LANGUAGE: typescript
CODE:
```
# For TypeScript with Node 18 or above
npx @langchain/langgraph-cli dev --host localhost --port 8000
```

----------------------------------------

TITLE: Render Agent State In-Chat using useCoAgentStateRender (React/TypeScript)
DESCRIPTION: This TypeScript/React snippet illustrates how to display an agent's dynamic state directly within the chat interface using CopilotKit's `useCoAgentStateRender` hook. It defines the `AgentState` type to match the backend agent's state and provides a `render` function to visually represent the progress of 'searches' with completion indicators.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_227

LANGUAGE: TypeScript
CODE:
```
// ...
import { useCoAgentStateRender } from "@copilotkit/react-core";
// ...

// Define the state of the agent, should match the state of the agent in your LangGraph.
type AgentState = {
  searches: {
    query: string;
    done: boolean;
  }[];
};

function YourMainContent() {
  // ...


  // styles omitted for brevity
  useCoAgentStateRender<AgentState>({
    name: "sample_agent", // the name the agent is served as
    render: ({ state }) => (
      <div>
        {state.searches?.map((search, index) => (
          <div key={index}>
            {search.done ? "✅" : "❌"} {search.query}{search.done ? "" : "..."}
          </div>
        ))}
      </div>
    ),
  });

  // ...

  return <div>...</div>;
}
```

----------------------------------------

TITLE: Render specific CrewAI tool call UI with useCopilotAction
DESCRIPTION: Demonstrates how to use the `useCopilotAction` hook in a React component to render a specific tool call, such as a CrewAI crew execution. The action's `name` must match the tool's name (e.g., 'research_crew'). It displays the tool's arguments and completion status in a custom UI component, providing real-time feedback to the user.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_230

LANGUAGE: TypeScript
CODE:
```
import { useCopilotAction } from "@copilotkit/react-core";
// ...

const YourMainContent = () => {
  // ...

  useCopilotAction({
    name: "research_crew",
    parameters: [
      {
        name: "topic",
      },
      {
        name: "current_year",
      }
    ],
    render({ args, status }) {
      return (
        <div className="m-4 p-4 bg-gray-100 rounded shadow">
          <h1 className="text-center text-sm">
            Researching {args.topic} in {args.current_year}{" "}
            {status == "complete" ? "✅" : "⏳"}
          </h1>
        </div>
      );
    }
  });
  // ...
};
```

----------------------------------------

TITLE: Implementing LLM Actions with Custom Rendering in CopilotKit (TypeScript)
DESCRIPTION: This snippet shows how to define and render a custom UI component based on the status of an LLM action using useCopilotAction. It defines a showCalendarMeeting action with specific parameters and provides a render function to display a loading state or a CalendarMeetingCardComponent based on the action's execution status.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/bring-your-own-components.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
"use client" // only necessary if you are using Next.js with the App Router.
import { useCopilotAction } from "@copilotkit/react-core"; 
 
export function YourComponent() {
  useCopilotAction({
    name: "showCalendarMeeting",
    description: "Displays calendar meeting information",
    parameters: [
      {
        name: "date",
        type: "string",
        description: "Meeting date (YYYY-MM-DD)",
        required: true
      },
      {
        name: "time",
        type: "string",
        description: "Meeting time (HH:mm)",
        required: true
      },
      {
        name: "meetingName",
        type: "string",
        description: "Name of the meeting",
        required: false
      }
    ],
    render: ({ status, args }) => {
      const { date, time, meetingName } = args;
 
      if (status === 'inProgress') {
        return <LoadingView />; // Your own component for loading state
      } else {
        const meetingProps: CalendarMeetingCardProps = {
          date: date,
          time,
          meetingName
        };
        return <CalendarMeetingCardComponent {...meetingProps} />;
      }
    },
  });
 
  return (
    <>...</>
  );
}
```

----------------------------------------

TITLE: Configure Agent OpenAI API Key
DESCRIPTION: This snippet shows the content for a `.env` file that must be created inside the `./agent` directory. It sets the `OPENAI_API_KEY` required for the agent to interact with OpenAI models. Ensure the provided key supports `gpt-4o`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-routing/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
OPENAI_API_KEY=...
```

----------------------------------------

TITLE: React Component: Basic Usage of CopilotTextarea
DESCRIPTION: Provides a minimal example of how to import and use the `CopilotTextarea` component in a React application. It demonstrates configuring basic autosuggestions by defining the textarea's purpose.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_64

LANGUAGE: typescript
CODE:
```
import { CopilotTextarea } from '@copilotkit/react-textarea';
import "@copilotkit/react-textarea/styles.css";

<CopilotTextarea
  autosuggestionsConfig={{
    textareaPurpose:
     "the body of an email message",
    chatApiConfigs: {},
  }}
/>
```

----------------------------------------

TITLE: Initializing CopilotKit in Agent Lock Mode (TSX)
DESCRIPTION: This snippet shows how to configure the `CopilotKit` provider for Agent Lock Mode. It requires both a `runtimeUrl` and an `agent` prop, where the `agent` prop specifies the name of the agent to exclusively work with. In this mode, all requests are directed to a single, specific agent, providing precise control over a focused workflow.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/multi-agent-flows.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
// [!code word:agent]\n<CopilotKit runtimeUrl="<copilot-runtime-url>" agent="<the-name-of-the-agent>">\n  {/* Your application components */}\n</CopilotKit>
```

----------------------------------------

TITLE: Configure CopilotKit Provider to Use a Specific Agent
DESCRIPTION: This TypeScript JSX (TSX) code snippet shows how to update the `CopilotKit` provider to explicitly specify which LangGraph agent to use. By setting the `agent` prop to the agent's name (e.g., 'agent'), all requests are directed to that particular agent, simplifying routing for single-agent setups.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-4-agentic-chat-ui.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
// ...
<CopilotKit
  // ...
  agent="agent" // [!code ++]
>
  {...}
</CopilotKit>
```

----------------------------------------

TITLE: Updating Agent State in React with useCoAgent Hook
DESCRIPTION: This example shows how to use the `setState` function returned by the `useCoAgent` hook in a React component. It allows applications to dynamically update the agent's state, triggering UI rerenders based on the new state and providing real-time feedback to the user.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_256

LANGUAGE: TypeScript
CODE:
```
import { useCoAgent } from "@copilotkit/react-core";

// Define the agent state type, should match the actual state of your agent
type AgentState = {
  language: "english" | "spanish";
}

// Example usage in a pseudo React component
function YourMainContent() {
  const { state, setState } = useCoAgent<AgentState>({
    name: "sample_agent",
    initialState: { language: "spanish" }  // optionally provide an initial state
  });

  // ...

  const toggleLanguage = () => {
    setState({ language: state.language === "english" ? "spanish" : "english" });
  };

  // ...

  return (
    // style excluded for brevity
    <div>
      <h1>Your main content</h1>
      <p>Language: {state.language}</p>
      <button onClick={toggleLanguage}>Toggle Language</button>
    </div>
  );
}
```

----------------------------------------

TITLE: Connect LangGraph Agent to CopilotKit for Local Development
DESCRIPTION: This snippet demonstrates how to establish a secure tunnel using `npx copilotkit` to connect a locally running LangGraph agent to Copilot Cloud. The command output confirms the successful creation of the tunnel and its URL, enabling Copilot Cloud to route requests to the local agent.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-4-agentic-chat-ui.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx copilotkit@latest dev --port 8000
```

LANGUAGE: sh
CODE:
```
✔ Select a project Local (ID: <project_id>)
✅ LangGraph Platform endpoint detected
⠹ Creating tunnel...

Tunnel Information:

• Tunnel URL:            https://<tunnel_id>.tunnels.devcopilotkit.com
• Endpoint Type:         LangGraph Platform
• Project:               projects/<project_id>

Press Ctrl+C to stop the tunnel

✔ 🚀 Local tunnel is live and linked to Copilot Cloud!
```

----------------------------------------

TITLE: Render Backend Action in Frontend with useCopilotAction
DESCRIPTION: Demonstrates how to use `useCopilotAction` in `components/Dashboard.tsx` to render the `searchInternet` backend action in the frontend. It allows displaying UI based on the action's arguments and status.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-chat-with-your-data/README.md#_snippet_7

LANGUAGE: tsx
CODE:
```
useCopilotAction({
  name: "searchInternet",
  available: "disabled",
  description: "Searches the internet for information.",
  parameters: [
    {
      name: "query",
      type: "string",
      description: "The query to search the internet for.",
      required: true,
    }
  ],
  render: ({args, status}) => {
    return <SearchResults query={args.query || 'No query provided'} status={status} />;
  }
});
```

----------------------------------------

TITLE: Define a CopilotKit Backend Action in FastAPI
DESCRIPTION: Import the CopilotKit SDK and define a backend action with its name, description, parameters, and handler function. This example demonstrates defining an action to fetch a user's name by ID.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_237

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from copilotkit.integrations.fastapi import add_fastapi_endpoint
from copilotkit import CopilotKitRemoteEndpoint, Action as CopilotAction

app = FastAPI()

# Define your backend action
async def fetch_name_for_user_id(userId: str):
    # Replace with your database logic
    return {"name": "User_" + userId}

# this is a dummy action for demonstration purposes
action = CopilotAction(
    name="fetchNameForUserId",
    description="Fetches user name from the database for a given ID.",
    parameters=[
        {
            "name": "userId",
            "type": "string",
            "description": "The ID of the user to fetch data for.",
            "required": True,
        }
    ],
    handler=fetch_name_for_user_id
)
```

----------------------------------------

TITLE: Define LangGraph Agent Research State in Python
DESCRIPTION: This Python code defines the `ResearchState` class, extending `MessagesState`, which represents the persistent state of a LangGraph agent. It includes fields like `title`, `proposal` (for proposed structure), `outline`, `sections` (for research content), `footnotes`, `sources`, `tool`, and `logs`, crucial for managing the agent's research process and output.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-6-shared-state.mdx#_snippet_0

LANGUAGE: python
CODE:
```
# ...
from typing import Dict, Union, List
from langgraph.graph import MessagesState

class ResearchState(MessagesState):
    title: str
    proposal: Dict[str, Union[str, bool, Dict[str, Union[str, bool]]]]  # Stores proposed structure before user approval
    outline: dict
    sections: List[dict]  # list of dicts with 'title','content',and 'idx'
    footnotes: str
    sources: Dict[str, Dict[str, Union[str, float]]]
    tool: str
    logs: List[dict]  # list of dicts logs to be sent to frontend with 'message', 'status'
```

----------------------------------------

TITLE: Access Restored Agent State with useCoAgent Hook
DESCRIPTION: When a `threadId` is set, the state of any associated agent is automatically restored. The `useCoAgent` hook allows applications to access this restored agent state, enabling seamless continuation of agent-driven processes across sessions.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_200

LANGUAGE: typescript
CODE:
```
const { state } = useCoAgent({name: "research_agent"});

// state will now be the state of research_agent in the thread id given above
```

----------------------------------------

TITLE: Integrate CopilotTextarea into a React Component
DESCRIPTION: Example demonstrating how to use `CopilotTextarea` within a React functional component. It shows state management for the textarea's value and basic configuration for AI autosuggestions, including `textareaPurpose`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_52

LANGUAGE: TypeScript
CODE:
```
import { FC, useState } from "react";
import { CopilotTextarea } from '@copilotkit/react-textarea';

const ExampleComponent: FC = () => {
  const [text, setText] = useState<string>('');

  return (
    <CopilotTextarea
      className="w-full p-4 border border-gray-300 rounded-md"
      value={text}
      onValueChange={setText}

      autosuggestionsConfig={{
        textareaPurpose: "the body of an email message",
        chatApiConfigs: {},
      }}
    />
  );
};
```

----------------------------------------

TITLE: Pass Dynamic Properties to CopilotKit Frontend
DESCRIPTION: Set custom properties on the `CopilotKit` component in your frontend application. These properties can then be accessed in the backend for dynamic agent configuration.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/remote-backend-endpoint.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
<CopilotKit properties={{someProperty: "xyz"}}>
   <YourApp />
</CopilotKit>
```

----------------------------------------

TITLE: Render Agent State Outside Chat using useCoAgent (React/TypeScript)
DESCRIPTION: This TypeScript/React snippet demonstrates how to render an agent's state in a custom UI component outside the main chat area. It utilizes CopilotKit's `useCoAgent` hook to access the agent's state, defining the `AgentState` type, and then maps over the 'searches' array to display their status, providing flexibility for external state visualization.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_228

LANGUAGE: TypeScript
CODE:
```
import { useCoAgent } from "@copilotkit/react-core";
// ...

// Define the state of the agent, should match the state of the agent in your LangGraph.
type AgentState = {
  searches: {
    query: string;
    done: boolean;
  }[];
};

function YourMainContent() {
  // ...


  const { state } = useCoAgent<AgentState>({
    name: "sample_agent", // the name the agent is served as
  })

  // ...

  return (
    <div>
      {/* ... */}
      <div className="flex flex-col gap-2 mt-4">

        {state.searches?.map((search, index) => (
          <div key={index} className="flex flex-row">
            {search.done ? "✅" : "❌"} {search.query}
          </div>
        ))}
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Initialize LangChain Adapter with Custom Chain Function
DESCRIPTION: Illustrates how to set up the LangChainAdapter with CopilotRuntime, providing a custom asynchronous `chainFn` to handle messages and tools using a LangChain model like ChatOpenAI. It also lists the supported return types for the `chainFn`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_208

LANGUAGE: typescript
CODE:
```
import { CopilotRuntime, LangChainAdapter } from "@copilotkit/runtime";
import { ChatOpenAI } from "@langchain/openai";

const copilotKit = new CopilotRuntime();

const model = new ChatOpenAI({
  model: "gpt-4o",
  apiKey: "<your-api-key>"
});

return new LangChainAdapter({
  chainFn: async ({ messages, tools }) => {
    return model.bindTools(tools).stream(messages);
    // or optionally enable strict mode
    // return model.bindTools(tools, { strict: true }).stream(messages);
  }
});
```

LANGUAGE: APIDOC
CODE:
```
The asynchronous handler function (`chainFn`) can return any of the following:
- A simple `string` response
- A LangChain stream (`IterableReadableStream`)
- A LangChain `BaseMessageChunk` object
- A LangChain `AIMessage` object
```

----------------------------------------

TITLE: Set Up CopilotKit Provider (TSX)
DESCRIPTION: Wrap your application's root component with the `CopilotKit` provider to enable CopilotKit functionality throughout your app. Requires a `publicApiKey`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/model-context-protocol.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
"use client";

import { CopilotKit } from "@copilotkit/react-core";

export default function App() {
  return (
    <CopilotKit publicApiKey="<replace_with_your_own>">
      {/* Your app content */}
    </CopilotKit>
  );
}
```

----------------------------------------

TITLE: Integrate CopilotKit Provider in Root Layout
DESCRIPTION: Demonstrates how to wrap the application with `CopilotKit` provider in `app/layout.tsx` to establish the chat context for all child components, pointing to the `/api/copilotkit` runtime endpoint.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-chat-with-your-data/README.md#_snippet_4

LANGUAGE: tsx
CODE:
```
export default function RootLayout({children}: Readonly<{children: React.ReactNode}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <CopilotKit runtimeUrl="/api/copilotkit">
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Implement CopilotSidebar Chat Interface
DESCRIPTION: Integrate the CopilotSidebar component to add a collapsible and expandable sidebar chat interface to your application. Configure initial instructions and labels for the assistant.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_72

LANGUAGE: TypeScript
CODE:
```
import { CopilotSidebar } from "@copilotkit/react-ui";

export function YourApp() {
  return (
    <CopilotSidebar
      defaultOpen={true}
      instructions={"You are assisting the user as best as you can. Answer in the best way possible given the data you have."}
      labels={{
        title: "Sidebar Assistant",
        initial: "How can I help you today?",
      }}
    >
      <YourMainContent />
    </CopilotSidebar>
  );
}
```

----------------------------------------

TITLE: Processing Chat Response in LangGraph Node (TypeScript)
DESCRIPTION: This TypeScript snippet shows how a LangGraph node uses a `SystemMessage` and `ChatOpenAI` to process chat messages. It invokes the language model with the current state's messages and returns the updated state including the model's response.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
const systemMessage = new SystemMessage({
    content: `You are a helpful assistant named ${state.agentName}...`,
});

const response = await new ChatOpenAI({ model: "gpt-4o" }).invoke(
    [systemMessage, ...state.messages],
    config
);

return {
    ...state,
    agentName
    messages: response,
};
```

----------------------------------------

TITLE: Integrate CopilotChat Component
DESCRIPTION: This snippet demonstrates how to integrate the `CopilotChat` component into a React application. It allows for a flexible chat interface that can be placed anywhere. The `instructions` prop defines the AI's persona, and `labels` customize the chat window's title and initial message.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_43

LANGUAGE: TypeScript
CODE:
```
import { CopilotChat } from "@copilotkit/react-ui";

export function YourComponent() {
  return (
    <CopilotChat
      instructions={\"You are assisting the user as best as you can. Answer in the best way possible given the data you have.\"}
      labels={{
        title: \"Your Assistant\",
        initial: \"Hi! 👋 How can I assist you today?\",
      }}
    />
  );
}
```

----------------------------------------

TITLE: Initialize OpenAI Assistant Adapter
DESCRIPTION: Demonstrates how to initialize the OpenAIAssistantAdapter using CopilotRuntime, an OpenAI instance, and an assistant ID, with options for enabling code interpreter and file search.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_206

LANGUAGE: typescript
CODE:
```
import { CopilotRuntime, OpenAIAssistantAdapter } from "@copilotkit/runtime";
import OpenAI from "openai";

const copilotKit = new CopilotRuntime();

const openai = new OpenAI({
  organization: "<your-organization-id>",
  apiKey: "<your-api-key>"
});

return new OpenAIAssistantAdapter({
  openai,
  assistantId: "<your-assistant-id>",
  codeInterpreterEnabled: true,
  fileSearchEnabled: true
});
```

----------------------------------------

TITLE: CopilotChat Component API
DESCRIPTION: Documents the <CopilotChat /> component, which provides a full-page chat interface for interacting with your copilot. This component is suitable for dedicated chat experiences.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/index.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
<CopilotChat />
  Description: The CopilotChat component, providing a chat interface for interacting with your copilot.
```

----------------------------------------

TITLE: Accessing Restored Agent State with useCoAgent Hook
DESCRIPTION: After setting a `threadId` on the `CopilotKit` component, the state of any agent within that thread will be automatically restored. This snippet demonstrates how to access the restored state of a named agent using the `useCoAgent` hook.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_211

LANGUAGE: TypeScript
CODE:
```
const { state } = useCoAgent({name: "research_agent"});

// state will now be the state of research_agent in the thread id given above
```

----------------------------------------

TITLE: Configure CopilotKit Runtime URL or Public API Key
DESCRIPTION: This snippet demonstrates how to configure the `CopilotKit` component with either a `runtimeUrl` for self-hosted backends or a `publicApiKey` for CopilotCloud. Proper configuration is crucial to avoid network and API not found errors, ensuring the frontend can connect to the CopilotKit backend.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/troubleshooting/common-issues.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
<CopilotKit
  runtimeUrl="/api/copilotkit"
>
  {/* Your app */}
</CopilotKit>
```

LANGUAGE: tsx
CODE:
```
<CopilotKit
    publicApiKey="<your-copilot-cloud-public-api-key>"
>
    {/* Your app */}
</CopilotKit>
```

----------------------------------------

TITLE: Defining Agent State with CopilotKit in Python
DESCRIPTION: Defines the agent's state by inheriting from CopilotKitState and adding a custom property `agent_name` to store the agent's name.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
# ...
from copilotkit import CopilotKitState # extends MessagesState
# ...

# This is the state of the agent.
# It inherits from the CopilotKitState properties from CopilotKit.
class AgentState(CopilotKitState):
    agent_name: str
```

----------------------------------------

TITLE: Property: instructions
DESCRIPTION: Custom instructions to be added to the system message. Use this property to provide additional context or guidance to the language model, influencing its responses. These instructions can include specific directions, preferences, or criteria that the model should consider when generating its output, thereby tailoring the conversation more precisely to the user's needs or the application's requirements.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/CopilotPopup.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
instructions: string
  Custom instructions to be added to the system message. Use this property to provide additional context or guidance to the language model, influencing its responses. These instructions can include specific directions, preferences, or criteria that the model should consider when generating its output, thereby tailoring the conversation more precisely to the user's needs or the application's requirements.
```

----------------------------------------

TITLE: Configure CoAgent to Emit State for Reactive UI Updates
DESCRIPTION: This Python snippet demonstrates how to configure a CoAgent to emit intermediate state, specifically `search_progress`, which is then consumed by the `useCoAgentStateRender` hook for custom rendering. It involves using `copilotkit_customize_config` to define the state key and associated tool, and `copilotkit_emit_state` to send the state updates.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-travel/ui/lib/hooks/README.md#_snippet_0

LANGUAGE: python
CODE:
```
    # ...
    config = copilotkit_customize_config(
        config,
        emit_intermediate_state=[{
            "state_key": "search_progress",
            "tool": "search_for_places",
            "tool_argument": "search_progress"
        }]
    )
    # ...
    await copilotkit_emit_state(config, state)
    # ...
```

----------------------------------------

TITLE: CopilotKit Component Properties Reference
DESCRIPTION: Detailed reference for the properties available on the `CopilotKit` component, used to configure its behavior and integrate with various CopilotKit services.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/CopilotKit.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
CopilotKit Properties:
- name: publicApiKey
  type: string
  description: Your Copilot Cloud API key. Don't have it yet? Go to https://cloud.copilotkit.ai and get one for free.
- name: guardrails_c
  type: { validTopics?: string[]; invalidTopics?: string[]; }
  description: Restrict input to specific topics using guardrails.
    This feature is only available when using CopilotKit's hosted cloud service. To use this feature, sign up at https://cloud.copilotkit.ai to get your publicApiKey. The feature allows restricting chat conversations to specific topics.
- name: runtimeUrl
  type: string
  description: The endpoint for the Copilot Runtime instance. [Click here for more information](/concepts/copilot-runtime).
- name: transcribeAudioUrl
  type: string
  description: The endpoint for the Copilot transcribe audio service.
- name: textToSpeechUrl
  type: string
  description: The endpoint for the Copilot text to speech service.
- name: headers
  type: Record<string, string>
  description: Additional headers to be sent with the request.
    For example:
    ```json
    {
      "Authorization": "Bearer X"
    }
    ```
- name: children
  type: ReactNode
  required: true
  description: The children to be rendered within the CopilotKit.
- name: properties
  type: Record<string, any>
  description: Custom properties to be sent with the request
    For example:
    ```js
    {
      'user_id': 'users_id',
    }
    ```
- name: credentials
  type: RequestCredentials
  description: Indicates whether the user agent should send or receive cookies from the other domain
    in the case of cross-origin requests.
- name: showDevConsole
  type: boolean | 'auto'
  description: Whether to show the dev console.
    If set to "auto", the dev console will be show on localhost only.
- name: agent
  type: string
  description: The name of the agent to use.
- name: forwardedParameters
  type: Pick<ForwardedParametersInput, 'temperature'>
  description: The forwarded parameters to use for the task.
- name: authConfig_c
  type: { SignInComponent: React.ComponentType<{ onSignInComplete: (authState: AuthState) => void; }>; }
  description: The auth config to use for the CopilotKit.
    This feature is only available when using CopilotKit's hosted cloud service. To use this feature, sign up at https://cloud.copilotkit.ai to get your publicApiKey. The feature allows restricting chat conversations to specific topics.
- name: threadId
  type: string
  description: The thread id to use for the CopilotKit.
```

----------------------------------------

TITLE: Initialize CopilotRuntime Instance
DESCRIPTION: Demonstrates how to import and create a new instance of the `CopilotRuntime` class, which is necessary to set up the CopilotKit backend for LLM operations.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_54

LANGUAGE: TypeScript
CODE:
```
import { CopilotRuntime } from "@copilotkit/runtime";

const copilotKit = new CopilotRuntime();
```

----------------------------------------

TITLE: Accessing Properties from useCoAgent Hook
DESCRIPTION: Illustrates how to destructure and access various properties returned by the `useCoAgent` hook, such as `name`, `state`, `setState`, `running`, `start`, `stop`, and `run`, which are essential for interacting with the agent.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_28

LANGUAGE: typescript
CODE:
```
const {
  name,     // The name of the agent currently being used.
  nodeName, // The name of the current LangGraph node.
  state,    // The current state of the agent.
  setState, // A function to update the state of the agent.
  running,  // A boolean indicating if the agent is currently running.
  start,    // A function to start the agent.
  stop,     // A function to stop the agent.
  run,      // A function to re-run the agent. Takes a HintFunction to inform the agent why it is being re-run.
} = agent;
```

----------------------------------------

TITLE: Install CopilotKit Python SDK and Dependencies using Conda
DESCRIPTION: Instructions to create and activate a new Conda environment and install `copilotkit`, `fastapi`, and `uvicorn` dependencies using Conda, with an option for `crewai` support.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/remote-backend-endpoint.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
conda create -n your_env_name python=3.8
conda activate your_env_name
```

LANGUAGE: bash
CODE:
```
conda install copilotkit fastapi uvicorn -c copilotkit-channel
# or including support for crewai
conda install copilotkit[crewai] fastapi uvicorn -c copilotkit-channel
```

----------------------------------------

TITLE: CopilotKit Component Properties Reference
DESCRIPTION: Detailed API documentation for the properties available on the CopilotKit component, including their types, descriptions, and usage notes.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_32

LANGUAGE: APIDOC
CODE:
```
CopilotKit Properties:
- publicApiKey: string
  Your Copilot Cloud API key. Don't have it yet? Go to https://cloud.copilotkit.ai and get one for free.
- guardrails_c: { validTopics?: string[]; invalidTopics?: string[]; }
  Restrict input to specific topics using guardrails. This feature is only available when using CopilotKit's hosted cloud service. To use this feature, sign up at https://cloud.copilotkit.ai to get your publicApiKey. The feature allows restricting chat conversations to specific topics.
- runtimeUrl: string
  The endpoint for the Copilot Runtime instance.
- transcribeAudioUrl: string
  The endpoint for the Copilot transcribe audio service.
- textToSpeechUrl: string
  The endpoint for the Copilot text to speech service.
- headers: Record<string, string>
  Additional headers to be sent with the request.
- children: ReactNode (required)
  The children to be rendered within the CopilotKit.
- properties: Record<string, any>
  Custom properties to be sent with the request.
- credentials: RequestCredentials
  Indicates whether the user agent should send or receive cookies from the other domain in the case of cross-origin requests.
- showDevConsole: boolean | 'auto'
  Whether to show the dev console. If set to "auto", the dev console will be show on localhost only.
- agent: string
  The name of the agent to use.
- forwardedParameters: Pick<ForwardedParametersInput, 'temperature'>
  The forwarded parameters to use for the task.
- authConfig_c: { SignInComponent: React.ComponentType<{ onSignInComplete: (authState: AuthState) => void; }>; }
  The auth config to use for the CopilotKit. This feature is only available when using CopilotKit's hosted cloud service. To use this feature, sign up at https://cloud.copilotkit.ai to get your publicApiKey. The feature allows restricting chat conversations to specific topics.
- threadId: string
  The thread id to use for the CopilotKit.
- mcpEndpoints: Array<{ endpoint: string; apiKey?: string }>
  Config for connecting to Model Context Protocol (MCP) servers. Enables CopilotKit runtime to access tools on external MCP servers. This config merges into the `properties` object with each request as `mcpEndpoints`. It offers a typed method to set up MCP endpoints for requests. Each array item should have: `endpoint`: MCP server URL (mandatory), `apiKey`: Optional API key for server authentication. Note: A `createMCPClient` function is still needed during runtime initialization to manage these endpoints.
```

----------------------------------------

TITLE: Resolve Localhost Connection Errors with 127.0.0.1
DESCRIPTION: When running locally, connection errors might occur due to DNS resolution issues with `localhost`. This snippet provides a `bash` example demonstrating how to resolve such issues by using the IP address `127.0.0.1` instead of `localhost` in your endpoint URLs.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/troubleshooting/common-issues.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
# If this doesn't work:
http://localhost:3000/api/copilotkit

# Try this instead:
http://127.0.0.1:3000/api/copilotkit
```

----------------------------------------

TITLE: Define a LangGraphAgent with Name and Graph
DESCRIPTION: This example demonstrates how to instantiate a `LangGraphAgent` in CopilotKit, specifying its required `name` and `graph` properties. An optional `description` can be added for dynamic routing.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_169

LANGUAGE: Python
CODE:
```
from copilotkit import LangGraphAgent

LangGraphAgent(
    name="email_agent",
    description="This agent sends emails",
    graph=graph,
)
```

----------------------------------------

TITLE: Define Schema for LangGraph Agent Configurables
DESCRIPTION: This snippet illustrates how to define a schema for agent configurables, ensuring that only specified properties are accepted. Any configurable item not included in this schema will be filtered out, providing better control over agent inputs.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/advanced/adding-runtime-configuration.mdx#_snippet_2

LANGUAGE: python
CODE:
```
from typing import TypedDict

# define which properties will be allowed in the configuration
class ConfigSchema(TypedDict):
  authToken: str

# ...add all necessary graph nodes

# when defining the state graph, apply the config schema
workflow = StateGraph(AgentState, config_schema=ConfigSchema)
```

LANGUAGE: typescript
CODE:
```
import { Annotation } from "@langchain/langgraph";

// define which properties will be allowed in the configuration
export const ConfigSchemaAnnotation = Annotation.Root({
  authToken: Annotation<string>
})

// ...add all necessary graph nodes

// when defining the state graph, apply the config schema
const workflow = new StateGraph(AgentStateAnnotation, ConfigSchemaAnnotation)
```

----------------------------------------

TITLE: Initializing CopilotKit in Router Mode (TSX)
DESCRIPTION: This snippet demonstrates how to initialize the `CopilotKit` provider in Router Mode. It requires specifying a `runtimeUrl` prop, which points to the Copilot runtime endpoint, and intentionally omitting the `agent` prop. In this mode, CopilotKit dynamically routes requests between different agents or actions based on user input, acting as a central hub for chat-first experiences.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/multi-agent-flows.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
<CopilotKit runtimeUrl="<copilot-runtime-url>">\n  {/* Your application components */}\n</CopilotKit>
```

----------------------------------------

TITLE: Start Frontend Development Server for CopilotKit UI
DESCRIPTION: This snippet provides the commands to set up and run the frontend application. It involves navigating to the `ui` directory, configuring environment variables by copying and editing the `.env.example` file, installing project dependencies, and finally starting the development server. The `.env` file requires `NEXT_PUBLIC_AGENT_NAME` (default `restaurant_finder_agent`) and `NEXT_PUBLIC_CPK_PUBLIC_API_KEY` (your Copilot Cloud Public API Key).
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/agent/demo/crewai_crew_enterprise/restaurant_finder_crew/README.mdx#_snippet_0

LANGUAGE: sh
CODE:
```
cd ui
cp .env.example .env
pnpm install
pnpm run dev
```

----------------------------------------

TITLE: Serve a Crew-based Agent with CopilotKit
DESCRIPTION: This snippet demonstrates how to serve a Crew-based agent by passing a `Crew` object to the `crew` parameter of `CrewAIAgent`. Ensure that the `Crew` object has a `chat_llm` set for proper functionality.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_162

LANGUAGE: Python
CODE:
```
from copilotkit import CrewAIAgent


CrewAIAgent(
    name="email_agent_crew",
    description="This crew based agent sends emails",
    crew=SendEmailCrew(),
)
```

----------------------------------------

TITLE: Configuring CopilotKit for Router Mode (TypeScript)
DESCRIPTION: This snippet demonstrates how to configure the `CopilotKit` provider component to operate in Router Mode. It requires specifying the `runtimeUrl` prop, which points to the CopilotKit runtime endpoint, while omitting the `agent` prop. In this mode, CopilotKit dynamically routes user requests to the most appropriate agent or action based on context.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/mastra/multi-agent-flows.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
<CopilotKit runtimeUrl="<copilot-runtime-url>">
  {/* Your application components */}
</CopilotKit>
```

----------------------------------------

TITLE: Configure CopilotKit to Emit Intermediate State in Python Agent
DESCRIPTION: This Python code snippet demonstrates how to use `copilotkit_customize_config` to set up `emit_intermediate_state`. This property defines a list of objects, each specifying a `state_key`, `tool`, and `tool_argument`, which are used to predictively emit the agent's state to the frontend based on tool calls. This allows for real-time updates of generated content, such as research sections.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-8-progressive-state-updates.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
from copilotkit.langchain import copilotkit_customize_config, copilotkit_emit_state

# ...
@tool("section_writer", args_schema=SectionWriterInput, return_direct=True)
async def section_writer(research_query, section_title, idx, state):
    """Writes a specific section of a research report based on the query, section title, and provided sources."""

    # ...

    # Define the state keys that we want to emit, pre-created for this tutorial
    content_state = {
        "state_key": f"section_stream.content.{idx}.{section_id}.{section_title}",
        "tool": "WriteSection",
        "tool_argument": "content"
    }
    footer_state = {
        "state_key": f"section_stream.footer.{idx}.{section_id}.{section_title}",
        "tool": "WriteSection",
        "tool_argument": "footer"
    }

    config = copilotkit_customize_config(
        config,
        emit_intermediate_state=[content_state, footer_state]
    )

    # ...

    # The LLM will take this new config and the tool calls
    # we defined will be emitted to the frontend predictively.
    response = await model.bind_tools([WriteSection]).ainvoke(lc_messages, config)

    # ...
```

----------------------------------------

TITLE: Define a Weather Tool and Use it with Agent in Python
DESCRIPTION: This Python snippet defines a `WEATHER_TOOL` as a function for an agent, specifying its name (`get_weather`), description, and parameters (e.g., `location`). It then demonstrates how to include this tool in the `completion` call using `copilotkit_stream` to enable the agent to invoke it.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/generative-ui/tool-based.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
from crewai.flow.flow import start
from litellm import completion
# ...

# [!code highlight:17]
WEATHER_TOOL = {
    "type": "function",
    "function": {
        "name": "get_weather",
        "description": "Get the weather for a given location.",
        "parameters": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string",
                    "description": "The location to get weather for"
                }
            },
            "required": ["location"]
        }
    }
}

# ...

@start
async def chat(self):

    response = await copilotkit_stream(
        completion(
            model="openai/gpt-4o",
            messages=[
                {"role": "system", "content": prompt},
                *self.state.get("messages", [])
            ],
            tools=[WEATHER_TOOL],
            stream=True
        )
    )

    # ...
```

----------------------------------------

TITLE: agent-py/sample_agent/agent.py
DESCRIPTION: This Python snippet shows how to use `copilotkit_interrupt` within a `chat_node` function to retrieve messages and an agent name from an interrupt. It updates the agent's state with these new messages and the agent name, ensuring the agent is aware of the interaction.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_13

LANGUAGE: python
CODE:
```
from copilotkit import copilotkit_interrupt

# ...
async def chat_node(state: AgentState, config: RunnableConfig)
    agent_name, new_messages = copilotkit_interrupt(message="Before we start, what would you like to call me?")
    state["messages"] = state["messages"] + new_messages
    state["agent_name"] = agent_name
    # ... add the rest of the node implementation, including LLM calls etc.

    # Don't forget to return the messages list with our newly added interrupt messages, and the new agent name
    return { "messages": state["messages"], "agent_name": state["agent_name"] }
# ...
```

----------------------------------------

TITLE: Handle LangGraph Interrupt in React Frontend
DESCRIPTION: Illustrates how to use the `useLangGraphInterrupt` hook in a React component to render a custom UI when an interrupt event occurs. This frontend logic captures user input from a form and resolves the interrupt, sending the response back to the LangGraph agent.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_266

LANGUAGE: TypeScript
CODE:
```
import { useLangGraphInterrupt } from "@copilotkit/react-core";
// ...

const YourMainContent = () => {
// ...

// styles omitted for brevity
useLangGraphInterrupt({
    render: ({ event, resolve }) => (
        <div>
            <p>{event.value}</p>
            <form onSubmit={(e) => {
                e.preventDefault();
                resolve((e.target as HTMLFormElement).response.value);
            }}>
                <input type="text" name="response" placeholder="Enter your response" />
                <button type="submit">Submit</button>
            </form>
        </div>
    )
});
// ...

return <div>{/* ... */}</div>
}
```

----------------------------------------

TITLE: React Hook for Agent State Rendering (useCoAgentStateRender)
DESCRIPTION: This TypeScript/TSX code snippet demonstrates how to use the `useCoAgentStateRender` hook from `@copilotkit/react-core` to receive and conditionally render agent state updates in a React component. It specifically listens for the `search_progress` state key and renders a `<SearchProgress />` component when that state is present, providing real-time feedback to the user.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-5-stream-progress.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
// ...
import { useCoAgent, useCoAgentStateRender } from "@copilotkit/react-core";
import { SearchProgress } from "@/components/SearchProgress";

export const TripsProvider = ({ children }: { children: ReactNode }) => {
  // ...
  
  const { state, setState } = useCoAgent<AgentState>({
    name: "travel",
    initialState: {
      trips: defaultTrips,
      selected_trip_id: defaultTrips[0].id,
    },
  });

  useCoAgentStateRender<AgentState>({
    name: "travel",
    render: ({ state }) => {
      if (state.search_progress) {
        return <SearchProgress progress={state.search_progress} />
      }
      return null;
    },
  });

  // ...
}
```

----------------------------------------

TITLE: Configure CopilotKit Provider in React Application
DESCRIPTION: This React component snippet demonstrates how to wrap your application with <CopilotKit>, providing the public API key from Copilot Cloud and specifying the agent name. It should typically be placed in layout.tsx.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_4

LANGUAGE: typescript
CODE:
```
import "./globals.css";
import { ReactNode } from "react";
import { CopilotKit } from "@copilotkit/react-core";

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body>
        {/* Use the public api key you got from Copilot Cloud  */}
        <CopilotKit
          publicApiKey="<your-copilot-cloud-public-api-key>"
          agent="sample_agent" // the name of the agent you want to use
        >
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Define AI Action to Fill Incident Report Form
DESCRIPTION: Registers a `CopilotAction` named `fillIncidentReportForm` that allows the AI to update specific fields of the incident report form. It defines parameters the AI can use and a handler function to apply the values to the form.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-form-filling/README.md#_snippet_6

LANGUAGE: tsx
CODE:
```
useCopilotAction({
  name: "fillIncidentReportForm",
  description: "Fill out the incident report form",
  parameters: [
    {
      name: "fullName",
      type: "string",
      required: true,
      description: "The full name of the person reporting the incident"
    },
    // other parameters ...
  ],
  handler: async (action) => {
    form.setValue("name", action.fullName);
    form.setValue("email", action.email);
    form.setValue("description", action.incidentDescription);
    form.setValue("date", new Date(action.date));
    form.setValue("impactLevel", action.incidentLevel);
    form.setValue("incidentType", action.incidentType);
  },
});
```

----------------------------------------

TITLE: Cloning AG2 CopilotKit Starter Repository (Bash)
DESCRIPTION: Clones the `ag2-copilotkit-starter` GitHub repository and navigates into the project directory, providing the initial setup for the Personalized Travel Planner application.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/ag2/quickstart.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/ag2ai/ag2-copilotkit-starter.git
cd ag2-copilotkit-starter
```

----------------------------------------

TITLE: Cloning CoAgents Starter Repo (Python)
DESCRIPTION: Clones the CopilotKit repository with a sparse checkout to specifically retrieve the Python LangGraph agent starter directory, preparing the environment for development.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/quickstart.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
git clone -n --depth=1 --filter=tree:0 https://github.com/CopilotKit/CopilotKit && cd CopilotKit && git sparse-checkout set --no-cone examples/coagents-starter/agent-py && git checkout && cd ..
cd CopilotKit/examples/coagents-starter/agent-py
```

----------------------------------------

TITLE: Customizing User Messages in CopilotKit (TypeScript)
DESCRIPTION: This snippet demonstrates how to customize the `UserMessage` component in CopilotKit. It shows how to apply custom styling (e.g., background color, text color, rounded corners) and add an avatar to user messages. The `message` prop contains the user's message text.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/bring-your-own-components.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { UserMessageProps } from "@copilotkit/react-ui";
import { CopilotKit } from "@copilotkit/react-core";
import { CopilotSidebar } from "@copilotkit/react-ui";
import "@copilotkit/react-ui/styles.css";

const CustomUserMessage = (props: UserMessageProps) => {
  const wrapperStyles = "flex items-center gap-2 justify-end mb-4";
  const messageStyles = "bg-blue-500 text-white py-2 px-4 rounded-xl break-words flex-shrink-0 max-w-[80%]";
  const avatarStyles = "bg-blue-500 shadow-sm min-h-10 min-w-10 rounded-full text-white flex items-center justify-center";

  return (
    <div className={wrapperStyles}>
      <div className={messageStyles}>{props.message}</div>
      <div className={avatarStyles}>TS</div>
    </div>
  );
};

<CopilotKit>
  <CopilotSidebar UserMessage={CustomUserMessage} />
</CopilotKit>
```

----------------------------------------

TITLE: Basic Usage of CopilotSidebar Component
DESCRIPTION: This example demonstrates how to import and integrate the `CopilotSidebar` component into a React application. It shows how to set custom labels for the sidebar's title and initial message, wrapping `YourApp` within the sidebar.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/CopilotSidebar.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { CopilotSidebar } from "@copilotkit/react-ui";
import "@copilotkit/react-ui/styles.css";

<CopilotSidebar
  labels={{
    title: "Your Assistant",
    initial: "Hi! 👋 How can I assist you today?",
  }}
>
  <YourApp/>
</CopilotSidebar>
```

----------------------------------------

TITLE: Install CopilotKit Packages
DESCRIPTION: Install the latest packages for CopilotKit, including UI and core components, using npm.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_40

LANGUAGE: bash
CODE:
```
npm install @copilotkit/react-ui @copilotkit/react-core
```

----------------------------------------

TITLE: Creating a 'sayHello' Frontend Action with useCopilotAction in TypeScript
DESCRIPTION: This snippet demonstrates how to define a frontend action using the `useCopilotAction` hook from `@copilotkit/react-core`. The 'sayHello' action takes a 'name' parameter, is marked as 'remote' (meaning it's primarily for agent use), and triggers a browser alert to greet the user. This allows AI agents to directly interact with the user interface.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/frontend-actions.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCopilotAction } from "@copilotkit/react-core"

export function Page() {
  // ...

  useCopilotAction({
    name: "sayHello",
    description: "Say hello to the user",
    available: "remote", // optional, makes it so the action is *only* available to the agent
    parameters: [
      {
        name: "name",
        type: "string",
        description: "The name of the user to say hello to",
        required: true,
      }
    ],
    handler: async ({ name }) => {
      alert(`Hello, ${name}!`);
    }
  });

  // ...
}
```

----------------------------------------

TITLE: Invoking Flow Agent Asynchronously for Streamed Tool Calls (Python)
DESCRIPTION: When you invoke your Flow agent, you can invoke it synchronously or asynchronously. If you invoke it synchronously, the tool calls will not be streamed progressively, only the final result will be streamed. If you invoke it asynchronously, the tool calls will be streamed progressively.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/troubleshooting/common-issues.mdx#_snippet_1

LANGUAGE: python
CODE:
```
config = copilotkit_customize_config(config, emit_tool_calls=["say_hello_to"])
response = await llm_with_tools.ainvoke(
    [ SystemMessage(content=system_message), *state["messages"] ],
    config=config
)
```

----------------------------------------

TITLE: Initialize CopilotRuntime in TypeScript/TSX
DESCRIPTION: Demonstrates how to import the `CopilotRuntime` class from the `@copilotkit/runtime` package and instantiate it. This is the foundational step for setting up the CopilotKit back-end.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/CopilotRuntime.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { CopilotRuntime } from "@copilotkit/runtime";

const copilotKit = new CopilotRuntime();
```

----------------------------------------

TITLE: Starting CopilotKit Dev Tunnel
DESCRIPTION: Starts a development tunnel using the CopilotKit CLI, exposing a local LangGraph agent running on port 8000 to Copilot Cloud for remote access.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/quickstart.mdx#_snippet_13

LANGUAGE: bash
CODE:
```
npx copilotkit@latest dev --port 8000
```

----------------------------------------

TITLE: Initializing CopilotKit CLI (Bash)
DESCRIPTION: Use the CopilotKit CLI to automatically set up a NextJS application for CopilotKit integration. This command initializes the necessary configuration and files.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/quickstart.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx copilotkit@latest init
```

----------------------------------------

TITLE: Define Agent State for CopilotKit Agents
DESCRIPTION: This snippet illustrates how to define the shared agent state. In Python, it extends `CopilotKitState` to ensure compatibility with CopilotKit's state management. In TypeScript, it defines a type alias for the state structure, which should mirror the backend agent's state.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_271

LANGUAGE: Python
CODE:
```
from copilotkit import CopilotKitState
from typing import Literal

class AgentState(CopilotKitState):
    language: Literal["english", "spanish"] = "english"
```

LANGUAGE: TypeScript
CODE:
```
type AgentState = {
  language: "english" | "spanish";
}
```

----------------------------------------

TITLE: Customizing Assistant Messages in CopilotKit (TypeScript)
DESCRIPTION: This snippet illustrates how to customize the `AssistantMessage` component in CopilotKit. It removes the default background, adds a custom avatar with an icon, and handles the display of markdown content, loading states, and generative UI sub-components. Key props include `message`, `isLoading`, and `subComponent`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/bring-your-own-components.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { AssistantMessageProps } from "@copilotkit/react-ui";
import { useChatContext } from "@copilotkit/react-ui";
import { Markdown } from "@copilotkit/react-ui";
import { SparklesIcon } from "@heroicons/react/24/outline";

import { CopilotKit } from "@copilotkit/react-core";
import { CopilotSidebar } from "@copilotkit/react-ui";
import "@copilotkit/react-ui/styles.css";

const CustomAssistantMessage = (props: AssistantMessageProps) => {
  const { icons } = useChatContext();
  const { message, isLoading, subComponent } = props;

  const avatarStyles = "bg-zinc-400 border-zinc-500 shadow-lg min-h-10 min-w-10 rounded-full text-white flex items-center justify-center";
  const messageStyles = "px-4 rounded-xl pt-2";

  const avatar = <div className={avatarStyles}><SparklesIcon className="h-6 w-6" /></div>

  // [!code highlight:13]
  return (
    <div className="py-2">
      <div className="flex items-start">
        {!subComponent && avatar}
        <div className={messageStyles}>
          {message && <Markdown content={message || ""} /> }
          {isLoading && icons.spinnerIcon}
        </div>
      </div>
      <div className="my-2">{subComponent}</div>
    </div>
  );
};

<CopilotKit>
  <CopilotSidebar AssistantMessage={CustomAssistantMessage} />
</CopilotKit>
```

----------------------------------------

TITLE: Register CopilotKit Backend API Routes
DESCRIPTION: Configures the backend API routes for CopilotKit, linking a specific resource ID (e.g., 'weatherAgent') to the CopilotKit runtime endpoint. This enables the AI agent to communicate with the application's backend.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/mastra/quickstart.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
registerCopilotKit<WeatherRuntimeContext>({
  path: "/copilotkit",
  resourceId: "weatherAgent",
})
```

----------------------------------------

TITLE: Combine CopilotKit Components (TSX)
DESCRIPTION: Assemble the `CopilotKit` provider, `McpServerManager`, `CopilotChat`, and `ToolRenderer` components into a single page or layout to create a complete CopilotKit integration.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/model-context-protocol.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
"use client";

import { CopilotKit } from "@copilotkit/react-core";
import { CopilotChat } from "@copilotkit/react-ui";
import McpServerManager from "./McpServerManager";
import { ToolRenderer } from "./ToolRenderer";

export default function Page() {
  return (

```

----------------------------------------

TITLE: React Hook for Initializing and Interacting with AI Crews
DESCRIPTION: The `useCrewQuickstart` hook provides a minimal example for setting up and interacting with an AI crew. It integrates `useCoAgent` for managing agent state, `useCopilotChat` for chat interactions, and `useCopilotAction` to define actions like `getInputs`. The hook handles initial message rendering, input collection from the user, and dynamically enables/disables additional instructions based on input availability.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/crew-quickstart.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
/**
 * useCrewQuickstart
 * Minimal example that:
 * 1) Sets up a crew/agent
 * 2) Handles text-based user input (get_input)
 * 3) Renders real-time crew state
 * 4) Handles "crew_requesting_feedback"
 */
export const useCrewQuickstart = ({
  crewName,
  inputs,
}: {
  crewName: string;
  inputs: Array<string>;
}): {
  output: string;
} => {
  const [initialMessageSent, setInitialMessageSent] = useState(false);

  const { state, setState, run } = useCoAgent<
    CrewsAgentState & {
      result: string;
      inputs: Record<string, string>;
    }
  >({
    name: crewName,
    initialState: {
      inputs: {},
      result: "Crew result will appear here...",
    },
  });

  const { appendMessage, isLoading } = useCopilotChat();

  const instructions =
    "INPUTS ARE ABSOLUTELY REQUIRED. Please call getInputs before proceeding with anything else.";

  // Render an initial message when the chat is first loaded
  useEffect(() => {
    if (initialMessageSent || isLoading) return;

    setTimeout(async () => {
      await appendMessage(
        new TextMessage({
          content: "Hi, Please provide your inputs before we get started.",
          role: MessageRole.Developer,
        })
      );
      setInitialMessageSent(true);
    }, 0);
  }, []);

  useEffect(() => {
    if (!initialMessageSent && Object.values(state?.inputs || {}).length > 0) {
      appendMessage(
        new TextMessage({
          role: MessageRole.Developer,
          content: "My inputs are: " + JSON.stringify(state?.inputs),
        })
      ).then(() => {
        setInitialMessageSent(true);
      });
    }
  }, [initialMessageSent, state?.inputs]);

  useCopilotAdditionalInstructions({
    instructions,
    available:
      Object.values(state?.inputs || {}).length > 0 ? "enabled" : "disabled",
  });

  useCopilotAction({
    name: "getInputs",
    followUp: false,
    description:
      "This action allows Crew to get required inputs from the user before starting the Crew.",
    renderAndWaitForResponse({ status }) {
      if (status === "inProgress" || status === "executing") {
        return (
          <form
            style={{ display: "flex", flexDirection: "column", gap: "16px" }}
            onSubmit={async (e: React.FormEvent<HTMLFormElement>) => {
              e.preventDefault();
              const form = e.currentTarget;
              const input = form.elements.namedItem(
                "input"
              ) as HTMLTextAreaElement;
              const inputValue = input.value;
              const inputKey = input.id;

              setState({
                ...state,
                inputs: {
                  ...state.inputs,
                  [inputKey]: inputValue,

```

----------------------------------------

TITLE: Using useCopilotReadable for Hierarchical State in React
DESCRIPTION: This snippet illustrates how to use `useCopilotReadable` in nested React components to maintain a hierarchical structure of information. By passing a `parentId`, child components can link their context to a parent's, which is especially useful for lists or complex UIs.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_89

LANGUAGE: TypeScript
CODE:
```
import { useCopilotReadable } from "@copilotkit/react-core";

function Employee(props: EmployeeProps) {
  const { employeeName, workProfile, metadata } = props;

  // propagate any information to copilot
  const employeeContextId = useCopilotReadable({
    description: "Employee name",
    value: employeeName
  });

  // Pass a parentID to maintain a hierarchical structure.
  // Especially useful with child React components, list elements, etc.
  useCopilotReadable({
    description: "Work profile",
    value: workProfile.description(),
    parentId: employeeContextId
  });

  useCopilotReadable({
    description: "Employee metadata",
    value: metadata.description(),
    parentId: employeeContextId
  });

  return (
    // Render as usual...
  );
}
```

----------------------------------------

TITLE: Defining a Weather Information Tool in TypeScript
DESCRIPTION: This TypeScript snippet defines a `weatherInfo` tool using `@mastra/core/tools` and `zod` for schema validation. It specifies an input schema for `city` and includes a placeholder `execute` function for fetching weather data. This tool is designed to be invoked by an LLM to retrieve current weather conditions.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/mastra/generative-ui/tool-based.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { createTool } from "@mastra/core/tools";
import { z } from "zod";
 
export const weatherInfo = createTool({
  id: "weatherInfo",
  inputSchema: z.object({
    city: z.string(),
  }),
  description: `Fetches the current weather information for a given city`,
  execute: async ({ context: { city } }) => {
    // Tool logic here (e.g., API call)
    console.log("Using tool to fetch weather information for", city);
    return { temperature: 20, conditions: "Sunny" }; // Example return
  },
});
```

----------------------------------------

TITLE: Exiting CopilotKit Agent Loop in LangGraph
DESCRIPTION: This Python example demonstrates how to explicitly exit a CopilotKit agent session within a LangGraph node using `copilotkit_exit`. The agent then manually sends a `ToolMessage` response back to the user, indicating success or cancellation.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_277

LANGUAGE: Python
CODE:
```
from copilotkit.langgraph import (copilotkit_exit)
# ...
async def send_email_node(state: EmailAgentState, config: RunnableConfig):
    """Send an email."""

    await copilotkit_exit(config)

    # get the last message and cast to ToolMessage
    last_message = cast(ToolMessage, state["messages"][-1])
    if last_message.content == "CANCEL":
        return {
            "messages": [AIMessage(content="❌ Cancelled sending email.")],
        }
    else:
        return {
            "messages": [AIMessage(content="✅ Sent email.")],
        }
```

----------------------------------------

TITLE: Integrate CopilotChat for Flexible Chat Interface (React/TSX)
DESCRIPTION: CopilotChat is a flexible chat interface component that can be placed anywhere in your app and resized as you desire. It offers core chat functionality and is ideal for custom layouts or embedding the chat directly into specific sections of your application.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/component-examples.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { CopilotChat } from "@copilotkit/react-ui";

export function YourComponent() {
  return (
    <CopilotChat
      instructions={"You are assisting the user as best as you can. Answer in the best way possible given the data you have."}
      labels={{
        title: "Your Assistant",
        initial: "Hi! 👋 How can I assist you today?"
      }}
    />
  );
}
```

----------------------------------------

TITLE: Initialize OpenAIAdapter with OpenAI
DESCRIPTION: Demonstrates how to initialize the OpenAIAdapter using an existing OpenAI instance with Copilot Runtime. This setup allows CopilotKit to leverage your configured OpenAI client.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_201

LANGUAGE: typescript
CODE:
```
import { CopilotRuntime, OpenAIAdapter } from "@copilotkit/runtime";
import OpenAI from "openai";

const copilotKit = new CopilotRuntime();

const openai = new OpenAI({
  organization: "<your-organization-id>", // optional
  apiKey: "<your-api-key>"
});

return new OpenAIAdapter({ openai });
```

----------------------------------------

TITLE: Configure CopilotKit Observability Logging
DESCRIPTION: Demonstrates how to set up LLM request/response logging using the `observability_c` parameter, including enabling logging, setting progressive mode, and defining custom logger functions for requests, responses, and errors. Also shows the required `CopilotKit` component setup.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/CopilotRuntime.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<CopilotKit publicApiKey="ck_pub
```

----------------------------------------

TITLE: CopilotKit useCopilotAction Hook Example
DESCRIPTION: Demonstrates how to use CopilotKit's `useCopilotAction` hook within a React component to define an AI action for updating car configuration. It specifies action name, description, parameters with types, and a handler function.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-state-machine/README.md#_snippet_4

LANGUAGE: tsx
CODE:
```
// Example from use-stage-build-car.tsx
useCopilotAction({
  name: "updateCarConfiguration",
  description: "Update the car configuration based on user preferences",
  parameters: [
    {
      name: "model",
      type: "string",
      required: true,
      description: "The car model selected by the user"
    },
    // Other parameters...
  ],
  handler: async (action) => {
    // Update state with the new configuration
  }
});
```

----------------------------------------

TITLE: Integrate CopilotSidebar Component in React
DESCRIPTION: Import and use the `CopilotSidebar` component to add a customizable chatbot sidebar to your React application. This example demonstrates basic integration with custom labels for the title and initial message, enhancing the user experience.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_148

LANGUAGE: jsx
CODE:
```
import { CopilotSidebar } from "@copilotkit/react-ui";
import "@copilotkit/react-ui/styles.css";

<CopilotSidebar
  labels={{
    title: "Your Assistant",
    initial: "Hi! 👋 How can I assist you today?"
  }}
>
  <YourApp/>
</CopilotSidebar>
```

----------------------------------------

TITLE: Add CopilotChat Interface (TSX)
DESCRIPTION: Integrate the `CopilotChat` component from `@copilotkit/react-ui` into your page to provide a user interface for interacting with the copilot. Includes the `McpServerManager`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/model-context-protocol.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
"use client";

import { CopilotChat } from "@copilotkit/react-ui";
import McpServerManager from "./McpServerManager";

export default function ChatInterface() {
  return (
    <div className="flex h-screen p-4">
      <McpServerManager />
      <CopilotChat
        instructions="You are a helpful assistant with access to MCP servers."
        className="flex-grow rounded-lg w-full"
      />
    </div>
  );
}
```

----------------------------------------

TITLE: useCopilotReadable Hook Parameters Reference
DESCRIPTION: Detailed reference for the parameters accepted by the `useCopilotReadable` React hook, including their types, descriptions, and whether they are required. These parameters control how application state is provided and structured for the Copilot.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotReadable.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
useCopilotReadable Hook Parameters:
  description: string (required)
    The description of the information to be added to the Copilot context.
  value: any (required)
    The value to be added to the Copilot context. Object values are automatically stringified.
  parentId: string (optional)
    The ID of the parent context, if any.
  categories: string[] (optional)
    An array of categories to control which context are visible where. Particularly useful with CopilotTextarea (see `useMakeAutosuggestionFunction`).
  available: 'enabled' | 'disabled' (optional)
    Whether the context is available to the Copilot.
  convert: (description: string, value: any) => string (optional)
    A custom conversion function to use to serialize the value to a string. If not provided, the value will be serialized using `JSON.stringify`.
```

----------------------------------------

TITLE: Configuring CopilotKit for Tool Call Emission (Python)
DESCRIPTION: In your Flow agent, you must specify which tool calls will be emitted to the CopilotKit runtime. By default, only streamed messages are emitted. You can fix this by adding the following to the node making the tool call.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/troubleshooting/common-issues.mdx#_snippet_0

LANGUAGE: python
CODE:
```
from copilotkit.Flow import copilotkit_customize_config, copilotkit_emit_message
from langgraph_core.runnables import RunnableConfig
from langchain.tools import tool

@tool
def say_hello_to(name: str) -> str:
    return f"Hello, {name}!"

async def my_node(state: State, config: RunnableConfig) -> State:
    # ...
    config = copilotkit_customize_config(config, emit_tool_calls=["say_hello_to"]) # [code highlight]
    # ...
    return state
```

----------------------------------------

TITLE: Execute One-Off Tasks with CopilotTask in React
DESCRIPTION: Demonstrates the simplest way to use `CopilotTask` within a React component. It initializes a task with instructions and a custom action, then executes it on a button click, leveraging the `useCopilotContext` hook.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_47

LANGUAGE: typescript
CODE:
```
import { CopilotTask, useCopilotContext } from "@copilotkit/react-core";

export function MyComponent() {
  const context = useCopilotContext();

  const task = new CopilotTask({
    instructions: "Set a random message",
    actions: [
      {
        name: "setMessage",
        description: "Set the message.",
        argumentAnnotations: [
          {
            name: "message",
            type: "string",
            description:
              "A message to display.",
            required: true,
          },
        ],
      }
    ]
  });

  const executeTask = async () => {
    await task.run(context, action);
  }

  return (
    <>
      <button onClick={executeTask}>
        Execute task
      </button>
    </>
  )
}
```

----------------------------------------

TITLE: Example CopilotTask Usage in React Component
DESCRIPTION: This example demonstrates how to use CopilotTask within a React component to execute a one-off task. It initializes a CopilotTask with instructions and a 'setMessage' action, then defines an asynchronous function to run the task using the current Copilot context. The task is triggered by a button click.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/CopilotTask.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { CopilotTask, useCopilotContext } from "@copilotkit/react-core";
 
export function MyComponent() {
  const context = useCopilotContext();
 
  const task = new CopilotTask({
    instructions: "Set a random message",
    actions: [
      {
        name: "setMessage",
      description: "Set the message.",
      argumentAnnotations: [
        {
          name: "message",
          type: "string",
          description:
            "A message to display.",
          required: true,
        },
      ],
     }
    ]
  });
 
  const executeTask = async () => {
    await task.run(context, action);
  }
 
  return (
    <>
      <button onClick={executeTask}>
        Execute task
      </button>
    </>
  )
}
```

----------------------------------------

TITLE: Implement Custom Logging with CopilotRuntime
DESCRIPTION: This snippet illustrates how to integrate a custom logging service with CopilotRuntime by implementing the `logger` interface. It provides examples of callback functions for `logRequest`, `logResponse`, and `logError` to send LLM interaction data to any preferred system.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
const runtime = new CopilotRuntime({
  adapter: new OpenAIAdapter({ apiKey: "YOUR_API_KEY" }),
  logging: {
    enabled: true,
    progressive: false,
    logger: {
      logRequest: (data) => {
        // Implement your custom logging logic
        console.log("LLM Request:", JSON.stringify(data));
      },
      logResponse: (data) => {
        // Implement your custom logging logic
        console.log("LLM Response:", JSON.stringify(data));
      },
      logError: (error) => {
        // Implement your custom error logging
        console.error("LLM Error:", error);
      }
    }
  }
});
```

----------------------------------------

TITLE: Modify Chat History in CrewAI Flows
DESCRIPTION: This Python snippet demonstrates how to programmatically modify the chat history within CrewAI Flows. By accessing and updating the 'messages' key in the `self.state` dictionary, developers can clear or alter the conversational context, enabling dynamic control over the agent's memory.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/concepts/message-management.mdx#_snippet_0

LANGUAGE: python
CODE:
```
def a_flow_function():
    # ...
    self.state["messages"] = []
```

----------------------------------------

TITLE: Emit Intermediate State to CopilotKit with copilotkit_emit_state
DESCRIPTION: Use `copilotkit_emit_state` to send intermediate state updates to CopilotKit from a long-running LangGraph node. This keeps the user informed about the current progress and state of the node. The state must be JSON serializable.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_115

LANGUAGE: python
CODE:
```
from copilotkit.langgraph import copilotkit_emit_state

for i in range(10):
    await some_long_running_operation(i)
    await copilotkit_emit_state(config, {"progress": i})
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to start the development server for a Next.js application using different package managers like npm, yarn, pnpm, or bun.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter/ui/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Defining Multiple Interrupts in LangGraph Agent Python
DESCRIPTION: This Python snippet demonstrates how to define multiple interrupt points within a LangGraph agent node. It uses the `interrupt` function from `langgraph.types` and includes a 'type' property in the interrupt payload to differentiate between different types of interruptions, such as 'approval' and 'ask'.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_15

LANGUAGE: Python
CODE:
```
from langgraph.types import interrupt
from langchain_core.messages import SystemMessage
from langchain_openai import ChatOpenAI

# ... your full state definition

def chat_node(state: AgentState, config: RunnableConfig):

  state["approval"] = interrupt({ "type": "approval", "content": "please approve" })

  if not state.get("agent_name"):
    # Interrupt and wait for the user to respond with a name
    state["agent_name"] = interrupt({ "type": "ask", "content": "Before we start, what would you like to call me?" })

  # Tell the agent its name
  system_message = SystemMessage(
    content=f"You are a helpful assistant..."
  )

  response = ChatOpenAI(model="gpt-4o").invoke(
    [system_message, *state["messages"]],
    config
  )

  return {
    **state,
    "messages": response,
  }
```

----------------------------------------

TITLE: Advanced CopilotTextarea Usage with State Management (TSX)
DESCRIPTION: Illustrates how to use `CopilotTextarea` with React's `useState` hook to manage its value, apply custom CSS classes, set a placeholder, and configure advanced AI autosuggestion parameters like `maxTokens` and `stop` sequences.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/CopilotTextarea.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { useState } from "react";
import { CopilotTextarea } from "@copilotkit/react-textarea";
import "@copilotkit/react-textarea/styles.css";

export function ExampleComponent() {
  const [text, setText] = useState("");

  return (
    <CopilotTextarea
      className="custom-textarea-class"
      value={text}
      onValueChange={(value: string) => setText(value)}
      placeholder="Enter your text here..."
      autosuggestionsConfig={{
        textareaPurpose: "Provide context or purpose of the textarea.",
        chatApiConfigs: {
          suggestionsApiConfig: {
            maxTokens: 20,
            stop: [".", "?", "!"]
          }
        }
      }}
    />
  );
}
```

----------------------------------------

TITLE: Install Python Backend Dependencies and Configure OpenAI API Key
DESCRIPTION: This section outlines the steps to set up the Python-based CrewAI agent. It covers installing necessary dependencies using Poetry and configuring the OpenAI API key in a .env file. Ensure the provided API key supports gpt-4o.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-flows/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
cd agent-py
poetry install
```

LANGUAGE: plaintext
CODE:
```
OPENAI_API_KEY=...
```

----------------------------------------

TITLE: Manually Emit Predictive State Updates with CopilotKit
DESCRIPTION: This example shows how to manually emit state updates progressively for long-running tasks. It simulates a series of steps, updating the `observed_steps` field and calling `copilotkit_emit_state` (Python) or `copilotkitEmitState` (TypeScript) after each step to provide real-time progress.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/predictive-state-updates.mdx#_snippet_1

LANGUAGE: Python
CODE:
```
from copilotkit.langgraph import copilotkit_emit_state # [!code highlight]
# ...
async def chat_node(state: AgentState, config: RunnableConfig) -> Command[Literal["cpk_action_node", "tool_node", "__end__"]]:
    # ...

    # Simulate executing steps one by one
    steps = [
        "Analyzing input data...",
        "Identifying key patterns...",
        "Generating recommendations...",
        "Formatting final output..."
    ]
    
    for step in steps:
        self.state["observed_steps"] = self.state.get("observed_steps", []) + [step]
        await copilotkit_emit_state(config, state) # [!code highlight]
        await asyncio.sleep(1)

    # ...
```

LANGUAGE: TypeScript
CODE:
```
import { copilotkitEmitState } from "@copilotkit/sdk-js/langgraph"; // [!code highlight]
// ...
async function chat_node(state: AgentState, config: RunnableConfig) {
    // ...

    // Simulate executing steps one by one
    const steps = [
        "Analyzing input data...",
        "Identifying key patterns...",
        "Generating recommendations...",
        "Formatting final output..."
    ];
    
    for (const step of steps) {
        state.observed_steps = [...(state.observed_steps ?? []), step];
        copilotkitEmitState(config, state);
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
}
```

----------------------------------------

TITLE: Observing Agent State Predictions in React (TSX)
DESCRIPTION: This TSX snippet demonstrates how to observe and render both predicted and final agent states in a React component using CopilotKit's `useCoAgent` and `useCoAgentStateRender` hooks. It displays intermediate progress updates as well as the final list of observed steps.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/predictive-state-updates.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { useCoAgent, useCoAgentStateRender } from '@copilotkit/react-core';

// ...

const YourMainContent = () => {
    // Get access to both predicted and final states
    const { state } = useCoAgent({ name: "sample_agent" });

    // Add a state renderer to observe predictions
    useCoAgentStateRender({
        name: "sample_agent",
        render: ({ state }) => {
            if (!state.observed_steps?.length) return null;
            return (
                <div>
                    <h3>Current Progress:</h3>
                    <ul>
                        {state.observed_steps.map((step, i) => (
                            <li key={i}>{step}</li>
                        ))}
                    </ul>
                </div>
            );
        }
    });

    return (
        <div>
            <h1>Agent Progress</h1>
            {state.observed_steps?.length > 0 && (
                <div>
                    <h3>Final Steps:</h3>
                    <ul>
                        {state.observed_steps.map((step, i) => (
                            <li key={i}>{step}</li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
}
```

----------------------------------------

TITLE: Rendering Agent State within Chat UI (React/TSX)
DESCRIPTION: This React/TSX snippet demonstrates using `useCoAgentStateRender` from `@copilotkit/react-core` to display the agent's state directly within the chat interface. It defines the `AgentState` type to match the backend state and provides a `render` function that maps the `searches` array to visual progress indicators, updating the UI as the agent's state changes.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/generative-ui/agentic.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
// ...
import { useCoAgent, useCoAgentStateRender } from "@copilotkit/react-core";
// ...

// Define the state of the agent, should match the state of the agent in your Flow.
type AgentState = {
  searches: {
    query: string;
    done: boolean;
  }[];
};

function YourMainContent() {
  // ...

  // [!code highlight:14]
  // styles omitted for brevity
  useCoAgentStateRender<AgentState>({
    name: "sample_agent", // the name the agent is served as
    render: ({ state }) => (
      <div>
        {state.searches?.map((search, index) => (
          <div key={index}>
            {search.done ? "✅" : "❌"} {search.query}{search.done ? "" : "..."}
          </div>
        ))}
      </div>
    ),
  });

  // ...

  return <div>...</div>;
}
```

----------------------------------------

TITLE: Rendering Tool Calls in Frontend with useCopilotAction (TSX)
DESCRIPTION: This TSX snippet demonstrates using the `useCopilotAction` hook from `@copilotkit/react-core` to render the `weatherInfo` tool call in the UI. It sets `available: "disabled"` to prevent direct invocation and provides a `render` function to display the tool's status and arguments, offering real-time user feedback during tool execution.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/mastra/generative-ui/tool-based.mdx#_snippet_2

LANGUAGE: TSX
CODE:
```
import { useCopilotAction } from "@copilotkit/react-core"; // [!code highlight]
// ...

const YourMainContent = () => {
  // ...
  // [!code highlight:13]
  useCopilotAction({
    name: "weatherInfo",
    available: "disabled", // Don't allow the agent or UI to call this tool as its only for rendering
    render: ({ status, args }) => {
      return (
        <p className="text-gray-500 mt-2">
          {status !== "complete" && "Calling weather API..."}
          {status === "complete" &&
            `Called the weather API for ${args.location}.`}
        </p>
      );
    }
  });
  // ...
};
```

----------------------------------------

TITLE: Implement Catch-All Rendering for Undefined Actions
DESCRIPTION: This snippet illustrates how to use `useCopilotAction` with `name: "*"` to create a catch-all render method. This allows handling and rendering UI for actions that are not explicitly referenced, receiving the action `name` and `args` dynamically.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/generative-ui.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { useCopilotAction, CatchAllActionRenderProps } from "@copilotkit/react-core";

useCopilotAction({
  name: "*",
  render: ({ name, args, status, result }: CatchAllActionRenderProps<[]>) => {
    return <div>Rendering action: {name}</div>;
  },
});
```

----------------------------------------

TITLE: Start NextJS Development Server with pnpm
DESCRIPTION: Launches the development server for the NextJS application. After execution, the application will be accessible at `http://localhost:3000`, showing an empty chat interface and document as the starting point.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-1-checkout-repo.mdx#_snippet_2

LANGUAGE: shell
CODE:
```
pnpm run dev
```

----------------------------------------

TITLE: Integrating CrewAI Quickstart Component in Next.js
DESCRIPTION: This TypeScript React snippet demonstrates how to integrate the `useCrewQuickstart` hook into a Next.js page. It imports the hook and calls it with the crew name and required inputs, enabling CopilotKit functionality within the application and allowing interaction with the CrewAI agent.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/quickstart.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
"use client";
import React from "react";
import useCrewQuickstart from "./use-crew-quickstart";

export default function YourApp() {
useCrewQuickstart({
    crewName: "<REPLACE_WITH_YOUR_CREW_NAME>",
    /**
     * List of input required to start your crew (location e.g)
    */
    inputs: ["location"]
})
return (
    <>
    {/* Existing markup */}
    </>
);
}
```

----------------------------------------

TITLE: Asynchronous AI Crew Execution with setTimeout
DESCRIPTION: This JavaScript snippet demonstrates how to asynchronously execute an AI 'crew' process using `setTimeout(..., 0)`. This pattern defers the execution of the `run()` function to the next event loop cycle, ensuring non-blocking behavior and allowing the UI to update before a potentially long-running AI operation begins. It logs the start and completion of the crew run.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/crew-quickstart.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
setTimeout(async () => {
  console.log("running crew");
  await run();
  console.log("crew run complete");
}, 0);
```

----------------------------------------

TITLE: Dynamically Switch Threads in CopilotKit
DESCRIPTION: Illustrates how to make the `threadId` dynamic using React's `useState` hook. CopilotKit will automatically load previous messages for the new thread ID when it changes, enabling dynamic thread management within your application.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/persistence/loading-message-history.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { useState } from "react";
import { CopilotKit } from "@copilotkit/react-core";

const Page = () => {
  const [threadId, setThreadId] = useState("af2fa5a4-36bd-4e02-9b55-2580ab584f89"); 
  return (
    <CopilotKit threadId={threadId}> 
      <YourApp setThreadId={setThreadId} /> 
    </CopilotKit>
  )
}

const YourApp = () => {
  return (
    <Button onClick={() => setThreadId("679e8da5-ee9b-41b1-941b-80e0cc73a008")}> 
      Change Thread
    </Button>
  )
}
```

----------------------------------------

TITLE: Implement CopilotSidebar for Collapsible Chat Interface (React/TSX)
DESCRIPTION: CopilotSidebar is a convenience wrapper for CopilotChat that wraps your main content in the view hierarchy. It provides a collapsible and expandable sidebar chat interface, suitable for applications where the assistant needs to be readily accessible but can be hidden.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/component-examples.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { CopilotSidebar } from "@copilotkit/react-ui";

export function YourApp() {
  return (
    <CopilotSidebar
      defaultOpen={true}
      instructions={"You are assisting the user as best as you can. Answer in the best way possible given the data you have."}
      labels={{
        title: "Sidebar Assistant",
        initial: "How can I help you today?"
      }}
    >
      <YourMainContent />
    </CopilotSidebar>
  );
}
```

----------------------------------------

TITLE: Define Agent State for CopilotKit
DESCRIPTION: This section demonstrates how to define the agent's state using `CopilotKitState`. This state is updated as the agent transitions between nodes in LangGraph and is passed to subsequent nodes. It's crucial to explicitly return the state variables, such as 'language', to make them available for both subsequent nodes and the frontend to read.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_260

LANGUAGE: Python
CODE:
```
from copilotkit import CopilotKitState
from typing import Literal

class AgentState(CopilotKitState):
    language: Literal["english", "spanish"] = "spanish"

def chat_node(state: AgentState, config: RunnableConfig):
  # If language is not defined, set a value.
  # this is because a default value in a state class is not read on runtime
  language = state.get("language", "spanish")

  # ... add the rest of the node implementation and use the language variable

  return {
    # ... add the rest of state to return
    # return the language to make it available for the next nodes & frontend to read
    "language": language
  }
```

----------------------------------------

TITLE: Installing CopilotKit Packages (npm) - Cloud
DESCRIPTION: Install the core CopilotKit React UI and Core packages required for integrating CopilotKit into a React/NextJS frontend when using the Copilot Cloud backend.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/quickstart.mdx#_snippet_2

LANGUAGE: npm
CODE:
```
npm install @copilotkit/react-ui @copilotkit/react-core
```

----------------------------------------

TITLE: Install CopilotKit React Packages
DESCRIPTION: Instructions to install the core CopilotKit React UI and React Core packages using npm, which are essential for building Copilot-aware applications.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_104

LANGUAGE: npm
CODE:
```
npm install @copilotkit/react-ui @copilotkit/react-core
```

----------------------------------------

TITLE: Install CopilotKit React UI and Core packages
DESCRIPTION: This command installs the necessary `@copilotkit/react-ui` and `@copilotkit/react-core` packages into your frontend project using npm.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_151

LANGUAGE: npm
CODE:
```
npm install @copilotkit/react-ui @copilotkit/react-core
```

----------------------------------------

TITLE: Install CopilotKit React UI Dependencies
DESCRIPTION: This command installs the necessary `@copilotkit/react-core` and `@copilotkit/react-ui` packages required to use the `useCopilotChatSuggestions` hook and other UI components.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_74

LANGUAGE: Shell
CODE:
```
npm install @copilotkit/react-core @copilotkit/react-ui
```

----------------------------------------

TITLE: Define Agent State Schema
DESCRIPTION: This snippet demonstrates how to define the initial state for a LangGraph agent. It uses `CopilotKitState` in Python and `Annotation.Root` in TypeScript to declare properties like `question`, `answer`, and `resources`, which represent the agent's internal state.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/state-inputs-outputs.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
from copilotkit import CopilotKitState
from typing import Literal

class AgentState(CopilotKitState):
    question: str
    answer: str
    resources: List[str]
```

LANGUAGE: TypeScript
CODE:
```
import { Annotation } from "@langchain/langgraph";
import { CopilotKitStateAnnotation } from "@copilotkit/sdk-js/langgraph";

const AgentState = Annotation.Root({
  ...CopilotKitStateAnnotation.spec,
  question: Annotation<string>,
  answer: Annotation<string>,
  resources: Annotation<string[]>,
})
```

----------------------------------------

TITLE: Implement CopilotPopup for Floating Chat Interface
DESCRIPTION: This example illustrates the usage of the `CopilotPopup` component to create a floating chat interface. It allows configuring instructions for the assistant and customizing labels for the chat title and initial prompt.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_85

LANGUAGE: tsx
CODE:
```
import { CopilotPopup } from "@copilotkit/react-ui";

export function YourApp() {
  return (
    <>
      <YourMainContent />
      <CopilotPopup
        instructions={"You are assisting the user as best as you can. Answer in the best way possible given the data you have."}
        labels={{
          title: "Popup Assistant",
          initial: "Need any help?",
        }}
      />
    </>
  );
}
```

----------------------------------------

TITLE: Generating Copilot Chat Suggestions with `useCopilotChatSuggestions`
DESCRIPTION: This snippet illustrates the basic usage of the `useCopilotChatSuggestions` React hook to generate dynamic chat suggestions. It shows how to configure instructions, minimum, and maximum suggestions. The hook automatically monitors specified dependencies (e.g., `relevantState`) and updates suggestions in real-time whenever these dependencies change, ensuring suggestions remain contextually relevant.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_45

LANGUAGE: TypeScript
CODE:
```
import { useCopilotChatSuggestions } from "@copilotkit/react-ui";

export function MyComponent() {

  useCopilotChatSuggestions(
    {
      instructions: "Suggest the most relevant next actions.",
      minSuggestions: 1,
      maxSuggestions: 2,
    },
    [relevantState],
  );
}
```

----------------------------------------

TITLE: Defining Multiple Interrupts in LangGraph Agent TypeScript
DESCRIPTION: This TypeScript snippet shows how to define multiple interrupt points within a LangGraph agent node using `@langchain/langgraph`. Similar to the Python example, it uses the `interrupt` function and includes a 'type' property in the interrupt payload to distinguish between different interruptions like 'approval' and 'ask'.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_16

LANGUAGE: TypeScript
CODE:
```
import { interrupt } from "@langchain/langgraph";
import { SystemMessage } from "@langchain/core/messages";
import { ChatOpenAI } from "@langchain/openai";

// ... your full state definition

async function chat_node(state: AgentState, config: RunnableConfig) {
  state.approval = await interrupt({ type: "approval", content: "please approve" });

  if (!state.agentName) {
    state.agentName = await interrupt({ type: "ask", content: "Before we start, what would you like to call me?" });
  }

  // Tell the agent its name
  const systemMessage = new SystemMessage({
    content: `You are a helpful assistant...`,
  });

  const response = await new ChatOpenAI({ model: "gpt-4o" }).invoke(
    [systemMessage, ...state.messages],
    config
  );

  return {
    ...state,
    messages: response,
  };
}
```

----------------------------------------

TITLE: Dynamically Change Conversation Thread in React
DESCRIPTION: Illustrates how to use React's `useState` hook to manage and dynamically update the `threadId` property of `<CopilotKit>`, allowing users to switch between different conversation threads during a session.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/persistence/loading-message-history.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { useState } from "react";
import { CopilotKit } from "@copilotkit/react-core";

const Page = () => {
  const [threadId, setThreadId] = useState(
    "af2fa5a4-36bd-4e02-9b55-2580ab584f89"
  );
  return (
    <CopilotKit threadId={threadId}>
      <YourApp setThreadId={setThreadId} />
    </CopilotKit>
  );
};

const YourApp = ({ setThreadId }) => {
  return (
    <Button onClick={() => setThreadId("679e8da5-ee9b-41b1-941b-80e0cc73a008")}>
      Change Thread
    </Button>
  );
};
```

----------------------------------------

TITLE: Implement CopilotPopup UI Component
DESCRIPTION: This React component example demonstrates how to integrate the CopilotPopup for a floating chat interface. It includes instructions for the assistant and custom labels for the UI elements.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_6

LANGUAGE: typescript
CODE:
```
import { CopilotPopup } from "@copilotkit/react-ui";

export function YourApp() {
  return (
    <>
      <YourMainContent />
      <CopilotPopup
        instructions={"You are assisting the user as best as you can. Answer in the best way possible given the data you have."}
        labels={{
          title: "Popup Assistant",
          initial: "Need any help?"
        }}
      />
    </>
  );
}
```

----------------------------------------

TITLE: Implement CopilotPopup for Floating Chat Interface (React/TSX)
DESCRIPTION: CopilotPopup is a convenience wrapper for CopilotChat that lives at the same level as your main content in the view hierarchy. It provides a floating chat interface that can be toggled on and off, ideal for unobtrusive assistant access.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/component-examples.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { CopilotPopup } from "@copilotkit/react-ui";

export function YourApp() {
  return (
    <>
      <YourMainContent />
      <CopilotPopup
        instructions={"You are assisting the user as best as you can. Answer in the best way possible given the data you have."}
        labels={{
          title: "Popup Assistant",
          initial: "Need any help?"
        }}
      />
    </>
  );
}
```

----------------------------------------

TITLE: Basic Usage of useCopilotReadable Hook in React
DESCRIPTION: This example demonstrates the simplest way to use `useCopilotReadable` to make a piece of application state, like a list of employees, available to the Copilot. It accepts a description and the value to be provided as context.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_88

LANGUAGE: TypeScript
CODE:
```
import { useCopilotReadable } from "@copilotkit/react-core";

export function MyComponent() {
  const [employees, setEmployees] = useState([]);

  useCopilotReadable({
    description: "The list of employees",
    value: employees,
  });
}
```

----------------------------------------

TITLE: Render Agent State with useCoAgentStateRender Hook (TSX)
DESCRIPTION: Demonstrates the basic usage of the `useCoAgentStateRender` hook in TypeScript/React (TSX) to render UI components or text based on an agent's state. It illustrates how to define the agent state type and utilize the `render` function to display custom components dynamically.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCoAgentStateRender.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCoAgentStateRender } from "@copilotkit/react-core";
 
type YourAgentState = {
  agent_state_property: string;
}
 
useCoAgentStateRender<YourAgentState>({
  name: "basic_agent",
  nodeName: "optionally_specify_a_specific_node",
  render: ({ status, state, nodeName }) => {
    return (
      <YourComponent
        agentStateProperty={state.agent_state_property}
        status={status}
        nodeName={nodeName}
      />
    );
  }
});
```

----------------------------------------

TITLE: Set up CopilotKit Runtime with Node.js HTTP Server
DESCRIPTION: This snippet demonstrates how to set up a simple Node.js HTTP server to handle CopilotKit Runtime requests. It initializes the runtime with a LangGraph Platform endpoint, configures an OpenAIAdapter, and exposes the CopilotKit endpoint at '/copilotkit'.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-langgraph-endpoint.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { createServer } from 'node:http';
import {
  CopilotRuntime,
  OpenAIAdapter,
  copilotRuntimeNodeHttpEndpoint,
  langGraphPlatformEndpoint
} from '@copilotkit/runtime';
import OpenAI from "openai";

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const serviceAdapter = new OpenAIAdapter({ openai } as any);

const server = createServer((req, res) => {
  const runtime = new CopilotRuntime({
    remoteEndpoints: [
      langGraphPlatformEndpoint({
        deploymentUrl: "your-api-url", // make sure to replace with your real deployment url
        langsmithApiKey: process.env.LANGSMITH_API_KEY, // only used in LangGraph Platform deployments
        agents: [ // List any agents available under "graphs" list in your langgraph.json file; give each a description explaining when it should be called.
          {
            name: 'my_agent',
            description: 'A helpful LLM agent.',
            assistantId: 'your-assistant-ID' // optional, but recommended!
          }
        ]
      }),
    ],
  });

  const handler = copilotRuntimeNodeHttpEndpoint({
    endpoint: '/copilotkit',
    runtime,
    serviceAdapter,
  });

  return handler(req, res);
});

server.listen(4000, () => {
  console.log('Listening at http://localhost:4000/copilotkit');
});
```

----------------------------------------

TITLE: Customizing Chat Input in CopilotKit (TypeScript)
DESCRIPTION: This snippet illustrates how to create a custom input component for the CopilotSidebar using the Input prop. It includes a custom "Ask" button and placeholder text, handling user input submission on Enter key press or button click. The inProgress prop manages input and button disabled states during processing.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/bring-your-own-components.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { InputProps, CopilotSidebar } from "@copilotkit/react-ui";
import { CopilotKit } from "@copilotkit/react-core";
import "@copilotkit/react-ui/styles.css";
function CustomInput({ inProgress, onSend, isVisible }: InputProps) {
  const handleSubmit = (value: string) => {
    if (value.trim()) onSend(value);
  };

  const wrapperStyle = "flex gap-2 p-4 border-t";
  const inputStyle = "flex-1 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500 disabled:bg-gray-100";
  const buttonStyle = "px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:bg-gray-400 disabled:cursor-not-allowed";

  // [!code highlight:28]
  return (
    <div className={wrapperStyle}>
      <input 
        disabled={inProgress}
        type="text" 
        placeholder="Ask your question here..." 
        className={inputStyle}
        onKeyDown={(e) => {
          if (e.key === 'Enter') {
            handleSubmit(e.currentTarget.value);
            e.currentTarget.value = '';
          }
        }}
      />
      <button 
        disabled={inProgress}
        className={buttonStyle}
        onClick={(e) => {
          const input = e.currentTarget.previousElementSibling as HTMLInputElement;
          handleSubmit(input.value);
          input.value = '';
        }}
      >
        Ask
      </button>
    </div>
  );
}

<CopilotKit>
  <CopilotSidebar Input={CustomInput} />
</CopilotKit>
```

----------------------------------------

TITLE: Define Multiple Typed Interrupts in LangGraph Agent
DESCRIPTION: This Python code shows how to define distinct interrupt points within a LangGraph agent's state using `langgraph.types.interrupt`. Each interrupt is assigned a unique 'type' property (e.g., 'approval', 'ask') to enable conditional processing and UI rendering based on the specific interaction required.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_268

LANGUAGE: Python
CODE:
```
from langgraph.types import interrupt
from langchain_core.messages import SystemMessage
from langchain_openai import ChatOpenAI

# ... your full state definition

def chat_node(state: AgentState, config: RunnableConfig):

  state["approval"] = interrupt({ "type": "approval", "content": "please approve" })

  if not state.get("agent_name"):
    # Interrupt and wait for the user to respond with a name
    state["agent_name"] = interrupt({ "type": "ask", "content": "Before we start, what would you like to call me?" })

  # Tell the agent its name
  system_message = SystemMessage(
    content=f"You are a helpful assistant..."
  )

  response = ChatOpenAI(model="gpt-4o").invoke(
    [system_message, *state["messages"]],
    config
  )

  return {
    **state,
    "messages": response,
  }
```

----------------------------------------

TITLE: Calling copilotkit_interrupt for Message in LangGraph Agent (Python)
DESCRIPTION: This Python snippet shows how to use `copilotkit_interrupt` within a LangGraph agent node. It checks if an agent name exists, and if not, calls `copilotkit_interrupt` with a message to prompt the user for input, updating the state with the response and new messages.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_6

LANGUAGE: Python
CODE:
```
from copilotkit.langgraph import copilotkit_interrupt # [!code highlight]
from langchain_core.messages import SystemMessage
from langchain_openai import ChatOpenAI
# ...

def chat_node(state: AgentState, config: RunnableConfig):
  if not state.get("agent_name"):
    # Interrupt and wait for the user to respond with a name
    answer, messages = copilotkit_interrupt(message='Before we start, what would you like to call me?') # [!code highlight]
    state["agent_name"] = answer
    state["messages"] = [*state["messages"], *messages]

  # Tell the agent its name
  system_message = SystemMessage(
    content=f"You are a helpful assistant named {state.get('agent_name')}..."
  )

  response = ChatOpenAI(model="gpt-4o").invoke(
    [system_message, *state["messages"]],
    config
```

----------------------------------------

TITLE: CopilotKitConfig Class API Reference
DESCRIPTION: API documentation for the `CopilotKitConfig` class, which allows for advanced customization of how CopilotKit interacts with LangGraph. It includes function signatures for `merge_state` and `convert_messages`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_172

LANGUAGE: APIDOC
CODE:
```
CopilotKitConfig:
  merge_state: Callable (required)
    This function lets you customize how CopilotKit merges the agent state.
    Function signature:
    def merge_state(
        *,
        state: dict,
        messages: List[BaseMessage],
        actions: List[Any],
        agent_name: str
    )
      # ...implementation...
  convert_messages: Callable (required)
    Use this function to customize how CopilotKit converts its messages to LangChain messages.
    Function signature:
    def convert_messages(messages: List[Message])
      # ...implementation...
```

----------------------------------------

TITLE: Serve a Flow-based Agent with CopilotKit
DESCRIPTION: This snippet illustrates how to serve a Flow-based agent by providing a `Flow` object to the `flow` parameter of `CrewAIAgent`. Note that either a `crew` or `flow` object must be supplied to `CrewAIAgent`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_163

LANGUAGE: Python
CODE:
```
CrewAIAgent(
    name="email_agent_flow",
    description="This flow based agent sends emails",
    flow=SendEmailFlow(),
)
```

----------------------------------------

TITLE: CopilotKit Action Handler Properties Reference
DESCRIPTION: Detailed reference for properties used within CopilotKit action handlers, specifying their types, purposes, and availability based on action status.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotAction.mdx#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Property: respond
  Type: (result: any) => void
  Description: A function that must be called with the user's response. The response will be passed as the result to the action handler. Only available when status is "executing".

Property: result
  Type: any
  Description: The result returned by the action. It is only available when the status is "complete".

Property: dependencies
  Type: any[]
  Description: An optional array of dependencies.
```

----------------------------------------

TITLE: CrewAIAgent Class Definition and Properties
DESCRIPTION: The `CrewAIAgent` concept allows defining agents for use with CopilotKit. Agents must specify a `name` and either `crew` or `flow`. An optional `description` can be provided for dynamic request routing.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_161

LANGUAGE: APIDOC
CODE:
```
CrewAIAgent:
  properties:
    name: string (required)
    crew: object (required, if flow is not present)
    flow: object (required, if crew is not present)
    description: string (optional)
```

----------------------------------------

TITLE: LangGraphAgent Class Parameters Reference
DESCRIPTION: Detailed reference for the parameters used to initialize a LangGraphAgent instance, including type, requirement, and description.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/LangGraphAgent.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
name: str (required)
  The name of the agent.
graph: CompiledGraph (required)
  The LangGraph graph to use with the agent.
description: Optional[str]
  The description of the agent.
langgraph_config: Optional[RunnableConfig]
  The LangGraph/LangChain config to use with the agent.
copilotkit_config: Optional[CopilotKitConfig]
  The CopilotKit config to use with the agent.
```

----------------------------------------

TITLE: Run Next.js UI Development Server
DESCRIPTION: Once the UI dependencies are installed, use this command to start the Next.js development server, making the application accessible via a web browser.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-flows/README.md#_snippet_3

LANGUAGE: sh
CODE:
```
pnpm run dev
```

----------------------------------------

TITLE: Run Next.js UI Development Server
DESCRIPTION: Start the Next.js development server for the UI. The application will be accessible via a web browser, typically at http://localhost:3000.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-shared-state/README.md#_snippet_5

LANGUAGE: sh
CODE:
```
pnpm run dev
```

----------------------------------------

TITLE: Define Agent Feedback Interruption Node (getFeedback)
DESCRIPTION: Implements the `getFeedback` node, which acts as an interruption point in the agent's graph. After this node executes, the graph pauses, awaiting user feedback from CopilotKit.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/node-flow.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
        // 4. Target node for interruption, this node will be executed and after
        //    execution the graph be interrupted, waiting for CopilotKit to get feedback
        //    from the user.
        const getFeedback = async (state: AgentState) => {
          return state;
        }
```

----------------------------------------

TITLE: Handle User Feedback Node (handleFeedback)
DESCRIPTION: Defines the `handleFeedback` node, responsible for processing the user's response received after an interruption. It generates an informative system message for the AI based on whether the user accepted or declined the previous output.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/node-flow.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
        // 5. Node for handling the feedback awaited in the getFeedback node.
        const handleFeedback = async (state: AgentState) => {
          // 5.1 Get the last message from the state
          const userResponse = state.messages[state.messages.length - 1].content

          // 5.2 Process a informative message for the AI based on the user response
          const informativeMessage = userResponse === "SEND" ? 
            "The user accepted the essay, please ask them how you can help now." : 
            "The user declined the essay, please ask them how to improve it.";

          // 5.3 Return the new state with the informative message as a system message
          //     so it doesn't appear in the chat history.
          return {
            messages: [new SystemMessage(informativeMessage)]
          }
        }
```

----------------------------------------

TITLE: Copilot Action Parameter API Reference
DESCRIPTION: Defines the `action` parameter and its nested `Action` type properties, which are functions made available to the Copilot. It details each property's name, type, requirement, and purpose, including nested `Parameter` definitions and rendering options.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotAction.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Parameters:
  action: Action (required)
    The function made available to the Copilot.
    Action Properties:
      name: string (required)
        The name of the action.
      handler: (args) => Promise<any> (required)
        The handler of the action.
      description: string
        A description of the action. This is used to instruct the Copilot on how to use the action.
      available: 'enabled' | 'disabled' | 'remote'
        Use this property to control when the action is available to the Copilot. When set to "remote", the action is available only for remote agents.
      followUp: boolean (default: true)
        Whether to report the result of a function call to the LLM which will then provide a follow-up response. Pass false to disable.
      parameters: Parameter[]
        The parameters of the action.
        Parameter Properties:
          name: string (required)
            The name of the parameter.
          type: string (required)
            The type of the argument. One of: "string", "number", "boolean", "object", "object[]", "string[]", "number[]", "boolean[]".
          description: string
            A description of the argument. This is used to instruct the Copilot on what this argument is used for.
          enum: string[]
            For string arguments, you can provide an array of possible values.
          required: boolean (default: true)
            Whether or not the argument is required.
          attributes:
            If the argument is of a complex type, i.e. object or object[], this field lets you define the attributes of the object.
      render: string | (props: ActionRenderProps<T>) => string
        Render lets you define a custom component or string to render instead of the default.
        ActionRenderProps<T> Properties:
          status: 'inProgress' | 'executing' | 'complete'
            - "inProgress": arguments are dynamically streamed to the function, allowing you to adjust your UI in real-time.
            - "executing": The action handler is executing.
            - "complete": The action handler has completed execution.
          args: T
            The arguments passed to the action in real time. When the status is "inProgress", they are possibly incomplete.
          result: any
            The result returned by the action. It is only available when the status is "complete".
      renderAndWaitForResponse: (props: ActionRenderPropsWait<T>) => React.ReactElement
        This is similar to render, but provides a respond function in the props that you must call with the user's response. The component will remain rendered until respond is called. The response will be passed as the result to the action handler.
        ActionRenderPropsWait<T> Properties:
          status: 'inProgress' | 'executing' | 'complete'
            - "inProgress": arguments are dynamically streamed to the function, allowing you to adjust your UI in real-time.
            - "executing": The action handler is executing.
            - "complete": The action handler has completed execution.
          args: T
            The arguments passed to the action in real time. When the status is "inProgress", they are possibly incomplete.
```

----------------------------------------

TITLE: Configuring Environment Variables - Dotenv
DESCRIPTION: Example content for the .env file, setting up API keys and connection URIs required for the application.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-openaI-mongodb-atlas-vector-search/README.md#_snippet_2

LANGUAGE: dotenv
CODE:
```
OPENAI_API_KEY="your_openai_key"
MONGODB_ATLAS_CONNECTION_URI="your_mongodb_connection_uri"
NEXT_PUBLIC_API_BASE_URL="http://localhost:3000"
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers like npm, yarn, pnpm, or bun. The server will typically run on http://localhost:3000.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa/ui/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: CrewAIAgent Constructor Parameters
DESCRIPTION: Details the parameters required to initialize a `CrewAIAgent` instance, including options for Crew-based or Flow-based agents, and optional configuration for CopilotKit.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_164

LANGUAGE: APIDOC
CODE:
```
CrewAIAgent:
  Parameters:
    name: str (required) - The name of the agent.
    crew: Crew (required) - When using a Crew based agent, pass in a `Crew` object to the `crew` parameter.
    flow: Flow (required) - When using a Flow based agent, pass in a `Flow` object to the `flow` parameter.
    description: Optional[str] - The description of the agent.
    copilotkit_config: Optional[CopilotKitConfig] - The CopilotKit config to use with the agent.
```

----------------------------------------

TITLE: Start UI Development Server
DESCRIPTION: Launches the development server for the user interface. After running this command, navigate to `http://localhost:3000` in your browser to access the UI.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter/README.md#_snippet_6

LANGUAGE: sh
CODE:
```
pnpm run dev
```

----------------------------------------

TITLE: Configure Copilot Cloud Public API Key
DESCRIPTION: Creates a .env file in the project root and adds the public API key for Copilot Cloud, essential for the application to function.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-state-machine/README.md#_snippet_2

LANGUAGE: plaintext
CODE:
```
NEXT_PUBLIC_CPK_PUBLIC_API_KEY=your_api_key_here
```

----------------------------------------

TITLE: Stream Messages and Tool Calls with Copilotkit in Python
DESCRIPTION: This Python snippet demonstrates how to enable streaming of messages and tool calls from a CrewAI agent to the frontend using the `copilotkit_stream` function. It wraps the LiteLLM `completion` function, ensuring that the `stream=True` parameter is honored and the output is continuously sent. This is essential for real-time interaction with AI agents.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/concepts/copilotkit-stream.mdx#_snippet_0

LANGUAGE: python
CODE:
```
response = copilotkit_stream(
    completion(
        model="openai/gpt-4o",
        messages=[
            {"role": "system", "content": my_prompt},
            *self.state["messages"]
        ],
        stream=True
    )
)
```

----------------------------------------

TITLE: Configuring Tool-Based Predictive State Updates in Python
DESCRIPTION: This snippet shows how to configure CopilotKit to automatically predict state updates when a specific tool, `StepProgressTool`, is called by the LLM. It maps the tool's `steps` argument to the `observed_steps` field in the agent's state, enabling automatic progress tracking.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/predictive-state-updates.mdx#_snippet_2

LANGUAGE: Python
CODE:
```
from copilotkit.crewai import copilotkit_predict_state
from crewai.flow.flow import Flow, start

class SampleAgentFlow(Flow):

    @start
    async def start_flow(self):
        # Tell CopilotKit to treat step progress tool calls as predictive of the final state
        copilotkit_predict_state({
            "observed_steps": {
                "tool": "StepProgressTool",
                "tool_argument": "steps"
            }
        })

        step_progress_tool = {
            "type": "function",
            "function": {
                "name": "StepProgressTool",
                "description": "Records progress by updating the steps array",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "steps": {
                            "type": "array",
                            "items": {"type": "string"},
                            "description": "Array of completed steps"
                        }
                    },
                    "required": ["steps"]
                }
            }
        }

        # Provide the tool to the LLM and call the model
        response = await copilotkit_stream(
            completion(
                model="openai/gpt-4o",
                messages=[
                    {
                        "role": "system",
                        "content": "You are a task performer. Pretend doing tasks you are given, report the steps using StepProgressTool."
                    },
                    *self.state.get("messages", [])
                ],
                tools=[step_progress_tool],
                stream=True
            )
        )
```

----------------------------------------

TITLE: Configure CopilotKit Guardrails in React
DESCRIPTION: This snippet demonstrates how to implement content moderation using the `guardrails_c` configuration within the CopilotKit React component. It allows specifying `invalidTopics` to block and `validTopics` to explicitly allow certain content categories. This feature is exclusive to CopilotKit Cloud.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_173

LANGUAGE: JavaScript
CODE:
```
import { CopilotKit } from "@copilotkit/react-core";

export default function App() {
  return (
    <CopilotKit
      publicApiKey={process.env.COPILOTKIT_PUBLIC_API_KEY}
      guardrails_c={{
        // Topics to explicitly block
        invalidTopics: ["politics", "explicit-content", "harmful-content"],
        // Topics to explicitly allow
        validTopics: ["business", "technology", "general-assistance"],
      }}
    >
      {/* Your app */}
    </CopilotKit>
  );
}
```

----------------------------------------

TITLE: Rendering Agent State with useCoAgent in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to integrate the `useCoAgent` hook from `@copilotkit/react-core` into a React component to display the output state of a CrewAI agent. It defines a type for the agent's state, initializes the hook with the agent's name and an initial output, and then renders the agent's `outputs` using a `MarkdownRenderer` component.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/generative-ui/agentic.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// ...
import { useCoAgent } from "@copilotkit/react-core";
// ...

// Define the state of the agent, should match the state of the agent.
type AgentState = {
  inputs: {
    topic: string,
    current_year: string,
  },
  outputs: string,
};

function YourMainContent() {
  // ...

  // [!code highlight:14]
  // styles omitted for brevity
  const { state } = useCoAgent<AgentState>({
    name: "research_crew",
    initialState: {
      outputs: "Report will appear here",
    },
  });

  return (
    <div
        id="result"
      >
        <MarkdownRenderer content={state.outputs} />
      </div>
  )
}
```

----------------------------------------

TITLE: Defining Agent State for CopilotKit with Python
DESCRIPTION: This snippet demonstrates how to define the agent's state using `CopilotKitState` in Python. This state is crucial for LangGraph's stateful transitions, allowing information to be updated and passed between agent nodes.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_255

LANGUAGE: Python
CODE:
```
from copilotkit import CopilotKitState
from typing import Literal

class AgentState(CopilotKitState):
    language: Literal["english", "spanish"] = "english"
```

----------------------------------------

TITLE: Disable all message and tool call streaming in CopilotKit
DESCRIPTION: Configure CopilotKit to prevent messages and tool calls from being streamed to the frontend by setting `emit_messages=False` and `emit_tool_calls=False` in the `copilotkit_customize_config` function. This ensures sensitive LLM interactions remain hidden from the user.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/advanced/disabling-state-streaming.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
from copilotkit.langgraph import copilotkit_customize_config

async def frontend_actions_node(state: AgentState, config: RunnableConfig):
    
    # 1) Configure CopilotKit not to emit messages
    modifiedConfig = copilotkit_customize_config(
        config,
        emit_messages=False, # if you want to disable message streaming
        emit_tool_calls=False # if you want to disable tool call streaming
    )

    # 2) Provide the actions to the LLM
    model = ChatOpenAI(model="gpt-4o").bind_tools([
      *state["copilotkit"]["actions"],
      # ... any tools you want to make available to the model
    ])

    # 3) Call the model with CopilotKit's modified config
    response = await model.ainvoke(state["messages"], modifiedConfig)

    # don't return the new response to hide it from the user
    return state
```

LANGUAGE: TypeScript
CODE:
```
import { copilotkitCustomizeConfig } from '@copilotkit/sdk-js/langgraph';

async function frontendActionsNode(state: AgentState, config: RunnableConfig): Promise<AgentState> {
    // 1) Configure CopilotKit not to emit messages
    const modifiedConfig = copilotkitCustomizeConfig(config, {
        emitMessages: false, // if you want to disable message streaming
        emitToolCalls: false, // if you want to disable tool call streaming
    });

    // 2) Provide the actions to the LLM
    const model = new ChatOpenAI({ temperature: 0, model: "gpt-4o" });
    const modelWithTools = model.bindTools!([
        ...convertActionsToDynamicStructuredTools(state.copilotkit?.actions || []),
        ...tools,
    ]);

    // 3) Call the model with CopilotKit's modified config
    const response = await modelWithTools.invoke(state.messages, modifiedConfig);

    // don't return the new response to hide it from the user
    return state;
}
```

----------------------------------------

TITLE: Implementing a Custom Assistant Message Component
DESCRIPTION: This snippet defines a custom React component, 'CustomAssistantMessage', used to style AI responses. It integrates with the dashboard's design system, displaying messages or a loading indicator, and supports sub-components for richer interactions within the chat interface.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-chat-with-your-data/README.md#_snippet_9

LANGUAGE: tsx
CODE:
```
export const CustomAssistantMessage = (props: AssistantMessageProps) => {
  const { message, isLoading, subComponent } = props;

  return (
    <div className="pb-4">
      {(message || isLoading) && 
        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm">
          <div className="text-sm text-gray-700 dark:text-gray-300">
            {message && <Markdown content={message} />}
            {isLoading && (
              <div className="flex items-center gap-2 text-xs text-blue-500">
                <Loader className="h-3 w-3 animate-spin" />
                <span>Thinking...</span>
              </div>
            )}
          </div>
        </div>
      }
      
      {subComponent && <div className="mt-2">{subComponent}</div>}
    </div>
  );
};
```

----------------------------------------

TITLE: Manually Emit Messages with copilotkitEmitMessage
DESCRIPTION: Example demonstrating how to use `copilotkitEmitMessage` to manually send messages to CopilotKit from long-running nodes, ensuring the message is also returned from the node.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/js/LangGraph.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
import { copilotkitEmitMessage } from "@copilotkit/sdk-js";

const message = "Step 1 of 10 complete";
await copilotkitEmitMessage(config, message);

// Return the message from the node
return {
  "messages": [AIMessage(content=message)]
}
```

----------------------------------------

TITLE: Observe Agent Predictions in UI with useCoAgentStateRender
DESCRIPTION: This snippet demonstrates how to use `useCoAgent` to access an agent's state and `useCoAgentStateRender` to display real-time progress predictions (`observed_steps`) in a React component. It shows how to render both current progress and final steps, providing immediate insight into the agent's work.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/predictive-state-updates.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { useCoAgent, useCoAgentStateRender } from '@copilotkit/react-core';

// ...
type AgentState = {
    observed_steps: string[];
};

const YourMainContent = () => {
    // Get access to both predicted and final states
    const { state } = useCoAgent<AgentState>({ name: "sample_agent" });

    // Add a state renderer to observe predictions
    useCoAgentStateRender({
        name: "sample_agent",
        render: ({ state }) => {
            if (!state.observed_steps?.length) return null;
            return (
                <div>
                    <h3>Current Progress:</h3>
                    <ul>
                        {state.observed_steps.map((step, i) => (
                            <li key={i}>{step}</li>
                        ))}
                    </ul>
                </div>
            );
        },
    });

    return (
        <div>
            <h1>Agent Progress</h1>
            {state.observed_steps?.length > 0 && (
                <div>
                    <h3>Final Steps:</h3>
                    <ul>
                        {state.observed_steps.map((step, i) => (
                            <li key={i}>{step}</li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    )
}
```

----------------------------------------

TITLE: Install CopilotKit Core and Textarea Dependencies
DESCRIPTION: This command installs the @copilotkit/react-core library, which provides the CopilotKit provider and hooks, and @copilotkit/react-textarea for context-aware autocompletions, both essential for integrating CopilotKit into a React application.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-powered-textarea/step-2-setup-copilotkit.mdx#_snippet_0

LANGUAGE: npm
CODE:
```
npm install @copilotkit/react-core @copilotkit/react-textarea
```

----------------------------------------

TITLE: Install CopilotKit React UI Dependencies
DESCRIPTION: This command installs the necessary `@copilotkit/react-core` and `@copilotkit/react-ui` packages using npm, which are required to use the CopilotSidebar component.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/CopilotSidebar.mdx#_snippet_0

LANGUAGE: shell
CODE:
```
npm install @copilotkit/react-core @copilotkit/react-ui
```

----------------------------------------

TITLE: Configure Vercel Function Timeout for CopilotKit
DESCRIPTION: This configuration snippet shows how to increase the maximum duration for CopilotKit API functions when deploying to Vercel. It's crucial for preventing timeouts with streaming responses from CopilotKit, which can exceed default serverless function limits.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_9

LANGUAGE: JSON
CODE:
```
// vercel.json
{
     "functions": {
       "api/copilotkit/**/*": {
         "maxDuration": 60
       }
     }
}
```

----------------------------------------

TITLE: Install Dependencies and Start Travel Planner Server
DESCRIPTION: After configuring API keys, install the project dependencies using Poetry and then start the server. The server is configured to run on port 8000. Ensure you are in the `coagents-travel/agent/` directory.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-travel/agent/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
poetry install
poetry run demo
```

----------------------------------------

TITLE: Define Agent State for CopilotKit with LangGraph
DESCRIPTION: This snippet defines the structure of the agent's state, which is managed by LangGraph and integrated with CopilotKit. It includes a 'language' property to demonstrate state management. The state is updated and passed between nodes in the LangGraph workflow, ensuring consistency across agent operations.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/in-app-agent-write.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
from copilotkit import CopilotKitState
from typing import Literal

class AgentState(CopilotKitState):
    language: Literal["english", "spanish"] = "english"
```

LANGUAGE: TypeScript
CODE:
```
import { Annotation } from "@langchain/langgraph";
import { CopilotKitStateAnnotation } from "@copilotkit/sdk-js/langgraph";

export const AgentStateAnnotation = Annotation.Root({
    language: Annotation<"english" | "spanish">,
    ...CopilotKitStateAnnotation.spec,
});
export type AgentState = typeof AgentStateAnnotation.State;
```

----------------------------------------

TITLE: Define Agent State with CopilotKit in Python
DESCRIPTION: This snippet demonstrates how to define the agent's state by inheriting from `CopilotKitState` in Python. It shows a simple `AgentState` class with a `searches` property, which extends the base state properties from CopilotKit.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_96

LANGUAGE: Python
CODE:
```
# ...
from copilotkit import CopilotKitState # extends MessagesState
# ...

# This is the state of the agent.
# It inherits from the CopilotKitState properties from CopilotKit.
class AgentState(CopilotKitState):
    searches: list[dict]
```

----------------------------------------

TITLE: Dynamically Build Actions with Context in CopilotKit
DESCRIPTION: Shows how to provide a callable to the `actions` parameter of `CopilotKitRemoteEndpoint` to dynamically generate actions based on a `context` object, such as parameterizing an action handler.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_124

LANGUAGE: Python
CODE:
```
from copilotkit import CopilotKitRemoteEndpoint, Action

sdk = CopilotKitRemoteEndpoint(
    actions=lambda context: [\
        Action(\
            name="greet_user",\
            handler=make_greet_user_handler(context["properties"]["name"]),\
            description="Greet the user"\
        )\
    ]
)
```

----------------------------------------

TITLE: Pass Agent Configuration from Frontend with React
DESCRIPTION: This snippet demonstrates how to pass configuration properties from a React frontend using the `useCoAgent` hook. The `config` object, specifically its `configurable` property, is used to send execution-time parameters like an `authToken` to the agent.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/advanced/adding-runtime-configuration.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCoAgent } from "@copilotkit/react-core";

function YourMainContent() {
  // ...

  useCoAgent<AgentState>({
    name: "sample_agent",
    config: {
      configurable: {
        authToken: 'example-token'
      },
      recursion_limit: 50,
    }
  })

  // ...

  return (... your component UI markdown)
}
```

----------------------------------------

TITLE: Process Authenticated Requests in Backend with CopilotKit
DESCRIPTION: This example illustrates how a backend endpoint automatically receives authentication context, such as `Authorization` and `x-user-id` headers, when integrated with CopilotKit Cloud. It shows how to access these propagated headers to verify user identity and permissions, allowing the backend to perform authenticated operations securely.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_244

LANGUAGE: JavaScript
CODE:
```
// Example backend endpoint
async function handleCalendarRequest(req, res) {
  // Auth headers from the frontend are automatically available
  const authHeader = req.headers.authorization;
  const userId = req.headers["x-user-id"];

  // Verify authentication as you normally would
  if (!isValidAuth(authHeader)) {
    return res.status(401).json({ error: "Unauthorized" });
  }

  // Proceed with authenticated operation
  const calendar = await getCalendarForUser(userId);
  return res.json(calendar);
}
```

----------------------------------------

TITLE: Configure CopilotKit to Emit Tool Calls
DESCRIPTION: By default, tool calls are not sent to CopilotKit. This configuration snippet demonstrates how to extend the LangGraph `config` object to enable tool call emission, which is useful for previewing potential tool calls before execution.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_158

LANGUAGE: Python
CODE:
```
config = copilotkit_customize_config(
    config,
    # Can set to True, False, or a list of tool call names to emit.
    emit_tool_calls=["tool_name"],
)
```

----------------------------------------

TITLE: CopilotKitConfig Class Parameters Reference
DESCRIPTION: Detailed reference for the parameters of `CopilotKitConfig`, which enable customization of CopilotKit's interaction with LangGraph.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/LangGraphAgent.mdx#_snippet_5

LANGUAGE: APIDOC
CODE:
```
merge_state: Callable (required)
  This function lets you customize how CopilotKit merges the agent state.
convert_messages: Callable (required)
  Use this function to customize how CopilotKit converts its messages to LangChain messages.
```

----------------------------------------

TITLE: Add Thumbs Up/Down Feedback to CopilotChat Component
DESCRIPTION: This example shows how to integrate user feedback mechanisms into the `CopilotChat` component by utilizing the `onThumbsUp` and `onThumbsDown` handlers. These handlers are invoked when a user clicks the respective icons on a message, enabling the collection of feedback for model fine-tuning or general tracking.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_221

LANGUAGE: tsx
CODE:
```
<CopilotChat
  onThumbsUp={(message) => console.log(message)}
  onThumbsDown={(message) => console.log(message)}
/>
```

----------------------------------------

TITLE: Basic useCopilotChatSuggestions Hook Usage
DESCRIPTION: This example demonstrates the basic usage of `useCopilotChatSuggestions` to provide instructions to the GPT model based on the current state of employees, generating chat suggestions accordingly.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotChatSuggestions.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { useCopilotChatSuggestions } from "@copilotkit/react-ui";
 
export function MyComponent() {
  const [employees, setEmployees] = useState([]);
 
  useCopilotChatSuggestions({
    instructions: `The following employees are on duty: ${JSON.stringify(employees)}`,
  });
}
```

----------------------------------------

TITLE: Add Copilot Cloud API Key to Environment
DESCRIPTION: Adds the `NEXT_PUBLIC_CPK_PUBLIC_API_KEY` to the `frontend/.env` file, using the public API key obtained from Copilot Cloud to authenticate API requests.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-3-setup-copilotkit.mdx#_snippet_2

LANGUAGE: txt
CODE:
```
NEXT_PUBLIC_CPK_PUBLIC_API_KEY=...
```

----------------------------------------

TITLE: Apply Custom CSS to CopilotKit UI Components
DESCRIPTION: This CSS example shows how to customize the appearance of specific CopilotKit UI components by targeting their predefined CSS classes. You can modify properties like `border-radius` for buttons or `padding` for message containers to achieve a custom look.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/customize-built-in-ui-components.mdx#_snippet_1

LANGUAGE: css
CODE:
```
.copilotKitButton {
  border-radius: 0;
}

.copilotKitMessages {
  padding: 2rem;
}

.copilotKitUserMessage {
  background: #007AFF;
}
```

----------------------------------------

TITLE: Configure CopilotKit Endpoint for Next.js Pages Router
DESCRIPTION: This example shows how to set up the `/api/copilotkit` endpoint using the Next.js Pages Router. It defines an API handler that initializes `CopilotRuntime` with an `ExperimentalEmptyAdapter` and uses `copilotRuntimeNextJSPagesRouterEndpoint` to manage `NextApiRequest` and `NextApiResponse` objects, enabling the runtime endpoint at `http://localhost:3000/api/copilotkit`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-starter.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
import {
  CopilotRuntime,
  ExperimentalEmptyAdapter,
  copilotRuntimeNextJSPagesRouterEndpoint,
} from '@copilotkit/runtime';
import { NextApiRequest, NextApiResponse } from 'next';

const serviceAdapter = new ExperimentalEmptyAdapter();

const handler = async (req: NextApiRequest, res: NextApiResponse) => {
  const runtime = new CopilotRuntime({
    remoteEndpoints: [
      // added in next step...
    ],
  });

  const handleRequest = copilotRuntimeNextJSPagesRouterEndpoint({
    endpoint: '/api/copilotkit',
    runtime,
    serviceAdapter,
  });

  return await handleRequest(req, res);
};

export default handler;
```

----------------------------------------

TITLE: Initialize AnthropicAdapter with Copilot Runtime
DESCRIPTION: This example demonstrates how to initialize and use the AnthropicAdapter within a Copilot Runtime application. It shows the necessary imports, how to create an Anthropic client with an API key, and how to pass that client to the AnthropicAdapter constructor.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/llm-adapters/AnthropicAdapter.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
import { CopilotRuntime, AnthropicAdapter } from "@copilotkit/runtime";
import Anthropic from "@anthropic-ai/sdk";
 
const copilotKit = new CopilotRuntime();
 
const anthropic = new Anthropic({
  apiKey: "<your-api-key>"
});
 
return new AnthropicAdapter({ anthropic });
```

----------------------------------------

TITLE: Set up Copilot Runtime with NestJS Controller
DESCRIPTION: Implement a NestJS controller to expose the Copilot Runtime endpoint. This example defines a controller with an '@All' decorator for '/copilotkit' and uses 'copilotRuntimeNestEndpoint' to manage the runtime.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-create-endpoint.mdx#_snippet_8

LANGUAGE: TypeScript
CODE:
```
import { All, Controller, Req, Res } from '@nestjs/common';
import { CopilotRuntime, copilotRuntimeNestEndpoint, {{adapterImport}} } from '@copilotkit/runtime';
import { Request, Response } from 'express';

@Controller()
export class CopilotkitController {
  @All('/copilotkit')
  copilotkit(@Req() req: Request, @Res() res: Response) {
    {{adapterSetup}}
    const runtime = new CopilotRuntime();

    const handler = copilotRuntimeNestEndpoint({
      runtime,
      serviceAdapter,
      endpoint: '/copilotkit',
    });
    return handler(req, res);
  }
}
```

----------------------------------------

TITLE: useCopilotAdditionalInstructions Hook Parameters API Reference
DESCRIPTION: Detailed API documentation for the parameters of the `useCopilotAdditionalInstructions` React hook, including their types, whether they are required, and their purpose.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotAdditionalInstructions.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
useCopilotAdditionalInstructions Parameters:
  instructions:
    type: string
    required: true
    description: The instructions to be added to the Copilot. Will be added to the instructions like so:
      You are a helpful assistant.
      Additionally, follow these instructions:
      - Do not answer questions about the weather.
      - Do not answer questions about the stock market.
  available:
    type: 'enabled' | 'disabled'
    required: false
    description: Whether the instructions are available to the Copilot.
```

----------------------------------------

TITLE: CopilotKitRemoteEndpoint Class Parameters
DESCRIPTION: Reference for the parameters available when initializing the `CopilotKitRemoteEndpoint` class.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/RemoteEndpoints.mdx#_snippet_8

LANGUAGE: APIDOC
CODE:
```
CopilotKitRemoteEndpoint:
  parameters:
    - name: "actions"
      type: "Optional[Union[List[Action], Callable[[CopilotKitContext], List[Action]]]]"
      description: "The actions to make available to the Copilot."
    - name: "agents"
      type: "Optional[Union[List[Agent], Callable[[CopilotKitContext], List[Agent]]]]"
      description: "The agents to make available to the Copilot."
```

----------------------------------------

TITLE: CoAgents: In-App LangGraph Agent Integration
DESCRIPTION: This section illustrates how to integrate LangGraph agents within a CopilotKit application. It covers sharing state between the app and the agent, rendering agentic generative UI based on agent state, implementing Human-in-the-Loop approval flows, and streaming intermediate agent states for enhanced user experience.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/README.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Share state between app and agent
const { agentState } = useCoAgent({
  name: "basic_agent",
  initialState: { input: "NYC" }
});

// agentic generative UI
useCoAgentStateRender({
  name: "basic_agent",
  render: ({ state }) => <WeatherDisplay {...state.final_response} />,
});

// Human in the Loop (Approval)
useCopilotAction({
    name: "email_tool",
    parameters: [{ name: "email_draft", type: "string", description: "The email content", required: true }],
    renderAndWaitForResponse: ({ args, status, respond }) => (
      <EmailConfirmation
        emailContent={args.email_draft || ""}
        isExecuting={status === "executing"}
        onCancel={() => respond?.({ approved: false })}
        onSend={() => respond?.({ approved: true, metadata: { sentAt: new Date().toISOString() } })}
      />
    ),
  });

// ---

// intermediate agent state streaming (supports both LangGraph.js + LangGraph python)
const modifiedConfig = copilotKitCustomizeConfig(config, {
  emitIntermediateState: [{
    stateKey: "outline",
    tool: "set_outline",
    toolArgument: "outline"
  }],
});
const response = await ChatOpenAI({ model: "gpt-4o" }).invoke(messages, modifiedConfig);
```

----------------------------------------

TITLE: Configure UI OpenAI API Key
DESCRIPTION: Create a .env file in the UI directory to store the OpenAI API key. This key is used by the Next.js application for API calls.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-shared-state/README.md#_snippet_4

LANGUAGE: env
CODE:
```
OPENAI_API_KEY=...
```

----------------------------------------

TITLE: Configure OpenAI API Key for Agent
DESCRIPTION: Instructions to create a `.env` file in the agent directory and set the `OPENAI_API_KEY` for accessing OpenAI services. Ensure the provided key supports gpt-4o.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-native/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
OPENAI_API_KEY=...
```

----------------------------------------

TITLE: Calling interrupt in LangGraph Agent (Python)
DESCRIPTION: Demonstrates how to use the `interrupt` function within a LangGraph node (`chat_node`) to pause execution and prompt the user for input (the agent's name) before proceeding.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_2

LANGUAGE: Python
CODE:
```
from langgraph.types import interrupt # [!code highlight]
from langchain_core.messages import SystemMessage
from langchain_openai import ChatOpenAI
from copilotkit import CopilotKitState

# add the agent state definition from the previous step
class AgentState(CopilotKitState):
    agent_name: str

def chat_node(state: AgentState, config: RunnableConfig):
    if not state.get("agent_name"):
        # Interrupt and wait for the user to respond with a name
        state["agent_name"] = interrupt("Before we start, what would you like to call me?") # [!code highlight]

    # Tell the agent its name
    system_message = SystemMessage(
        content=f"You are a helpful assistant named {state.get('agent_name')}..."
    )

    response = ChatOpenAI(model="gpt-4o").invoke(
        [system_message, *state["messages"]],
        config
    )

    return {
        **state,
        "messages": response,
    }
```

----------------------------------------

TITLE: Calling interrupt in LangGraph Agent (TypeScript)
DESCRIPTION: Demonstrates how to use the `interrupt` function within an async LangGraph node (`chat_node`) to pause execution and prompt the user for input (the agent's name) if the state property is not already set.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { interrupt } from "@langchain/langgraph"; // [!code highlight]
import { SystemMessage } from "@langchain/core/messages";
import { ChatOpenAI } from "@langchain/openai";

// add the agent state definition from the previous step
export const AgentStateAnnotation = Annotation.Root({
    agentName: Annotation<string>,
    ...CopilotKitStateAnnotation.spec,
});
export type AgentState = typeof AgentStateAnnotation.State;

async function chat_node(state: AgentState, config: RunnableConfig) {
    const agentName = state.agentName
    ?? interrupt("Before we start, what would you like to call me?"); // [!code highlight]

    // Tell the agent its name
```

----------------------------------------

TITLE: Guiding AI Tool Calls Based on Conversational Stage
DESCRIPTION: Illustrates how to conditionally provide additional instructions to the AI agent using `useCopilotAdditionalInstructions`. This guides the AI to call specific tools, such as `getPaymentInformation`, when the conversation enters a designated stage, ensuring relevant actions are taken.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
export function useStageGetPaymentInfo() {
  const { setCardInfo, stage, setStage } = useGlobalState();

  // Conditionally add additional instructions for the agent's prompt.
  useCopilotAdditionalInstructions({
    available: stage === "getPaymentInfo" ? "enabled" : "disabled",
    // [!code highlight:6]
    instructions: `
        CURRENT STATE: You are now getting the payment information of the user. 
        Say, 'Great! Now I need to get your payment information.' and MAKE SURE 
        to then call the 'getPaymentInformation' action.
    `,
  }, [stage]);

  // ...

}
```

----------------------------------------

TITLE: Emit Intermediate Messages in LangGraph Agent with CopilotKit
DESCRIPTION: Demonstrates how to use `copilotkit_emit_message` within an asynchronous LangGraph node to send an intermediate message to the user. This example simulates a long-running task and shows how to include the emitted message in the final message history.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_280

LANGUAGE: Python
CODE:
```
from langchain_core.messages import SystemMessage, AIMessage
from langchain_openai import ChatOpenAI
from langchain_core.runnables import RunnableConfig
from copilotkit.langgraph import copilotkit_emit_message
# ...

async def chat_node(state: AgentState, config: RunnableConfig):
    model = ChatOpenAI(model="gpt-4o")


    intermediate_message = "Thinking really hard..."
    await copilotkit_emit_message(config, intermediate_message)

    # simulate a long running task
    await asyncio.sleep(2)

    response = await model.ainvoke([\
        SystemMessage(content="You are a helpful assistant."),\
        *state["messages"]\
    ], config)

    return Command(
        goto=END,
        update={
            # Make sure to include the emitted message in the messages history
            "messages": [AIMessage(content=intermediate_message), response]
        }
    )
```

----------------------------------------

TITLE: Configure OpenAI API Key for CoAgents UI
DESCRIPTION: Creates a `.env` file in the `./ui` directory to store the OpenAI API key required by the Next.js UI.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-text/README.md#_snippet_4

LANGUAGE: sh
CODE:
```
OPENAI_API_KEY=...
```

----------------------------------------

TITLE: Configure OpenAI API Key for UI
DESCRIPTION: Instructions to create a `.env` file inside the UI directory and set the `OPENAI_API_KEY` for the Next.js frontend.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-native/README.md#_snippet_4

LANGUAGE: sh
CODE:
```
OPENAI_API_KEY=...
```

----------------------------------------

TITLE: Configure API Keys for Travel Planner
DESCRIPTION: Before running the Travel Planner agent, create a `.env` file in the `coagents-travel/agent/` directory to store your OpenAI and Google Maps API keys. These keys are essential for the agent's functionality and external service interactions.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-travel/agent/README.md#_snippet_0

LANGUAGE: Text
CODE:
```
OPENAI_API_KEY=...
GOOGLE_MAPS_API_KEY=...
```

----------------------------------------

TITLE: Install CopilotKit LangGraph SDK for Python
DESCRIPTION: Install the necessary Python SDK for CopilotKit to enable deep agentic experiences when working with LangGraph agents. This SDK provides the core functionalities for seamless integration.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/install-sdk.mdx#_snippet_0

LANGUAGE: Python
CODE:
```
pip install copilotkit-langgraph
```

----------------------------------------

TITLE: Install CopilotKit Python SDK
DESCRIPTION: Instructions for installing the CopilotKit Python SDK, with an optional extra for CrewAI support.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_121

LANGUAGE: Python
CODE:
```
pip install copilotkit
# or to include crewai
pip install copilotkit[crewai]
```

----------------------------------------

TITLE: React: Customize Copilot UI Instructions via instructions Prop
DESCRIPTION: Shows how to customize the AI assistant's behavior directly within Copilot UI components by passing an `instructions` prop. This allows for setting a specific persona or task for the AI, such as specializing in tax preparation, directly on the component.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-ai-assistant-behavior.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { CopilotChat } from "@copilotkit/react-ui";

<CopilotChat
      instructions="You are a helpful assistant specializing in tax preparation. Provide concise and accurate answers to tax-related questions."
      labels={{
        title: "Tax Preparation Assistant",
        initial: "How can I help you with your tax preparation today?",
      }}
    />
```

----------------------------------------

TITLE: Basic Usage of CopilotChat Component in React
DESCRIPTION: This example illustrates the fundamental setup for using the `CopilotChat` component in a React application. It includes importing the component and its default styles, along with configuring basic labels for the chat interface.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_101

LANGUAGE: TypeScript
CODE:
```
import { CopilotChat } from "@copilotkit/react-ui";
import "@copilotkit/react-ui/styles.css";

<CopilotChat
  labels={{
    title: "Your Assistant",
    initial: "Hi! 👋 How can I assist you today?",
  }}
/>
```

----------------------------------------

TITLE: Define Agent State with CopilotKitState
DESCRIPTION: Defines a custom agent state class, `AgentState`, that extends `CopilotKitState`. This allows the agent to store specific properties, such as `agent_name`, which can be populated through human-in-the-loop interactions.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_264

LANGUAGE: Python
CODE:
```
# ...
from copilotkit import CopilotKitState # extends MessagesState
# ...

# This is the state of the agent.
# It inherits from the CopilotKitState properties from CopilotKit.
class AgentState(CopilotKitState):
    agent_name: str
```

----------------------------------------

TITLE: Installing CopilotKit with Poetry (Bash)
DESCRIPTION: Installs the CopilotKit library using Poetry. The first command installs the base library, and the second command installs it with additional support for CrewAI.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/install-python-sdk-crew.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
poetry add copilotkit
# including support for crewai
poetry add copilotkit[crewai]
```

----------------------------------------

TITLE: Define onBeforeRequest Middleware for CopilotRuntime
DESCRIPTION: Describes the `onBeforeRequest` callback for `CopilotRuntime` middleware, detailing its input parameters and purpose before a request is processed.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_55

LANGUAGE: TypeScript
CODE:
```
onBeforeRequest: (options: {
  threadId?: string;
  runId?: string;
  inputMessages: Message[];
  properties: any;
}) => void | Promise<void>;
```

----------------------------------------

TITLE: Start Agent Chat Node with Interrupt Check (Python)
DESCRIPTION: This Python snippet shows the beginning of a `chat_node` function for an agent state. It includes necessary imports and checks if the agent's name is set, indicating where an interrupt would be triggered to ask the user for the name.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_10

LANGUAGE: Python
CODE:
```
                                    from copilotkit.langgraph import copilotkit_interrupt # [!code highlight]
                                    from langchain_core.messages import SystemMessage
                                    from langchain_openai import ChatOpenAI
                                    # ...

                                    def chat_node(state: AgentState, config: RunnableConfig):
                                      if not state.get("agent_name"):
                                        # Interrupt and wait for the user to respond with a name

```

----------------------------------------

TITLE: Inheriting CopilotKitState for Agent Action Access (Python)
DESCRIPTION: This Python snippet illustrates how to enable an agent to access frontend actions by inheriting from CopilotKitState in its state definition. This inheritance automatically adds the copilotkit property to the agent's state, which contains the available frontend actions.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/frontend-actions.mdx#_snippet_1

LANGUAGE: python
CODE:
```
from copilotkit import CopilotKitState

class YourAgentState(CopilotKitState):
    your_additional_properties: str
```

----------------------------------------

TITLE: Setting CopilotKit threadId for Agent State Persistence
DESCRIPTION: To restore the complete state of a thread, including messages and agent states, set the `threadId` property on the `CopilotKit` component. For LangGraph, the `threadId` must be a UUID.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_210

LANGUAGE: JSX
CODE:
```
<CopilotKit threadId="2140b272-7180-410d-9526-f66210918b13">
  <YourApp />
</CopilotKit>
```

----------------------------------------

TITLE: CopilotKit CSS Class Reference
DESCRIPTION: A detailed reference of CSS classes used within CopilotKit UI components, enabling developers to apply custom styles to specific elements. This includes classes for chat messages, input fields, headers, buttons, and various layout containers.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/customize-built-in-ui-components.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
.copilotKitMessages: Main container for all chat messages with scroll behavior and spacing
.copilotKitInput: Text input container with typing area and send button
.copilotKitUserMessage: Styling for user messages including background, text color and bubble shape
.copilotKitAssistantMessage: Styling for AI responses including background, text color and bubble shape
.copilotKitHeader: Top bar of chat window containing title and controls
.copilotKitButton: Primary chat toggle button with hover and active states
.copilotKitWindow: Root container defining overall chat window dimensions and position
.copilotKitMarkdown: Styles for rendered markdown content including lists, links and quotes
.copilotKitCodeBlock: Code snippet container with syntax highlighting and copy button
.copilotKitChat: Base chat layout container handling positioning and dimensions
.copilotKitSidebar: Styles for sidebar chat mode including width and animations
.copilotKitPopup: Styles for popup chat mode including position and animations
.copilotKitButtonIcon: Icon styling within the main chat toggle button
.copilotKitButtonIconOpen: Icon states for when chat is open/closed
.copilotKitButtonIconClose: Icon states for when chat is open/closed
.copilotKitCodeBlockToolbar: Top bar of code blocks with language and copy controls
.copilotKitCodeBlockToolbarLanguage: Language label styling in code block toolbar
.copilotKitCodeBlockToolbarButtons: Container for code block action buttons
.copilotKitCodeBlockToolbarButton: Individual button styling in code block toolbar
.copilotKitSidebarContentWrapper: Inner container for sidebar mode content
.copilotKitInputControls: Container for input area buttons and controls
.copilotKitActivityDot1: Animated typing indicator dots
.copilotKitActivityDot2: Animated typing indicator dots
.copilotKitActivityDot3: Animated typing indicator dots
.copilotKitDevConsole: Development debugging console container
.copilotKitDevConsoleWarnOutdated: Warning styles for outdated dev console
.copilotKitVersionInfo: Version information display styles
.copilotKitDebugMenuButton: Debug menu toggle button styling
.copilotKitDebugMenu: Debug options menu container
.copilotKitDebugMenuItem: Individual debug menu option styling
```

----------------------------------------

TITLE: Configure CopilotKit Endpoint for Node.js Express
DESCRIPTION: This snippet illustrates how to integrate the Copilot Runtime handler into an Express.js application. It sets up a middleware for the `/copilotkit` endpoint, initializing `CopilotRuntime` with an `ExperimentalEmptyAdapter` and using `copilotRuntimeNodeHttpEndpoint` to handle Express `req`, `res`, and `next` objects. The endpoint will be available at `http://localhost:4000/copilotkit`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-starter.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
import express from 'express';
import {
  CopilotRuntime,
  ExperimentalEmptyAdapter,
  copilotRuntimeNodeHttpEndpoint,
  langGraphPlatformEndpoint
} from '@copilotkit/runtime';

const app = express();
const serviceAdapter = new ExperimentalEmptyAdapter();

app.use('/copilotkit', (req, res, next) => {
  const runtime = new CopilotRuntime({
    remoteEndpoints: [
      // added in next step...
    ],
  });

  const handler = copilotRuntimeNodeHttpEndpoint({
    endpoint: '/copilotkit',
    runtime,
    serviceAdapter,
  });

  return handler(req, res, next);
});

app.listen(4000, () => {
  console.log('Listening at http://localhost:4000/copilotkit');
});
```

----------------------------------------

TITLE: Visualizing CoAgent State (TSX)
DESCRIPTION: Shows how to use the `useCoAgentStateRender` hook to provide a custom React component that renders the internal state and progress of a specific CoAgent, allowing for dynamic visualization like a progress bar.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/custom-look-and-feel/bring-your-own-components.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
"use client"; // only necessary if you are using Next.js with the App Router.
 
import { useCoAgentStateRender } from "@copilotkit/react-core";
import { Progress } from "./progress";

type AgentState = {
  logs: string[];
}

useCoAgentStateRender<AgentState>({
  name: "basic_agent",
  render: ({ state, nodeName, status }) => {
    if (!state.logs || state.logs.length === 0) {
      return null;
    }

    // Progress is a component we are omitting from this example for brevity.
    return <Progress logs={state.logs} />; 
  },
});
```

----------------------------------------

TITLE: Create NestJS Controller for Copilot Runtime Endpoint
DESCRIPTION: This example shows how to define a NestJS controller (`CopilotkitController`) to expose the Copilot Runtime endpoint at `/copilotkit`. It imports necessary modules from `@nestjs/common` and `@copilotkit/runtime`, initializes `CopilotRuntime` with an `ExperimentalEmptyAdapter`, and uses `copilotRuntimeNestEndpoint` to create a handler for all incoming requests. This setup allows NestJS applications to serve CopilotKit's backend services.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-starter.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
import { All, Controller, Req, Res } from '@nestjs/common';
import { 
  CopilotRuntime, 
  copilotRuntimeNestEndpoint, 
  ExperimentalEmptyAdapter,
} from '@copilotkit/runtime';
import { Request, Response } from 'express';


@Controller()
export class CopilotkitController {
  @All('/copilotkit')
  copilotkit(@Req() req: Request, @Res() res: Response) {
    const serviceAdapter = new ExperimentalEmptyAdapter();
    
    const runtime = new CopilotRuntime({
      remoteEndpoints: [
        // added in next step...
      ],
    });

    const handler = copilotRuntimeNestEndpoint({
      runtime,
      serviceAdapter,
      endpoint: '/copilotkit',
    });
    return handler(req, res);
  }
}
```

----------------------------------------

TITLE: Add CopilotKit Chat Interface Component
DESCRIPTION: Integrates the `CopilotPopup` component into a page, providing a user-facing chat interface for interacting with the AI assistant. It can be customized with initial labels and titles.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/mastra/quickstart.mdx#_snippet_9

LANGUAGE: TSX
CODE:
```
import { CopilotPopup } from "@copilotkit/react-ui";

export default function Page() {
    return (
        <main>
            <h1>Your App</h1>
            <CopilotPopup
                labels={{
                    title: "AI Assistant",
                    initial: "How can I help you today?",
                }}
            />
        </main>
    );
}
```

----------------------------------------

TITLE: Configure CopilotKit Runtime for LangGraph Platform Deployment
DESCRIPTION: This snippet illustrates configuring the `CopilotRuntime` to integrate with a LangGraph Platform deployment. It utilizes `langGraphPlatformEndpoint` to define the deployment URL, an optional Langsmith API key, and details for agents available on the platform, including their names, descriptions, and optional assistant IDs.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-remote-endpoints.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { 
  CopilotRuntime,
  langGraphPlatformEndpoint  
  // ...
} from "@copilotkit/runtime";
// ...
const runtime = new CopilotRuntime({
  remoteEndpoints: [
    
    langGraphPlatformEndpoint({
      deploymentUrl: "your-api-url", // make sure to replace with your real deployment url,
      langsmithApiKey: process.env.LANGSMITH_API_KEY, // only used in LangGraph Platform deployments
      agents: [ // List any agents available under "graphs" list in your langgraph.json file; give each a description explaining when it should be called.
        {
          name: 'sample_agent', 
          description: 'A helpful LLM agent.',
          assistantId: 'your-assistant-ID' // optional, but recommended!
        }
      ]
    }),
  ],
});
// ...
```

----------------------------------------

TITLE: Initialize GroqAdapter for Copilot Runtime
DESCRIPTION: Demonstrates how to import and initialize the `GroqAdapter` with a `Groq` SDK instance and a specified model name, integrating it into a `CopilotRuntime` setup.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/llm-adapters/GroqAdapter.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import { CopilotRuntime, GroqAdapter } from "@copilotkit/runtime";
import { Groq } from "groq-sdk";

const groq = new Groq({ apiKey: process.env["GROQ_API_KEY"] });

const copilotKit = new CopilotRuntime();

return new GroqAdapter({ groq, model: "<model-name>" });
```

----------------------------------------

TITLE: Configure CopilotRuntime Observability Logging
DESCRIPTION: Provides an example configuration for `CopilotObservabilityConfig` within `CopilotRuntime`, demonstrating how to enable logging and integrate with a logger (e.g., Langfuse) for requests, responses, and errors.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_57

LANGUAGE: TypeScript
CODE:
```
logging: {
  enabled: true, // Enable or disable logging
  progressive: true, // Set to false for buffered logging
  logger: {
    logRequest: (data) => langfuse.trace({ name: "LLM Request", input: data }),
    logResponse: (data) => langfuse.trace({ name: "LLM Response", output: data }),
    logError: (errorData) => langfuse.trace({ name: "LLM Error", metadata: errorData }),
  },
}
```

----------------------------------------

TITLE: Configure CopilotKit in Agent Lock Mode
DESCRIPTION: Shows how to configure the `CopilotKit` provider component to enable Agent Lock Mode. By specifying an `agent` prop, CopilotKit is configured to work exclusively with a specific agent, ensuring all requests stay within a single workflow graph for precise control over a particular task or domain.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/multi-agent-flows.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
<CopilotKit runtimeUrl="<copilot-runtime-url>" agent="<the-name-of-the-agent>">
  {/* Your application components */}
</CopilotKit>
```

----------------------------------------

TITLE: Configure CopilotKit Provider for Self-Hosted Runtime
DESCRIPTION: This snippet illustrates how to configure the CopilotKit provider when self-hosting the Copilot runtime. It demonstrates importing CopilotKit and setting the runtimeUrl prop to a local API endpoint, enabling communication with your self-hosted backend.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-3-setup-copilotkit.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
"use client";

import { TasksList } from "@/components/TasksList";
import { TasksProvider } from "@/lib/hooks/use-tasks";
import { CopilotKit } from "@copilotkit/react-core"; // [!code ++]

export default function Home() {
  return (
    <CopilotKit runtimeUrl="/api/copilotkit"> // [!code ++]
      <TasksProvider>
        <TasksList />
      </TasksProvider>
    </CopilotKit> // [!code ++]
  );
}
```

----------------------------------------

TITLE: API Documentation for copilotkit_emit_state
DESCRIPTION: Detailed API specification for the `copilotkit_emit_state` function, including its parameters and return type.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_116

LANGUAGE: APIDOC
CODE:
```
copilotkit_emit_state(config: RunnableConfig, state: Any) -> Awaitable[bool]
  config: RunnableConfig (required)
    The LangGraph configuration.
  state: Any (required)
    The state to emit (Must be JSON serializable).
  Returns: Awaitable[bool]
    Always return True.
```

----------------------------------------

TITLE: copilotkit_emit_message Function Reference
DESCRIPTION: Manually emits a message to CopilotKit, useful for providing user updates from long-running nodes. The message must also be returned from the node.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/LangGraph.mdx#_snippet_8

LANGUAGE: APIDOC
CODE:
```
copilotkit_emit_message(config: RunnableConfig, message: str) -> Awaitable[bool]
Parameters:
  config: The LangGraph configuration.
  message: The message to emit.
Returns:
  Always return True.
```

----------------------------------------

TITLE: API Reference: CopilotKit Chat Component Properties
DESCRIPTION: Detailed documentation for properties used to configure the CopilotKit chat component, covering instructions, callbacks for state changes and user actions, custom UI components, and input handling.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/CopilotSidebar.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
CopilotKit Chat Component Properties:
  - name: instructions
    type: string
    description: Custom instructions to be added to the system message. Use this property to provide additional context or guidance to the language model, influencing its responses. These instructions can include specific directions, preferences, or criteria that the model should consider when generating its output, thereby tailoring the conversation more precisely to the user's needs or the application's requirements.
  - name: onInProgress
    type: (inProgress: boolean) => void
    description: A callback that gets called when the in progress state changes.
  - name: onSubmitMessage
    type: (message: string) => void | Promise<void>
    description: A callback that gets called when a new message it submitted.
  - name: onStopGeneration
    type: OnStopGeneration
    description: A custom stop generation function.
  - name: onReloadMessages
    type: OnReloadMessages
    description: A custom reload messages function.
  - name: onRegenerate
    type: (messageId: string) => void
    description: A callback function to regenerate the assistant's response
  - name: onCopy
    type: (message: string) => void
    description: A callback function when the message is copied
  - name: onThumbsUp
    type: (message: TextMessage) => void
    description: A callback function for thumbs up feedback
  - name: onThumbsDown
    type: (message: TextMessage) => void
    description: A callback function for thumbs down feedback
  - name: markdownTagRenderers
    type: ComponentsMap
    description: A list of markdown components to render in assistant message. Useful when you want to render custom elements in the message (e.g a reference tag element)
  - name: icons
    type: CopilotChatIcons
    description: Icons can be used to set custom icons for the chat window.
  - name: labels
    type: CopilotChatLabels
    description: Labels can be used to set custom labels for the chat window.
  - name: imageUploadsEnabled
    type: boolean
    description: Enable image upload button (image inputs only supported on some models)
  - name: inputFileAccept
    type: string
    description: The 'accept' attribute for the file input used for image uploads. Defaults to \"image\".
  - name: makeSystemMessage
    type: SystemMessageFunction
    description: A function that takes in context string and instructions and returns the system message to include in the chat request. Use this to completely override the system message, when providing instructions is not enough.
  - name: AssistantMessage
    type: React.ComponentType<AssistantMessageProps>
    description: A custom assistant message component to use instead of the default.
  - name: UserMessage
    type: React.ComponentType<UserMessageProps>
    description: A custom user message component to use instead of the default.
  - name: Messages
    type: React.ComponentType<MessagesProps>
    description: A custom Messages component to use instead of the default.
  - name: RenderTextMessage
    type: React.ComponentType<RenderMessageProps>
    description: A custom RenderTextMessage component to use instead of the default.
  - name: RenderActionExecutionMessage
    type: React.ComponentType<RenderMessageProps>
    description: A custom RenderActionExecutionMessage component to use instead of the default.
  - name: RenderAgentStateMessage
    type: React.ComponentType<RenderMessageProps>
    description: A custom RenderAgentStateMessage component to use instead of the default.
  - name: RenderResultMessage
    type: React.ComponentType<RenderMessageProps>
    description: A custom RenderResultMessage component to use instead of the default.
  - name: RenderImageMessage
    type: React.ComponentType<RenderMessageProps>
    description: A custom RenderImageMessage component to use instead of the default.
  - name: RenderSuggestionsList
    type: React.ComponentType<RenderSuggestionsListProps>
    description: A custom suggestions list component to use instead of the default.
  - name: Input
    type: React.ComponentType<InputProps>
    description: A custom Input component to use instead of the default.
  - name: className
    type: string
    description: A class name to apply to the root element.
  - name: children
    type: React.ReactNode
    description: Children to render.
```

----------------------------------------

TITLE: Install Dependencies and Run CrewAI Agent Server
DESCRIPTION: Navigate to the agent directory to set up the default CrewAI agents. This involves installing project dependencies using Poetry and then starting the CrewAI agent server, which serves as the backend for the CrewAI demos.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
cd agent
poetry install
poetry run crew_server
```

----------------------------------------

TITLE: Setting threadId in CopilotKit for State Restoration
DESCRIPTION: Demonstrates how to set the `threadId` property on the `CopilotKit` component. This action instructs CopilotKit to load the complete state of the thread, including messages, from the database, enabling restoration of previous agent states.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/persistence/loading-agent-state.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
<CopilotKit threadId="2140b272-7180-410d-9526-f66210918b13">
  <YourApp />
</CopilotKit>
```

----------------------------------------

TITLE: Configure CopilotKit for Agent Lock Mode in React
DESCRIPTION: To enable Agent Lock Mode, specify the desired agent's name using the `agent` prop within the `CopilotKit` component. This ensures all user requests are routed exclusively to the defined agent, providing precise control over a single workflow graph.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_146

LANGUAGE: jsx
CODE:
```
<CopilotKit runtimeUrl="<copilot-runtime-url>" agent="<the-name-of-the-agent>">
  {/* Your application components */}
</CopilotKit>
```

----------------------------------------

TITLE: Configure CopilotKit Runtime for Local LangGraph Studio
DESCRIPTION: This snippet demonstrates how to configure the `CopilotRuntime` to connect to a locally hosted LangGraph Studio deployment. It uses `langGraphPlatformEndpoint` to specify the deployment URL, an optional Langsmith API key, and a list of agents available in your `langgraph.json` file, each with a name, description, and optional assistant ID.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-remote-endpoints.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { 
  CopilotRuntime,
  langGraphPlatformEndpoint  
  // ...
} from "@copilotkit/runtime";
// ...
const runtime = new CopilotRuntime({
  remoteEndpoints: [
    
    langGraphPlatformEndpoint({
      deploymentUrl: "your-api-url", // make sure to replace with your real deployment url,
      langsmithApiKey: process.env.LANGSMITH_API_KEY, // only used in LangGraph Platform deployments
      agents: [ // List any agents available under "graphs" list in your langgraph.json file; give each a description explaining when it should be called.
        {
          name: 'sample_agent', 
          description: 'A helpful LLM agent.',
          assistantId: 'your-assistant-ID' // optional, but recommended!
        }
      ]
    }),
  ],
});
// ...
```

----------------------------------------

TITLE: Install CopilotKit SDK for Python
DESCRIPTION: Instructions for installing the CopilotKit SDK using Poetry, including optional support for CrewAI. This SDK is required for creating deep agentic experiences with LangGraph agents.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_279

LANGUAGE: Python
CODE:
```
poetry add copilotkit
# including support for crewai
poetry add copilotkit[crewai]
```

----------------------------------------

TITLE: Configure Agent Environment Variables
DESCRIPTION: Creates a `.env` file inside either `./agent-py` or `./agent-js` with the required API keys for the backend agents. The `LANGSMITH_API_KEY` is specifically for the JavaScript agent.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-research-canvas/readme.md#_snippet_2

LANGUAGE: Shell
CODE:
```
OPENAI_API_KEY=...
TAVILY_API_KEY=...
LANGSMITH_API_KEY=...(JS ONLY)
```

----------------------------------------

TITLE: Define Backend Action for User Data Retrieval in CopilotKit (TypeScript/TSX)
DESCRIPTION: This snippet demonstrates how to define a backend action `fetchNameForUserId` within a CopilotKit runtime. This action allows the Copilot to securely call your backend to retrieve user data based on a provided `userId`. The `actions` generator can dynamically expose different actions based on frontend URL or custom properties.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/connect-your-data/backend.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
const runtime = new CopilotRuntime({
  actions: ({properties, url}) => {
    // You can use the input parameters to the actions generator to expose different backend actions to the Copilot at different times: 
    // `url` is the current URL on the frontend application.
    // `properties` contains custom properties you can pass from the frontend application.
    
    return [
      {
        name: "fetchNameForUserId",
        description: "Fetches user name from the database for a given ID.",
        parameters: [
          {
            name: "userId",
            type: "string",
            description: "The ID of the user to fetch data for.",
            required: true,
          }
        ],
        handler: async ({userId}: {userId: string}) => {
          // do something with the userId
          // return the user data
          const simulateDatabaseCall = async (userId: string) => { return { name: "Darth Doe" } }
          return await simulateDatabaseCall(userId)
        }
      }
    ]
  }
});
```

----------------------------------------

TITLE: Create Custom Chat Interface with useCopilotChat Hook
DESCRIPTION: Illustrates how to use the `useCopilotChat` hook from `@copilotkit/react-core` to build a fully custom headless UI for a chat interface, providing access to message management functions and loading states.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_194

LANGUAGE: TypeScript
CODE:
```
import { useCopilotChat } from "@copilotkit/react-core";
import { Role, TextMessage } from "@copilotkit/runtime-client-gql";

export function CustomChatInterface() {
  const {
    visibleMessages,
    appendMessage,
    setMessages,
    deleteMessage,
    reloadMessages,
    stopGeneration,
    isLoading,
  } = useCopilotChat();

  const sendMessage = (content: string) => {
    appendMessage(new TextMessage({ content, role: Role.User }));
  };

  return (
    <div>
      {/* Implement your custom chat UI here */}
    </div>
  );
}
```

----------------------------------------

TITLE: Handling LangGraph Interrupt in Frontend (TSX)
DESCRIPTION: This TSX snippet demonstrates how to use the `useLangGraphInterrupt` hook from `@copilotkit/react-core` in a React component. It provides a `render` function to display the interrupt event value and a form to capture user input, resolving the interrupt with the user's response.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#_snippet_5

LANGUAGE: TSX
CODE:
```
import { useLangGraphInterrupt } from "@copilotkit/react-core"; // [!code highlight]
// ...

const YourMainContent = () => {
// ...
// [!code highlight:16]
// styles omitted for brevity
useLangGraphInterrupt({
    render: ({ event, resolve }) => (
        <div>
            <p>{event.value}</p>
            <form onSubmit={(e) => {
                e.preventDefault();
                resolve((e.target as HTMLFormElement).response.value);
            }}>
                <input type="text" name="response" placeholder="Enter your response" />
                <button type="submit">Submit</button>
            </form>
        </div>
    )
});
// ...

return <div>{/* ... */}</div>
}
```

----------------------------------------

TITLE: Create Custom Chat UI with useCopilotChat Hook (React/TSX)
DESCRIPTION: CopilotKit offers fully custom headless UI through the `useCopilotChat` hook, providing deep customizability. This hook exposes chat state and actions (like sending, managing, and reloading messages) allowing developers to build entirely bespoke chat interfaces.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/component-examples.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { useCopilotChat } from "@copilotkit/react-core";
import { Role, TextMessage } from "@copilotkit/runtime-client-gql";

export function CustomChatInterface() {
  const {
    visibleMessages,
    appendMessage,
    setMessages,
    deleteMessage,
    reloadMessages,
    stopGeneration,
    isLoading,
  } = useCopilotChat();

  const sendMessage = (content: string) => {
    appendMessage(new TextMessage({ content, role: Role.User }));
  };

  return (
    <div>
      {/* Implement your custom chat UI here */}
    </div>
  );
}
```

----------------------------------------

TITLE: Initializing CopilotKit in Router Mode (TSX)
DESCRIPTION: This snippet demonstrates how to initialize the `CopilotKit` provider in Router Mode. In this default mode, CopilotKit acts as a central hub, dynamically routing requests between different agents or actions based on user input. It requires a `runtimeUrl` prop pointing to the Copilot runtime endpoint and omits the `agent` prop.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/multi-agent-flows.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
<CopilotKit runtimeUrl="<copilot-runtime-url>">
  {/* Your application components */}
</CopilotKit>
```

----------------------------------------

TITLE: Render Agent State in Chat UI using useCoAgentStateRender
DESCRIPTION: This snippet illustrates how to use the `useCoAgentStateRender` hook from `@copilotkit/react-core` to display an agent's state dynamically within a React component. It defines an `AgentState` type and renders the `language` property of the agent's state, providing real-time updates to the user.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_262

LANGUAGE: TypeScript
CODE:
```
import { useCoAgentStateRender } from "@copilotkit/react-core";

// Define the agent state type, should match the actual state of your agent
type AgentState = {
  language: "english" | "spanish";
}

function YourMainContent() {
  // ...

  useCoAgentStateRender({
    name: "sample_agent",
    render: ({ state }) => {
      if (!state.language) return null;
      return <div>Language: {state.language}</div>;
    }
  });
  // ...
}
```

----------------------------------------

TITLE: Define Stage One Logic with CopilotKit Hooks
DESCRIPTION: This function defines the behavior for 'stage one' of a state machine using CopilotKit hooks. It adds specific instructions, provides contextual data, and registers an action (`transitionToNextStage`) that allows the AI assistant to transition to the next stage (`two`) after capturing the user's name. The `available` prop ensures these elements are active only when the `stage` variable is 'one'.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
function useStageOne(stage: string, setName: (name: string) => void, setStage: (stage: string) => void) {
  // Add additional instructions to the system prompt if this stage is active
  useCopilotAdditionalInstructions({
    instructions: "Ask for the user's name politely.",
    // Use "available" argument to enable this only when the stage is correct!
    available: stage === "one" ? "available" : "disabled"
  });

  // Add context to the system prompt if this stage is active
  useCopilotReadable({
    description: "Other names",
    value: ["John", "Jane", "Jim"],
    available: stage === "one" ? "available" : "disabled"
  });

  // Add an action to the assistant that transitions to the next stage if this stage is active
  useCopilotAction({
    name: "transitionToNextStage",
    description: "Moves to the next stage, only call is the user's name is not in the list of other names",
    available: stage === "one" ? "available" : "disabled",
    parameters: [
      { name: "name", type: "string", description: "The name of the user", required: true }
    ],
    handler: ({ name }) => {
      // Perform any state updates given the user's input
      setName(name);

      // Transition to the next stage
      setStage("two");
    }
  });
}
```

----------------------------------------

TITLE: Implementing Chat Reset in Custom Input (TSX)
DESCRIPTION: Shows how to create a custom input component for the CopilotKit UI, integrating the `useCopilotChat` hook to obtain the `reset` function and add a button to clear the conversation history. Useful for providing users with a way to start a new conversation.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/custom-look-and-feel/headless-ui.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
"use client"; // only necessary if you are using Next.js with the App Router.

import { InputProps, CopilotSidebar } from "@copilotkit/react-ui";
import { useCopilotChat } from "@copilotkit/react-core";
import "@copilotkit/react-ui/styles.css";

function CustomInput({ inProgress, onSend, isVisible }: InputProps) {
  const { reset } = useCopilotChat(); // Get reset function

  return (
    <div style={{ display: isVisible ? "flex" : "none", alignItems: "center", gap: "10px", padding: "10px", borderTop: "1px solid #eee" }}>
      {/* Text Input */}
      <input
        disabled={inProgress}
        type="text"
        placeholder="Ask your question here..."
        style={{
          flex: 1,
          padding: "8px",
          borderRadius: "4px",
          border: "1px solid #ccc",
          outline: "none",
        }}
        onKeyDown={(e) => {
          if (e.key === "Enter") {
            onSend(e.currentTarget.value);
            e.currentTarget.value = "";
          }
        }}
      />

      {/* Send Button */}
      <button
        disabled={inProgress}
        style={{
          padding: "8px 12px",
          border: "none",
          borderRadius: "4px",
          background: "#007bff",
          color: "white",
          cursor: "pointer",
        }}
        onClick={(e) => {
          const input = e.currentTarget.previousElementSibling as HTMLInputElement;
          onSend(input.value);
          input.value = "";
        }}
      >
        Send
      </button>

      {/* Reset Chat Button */}
      <button
        style={{
          padding: "8px 12px",
          border: "none",
          borderRadius: "4px",
          background: "#f44336",
          color: "white",
          cursor: "pointer",
        }}
        onClick={() => reset()}
      >
        Reset
      </button>
    </div>
  );
}
```

----------------------------------------

TITLE: Setting Up and Running CopilotKit UI (JavaScript/Bash)
DESCRIPTION: Navigates into the `ui` directory, installs frontend dependencies using `pnpm i`, and then starts the development server for the CopilotKit user interface on `http://localhost:3000`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/ag2/quickstart.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
cd ui
pnpm i
pnpm run dev
```

----------------------------------------

TITLE: Install project dependencies
DESCRIPTION: After navigating into the project directory, run this command to install all required Node.js packages and dependencies for the application.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-todo-app/step-1-checkout-repo.mdx#_snippet_1

LANGUAGE: shell
CODE:
```
npm install
```

----------------------------------------

TITLE: Correcting Azure OpenAI Import for Flow Agents (Python)
DESCRIPTION: This error is typically due to the use of an incorrect import from Flow. Instead of importing `AzureOpenAI` import `AzureChatOpenAI` and your issue will be resolved.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/troubleshooting/common-issues.mdx#_snippet_2

LANGUAGE: python
CODE:
```
from langchain_openai import AzureOpenAI # [!code --]
from langchain_openai import AzureChatOpenAI # [!code ++]
```

----------------------------------------

TITLE: Starting CopilotKit Local Development Server
DESCRIPTION: Initiates a local development server for CopilotKit, typically used for testing and development purposes. The '--port' flag specifies the port on which the server will listen for incoming connections.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/quickstart.mdx#_snippet_17

LANGUAGE: bash
CODE:
```
npx copilotkit@latest dev --port 8000
```

----------------------------------------

TITLE: Property: makeSystemMessage
DESCRIPTION: A function that takes in context string and instructions and returns the system message to include in the chat request. Use this to completely override the system message, when providing instructions is not enough.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/CopilotPopup.mdx#_snippet_17

LANGUAGE: APIDOC
CODE:
```
makeSystemMessage: SystemMessageFunction
  A function that takes in context string and instructions and returns the system message to include in the chat request. Use this to completely override the system message, when providing instructions is not enough.
```

----------------------------------------

TITLE: Install CopilotKit SDK for TypeScript/JavaScript
DESCRIPTION: Install the CopilotKit JavaScript/TypeScript SDK using npm. This SDK is essential for integrating CopilotKit functionalities into your TypeScript or JavaScript projects, allowing for rich interactive experiences.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/install-sdk.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
npm install @copilotkit/sdk-js
```

----------------------------------------

TITLE: Installing CopilotKit with pip (Bash)
DESCRIPTION: This snippet shows how to install the `copilotkit` library using pip, the standard Python package installer. It includes an extra index URL for fetching the package.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/install-python-sdk.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
pip install copilotkit --extra-index-url https://copilotkit.gateway.scarf.sh/simple/
```

----------------------------------------

TITLE: Basic Usage of CopilotPopup Component in TSX
DESCRIPTION: Demonstrates how to import and render the CopilotPopup component in a React application, customizing its title and initial greeting message using the `labels` prop. Requires `@copilotkit/react-ui`.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/CopilotPopup.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { CopilotPopup } from "@copilotkit/react-ui";
import "@copilotkit/react-ui/styles.css";

<CopilotPopup
  labels={{
    title: "Your Assistant",
    initial: "Hi! 👋 How can I assist you today?"
  }}
/>
```

----------------------------------------

TITLE: Simple Usage of useCoAgentStateRender Hook
DESCRIPTION: Demonstrates how to import and use the useCoAgentStateRender hook to render custom UI components based on an agent's state, status, and node name. It defines a generic type for the agent state.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_86

LANGUAGE: TypeScript
CODE:
```
import { useCoAgentStateRender } from "@copilotkit/react-core";

type YourAgentState = {
  agent_state_property: string;
}

useCoAgentStateRender<YourAgentState>({
  name: "basic_agent",
  nodeName: "optionally_specify_a_specific_node",
  render: ({ status, state, nodeName }) => {
    return (
      <YourComponent
        agentStateProperty={state.agent_state_property}
        status={status}
        nodeName={nodeName}
      />
    );
  },
});
```

----------------------------------------

TITLE: Manually Emit Messages to CopilotKit with Python
DESCRIPTION: This function allows you to manually emit a message to CopilotKit, which is useful in longer-running nodes to provide real-time updates to the user. It's important to note that you still need to return these messages from the node for them to be fully processed.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/CrewAI.mdx#_snippet_2

LANGUAGE: python
CODE:
```
from copilotkit.crewai import copilotkit_emit_message

message = "Step 1 of 10 complete"
await copilotkit_emit_message(message)

# Return the message from the node
return {
    "messages": [AIMessage(content=message)]
}
```

----------------------------------------

TITLE: Emit Messages During Long-Running Tasks in CopilotKit
DESCRIPTION: This Python example shows how to use the `copilotkit_emit_message` function to provide real-time updates to the user during asynchronous, long-running operations. This mechanism ensures users are informed about the progress of tasks, enhancing the user experience by maintaining transparency and engagement.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/concepts/message-management.mdx#_snippet_1

LANGUAGE: python
CODE:
```
@listen("route_to_ask_name")
async def ask_name():
    """
    Ask the user for their name.
    """

    content = "Hey, what is your name? 🙂"

    await copilotkit_emit_message(content)

    # something long running here...

    self.state["messages"].append({"role": "assistant", "content": content, "id": str(uuid.uuid4())})
```

----------------------------------------

TITLE: Integrating Agent State with useCoAgent Hook in React
DESCRIPTION: This snippet demonstrates how to use the `useCoAgent` hook from `@copilotkit/react-core` to read and display the real-time state of a connected agent. It shows how to define an initial state and access the reactive `state` variable to render agent outputs in a React component, which automatically updates as the agent's state changes.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/shared-state/in-app-agent-read.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useCoAgent } from "@copilotkit/react-core"; // [!code highlight]

// Define the agent state type, should match the actual state of your agent


function YourMainContent() {
  const { state } = useCoAgent({
    name: "research_crew",
    initialState: {
      inputs: {
        topic: "",
        current_year: "2025"
      },
      outputs: "Report will appear here"
    }
  });

  // ...

  return (
    // style excluded for brevity
    <div>
      <h1>Your report:</h1>
      <p>{state.outputs}</p> // [!code highlight]
    </div>
  );
}
```

----------------------------------------

TITLE: Access and Update ThreadId using CopilotKit Context
DESCRIPTION: Shows how to retrieve the current `threadId` and the `setThreadId` function from CopilotKit's `useCopilotContext` hook, enabling programmatic control over the active conversation thread within a component.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/persistence/loading-message-history.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { useCopilotContext } from "@copilotkit/react-core";

const ChangeThreadButton = () => {
  const { threadId, setThreadId } = useCopilotContext();
  return (
    <Button onClick={() => setThreadId("d73c22f3-1f8e-4a93-99db-5c986068d64f")}>
      Change Thread
    </Button>
  );
};
```

----------------------------------------

TITLE: CopilotRuntime Constructor Parameters Reference
DESCRIPTION: Comprehensive documentation for the `CopilotRuntime` class constructor parameters, detailing each parameter's type, purpose, and any associated notes or deprecation warnings.
SOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#_snippet_59

LANGUAGE: APIDOC
CODE:
```
CopilotRuntime Constructor Parameters:
  middleware: middlewareMiddleware
    Description: Middleware to be used by the runtime.
    Properties:
      onBeforeRequest: (options: { threadId?: string; runId?: string; inputMessages: Message[]; properties: any; }) => void | Promise<void>
      onAfterRequest: (options: { threadId?: string; runId?: string; inputMessages: Message[]; outputMessages: Message[]; properties: any; }) => void | Promise<void>
  actions: ActionsConfiguration<T>
    Description: A list of server side actions that can be executed. Will be ignored when remoteActions are set.
  remoteActions: CopilotKitEndpoint[]
    Description: Deprecated: Use `remoteEndpoints`.
  remoteEndpoints: EndpointDefinition[]
    Description: A list of remote actions that can be executed.
  langserveRemoteChainParameters: LangserveRemoteChainParameters[]
    Description: An array of LangServer URLs.
  delegateAgentProcessingToServiceAdapter: boolean
    Description: Delegates agent state processing to the service adapter. When enabled, individual agent state requests will not be processed by the agent itself. Instead, all processing will be handled by the service adapter.
  observability_c: CopilotObservabilityConfig
    Description: Configuration for LLM request/response logging. Requires publicApiKey from CopilotKit component to be set: <CopilotKit publicApiKey="ck_pub_..." />
  mcpEndpoints: MCPEndpointConfig[]
    Description: Configuration for connecting to Model Context Protocol (MCP) servers. Allows fetching and using tools defined on external MCP-compliant servers. Requires providing the `createMCPClient` function during instantiation. @experimental
  createMCPClient: CreateMCPClientFunction
    Description: A function that creates an MCP client instance for a given endpoint configuration. This function is responsible for using the appropriate MCP client library (e.g., `@copilotkit/runtime`, `ai`) to establish a connection. Required if `mcpEndpoints` is provided.
```
