TITLE: Migrating sendUserMessage Context - Sendbird UI Kit React - TSX
DESCRIPTION: Demonstrates the migration path for the `sendUserMessage` context function. The old `sendMessage` using `useChannelContext` is replaced by `sendUserMessage` using `useGroupChannelContext`. The parameters and return type also change, shifting from a void return with optional callback to a Promise returning the `UserMessage`. The example shows updating parameters like `quoteMessage` to `parentMessageId` and handling the Promise result.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_COLLECTION.md#_snippet_8

LANGUAGE: tsx
CODE:
```
// Before
const { sendMessage } = useChannelContext();
sendMessage({
  message: message,
  quoteMessage: parentMessage,
  mentionedUsers: mentionedUsers,
  mentionTemplate: mentionTemplate,
});
```

LANGUAGE: tsx
CODE:
```
// After
const { sendUserMessage } = useGroupChannelContext();
sendUserMessage({
  message: message,
  parentMessageId: parentMessage.messageId,
  mentionedUsers: mentionedUsers,
  mentionedMessageTemplate: mentionTemplate,
})
  .then((message) => {
    // handle sending success
  })
  .catch((err) => {
    // handle sending failure
  });
```

----------------------------------------

TITLE: Importing Individual UIKit Components for Customization - Sendbird React - JavaScript
DESCRIPTION: Imports specific components like `GroupChannel`, `GroupChannelList`, `ChannelSettings`, and the `withSendBird` HOC from the Sendbird UIKit for React. These imports are necessary when customizing the default UIKit appearance or behavior by composing individual components. They allow developers to replace or wrap default UIKit elements with custom React components.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/samples/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import SBConversation from '@sendbird/uikit-react/GroupChannel';
import SBChannelList from '@sendbird/uikit-react/GroupChannelList';
import SBChannelSettings from '@sendbird/uikit-react/ChannelSettings';
import withSendBird from '@sendbird/uikit-react/withSendbird';
```

----------------------------------------

TITLE: Installing Sendbird UIKit React via Yarn (Shell)
DESCRIPTION: Command to add the `@sendbird/uikit-react` package to your project using the Yarn package manager. This is a standard way to include the library in a React application.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
yarn add @sendbird/uikit-react
```

----------------------------------------

TITLE: Intercepting Message Send/Update Operations - Sendbird React GroupChannel - JavaScript
DESCRIPTION: Uses callback function props like `onBeforeSendUserMessage`, `onBeforeSendFileMessage`, and `onBeforeUpdateUserMessage` on the `<GroupChannel>` component to modify message parameters before sending or updating. These functions are triggered before the SDK operation and allow developers to inspect or alter the message object (e.g., adding custom fields) by returning updated parameter objects (`UserMessageCreateParams`, etc.).
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/samples/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
<GroupChannel
  onBeforeSendUserMessage={(params) => {}}
  onBeforeSendFileMessage={(params) => {}}
  onBeforeUpdateUserMessage={handleUpdateUserMessage}
>
```

----------------------------------------

TITLE: Initializing Sendbird Context in React
DESCRIPTION: This snippet demonstrates how to initialize the Sendbird context at the root level of your React application using the `<SendBird>` component. It requires `userId`, `appId`, and `accessToken` props to configure the SDK and provide state access to child components nested within it, such as `<ChannelList>`.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/architecture.md#_snippet_0

LANGUAGE: JSX
CODE:
```
<SendBird userId={} appId={} accessToken={}>\n  <ChannelList />\n</Sendbird>
```

----------------------------------------

TITLE: Customizing Message Item Rendering - Sendbird React GroupChannel - JavaScript
DESCRIPTION: Utilizes the `renderChatItem` prop within the `<GroupChannel>` component to define a custom React element for rendering individual chat messages. This prop is a function that receives arguments like `message`, `onDeleteMessage`, and `onUpdateMessage`, allowing developers to completely control the appearance and behavior of each message item. It enables replacing the default message rendering with a custom component like `<CustomizedMessageItem />`.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/samples/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
<GroupChannel
  renderChatItem={({
      message,
      onDeleteMessage,
      onUpdateMessage,
      onResendMessage,
      emojiContainer,
  }) => (
    <CustomizedMessageItem />
  )}
>
```

----------------------------------------

TITLE: Importing Sendbird Components - TSX
DESCRIPTION: Details the necessary import statement for integrating SendbirdProvider and the useSendbirdStateContext hook into a React application using the Sendbird UI Kit library. These components are essential for setting up the Sendbird context and accessing its state.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/lib/Sendbird/README.md#_snippet_0

LANGUAGE: tsx
CODE:
```
import { SendbirdProvider, useSendbirdStateContext } from '@sendbird/uikit-react';
```

----------------------------------------

TITLE: Importing Main UIKit App Component - Sendbird React - JavaScript
DESCRIPTION: Imports the central `App` component from the Sendbird UIKit for React library. This component bundles necessary UIKit elements for a standard chat interface. It's used for implementing the core chat functionality with minimal setup, requiring configuration props like `APP_ID`, `USER_ID`, and `NICKNAME`.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/samples/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import SendbirdApp from '@sendbird/uikit-react/App';
```

----------------------------------------

TITLE: Implementing Custom Channel List with Pagination - JSX
DESCRIPTION: This React/JSX example demonstrates how to build a custom channel list component that implements infinite scrolling. It uses the `useChannelListContext` hook to access the list of channels (`allChannels`) and the `fetchChannelList` function, triggering `fetchChannelList` when the user scrolls near the end of the list to load more channels.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_58

LANGUAGE: JSX
CODE:
```
import SendbirdProvider from '@sendbird/uikit-react/SendbirdProvider'
import useSendbirdStateContext from '@sendbird/uikit-react/useSendbirdStateContext'
import { ChannelListProvider, useChannelListContext } from '@sendbird/uikit-react/ChannelList/context'

const isAboutSame = (a, b, px) => (Math.abs(a - b) <= px);

const CustomChannelList = () => {
  const {
    allChannels,
    fetchChannelList,
  } = useChannelListContext();

  return (
    <div
      className="custom-channel-list"
      onScroll={(e) => {
        const target = e.target;
        if (isAboutSame(target.clientHeight + target.scrollTop, target.scrollHeight, 10)) {
          fetchChannelList();
        }
      }}
    >
      {allChannels.map((channel) => {
        return // custom channel list item
      })}
    </div>
  );
};

const CustomApp = () => {
  return (
    <div className="custom-app">
      <SendbirdProvider ... >
        <ChannelListProvider ... >
          <CustomChannelList />
        </ChannelListProvider>
      </SendbirdProvider>
    </div>
  );
};
```

----------------------------------------

TITLE: Importing Sendbird GroupChannel and Context - TypeScript
DESCRIPTION: This snippet demonstrates the correct import statements for using the `GroupChannel` component and its associated context (`GroupChannelProvider`, `useGroupChannelContext`) from the Sendbird UIKit React library. These imports are essential for rendering and managing group channel UI elements and state within a React application.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/stories/modules/GroupChannel.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { GroupChannel } from '@sendbird/uikit-react/GroupChannel';
import { GroupChannelProvider, useGroupChannelContext } from '@sendbird/uikit-react/GroupChannel/context';
```

----------------------------------------

TITLE: Importing GroupChannelList Component and Context in TSX
DESCRIPTION: This snippet shows the standard import statements required to use the GroupChannelList component and its associated context provider and hook within a React/TypeScript project utilizing the Sendbird UI Kit. It demonstrates how to bring the component and context functionalities into your application for integration.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/stories/modules/GroupChannelList.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { GroupChannelList } from '@sendbird/uikit-react/GroupChannelList';
import { GroupChannelListProvider, useGroupChannelListContext } from '@sendbird/uikit-react/GroupChannelList/context';
```

----------------------------------------

TITLE: Customizing Message Rendering via Channel Props (TSX)
DESCRIPTION: This snippet shows a comprehensive example of customizing individual message rendering within a `<Channel>` component using the `renderMessage` prop. It demonstrates accessing channel and user context via hooks and then passing the message data to a custom `MessageContent` component, which further customizes its sub-parts using dedicated render props (`renderSenderProfile`, `renderMessageBody`, `renderMessageHeader`).
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_39

LANGUAGE: tsx
CODE:
```
import Channel from '@sendbird/uikit-react/Channel'
import { useSendbirdStateContext } from '@sendbird/uikit-react/useSendbirdStateContext'
import { useChannelContext } from '@sendbird/uikit-react/Channel/context'
import MessageContent from '@sendbird/uikit-react/ui/MessageContent'

const CustomChannel = () => {
  const { config } = useSendbirdStateContext();
  const { userId } = config;
  const { currentGroupChannel } = useChannelContext();
  return (
    <Channel
      ...
      renderMessage={({ message }) => {
        return (
          <MessageContent
            userId={userId}
            channel={currentGroupChannel}
            message={message}
            ...
            renderSenderProfile={(props: MessageProfileProps) => (
              <MessageProfile {...props}/>
            )}
            renderMessageBody={(props: MessageBodyProps) => (
              <MessageBody {...props}/>
            )}
            renderMessageHeader={(props: MessageHeaderProps) => (
              <MessageHeader {...props}/>
            )}
          />
        )
      }}
    />
  )
}

```

----------------------------------------

TITLE: Using SendbirdProvider and Context - TSX Example
DESCRIPTION: Provides a basic React example demonstrating how to wrap a component (MyComponent) with SendbirdProvider (MyApp). It shows how MyComponent can then access the provided Sendbird state context using the useSendbirdStateContext hook, enabling it to interact with Sendbird features.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/lib/Sendbird/README.md#_snippet_1

LANGUAGE: tsx
CODE:
```
const MyComponent = () => {
 const context = useSendbirdStateContext();
 // Use the context
 return (<div>{/* Fill components */}</div>);
};
const MyApp = () => {
  return (
    <SendbirdProvider>
      <MyComponent />
    </SendbirdProvider>
  );
};
```

----------------------------------------

TITLE: Configuring Sendbird UI Kit Features via Options Prop
DESCRIPTION: This code illustrates how to configure various features of the Sendbird UI Kit components (common, group channel, open channel, etc.) using the `uikitOptions` prop on the `<SendbirdProvider />` component. It allows granular control over functionalities like mentions, reactions, typing indicators, media uploads, and more without modifying individual component props.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_61

LANGUAGE: JSX
CODE:
```
<SendbirdProvider
  uikitOptions={{
    common: {
      enableUsingDefaultUserProfile: true,
    },
    groupChannel: {
      enableMention: false,
      enableOgtag: true,
      enableReaction: true,
      enableTypingIndicator: true,
      input: {
        camera: {
          enablePhoto: true,
          enableVideo: true,
        },
        gallery: {
          enablePhoto: true,
          enableVideo: true,
        },
        enableDocument: true,
      },
    },
    groupChannelList: {
      enableTypingIndicator: true,
      enableMessageReceiptStatus: true,
    },
    groupChannelSettings: {
      enableMessageSearch: true,
    },
    openChannel: {
      enableOgtag: true,
      input: {
        camera: {
          enablePhoto: true,
          enableVideo: true,
        },
        gallery: {
          enablePhoto: true,
          enableVideo: true,
        },
        enableDocument: true,
      },
    },
  }}
/>
```

----------------------------------------

TITLE: Installing Sendbird UIKit React via npm (Shell)
DESCRIPTION: Command to add the `@sendbird/uikit-react` package to your project using the npm package manager. This is an alternative method to install the library if you prefer npm over Yarn.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
npm i @sendbird/uikit-react
```

----------------------------------------

TITLE: Using GroupChannel Hook State and Actions - TypeScript
DESCRIPTION: This snippet demonstrates how to use the new `useGroupChannel` custom hook. It shows importing the hook and accessing channel state properties (like `currentChannel`) and action functions (like `scrollToBottom`) via the `state` and `actions` properties of the hook's return value. This pattern replaces the older direct context hook usage and requires the component to be within a `SendbirdProvider` context.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { useGroupChannel } from '@sendbird/uikit-react/GroupChannel/context';

// Implement your code inside the react function component.
const Component = () => {
// const { currentChannel, scrollToBottom } = useGroupChannelContext();
const {
  state : {
    currentChannel,
  },
  actions : {
    scrollToBottom
  },
} = useGroupChannel();

const onScrollDownButtonClick = () => {
  scrollToBottom();
};

// ...
}
```

----------------------------------------

TITLE: Sending File Messages in Sendbird UIKit v3 - JavaScript
DESCRIPTION: Shows the updated way to send file messages in v3 using the unified `getSendFileMessage`. It accepts the channel object and returns a `UIKitMessageHandler` for state handling.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const sendFileMessage = sendbirdSelectors.getSendFileMessage(globalStore);
sendFileMessage(channel, {} as FileMessageCreateParams)
	.onPending((message) => { /* Handle pending */ })
	.onFailed((error, message) => { /* Handle failure */ })
	onSucceeded((message) => { /* Handle success */ })
```

----------------------------------------

TITLE: Handling Channel Selection and Creation (TSX)
DESCRIPTION: Illustrates how to manage the currently active group channel in a React component's state. It shows how to use the `onChannelSelect` prop (invoked when a channel is clicked) and the new `onChannelCreated` prop (invoked when a channel is successfully created) on the `GroupChannelList` component to update the state, and then pass the selected channel's URL to the `GroupChannel` component.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_COLLECTION.md#_snippet_2

LANGUAGE: tsx
CODE:
```
const App = () => {
  const [currentChannel, setCurrentChannel] = useState(null);

  const handleSetCurrentChannel = (channel: GroupChannel) => {
    setCurrentChannel(channel);
  };

  return (
    <div>
      <GroupChannelList onChannelSelect={handleSetCurrentChannel} onChannelCreated={handleSetCurrentChannel} />
      <GroupChannel channelUrl={currentChannel?.url ?? ''} />
    </div>
  );
};
```

----------------------------------------

TITLE: Using Sendbird useConnect Hook JavaScript
DESCRIPTION: Demonstrates the usage of the useConnect hook for managing Sendbird SDK connection. It accepts required connection parameters (appId, userId, accessToken) and optional configuration parameters (logger, nickname, profileUrl, etc.) to establish or reconnect the SDK connection.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_65

LANGUAGE: javascript
CODE:
```
const reconnect = useConnect({
  appId,
  userId,
  accessToken,
}, {
  logger,
  nickname,
  profileUrl,
  configureSession,
  customApiHost,
  customWebSocketHost,
  sdk: sdkStore?.sdk,
  sdkDispatcher,
  userDispatcher,
});
```

----------------------------------------

TITLE: Applying Query Parameters to Sendbird GroupChannelList (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to filter and order the channel list displayed by the <GroupChannelList> component using the channelListQueryParams prop. It shows the use of useMemo to create a query parameters object with properties like includeEmpty, limit, and order, which must be an instance of GroupChannelListQueryParams.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/samples/README.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
// Pass arguments in JSON data input format to the query instance.
  const queryParams = useMemo(() => ({
    // Should be an instance of GroupChannelListQueryParams
    // https://sendbird.com/docs/chat/v4/javascript/ref/interfaces/_sendbird_chat_groupChannel.GroupChannelListQueryParams.html
    includeEmpty: true,
    limit: 50,
    order: 'chronological',
  }));

<GroupChannelList
  channelListQueryParams={queryParams}
>
```

----------------------------------------

TITLE: Importing MessageSearch Component - Sendbird UIKit React - TSX
DESCRIPTION: This code snippet demonstrates how to import the `MessageSearch` component and related context utilities (`MessageSearchProvider`, `useMessageSearchContext`) from the `@sendbird/uikit-react` package. These imports are necessary to use the message search functionality within a React application.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/stories/modules/MessageSearch.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { MessageSearch } from '@sendbird/uikit-react/MessageSearch';
import { MessageSearchProvider, useMessageSearchContext } from '@sendbird/uikit-react/MessageSearch/context';
```

----------------------------------------

TITLE: Customizing Message Rendering in Channel v3 JavaScript
DESCRIPTION: Example of rendering custom messages in Sendbird UIKit v3 using the `renderMessage` prop. The custom component uses `useChannelContext` and `useSendbirdStateContext` hooks to access channel data and the global store, then uses `sendbirdSelectors` to perform actions like deleting a file message.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_34

LANGUAGE: javascript
CODE:
```
<Channel
  renderMessage={MyFileMessageComponent}
/>
const MyFileMessageComponent = ({ message, chainTop, chainBottom }) => {
  const {
    currentGroupChannel,
    scrollToMessage,
  } = useChannelContext();
  const globalStore = useSendbirdStateContext();
  // Use sendbirdSelectors and globalStore to implement onDeleteMessage, onUpdateMessage, onResendMessage.
  const deleteFileMessage = sendbirdSelectors.getDeleteMessage(globalStore);
  if (message.messageType === 'file') {
    return (
      <div className="custom-file-message">
        <button
          className="custom-file-message__delete-button"
          onClick={deleteFileMessage(currentGroupChannel, message)}
        />
        ... // Implement your code here.
      </div>
    )
  }
  return null;
}
```

----------------------------------------

TITLE: Calling Connect Action in SendbirdSdkContext TSX (New)
DESCRIPTION: This snippet provides an example of calling a specific method, `connect`, from the new `actions` object obtained from the `useSendbirdSdkContext` hook. This replaces the previous usage of `reconnect` from the `dispatchers` object.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/lib/Sendbird/MIGRATION_GUIDE.md#_snippet_2

LANGUAGE: tsx
CODE:
```
actions.connect();
```

----------------------------------------

TITLE: Using Sendbird MessageProvider React
DESCRIPTION: Introduces the MessageProvider and useMessageContext for managing message context without prop drilling in React. It includes the TypeScript definition for MessageProviderProps detailing expected props and the import statement for the provider and hook.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_67

LANGUAGE: javascript
CODE:
```
export type MessageProviderProps = {
  children: React.ReactNode;
  message: BaseMessage;
  isByMe?: boolean;
}

import { MessageProvider, useMessageContext } from '@sendbird/uikit-react/Message/context'
```

----------------------------------------

TITLE: Using UIKitMessageHandler for Sending Messages in Sendbird UIKit v3 - JavaScript
DESCRIPTION: Demonstrates the new `UIKitMessageHandler` interface returned by message sending functions in v3. It provides chained methods (`onPending`, `onFailed`, `onSucceeded`) to handle different states of the message sending process.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const globalStore = useSendbirdStateContext();
const sendUserMessage = sendbirdSelectors.sendUserMessage(globalStore);

sendUserMessage(channel, { message: 'Hello world' })
	.onPending((message) => { /* Handle pending state */ })
	.onFailed((error, message) => { /* Handle failure */ })
	.onSucceeded((message) => { /* Handle success */ })
```

----------------------------------------

TITLE: Customizing Message Sub-Elements via Children (Message)
DESCRIPTION: This snippet illustrates the recommended way to customize sub-elements within a message component as of v3.12.1, replacing the deprecated `renderMessage` prop on the `<Message />` component itself. You pass your custom elements directly as children to the `<Message />` component, allowing access to the `message` prop for rendering specific details like `messageId`.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_27

LANGUAGE: tsx
CODE:
```
<Message message={props.message}>
  <div>{props.message.messageId}</div>
</Message>
```

----------------------------------------

TITLE: Configuring SendbirdProvider Session Handler (React)
DESCRIPTION: Illustrates how to implement custom session handling logic by utilizing the `configureSession` prop on the `SendbirdProvider` component. It involves creating and returning a `SessionHandler` instance from the core Sendbird SDK, which is recommended to be memoized for performance. This approach is necessary for handling session token requirements for authentication.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_89

LANGUAGE: javascript
CODE:
```
// its recommended to memoize configureSession function
const memoizedConfigureSession = (sb) => {
  const sessionHandler = new sb.SessionHandler();
  sessionHandler.onSessionTokenRequired = (onSuccess, onError) => {
  };
  return sessionHandler;
};

// see: https://sendbird.com/docs/chat/v3/javascript/guides/authentication
<SendbirdProvider
  configureSession={memoizedConfigureSession}
/>
```

----------------------------------------

TITLE: Creating Open Channel with Sendbird UIKit v3 JavaScript
DESCRIPTION: Shows the v3 approach to obtaining the open channel creation function from the global store selectors. The function is called with an empty object asserted as `OpenChannelCreateParams` and returns a Promise. Note the change from `sendBirdSelectors` to `sendbirdSelectors` and `store` to `globalStore`.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_16

LANGUAGE: javascript
CODE:
```
const createOpenChannel = sendbirdSelectors.getCreateOpenChannel(globalStore);
createOpenChannel({} as OpenChannelCreateParams)
	.then((channel) => {})
	.catch((error) => {})
```

----------------------------------------

TITLE: Importing UIKit Modules (JavaScript)
DESCRIPTION: Provides examples of the new, recommended import paths for accessing specific contexts and UI components following the architectural refactoring in v3.0.0-beta. These imports allow direct access to module-specific elements like `useChannel` context hooks and `ChannelUI` components from the `@sendbird/uikit-react` package, facilitating better tree-shaking and granular control over the UI.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_91

LANGUAGE: javascript
CODE:
```
import { useChannel } from '@sendbird/uikit-react/Channel/context';
import ChannelUI from '@sendbird/uikit-react/Channel/components/ChannelUI';
```

----------------------------------------

TITLE: Importing Thread Component - Sendbird UIKit React - TypeScript
DESCRIPTION: Demonstrates how to import the main 'Thread' component from the Sendbird UIKit React library for use in a React application.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_72

LANGUAGE: typescript
CODE:
```
import Thread from "@sendbird/uikit-react/Thread"
```

----------------------------------------

TITLE: Intercepting User Message Creation After Type Change (TSX)
DESCRIPTION: Demonstrates the new implementation of the `onBeforeSendUserMessage` prop on the `GroupChannel` component. The function now receives a `UserMessageCreateParams` object directly and must return a `Promise` that resolves with the potentially modified parameters, supporting asynchronous operations.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_COLLECTION.md#_snippet_6

LANGUAGE: tsx
CODE:
```
// After
<GroupChannel
  onBeforeSendUserMessage={(params) => {
    return {
      ...params,
      customType: 'custom-type',
    };
  }}
/>
```

----------------------------------------

TITLE: Sending User Messages in Sendbird UIKit v3 - JavaScript
DESCRIPTION: This snippet shows the updated way to send user messages in v3 using the unified `getSendUserMessage` (now renamed `sendUserMessage`). It accepts the channel object and returns a `UIKitMessageHandler` for state handling.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const sendUserMessage = sendbirdSelectors.getSendUserMessage(globalStore);
sendUserMessage(channel, {} as UserMessageCreateParams)
	.onPending((message) => { /* Handle pending */ })
	.onFailed((error, message) => { /* Handle failure */ })
	.onSucceeded((message) => { /* Handle success */ })
```

----------------------------------------

TITLE: Customizing Message Rendering After GroupChannel (TSX)
DESCRIPTION: Illustrates the new method for customizing message rendering using the `renderMessage` prop with the `GroupChannel` component. It requires importing the default `Message` component and rendering it within the custom function, passing the original props and adding custom children.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_COLLECTION.md#_snippet_4

LANGUAGE: tsx
CODE:
```
// After
import { Message } from '@sendbird/uikit-react/GroupChannel/components/Message';

<GroupChannel
  renderMessage={(props) => {
    return <Message {...props}>{'my custom message child'}</Message>;
  }}
/>;
```

----------------------------------------

TITLE: Using ThreadProvider with Message Hooks - TSX
DESCRIPTION: This TSX snippet illustrates how to wrap components with the `ThreadProvider` component. It demonstrates passing the new `onBeforeSendUserMessage`, `onBeforeSendFileMessage`, and `onBeforeSendVoiceMessage` props, using placeholder functions. This allows custom preprocessing of different message types before they are sent in a thread.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_51

LANGUAGE: TSX
CODE:
```
import { ThreadProvider } from '@sendbird/uikit-react/Thread/context'

<ThreadProvider
  onBeforeSendUserMessage={() => {}}
  onBeforeSendFileMessage={() => {}}
  onBeforeSendVoiceMessage={() => {}}
/>
```

----------------------------------------

TITLE: Rendering Custom Messages with Message Container (GroupChannel)
DESCRIPTION: This snippet demonstrates the updated pattern for using the `renderMessage` prop on the `<GroupChannel />` component as of v3.12.1. Instead of nesting custom content directly, you explicitly wrap your custom elements within the `<Message />` component from the same module to maintain the necessary structure and context, like accessing `messageId` from props.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_26

LANGUAGE: tsx
CODE:
```
import { GroupChannel } from '@sendbird/uikit-react/GroupChannel';
import { Message } from '@sendbird/uikit-react/GroupChannel/components/Message';

const GroupChannelPage = () => {
  return (
    <GroupChannel
      renderMessage={(props) => {
        return (
          <Message message={props.message}>
            <div>{props.message.messageId}</div>
          </Message>
        )
      }}
    />
  )
}
```

----------------------------------------

TITLE: Customizing Message Input in Sendbird GroupChannel (React)
DESCRIPTION: This React JSX snippet demonstrates how to replace the default message input component in the <GroupChannel> view by providing a custom React element (<CustomizedMessageInput />) via the renderMessageInput prop. The prop function receives 'channel', 'user', and 'disabled' arguments.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/samples/README.md#_snippet_7

LANGUAGE: React
CODE:
```
<GroupChannel
  renderMessageInput={() => (
    <CustomizedMessageInput />
  )}
>
```

----------------------------------------

TITLE: Customizing Message Input with Sendbird Channel in React
DESCRIPTION: Demonstrates how to use the `renderMessageInput` prop on the `Channel` component to provide a custom message input UI. The example shows accessing channel context using `useChannelContext` and global state via `useSendbirdStateContext` within the custom component.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_36

LANGUAGE: javascript
CODE:
```
<Channel
  renderMessageInput={MyChannelHEader}
/>
const MyChannelHEader = () => {
  const {
    currentGroupChannel,
  } = useChannelContext();
  const globalStore = useSendbirdStateContext();
  const user = globalStore?.stores?.userStore?.user;
  return (
    ...
  );
}
```

----------------------------------------

TITLE: Handling Connection Failure with Sendbird Component (TSX)
DESCRIPTION: This snippet illustrates how to use the `eventHandlers.connection.onFailed` callback provided in the `<Sendbird>` component to handle connection failures. It demonstrates registering a function within the `eventHandlers` prop that executes when the connection fails, allowing for custom error handling logic like displaying a browser alert with the error message.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_35

LANGUAGE: tsx
CODE:
```
<Sendbird
  appId={appId}
  userId={undefined} // this will cause an error 
  eventHandlers={{
    connection: {
      onFailed: (error) => {
        alert(error?.message); // display a browser alert and print the error message inside
      }
    }
  }}
>
```

----------------------------------------

TITLE: Configuring RTL and Locale in SendbirdProvider (TSX)
DESCRIPTION: Shows how to enable Right-To-Left (RTL) text direction using the `htmlTextDirection` prop and how to set the `dateLocale` for localization within the `SendbirdProvider` component. Requires importing the relevant locale from `date-fns`.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_8

LANGUAGE: tsx
CODE:
```
import ar from 'date-fns/locale/ar';
<SendbirdProvider
  ...
  htmlTextDirection={'rtl' | 'ltr'}
  // Setting a proper value to dateLocale would be necessary
  dateLocale={ar}
>
</SendbirdProvider>
```

----------------------------------------

TITLE: Customizing Desktop Message Menu (TSX)
DESCRIPTION: Demonstrates how to use the `renderMessageContent` prop in `GroupChannel` to wrap the `MessageContent` and then use the `renderMessageMenu` prop on `MessageContent` to provide a custom `MessageMenu`. It shows how to access built-in menu items from `props.items` and render a subset of them.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_15

LANGUAGE: tsx
CODE:
```
import GroupChannel from '@sendbird/uikit-react/GroupChannel';
import MessageContent from '@sendbird/uikit-react/ui/MessageContent';
import { MessageMenu } from '@sendbird/uikit-react/ui/MessageMenu';

const GroupChannelPage = () => (
  <GroupChannel
    renderMessageContent={(props) => (
      <MessageContent
        {...props}
        renderMessageMenu={(props) => (
          <MessageMenu
            {...props}
            renderMenuItems={(props) => {
              const {
                CopyMenuItem,
                ReplyMenuItem,
                // ...
                DeleteMenuItem,
              } = props.items;
              // organize the menu items using the items
              return (
                <>
                  <CopyMenuItem />
                  <DeleteMenuItem />
                </>
              );
            }}
          />
        )}
      />
    )
  );
};

```

----------------------------------------

TITLE: Customizing Channel Preview Item in Sendbird GroupChannelList (React)
DESCRIPTION: This React JSX snippet shows how to customize each item in the <GroupChannelList> component's channel list. It uses the renderChannelPreview prop, passing a function that receives 'channel' and 'onLeaveChannel' and returns a custom React component (<CustomizedChannelPreviewItem />).
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/samples/README.md#_snippet_8

LANGUAGE: React
CODE:
```
<GroupChannelList
  renderChannelPreview={({ channel, onLeaveChannel }) => (
    <CustomizedChannelPreviewItem />
  )}
>
```

----------------------------------------

TITLE: Accessing Actions in SendbirdSdkContext TSX (New)
DESCRIPTION: This snippet demonstrates the new way to access context-provided methods in Sendbird UIKit React by obtaining the `actions` object from the `useSendbirdSdkContext` hook. The `actions` object replaces the removed `dispatchers`.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/lib/Sendbird/MIGRATION_GUIDE.md#_snippet_1

LANGUAGE: tsx
CODE:
```
const { actions } = useSendbirdSdkContext();
```

----------------------------------------

TITLE: Customizing Message Content (Channel - Simpler)
DESCRIPTION: This snippet demonstrates the simpler way to customize the `MessageContent` component using the new `renderMessageContent` prop directly on the `<Channel />` component. This prop receives the `MessageContentProps` and allows you to render a custom component in place of the default message content.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_31

LANGUAGE: tsx
CODE:
```
<Channel
  renderMessageContent={(props) => (
    <MessageContent {...props} />
  )}
/>
```

----------------------------------------

TITLE: Customizing Message Input with Sendbird OpenChannel in React
DESCRIPTION: Demonstrates how to use the `renderInput` prop on the `OpenChannel` component to provide a custom message input UI. The example shows accessing channel context using `useOpenChannelContext` and utilizing `sendbirdSelectors` from the global state.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_42

LANGUAGE: javascript
CODE:
```
<OpenChannel
  renderInput={MyMessage}
/>
const MyMessageInput = () => {
  // Use `useOpenChannelContext` to access current channel.
  const {
    currentOpenChannel,
  } = useOpenChannelContext();
  const globalStore = useSendbirdStateContext();
  // Use `sendbirdSelectors` and `globalStore` to implement `getSendUserMessage` and `getSendFileMessage`.
  const sendMessage = sendbirdSelectors.getSendUserMessage(globalStore);
  return (
    ...
  );
}
```

----------------------------------------

TITLE: Customizing Channel Header Rendering - Sendbird React GroupChannel - JavaScript
DESCRIPTION: Allows customization of the channel header display within the `<GroupChannel>` component using the `renderChannelHeader` prop. This prop accepts a function that should return a React element, enabling developers to replace the default header with a custom component like `<CustomizedHeader />`. The rendering function can receive channel and user data to incorporate into the custom header.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/samples/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
<GroupChannel
  renderChannelHeader={() => (
    <CustomizedHeader />
  )}
>
```

----------------------------------------

TITLE: Initializing Sendbird SDK with Custom Params in React
DESCRIPTION: This snippet demonstrates how to pass custom parameters to the Sendbird SDK initialization function (`sdk.init`) when using the SendbirdProvider component. It uses `useRef` to memoize the parameters, ensuring they are not recreated on every render. This is useful for configuring SDK behaviors like app state toggling or debug mode.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_60

LANGUAGE: JSX
CODE:
```
// its recommended to memoize sdkInitParams
const memoizedSdkInitParams = useRef({
  appStateToggleEnabled: false,
  debugMode: true,
  // more options can be found here https://sendbird.com/docs/chat/v4/javascript/ref/interfaces/_sendbird_chat.SendbirdChatParams.html
})
<SendbirdProvider
  sdkInitParams={memoizedSdkInitParams.current}
/>
```

----------------------------------------

TITLE: Filtering Channel List by Metadata - JavaScript
DESCRIPTION: This JavaScript/JSX snippet demonstrates how to configure the `Channel` or `ChannelProvider` component to filter the channel list based on metadata. It shows how to pass an object to the `queries` prop with a `channelListQuery` property, specifying `metadataKey` and `metadataValues` to retrieve only channels matching the criteria.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_57

LANGUAGE: JavaScript
CODE:
```
<Channel or ChannelProvider
  queries={{
    channelListQuery: {
      metadataKey: 'isMatching',
      metadataValues: ['true'],
    }
  }}
/>
```

----------------------------------------

TITLE: Configuring RTL and LTR Message Layout in Sendbird UIKit React (TSX)
DESCRIPTION: This snippet shows how to use the `SendbirdProvider` component to manage text direction and message layout in Sendbird UIKit React. It demonstrates setting the global `htmlTextDirection` to 'rtl' for Right-to-Left language support while simultaneously using `forceLeftToRightMessageLayout={true}` to keep the message bubble layout (incoming on left, outgoing on right) in the standard Left-to-Right format. Configuring a compatible `dateLocale` using a library like `date-fns` is also necessary for proper localization.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_6

LANGUAGE: tsx
CODE:
```
import SendbirdProvider from ‘@sendbird/uikit-react/SendbirdProvider’;
import ar from 'date-fns/locale/ar';

const YourComponent = () => {
  return (
    <SendbirdProvider
      htmlTextDirection="rtl" // for RTL display
      forceLeftToRightMessageLayout={true} // to enforce the message layout to Left-to-Right direction even though htmlTextDirection is set to ‘rtl’
      dateLocale={ar} // locale setting would be necessary too
      {...other props}
    >
      {...other components}
    </SendbirdProvider>
  );
};
```

----------------------------------------

TITLE: Customizing Message List Query Parameters - Sendbird React GroupChannel - JavaScript
DESCRIPTION: Configures message fetching behavior in the `<GroupChannel>` component using the `messageListQueryParams` prop. This prop accepts an object (like `MessageListParams`) defining criteria such as sender filters, message count (`prevResultSize`), and inclusion options for replies/reactions. It allows developers to customize the initial load and pagination of messages displayed in the channel.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/samples/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const queryParams = useMemo(() => ({
  // use object json type input, don't create sendbird query instance
  // https://sendbird.com/docs/chat/v4/javascript/ref/interfaces/_sendbird_chat_message.MessageListParams.html
  // https://github.com/sendbird/sendbird-chat-sdk-javascript/blob/main/lib/__definition.d.ts#L764
  senderUserIdsFilter: [USER_ID],
  prevResultSize: 30,
  includeReplies: false,
  includeReactions: false,
}));

<GroupChannel messageListQueryParams={queryParams} />;
```

----------------------------------------

TITLE: Using Render Prop in React Component - Sendbird UIKit React - JavaScript/React
DESCRIPTION: Demonstrates a React component pattern where a 'renderMessage' prop (a function) is used within 'useMemo' to render a custom message component. Highlights potential type issues if the prop's type isn't precisely 'ReactElement'.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_86

LANGUAGE: javascript
CODE:
```
// in the component
{ renderMessage } = props
const CustomMessage = useMemo(() => {
  return renderMessage({ ... });
}, []);
return (
  <div>
    <CustomMessage />
  </div>
);
```

----------------------------------------

TITLE: Handling Message Failure Events in Sendbird UIKit React (TSX)
DESCRIPTION: This snippet shows how to configure event handlers for message sending, updating, and file upload failures within the Sendbird UIKit React library. By passing the `eventHandlers` prop to the `<Sendbird>` component, developers can execute custom logic, such as displaying error messages or logging failures, whenever these events occur. It utilizes the `message` and `error` parameters provided by the handlers to react specifically to failure conditions.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_1

LANGUAGE: tsx
CODE:
```
<Sendbird
  eventHandlers={{
    message: {
      onSendMessageFailed: (message, error) => {
        // You can use the message parameter to create specific conditions
        if (message.isUserMessage()) {
          alert(`Message failed to send: ${error?.message}`);
        }
      },
      onUpdateMessageFailed: (message, error) => {
        console.log(`Failed to update message: ${message.messageId}, Error: ${error}`);
      },
      onFileUploadFailed: (error) => {
        console.error('File upload failed', error);
      },
    },
  }}
/>
```

----------------------------------------

TITLE: Using GlobalModalContext to Open Custom Modal in React
DESCRIPTION: This snippet demonstrates how to use the useGlobalModalContext hook to access the openModal function and display a custom React element within a global modal. It requires the component to be wrapped within the GlobalModalProvider.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/hooks/useModal/README.md#_snippet_0

LANGUAGE: tsx
CODE:
```
import React, { useCallback } from 'react';
import { GlobalModalProvider, useGlobalModalContext } from 'src/hooks/useModal';

export const CustomComponent = () => {
  const { openModal } = useGlobalModalContext();

  const showUpAlert = useCallback(() => {
    openModal({
      modalProps: {},
      childElement: (
        <div className="custom-alert">
          "Button has been clicked!"
        </div>
      ),
    });
  }, []);

  return (
    <div className="custom-button">
      <button onClick={showUpAlert}>OPEN</button>
    </div>
  );
};

const CustomApp = () => {
  return (
    <div className="custom-app" styles={{ ... }}>
      <GlobalModalProvider>
        <CustomComponent />
      </GlobalModalProvider>
    </div>
  )
}
```

----------------------------------------

TITLE: Importing GroupChannel and GroupChannelList Modules (TSX)
DESCRIPTION: Provides a list of import statements showing the correct paths to access the new `GroupChannel` and `GroupChannelList` components, their context providers, hooks, and various sub-components provided by the Sendbird UIKit React library.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_COLLECTION.md#_snippet_1

LANGUAGE: tsx
CODE:
```
// GroupChannelList
import { GroupChannelList } from '@sendbird/uikit-react/GroupChannelList';
import { GroupChannelListProvider, useGroupChannelListContext } from '@sendbird/uikit-react/GroupChannelList/context';
import { AddGroupChannel } from '@sendbird/uikit-react/GroupChannelList/components/AddGroupChannel';
import { GroupChannelListUI } from '@sendbird/uikit-react/GroupChannelList/components/GroupChannelListUI';
import { GroupChannelListHeader } from '@sendbird/uikit-react/GroupChannelList/components/GroupChannelListHeader';
import { GroupChannelListItem } from '@sendbird/uikit-react/GroupChannelList/components/GroupChannelListItem';
import { GroupChannelPreviewAction } from '@sendbird/uikit-react/GroupChannelList/components/GroupChannelPreviewAction';

// GroupChannel
import { GroupChannel } from '@sendbird/uikit-react/GroupChannel';
import { GroupChannelProvider, useGroupChannelContext } from '@sendbird/uikit-react/GroupChannel/context';
import { GroupChannelHeader } from '@sendbird/uikit-react/GroupChannel/components/GroupChannelHeader';
import { GroupChannelUI } from '@sendbird/uikit-react/GroupChannel/components/GroupChannelUI';
import { FileViewer } from '@sendbird/uikit-react/GroupChannel/components/FileViewer';
import { FrozenNotification } from '@sendbird/uikit-react/GroupChannel/components/FrozenNotification';
import { Message } from '@sendbird/uikit-react/GroupChannel/components/Message';
import { MessageInputWrapper, VoiceMessageInputWrapper } from '@sendbird/uikit-react/GroupChannel/components/MessageInputWrapper';
import { MessageList } from '@sendbird/uikit-react/GroupChannel/components/MessageList';
import { RemoveMessageModal } from '@sendbird/uikit-react/GroupChannel/components/RemoveMessageModal';
import { TypingIndicator } from '@sendbird/uikit-react/GroupChannel/components/TypingIndicator';
import { UnreadCount } from '@sendbird/uikit-react/GroupChannel/components/UnreadCount';
import { SuggestedMentionList } from '@sendbird/uikit-react/GroupChannel/components/SuggestedMentionList';
```

----------------------------------------

TITLE: Enabling Multiple Files Message App Component React TSX
DESCRIPTION: This snippet demonstrates how to enable the Multiple Files Message feature globally within your application by passing the `isMultipleFilesMessageEnabled` prop to the root `App` component.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_41

LANGUAGE: tsx
CODE:
```
import App from '@sendbird/uikit-react/App'

<App
  ...
  isMultipleFilesMessageEnabled
/>
```

----------------------------------------

TITLE: Customizing Message Content Sub-Components (TSX)
DESCRIPTION: This snippet demonstrates how to customize sub-components within the `MessageContent` using new render props like `renderMessageMenu`, `renderEmojiMenu`, and `renderEmojiReactions`. It shows how to override the default rendering of the message menu, emoji menu, and emoji reactions by providing custom React elements within the `renderMessageContent` prop of the `<Channel>` component.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_36

LANGUAGE: tsx
CODE:
```
<Channel
renderMessageContent={(props) => {
  return <MessageContent
    {...props}
    renderMessageMenu={(props) => {
      return <MessageMenu {...props} />
    }}
    renderEmojiMenu={(props) => {
      return <MessageEmojiMenu {...props} />
    }}
    renderEmojiReactions={(props) => {
      return <EmojiReactions {...props} />
    }}
  />
}}
/>
```

----------------------------------------

TITLE: Deleting Message with Sendbird UIKit v3 JavaScript
DESCRIPTION: Shows getting the unified `getDeleteMessage` selector in v3. It's called with the channel object and message object, returning a Promise. This method is now used for both group and open channels.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_24

LANGUAGE: javascript
CODE:
```
const deleteMessge = sendbirdSelectors.getDeleteMessage(globalStore);
deleteMessage(channel, message)
	.then((message) => {})
	.catch((error) => {})
```

----------------------------------------

TITLE: Customizing Message Input in Channel v3 JavaScript
DESCRIPTION: Example demonstrating how to provide a custom message input component using the `renderMessageInput` prop in Sendbird UIKit v3. The custom component can utilize `useChannelContext` and `useSendbirdStateContext` hooks, along with `sendbirdSelectors`, to implement message sending logic.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_35

LANGUAGE: javascript
CODE:
```
<Channel
  renderMessageInput={MyMessageInput}
/>
const MyMessageInput = ({message, chainTop, chainBottom }) => {
  const {
    currentGroupChannel,
  } = useChannelContext();
  const globalStore = useSendbirdStateContext();
  // Use `sendbirdSelectors` and `globalStore` to implement `getSendUserMessage` and `getSendFileMessage`.
  const sendUserMessage = sendbirdSelectors.getSendUserMessage(globalStore);
  return (
    ...
  );
}
```

----------------------------------------

TITLE: Updating User Message with Sendbird UIKit v3 JavaScript
DESCRIPTION: Shows getting the unified `getUpdateUserMessage` selector in v3. It's called with the channel object, message ID (as a number), and `UserMessageUpdateParams`, returning a Promise. This method is now used for both group and open channels.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_22

LANGUAGE: javascript
CODE:
```
const updateUserMessage = sendbirdSelectors.getUpdateUserMessage(globalStore);
updateUserMessage(channel, 'message-id(number)', {} as UserMessageUpdateParams)
	.then((message) => {})
	.catch((error) => {})
```

----------------------------------------

TITLE: Implementing Custom Sendbird Channel Preview Item Component (JavaScript)
DESCRIPTION: This JavaScript snippet outlines the basic structure of a custom React component intended for use as a channel preview item within the Sendbird UIKit <GroupChannelList>. It accesses channel data from props and demonstrates retrieving and using the onLeaveChannel function via Sendbird selectors.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/samples/README.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
const CustomizedChannelPreviewItem = (props) => {
  const { channel } = props;
  const onLeaveChannel = sendbirdSelectors.getLeaveGroupChannel(store);
  ...
  onLeaveChannel(channel);
}
```

----------------------------------------

TITLE: Importing OpenChannel in Sendbird UIKit v3 (JavaScript)
DESCRIPTION: Illustrates the new import paths for the modularized `OpenChannel` component introduced in version 3 of Sendbird UIKit React.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_41

LANGUAGE: javascript
CODE:
```
import OpenChannel from "@sendbird/uikit-react/OpenChannel"
// Or
import { OpenChannel } from "@sendbird/uikit-react"
```

----------------------------------------

TITLE: Intercepting File Download Actions (React/TSX)
DESCRIPTION: Provides an example usage of the `onBeforeDownloadFileMessage` prop available on `GroupChannel` and `Thread` components. This prop allows executing custom asynchronous logic, such as prompting the user based on file size, before initiating a file download.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_21

LANGUAGE: TSX
CODE:
```
const ONE_MB = 1024 * 1024;
/**
  * Use this list to check if it's displayed as a ThumbnailMessage.
  * (https://github.com/sendbird/sendbird-uikit-react/blob/main/src/utils/index.ts)
*/
const ThumbnailMessageTypes = [
  'image/jpeg',
  'image/jpg',
  'image/png',
  'image/gif',
  'image/svg+xml',
  'image/webp', // not supported in IE
  'video/mpeg',
  'video/ogg',
  'video/webm',
  'video/mp4',
];

<GroupChannel // or Thread
  onBeforeDownloadFileMessage={async ({ message, index = null }) => {
    if (message.isFileMessage()) {
      const confirmed = window.confirm(`The file size is ${(message.size / ONE_MB).toFixed(2)}MB. Would you like to continue downloading?`);
      return confirmed;
    }
    if (message.isMultipleFilesMessage()) {
      const confirmed = window.confirm(`The file size is ${(message.fileInfoList[index].fileSize / ONE_MB).toFixed(2)}MB. Would you like to continue downloading?`);
      return confirmed;
    }
    return true;
  }}
/>
```

----------------------------------------

TITLE: Customizing Thread Message Rendering in Sendbird UIKit React (TSX)
DESCRIPTION: This snippet shows how to customize the rendering of individual message items within a Sendbird thread using sub-rendering props. By providing a custom function to the `renderMessage` prop on `<ThreadUI>`, and subsequently using props like `renderSenderProfile` on the `<ThreadListItem>`, developers can override default UI elements. This example specifically shows how to hide the sender's profile picture and name within the thread list item.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_4

LANGUAGE: tsx
CODE:
```
const CustomThread = () => (
  <ThreadProvider>
    <ThreadUI
      renderMessage={(props) => (
        <ThreadListItem
          {...props}
          renderSenderProfile={() => <></>}
        />
      )}
    />
  </ThreadProvider>
);
```

----------------------------------------

TITLE: Dynamically Setting Breakpoint and Layout based on User Agent
DESCRIPTION: This example demonstrates a more dynamic approach to enabling the mobile UX revamp. It checks the user agent string to detect if the device is mobile and passes the boolean result to the `breakpoint` prop. It also shows how to conditionally render different chat layouts (`MobileChatLayout` or `DesktopChatLayout`) based on the same mobile detection logic.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_63

LANGUAGE: JSX
CODE:
```
const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
return (
  <SendbirdProvider breakpoint={isMobile} />
    {
      isMobile
        ? <MobileChatLayout />
        : <DesktopChatLayout />
    }
  </SendbirdProvider>
)
```

----------------------------------------

TITLE: Filtering Messages Using RenderMessage Prop (TSX)
DESCRIPTION: Provides an example of how to filter messages in the list using the `renderMessage` prop on `GroupChannel`. By returning an empty fragment (`<></>`) instead of the default component for specific message types, you can effectively hide them from the list, replacing the functionality of the removed `filterMessageList` prop.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_COLLECTION.md#_snippet_7

LANGUAGE: tsx
CODE:
```
<GroupChannel
  renderMessage={({ message }) => {
    if (message.type === 'filtered') return <></>; // render empty component.
    return null; // render default component.
  }}
/>
```

----------------------------------------

TITLE: Importing OpenChannelSettings in Sendbird UIKit v3 (JavaScript)
DESCRIPTION: Illustrates the new import paths for the modularized `OpenChannelSettings` component introduced in version 3 of Sendbird UIKit React.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_44

LANGUAGE: javascript
CODE:
```
import OpenChannelSettings from "@sendbird/uikit-react/OpenChannelSettings"
// Or
import { OpenChannelSettings } from "@sendbird/uikit-react"
```

----------------------------------------

TITLE: Customizing User List Item and Menu (TSX)
DESCRIPTION: Demonstrates using the `renderUserListItem` prop on `ChannelSettings` to provide a custom `UserListItem`. It shows how to use `UserListItemMenu` with `renderListItemMenu` to override the menu trigger and specifically render desired menu items (Operator, Mute, Ban). Includes placeholders for handling state change events.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_12

LANGUAGE: tsx
CODE:
```
<ChannelSettings
  renderUserListItem={(props) => (
    <UserListItem {...props}
      renderListItemMenu={(props) => (
        <UserListItemMenu
          {...props}
          onToggleOperatorState={({ user, newState, error }) => {/** Handle operator state change */}}
          onToggleMuteState={({ user, newState, error }) => {/** Handle mute state change */}}
          onToggleBanState={({ user, newState, error }) => {/** Handle ban state change */}}
          renderTrigger={({ ref }) => (<div ref={ref}>{/** Render your custom trigger icon here */}</div>)}
          renderMenuItems={({ items }) => (
            <>
              <items.OperatorToggleMenuItem />
              <items.MuteToggleMenuItem />
              <items.BanToggleMenuItem />
            </>
          )}
        />
      )}
    />
  )}
/>
```

----------------------------------------

TITLE: Implementing Sendbird Channel Creation Callback (JavaScript)
DESCRIPTION: This JavaScript snippet provides an example implementation for the onBeforeCreateChannel callback function used with the Sendbird UIKit <GroupChannelList>. The function receives 'selectedUsers' and must return an instance of GroupChannelCreateParams to proceed with channel creation, allowing customization of new channel properties.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/samples/README.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
const handleOnBeforeCreateChannel = (selectedUsers) => {
  const channelParams: GroupChannelCreateParams = {
    name: 'Hello Sendbird!',
    invitedUserIds: selectedUsers,
    coverUrl: null,
    customType: HIGHLIGHT,
    isDistinct: true,
  };

  return channelParams;
};
```

----------------------------------------

TITLE: Customizing Mobile Message Menu (TSX)
DESCRIPTION: Demonstrates how to use the `renderMessageContent` prop in `GroupChannel` to wrap the `MessageContent` and then use the `renderMobileMenuOnLongPress` prop on `MessageContent` to provide a custom `MobileMenu`. It shows how to access built-in menu items from `props.items` and render a subset of them for the mobile view.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_16

LANGUAGE: tsx
CODE:
```
import GroupChannel from '@sendbird/uikit-react/GroupChannel';
import MessageContent from '@sendbird/uikit-react/ui/MessageContent';
import { MobileMenu } from '@sendbird/uikit-react/ui/MessageMenu';

const GroupChannelPage = () => (
  <GroupChannel
    renderMessageContent={(props) => (
      <MessageContent
        {...props}
        renderMobileMenuOnLongPress={(props) => (
          <MobileMenu
            {...props}
            renderMenuItems={(props) => {
              const {
                CopyMenuItem,
                ReplyMenuItem,
                // ...
                DeleteMenuItem,
              } = props.items;
              // organize the menu items using the items
              return (
                <>
                  <CopyMenuItem />
                  <DeleteMenuItem />
                </>
              );
            }}
          />
        )}
      />
    )
  );
};

```

----------------------------------------

TITLE: Implementing Custom User Invitation Logic for ChannelList in JavaScript
DESCRIPTION: This JavaScript example demonstrates how to use the `overrideInviteUser` prop on the ChannelList component to provide custom logic for creating a channel when users are invited. It shows accessing the invited users, the close function, and the channel type.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_70

LANGUAGE: JavaScript
CODE:
```
<ChannelList
  overrideInviteUser={({users, onClose, channelType}) => {
    createMyChannel(users, channelType).then(() => {
      onClose();
    })
  }}
/>
```

----------------------------------------

TITLE: Entering Open Channel with Sendbird UIKit v3 JavaScript
DESCRIPTION: Demonstrates the v3 method to get the specific function for entering an open channel from the global store selectors. The function is called with the channel URL and returns a Promise. Note the specific selector name `getEnterOpenChannel` in v3.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_18

LANGUAGE: javascript
CODE:
```
const enterOpenChannel = sendbirdSelectors.getEnterOpenChannel(globalStore);
enterOpenChannel('channel-url')
	.then((channel) => {})
	.catch((error) => {})
```

----------------------------------------

TITLE: Filtering Sendbird Channel Messages React
DESCRIPTION: Provides an example of how to use the filterMessageList prop on the <Channel /> component in React. It shows defining a filter function using useCallback to only display messages created within the last two weeks and passing it to the component.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_66

LANGUAGE: javascript
CODE:
```
// set your channel URL
const channel = "";
export const ChannelWithFilter = () => {
  const channelFilter = useCallback((message) => {
    const now = Date.now();
    const twoWeeksAgo = now - 1000 * 60 * 60 * 24 * 14;
    return message.createdAt > twoWeeksAgo;
  }, []);
  return (
    <Channel
          channelUrl={channel}
          filterMessageList={channelFilter}
        />
  );
};
```

----------------------------------------

TITLE: Importing MessageContent Subcomponents in Sendbird UIKit React (TSX)
DESCRIPTION: This snippet demonstrates how to import specific subcomponents directly from the `@sendbird/uikit-react/ui/MessageContent` module. By directly importing `MessageBody`, `MessageHeader`, and `MessageProfile`, developers gain access to these reusable components. This capability is useful for building highly customized message rendering logic or extending the default message item appearance.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_5

LANGUAGE: tsx
CODE:
```
import { MessageBody, MessageHeader, MessageProfile } from '@sendbird/uikit-react/ui/MessageContent';
```

----------------------------------------

TITLE: Resending User Message with Sendbird UIKit v3 JavaScript
DESCRIPTION: Shows getting the unified `getResendUserMessage` selector in v3. It's called with the channel object and the failed message object, returning a Promise. This method is now used for both group and open channels.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_26

LANGUAGE: javascript
CODE:
```
const resendUserMessage = sendbirdSelectors.getResendUserMessage(globalStore);
resendUserMessage(channel, failedMessage)
  	.then((message) => {})
	.catch((error) => {})
```

----------------------------------------

TITLE: Importing ChannelSettings Components and Context - TSX
DESCRIPTION: This snippet shows the necessary import statements to use the `ChannelSettings` component and its associated context (`ChannelSettingsProvider`, `useChannelSettingsContext`) from the Sendbird UIKit React library. These imports are required to integrate and manage channel settings within a React application using the Sendbird UI Kit.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/stories/modules/ChannelSettings.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { ChannelSettings } from '@sendbird/uikit-react/ChannelSettings';
import { ChannelSettingsProvider, useChannelSettingsContext } from '@sendbird/uikit-react/ChannelSettings/context';
```

----------------------------------------

TITLE: Configuring Typing Indicator Types with Sendbird App (TSX)
DESCRIPTION: This snippet demonstrates how to configure the types of typing indicators displayed in a Sendbird Group Channel using the `uikitOptions` prop of the `<App>` component. It shows how to enable both bubble and text indicators by providing a `Set` containing `TypingIndicatorType.Bubble` and `TypingIndicatorType.Text` within the `groupChannel` configuration.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_33

LANGUAGE: tsx
CODE:
```
<App
  appId={appId}
  userId={userId}
  uikitOptions={{
    groupChannel: {
      // Below turns on both bubble and text typing indicators. Default is Text only.
      typingIndicatorTypes: new Set([TypingIndicatorType.Bubble, TypingIndicatorType.Text]),
    }
  }}
/>
```

----------------------------------------

TITLE: Intercepting Sendbird Channel Creation in GroupChannelList (React)
DESCRIPTION: This React JSX snippet shows how to intercept the channel creation process in the <GroupChannelList> component by providing a callback function (handleOnBeforeCreateChannel) to the onBeforeCreateChannel prop. This allows developers to execute custom logic before a channel is created.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/samples/README.md#_snippet_11

LANGUAGE: React
CODE:
```
<GroupChannelList
  onBeforeCreateChannel={handleOnBeforeCreateChannel}
>
```

----------------------------------------

TITLE: Configuring User Mention Settings (React)
DESCRIPTION: Shows how to customize user mention functionality within the UIKit by passing configuration options via the `config` prop of the `SendbirdProvider`. Specific settings within the `userMention` object allow controlling the maximum number of mentions allowed per message (`maxMentionCount`) and the maximum number of users displayed in the suggestion list (`maxSuggestionCount`). This feature was introduced in v3.0.0-beta.2.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_90

LANGUAGE: javascript
CODE:
```
<SendbirdProvider config={{ userMention: { maxMentionCount: 10, maxSuggestionCount: 15 } }} />
```

----------------------------------------

TITLE: Importing Channel Module with Sendbird UIKit v3 JavaScript
DESCRIPTION: Shows the updated import paths for the `Channel` module in version 3. It can be imported as a default export from a specific path or as a named export from the main package.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_32

LANGUAGE: javascript
CODE:
```
import Channel from "@sendbird/uikit-react/Channel"
// Or
import { Channel } from "@sendbird/uikit-react"
```

----------------------------------------

TITLE: Example Handler for Before Update User Message - Sendbird React - JavaScript
DESCRIPTION: Provides a sample implementation for a handler function used with the `onBeforeUpdateUserMessage` prop. This function receives the current message and is expected to return an object conforming to `UserMessageUpdateParams`, typically including the modified `message` text or other properties. It demonstrates the structure required to pass modified parameters back to the UIKit component for the update operation.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/samples/README.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const handleUpdateUserMessage = ({ message }) => {
  const userMessageParams = {};
  userMessageParams.message = message;
  return userMessageParams;
};
```

----------------------------------------

TITLE: Filtering Emoji Categories in Sendbird UIKit React (TSX)
DESCRIPTION: This snippet demonstrates how to filter the visible emoji categories for message reactions in a Sendbird group channel. A custom function, `filterEmojiCategoryIds`, is provided to the `<GroupChannel>` component via a prop to dynamically determine which emoji categories are available for reaction based on the characteristics of the message. Custom categories must be configured via the Sendbird Platform API for this filtering to be effective.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_3

LANGUAGE: tsx
CODE:
```
const filterEmojiCategoryIds = (message: SendableMessage) => {
    if (message.customType === 'emoji_category_2') return [2];

    return [1];
}

<GroupChannel 
  filterEmojiCategoryIds={filterEmojiCategoryIds}
/>
```

----------------------------------------

TITLE: Rendering NotificationChannel Component in React
DESCRIPTION: This snippet demonstrates how to integrate the NotificationChannel component within a Sendbird application context. It shows how to wrap the component with Sendbird provider and configure basic props like `channelUrl` and provide custom rendering or action handling functions.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_68

LANGUAGE: React
CODE:
```
export const NotificationChannelComponenet = () => (
  <Sendbird
    appId={appId}
    userId={userId}
    accessToken={accessToken}
  >
    <div style={{ height: '960px', width: '360px' }}>
      <NotificationChannel
        channelUrl={`SENDBIRD_NOTIFICATION_CHANNEL_NOTIFICATION_${userId}`}
        renderPlaceholderLoader={() => <MyBrandLogo />};
        handleCustomAction={(event, action, message) => {
          ... implement custom action
        }}
      />
    </div>
  </Sendbird>
);
```

----------------------------------------

TITLE: Exiting Open Channel with Sendbird UIKit v3 JavaScript
DESCRIPTION: Illustrates the v3 method to get the specific function for exiting an open channel from the global store selectors. The function is called with the channel URL and returns a Promise. Note the specific selector name `getExitOpenChannel` in v3.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_20

LANGUAGE: javascript
CODE:
```
const exitOpenChannel = sendbirdSelectors.getExitOpenChannel(globalStore);
exitOpenChannel('channel-url')
	.then((channel) => {})
	.catch((error) => {})
```

----------------------------------------

TITLE: Disabling Local Cache (SendbirdProvider)
DESCRIPTION: This snippet shows how to disable the local cache feature, which is enabled by default in v3.12.0. You pass the `sdkInitParams` prop to the `<SendbirdProvider />` component and set `localCacheEnabled` to `false`.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_28

LANGUAGE: tsx
CODE:
```
import SendbirdProvider from '@sendbird/uikit-react/SendbirdProvider';

const App = () => (
  <SendbirdProvider
    // ...
    sdkInitParams={{ localCacheEnabled: false }}
  />
)
```

----------------------------------------

TITLE: Customizing ChannelSettings Moderation Panel (TSX)
DESCRIPTION: Provides an example of creating a custom component to render the moderation panel in `ChannelSettingsUI`. It uses the `useMenuItems` hook to access available menu items and demonstrates how to select and display a subset of these items using `MenuListByRole`.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_9

LANGUAGE: tsx
CODE:
```
import React from 'react';
import ChannelSettingsUI from '@sendbird-uikit/ChannelSettings/components/ChannelSettingsUI';
import useMenuItems from '@sendbird-uikit/ChannelSettings/hooks/useMenuList';

const CustomChannelSettings = () => {
  const menuItems = useMenuItems();

  const renderCustomModerationPanel = () => {
    // Create a new object by selecting only the desired menu items.
    const customMenuItems = {
      operator: {
        operators: menuItems.operator.operators, // Keep the operators menu
        allUsers: menuItems.operator.allUsers, // Keep the all users menu
        // Add or remove other menu items as needed.
      },
      nonOperator: {
        allUsers: menuItems.nonOperator.allUsers, // Keep the all users menu
        // Add or remove other menu items as needed.
      },
    };

    return <MenuListByRole menuItems={customMenuItems} />;
  };

  return (
    <ChannelSettingsUI renderModerationPanel={renderCustomModerationPanel} />
  );
};

export default CustomChannelSettings;
```

----------------------------------------

TITLE: Passing Custom Extension Parameters to SendbirdProvider - JSX
DESCRIPTION: This React/JSX snippet shows how to pass custom parameters to the Sendbird SDK extensions using the `customExtensionParams` prop on the `SendbirdProvider` component. These parameters are included when `sdk.addSendbirdExtensions` is called, allowing for external configuration of extensions. Memoizing the parameters is recommended.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_59

LANGUAGE: JSX
CODE:
```
// its recommended to memoize customExtensionParams
const memoizedCustomExtensionParams = useRef({
  // the key-value sets will be passed when sdk.addSendbirdExtensions is called
  ...
})
<SendbirdProvider
  customExtensionParams={memoizedCustomExtensionParams.current}
/>
```

----------------------------------------

TITLE: Customizing Profile with Sendbird ChannelSettings in React
DESCRIPTION: Provides an example of using the `renderChannelProfile` prop on the `ChannelSettings` component to render a custom channel profile view. The custom component can access channel settings context via `useChannelSettingsContext`.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_39

LANGUAGE: javascript
CODE:
```
<ChannelSettings
  renderChannelProfile={MyChannelProfile}
/>
const MyChannelProfile = () => {
  const { channel } = useChannelSettingsContext();
  return (...);
}
```

----------------------------------------

TITLE: Resending File Message with Sendbird UIKit v3 JavaScript
DESCRIPTION: Shows getting the unified `getResendFileMessage` selector in v3. It's called with the channel object and the failed message object, returning a Promise. This method is now used for both group and open channels.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_28

LANGUAGE: javascript
CODE:
```
const resendFileMessage = sendbirdSelectors.getResendFileMessage(globalStore);
resendFileMessage(channel, failedMessage)
	.then((message) => {})
	.catch((error) => {})
```

----------------------------------------

TITLE: Importing ChannelList Module with Sendbird UIKit v3 JavaScript
DESCRIPTION: Shows the updated import paths for the `ChannelList` module in version 3. It can be imported as a default export from a specific path or as a named export from the main package.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_30

LANGUAGE: javascript
CODE:
```
import ChannelList from "@sendbird/uikit-react/ChannelList"
// Or
import { ChannelList } from "@sendbird/uikit-react"
```

----------------------------------------

TITLE: Freezing Channel by Object in Sendbird UIKit v3 - JavaScript
DESCRIPTION: Demonstrates freezing a channel in v3 using the `getFreezeChannel` method. The parameter is now the `GroupChannel` or `OpenChannel` object itself, not the URL string. It returns a Promise.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const freezeChannel = sendbirdSelectors.getFreezeChannel();
freezeChannel(channel: GroupChannel | OpenChannel)
	.then(() => { /* Handle success */ })
	.catch(() => { /* Handle error */ })
```

----------------------------------------

TITLE: Importing ChannelSettings in Sendbird UIKit v3 (JavaScript)
DESCRIPTION: Illustrates the new import paths for the modularized `ChannelSettings` component introduced in version 3 of Sendbird UIKit React.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_38

LANGUAGE: javascript
CODE:
```
import ChannelSettings from "@sendbird/uikit-react/ChannelSettings"
// Or
import { ChannelSettings } from "@sendbird/uikit-react"
```

----------------------------------------

TITLE: Enabling Feedback Message Feature (Global)
DESCRIPTION: This snippet shows how to enable the feedback message feature introduced in v3.10.0. You add the `enableFeedback` option within `uikitOptions.groupChannel` on the `<App />` component and set it to `true`. The feature applies to messages with non-default feedback statuses.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_30

LANGUAGE: tsx
CODE:
```
<App
  appId={appId}
  userId={userId}
  uikitOptions={{
    groupChannel: {
      // Below turns on the feedback message feature. Default value is false.
      enableFeedback: true,
    }
  }}
/>
```

----------------------------------------

TITLE: Setting Static Breakpoint for Mobile UI Revamp in React
DESCRIPTION: This snippet shows a basic usage of the `breakpoint` prop on the `<SendBirdProvider>` component. Setting the `breakpoint` prop, for example to a static pixel value like '768px', enables the mobile browser UX revamp features of the UI Kit when the screen width is below this threshold. This is a simple way to activate the mobile layout.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_62

LANGUAGE: JSX
CODE:
```
<SendBirdProvider breakpoint="768px">
```

----------------------------------------

TITLE: Creating Group Channel in Sendbird UIKit v3 - JavaScript
DESCRIPTION: Demonstrates creating a group channel in v3 using the renamed `getCreateGroupChannel` method with UIKit parameters (`GroupChannelCreateParams`). It returns a Promise.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_14

LANGUAGE: javascript
CODE:
```
const createGroupChannel = sendbirdSelectors.getCreateGroupChannel(globalStore);
createGroupChannel({} as GroupChannelCreateParams)
	.then((channel) => { /* Handle success */ })
	.catch((error) => { /* Handle error */ })
```

----------------------------------------

TITLE: Enabling Multiple Files Message SendbirdProvider React TSX
DESCRIPTION: This snippet shows how to enable the Multiple Files Message feature at the provider level by passing the `isMultipleFilesMessageEnabled` prop to the `SendbirdProvider` component, affecting all components within its context.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_42

LANGUAGE: tsx
CODE:
```
import { SendbirdProvider } from '@sendbird/uikit-react/SendbirdProvider'

<SendbirdProvider
  ...
  isMultipleFilesMessageEnabled
>
  {...}
</SendbirdProvider>
```

----------------------------------------

TITLE: Customizing Thread Message Menus in Sendbird UIKit React (TSX)
DESCRIPTION: This snippet demonstrates how to customize the message action menu displayed for items within a Sendbird thread. By leveraging the `renderMessageMenu` prop on the `<ThreadListItem>` and the `renderMenuItems` prop on the `<MessageMenu>`, developers can control exactly which default menu options are included. This example shows how to explicitly include only the Copy and Delete menu items, allowing for a tailored user interface in the thread context.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_7

LANGUAGE: tsx
CODE:
```
<Thread
  renderMessage={(props) => (
    <ThreadListItem {...props} renderMessageMenu={(props) => (
      <MessageMenu {...props} renderMenuItems={({ items }) => (
        <>
          <items.CopyMenuItem />
          <items.DeleteMenuItem />
        </>
      )} />
    )} />
  )}
/>
```

----------------------------------------

TITLE: Customizing Mobile Long-Press Menu (MessageContent)
DESCRIPTION: This snippet shows how to use the `renderMobileMenuOnLongPress` prop on the `<MessageContent />` component. It's typically used within a custom `renderMessageContent` or `renderMessage` implementation to provide a custom mobile bottom sheet menu component (`CustomMobileMenu`) that appears when a message is long-pressed on mobile devices.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_25

LANGUAGE: tsx
CODE:
```
<Channel
  renderMessageContent={(props) => (
    <MessageContent
      {...props}
      renderMobileMenuOnLongPress={(mobileMenuProps: MobileBottomSheetProps) => (
        <CustomMobileMenu {...mobileMenuProps} />
      )}
    />
  )}
/>
```

----------------------------------------

TITLE: Retrieving GroupChannel instance in Sendbird UIKit v3 - JavaScript
DESCRIPTION: Shows how to use the new `getGetGroupChannel` method from `sendbirdSelectors` in v3 to asynchronously retrieve a `GroupChannel` instance based on its URL. It returns a Promise.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const getGroupChannel = sendbirdSelectors.getGetGroupChannel(globalStore);
getGroupChannel('channel-url')
	.then((channel) => { /* Use channel instance */ })
	.catch((error) => { /* Handle error */ })
```

----------------------------------------

TITLE: Using Thread Reply Select Type Prop - Sendbird UIKit React - TypeScript/JSX
DESCRIPTION: Illustrates how to import the 'ThreadReplySelectType' enum and use it to set the 'threadReplySelectType' prop on the Sendbird '<Channel />' component.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_75

LANGUAGE: typescript
CODE:
```
import { ThreadReplySelectType } from "@sendbird/uikit-react/Channel/context";

<Channel
  ...
  threadReplySelectType={ThreadReplySelectType.PARENT}
/>
```

----------------------------------------

TITLE: Importing ChannelSettings List Components (TSX)
DESCRIPTION: Illustrates how to import specific list components like `OperatorList`, `MemberList`, `MutedMemberList`, and `BannedUserList` from the `ChannelSettingsUI` components module. These can be used independently or customized via props like `renderUserListItem`.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_11

LANGUAGE: tsx
CODE:
```
import { OperatorList, MemberList, MutedMemberList, BannedUserList } from '@sendbird/uikit-react/ChannelSettings/components/ChannelSettingsUI';
```

----------------------------------------

TITLE: Importing DateSeparator Component TSX
DESCRIPTION: This snippet shows the standard way to import the `DateSeparator` component from the `@sendbird/uikit-react` package. This is necessary before using the component in your React application.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/stories/DateSeparator.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import DateSeparator from '@sendbird/uikit-react/ui/DateSeparator';
```

----------------------------------------

TITLE: Customizing Suggested Replies Rendering (Channel)
DESCRIPTION: This snippet demonstrates how to use the `renderSuggestedReplies` prop on the `<Channel />` component. It allows developers to provide a custom React component (`CustomSuggestedReplies`) to render the suggested replies section, receiving `replyOptions`, `onSendMessage`, and `message` as props.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_24

LANGUAGE: tsx
CODE:
```
<Channel
  renderSuggestedReplies={(suggestedRepliesProps) => {
    const { replyOptions, onSendMessage, message } = suggestedRepliesProps;
    return <CustomSuggestedReplies options={replyOptions} />;
  }}
/>
```

----------------------------------------

TITLE: Retrieving OpenChannel instance in Sendbird UIKit v3 - JavaScript
DESCRIPTION: Shows how to use the new `getGetOpenChannel` method from `sendbirdSelectors` in v3 to asynchronously retrieve an `OpenChannel` instance based on its URL. It returns a Promise.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const getOpenChannel = sendbirdSelectors.getGetOpenChannel(globalStore);
getOpenChannel('channel-url')
	.then((channel) => { /* Use channel instance */ })
	.catch((error) => { /* Handle error */ })
```

----------------------------------------

TITLE: Importing Toggle Component TypeScript
DESCRIPTION: This snippet shows how to import the Toggle component and related sub-components and hooks (ToggleContainer, ToggleUI, useToggleContext) from the Sendbird UIKit React library. These imports are necessary to use the Toggle functionality in a React application.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/stories/Toggle.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import { Toggle, ToggleContainer, ToggleUI, useToggleContext } from '@sendbird/uikit-react/ui/Toggle';
```

----------------------------------------

TITLE: Importing Icon Component (TypeScript)
DESCRIPTION: This snippet shows the standard way to import the `Icon` component along with its associated types (`IconTypes`) and color options (`IconColors`) from the `@sendbird/uikit-react` package. This is the required first step before using the component in a React application.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/stories/Icon.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import Icon, { IconTypes, IconColors } from '@sendbird/uikit-react/ui/Icon';
```

----------------------------------------

TITLE: Customizing Channel Settings Header (React/TSX)
DESCRIPTION: Shows how to replace the default header in the `ChannelSettingsUI` component by providing a custom React element or component function to the `renderHeader` prop. This allows for complete control over the appearance and functionality of the header.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_22

LANGUAGE: TSX
CODE:
```
<ChannelSettingsUI
  renderHeader={() => ...}
/>
```

----------------------------------------

TITLE: Importing Sendbird Toggle Components JavaScript
DESCRIPTION: Imports the necessary components and hook for using the new Toggle feature in Sendbird UIKit React. This includes the main Toggle component, its container, the UI-only part, and a custom hook to access the context.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_64

LANGUAGE: javascript
CODE:
```
import { Toggle, ToggleContainer, ToggleUI,  useToggleContext } from '@sendbird/ui/Toggle';
```

----------------------------------------

TITLE: Rendering Custom Frozen Channel Notification (TSX)
DESCRIPTION: This snippet shows how to use the `renderFrozenNotification` prop on the `<Channel>` component to provide a custom UI element that is displayed when the channel is frozen. It demonstrates returning a simple `div` element with custom text and CSS classes, allowing developers to replace the default frozen notification display with their own implementation.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_37

LANGUAGE: tsx
CODE:
```
<Channel
  channelUrl={channelUrl}
  renderFrozenNotification={() => {
    return (
      <div
        className="sendbird-notification sendbird-notification--frozen sendbird-conversation__messages__notification"
      >My custom Frozen Notification</div>
    );
  }}
/>
```

----------------------------------------

TITLE: Using Icon Component with Enum Types - TSX
DESCRIPTION: This TSX snippet demonstrates importing and using the `Icon` component from `@sendbird/uikit-react`. It shows how to use the `IconTypes` and `IconColors` enums to set the `type` and `fillColor` props respectively, ensuring type safety and using predefined valid values for icon and color configuration.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_55

LANGUAGE: TSX
CODE:
```
import Icon, { IconTypes, IconColors } from '@sendbird/uikit-react/ui/Icon'

<Icon
  type={IconTypes.INFO}
  fillColor={IconColors.PRIMARY}
/>
```

----------------------------------------

TITLE: Importing Button component (TSX)
DESCRIPTION: Provides the standard import statement for using the Button component from the Sendbird UI Kit React library in your project. Requires the `@sendbird/uikit-react` package to be installed.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/stories/Button.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Button from '@sendbird/uikit-react/ui/Button';
```

----------------------------------------

TITLE: Importing Sendbird UIKit Channel Components and Hooks (TSX)
DESCRIPTION: This snippet demonstrates how to import newly exported components and hooks from specific paths within the Sendbird UIKit React library. It shows the import statements for the `useHandleUploadFiles` hook and the `VoiceMessageInputWrapper` component, including its associated type `VoiceMessageInputWrapperProps`, making them available for use in custom components.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_38

LANGUAGE: tsx
CODE:
```
import { useHandleUploadFiles } from '@sendbird/uikit-react/Channel/hooks/useHandleUploadFiles'
import { VoiceMessageInputWrapper, VoiceMessageInputWrapperProps } from '@sendbird/uikit-react/Channel/components/MessageInput'
```

----------------------------------------

TITLE: Enabling Multiple Files Message Thread Component/Provider React TSX
DESCRIPTION: This snippet demonstrates how to enable the Multiple Files Message feature specifically within the `Thread` context by adding the `isMultipleFilesMessageEnabled` prop to either the `Thread` component or the `ThreadProvider`.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_44

LANGUAGE: tsx
CODE:
```
import Thread from '@sendbird/uikit-react/Thread';
import { ThreadProvider } from '@sendbird/uikit-react/Thread/context';

<Thread
  ...
  isMultipleFilesMessageEnabled
/>
<ThreadProvider
  ...
  isMultipleFilesMessageEnabled
>
  {...}
</ThreadProvider>
```

----------------------------------------

TITLE: Unfreezing Channel by Object in Sendbird UIKit v3 - JavaScript
DESCRIPTION: Demonstrates unfreezing a channel in v3 using the `getUnfreezeChannel` method. The parameter is now the `GroupChannel` or `OpenChannel` object itself, not the URL string. It returns a Promise.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_12

LANGUAGE: javascript
CODE:
```
const unfreezeChannel = sendbirdSelectors.getUnfreezeChannel();
unfreezeChannel(channel: GroupChannel | OpenChannel)
	.then(() => { /* Handle success */ })
	.catch(() => { /* Handle error */ })
```

----------------------------------------

TITLE: Defining FileViewer Component Props - TypeScript
DESCRIPTION: This TypeScript snippet defines the prop types for the `ui/FileViewer` component, updated to support both single and multiple image viewing. It uses a discriminated union (`FileViewerComponentProps`) based on the `viewerType` enum to provide specific props for each mode, including sender info, file details, close handler, and mode-specific actions like delete or navigation.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_56

LANGUAGE: TypeScript
CODE:
```
export enum ViewerTypes {
  SINGLE = 'SINGLE',
  MULTI = 'MULTI',
}
interface SenderInfo {
  profileUrl: string;
  nickname: string;
}
interface FileInfo {
  name: string;
  type: string;
  url: string;
}
interface BaseViewer {
  onClose: (e: React.MouseEvent) => void;
}
interface SingleFileViewer extends SenderInfo, FileInfo, BaseViewer {
  viewerType?: typeof ViewerTypes.SINGLE;
  isByMe?: boolean;
  disableDelete?: boolean;
  onDelete: (e: React.MouseEvent) => void;
}
interface MultiFilesViewer extends SenderInfo, BaseViewer {
  viewerType: typeof ViewerTypes.MULTI;
  fileInfoList: FileInfo[];
  currentIndex: number;
  onClickLeft: () => void;
  onClickRight: () => void;
}
export type FileViewerComponentProps = SingleFileViewer | MultiFilesViewer;
```

----------------------------------------

TITLE: Importing TextButton from Sendbird UIKit React (TSX)
DESCRIPTION: This snippet shows the standard import statement required to bring the `TextButton` component into a TypeScript/TSX or JavaScript React project using the Sendbird UIKit React library. It is a prerequisite for using the component within your application's UI.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/stories/TextButton.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import TextButton from '@sendbird/uikit-react/ui/TextButton';
```

----------------------------------------

TITLE: Defining Outgoing Message States Enum - Sendbird UIKit React - TypeScript
DESCRIPTION: Defines the 'OutgoingMessageStates' enum, enumerating the possible states for an outgoing message (NONE, PENDING, SENT, FAILED, DELIVERED, READ).
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_81

LANGUAGE: typescript
CODE:
```
enum OutgoingMessageStates { NONE, PENDING, SENT, FAILED, DELIVERED, READ }
```

----------------------------------------

TITLE: Rendering Typing Indicator Bubble Component (TSX)
DESCRIPTION: This snippet shows how to integrate the `TypingIndicatorBubble` component into a React application using Sendbird UIKit. It demonstrates passing the list of `typingMembers` and a `handleScroll` function, which adjusts the scroll position when the bubble appears if the user is near the bottom of the message list (within `SCROLL_BUFFER`).
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_34

LANGUAGE: tsx
CODE:
```
const moveScroll = (): void => {
  const current = scrollRef?.current;
  if (current) {
    const bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;
    if (scrollBottom < bottom && scrollBottom < SCROLL_BUFFER) {
      // Move the scroll as much as the height of the message has changed
      current.scrollTop += bottom - scrollBottom;
    }
  }
};

return (
  <TypingIndicatorBubble
    typingMembers={typingMembers}
    handleScroll={moveScroll} // Scroll to the rendered typing indicator message IFF current scroll is bottom.
  />
);
```

----------------------------------------

TITLE: Importing Thread Context Hooks - Sendbird UIKit React - TypeScript
DESCRIPTION: Shows how to import 'ThreadProvider' and the 'useThreadContext' hook for advanced customization and state management within the Thread module.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_73

LANGUAGE: typescript
CODE:
```
import { ThreadProvider, useThreadContext } from "@sendbird/uikit-react/Thread/context"
```

----------------------------------------

TITLE: Importing SessionHandler - Sendbird UIKit React - TypeScript
DESCRIPTION: Shows how to import the 'SessionHandler' directly from the Sendbird UIKit React library, providing a workaround for issues with custom handler inheritance chains.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_85

LANGUAGE: typescript
CODE:
```
import SessionHandler from '@sendbird/uikit-react/handlers/SessionHandler'
```

----------------------------------------

TITLE: Importing ContextMenu Component (TSX)
DESCRIPTION: This code snippet shows the standard ES module import statement for bringing the `ContextMenu` component, along with its `MenuItems` and `MenuItem` sub-components/types, into a React application from the specified Sendbird UIKit React package path. It is necessary to use these components in your UI.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/stories/ContextMenu.mdx#_snippet_0

LANGUAGE: TSX
CODE:
```
import ContextMenu, { MenuItems, MenuItem } from '@sendbird/uikit-react/ui/ContextMenu';
```

----------------------------------------

TITLE: Using ChannelProvider with Voice Message Hook - TSX
DESCRIPTION: This TSX snippet demonstrates how to wrap components with the `ChannelProvider` from `@sendbird/uikit-react`. It specifically shows how to pass the newly added `onBeforeSendVoiceMessage` prop, providing a placeholder function for customization before a voice message is sent. This allows overriding default send logic for voice messages.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_49

LANGUAGE: TSX
CODE:
```
import { ChannelProvider } from '@sendbird/uikit-react/Channel/context'

<ChannelProvider
  onBeforeSendVoiceMessage={() => {}}
/>
```

----------------------------------------

TITLE: Importing Sendbird UI Kit Badge in TypeScript
DESCRIPTION: This code snippet shows how to import the Badge component from the Sendbird UI Kit library. This line is necessary to use the component in your React or TypeScript application.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/stories/Badge.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import Badge from '@sendbird/uikit-react/ui/Badge';
```

----------------------------------------

TITLE: Defining MessageInput Component Prop Types - TypeScript
DESCRIPTION: This TypeScript interface defines the expected types for callback props within the `MessageInputProps` for the Sendbird UIKit React library. It specifies the signatures for `onFileUpload`, `onSendMessage`, and `onUpdateMessage` handlers. These props allow developers to override default behavior for file uploads and message sending/updating.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_47

LANGUAGE: TypeScript
CODE:
```
interface MessageInputProps {
  ...
  onFileUpload?: (fileList: FileList) => void;
  onSendMessage?: (props: { message: string, mentionTemplate: string }) => void;
  onUpdateMessage?: (props: { messageId: string, message: string, mentionTemplate: string }) => void;
}
```

----------------------------------------

TITLE: Importing Sendbird UI Kit Avatar Component - TSX
DESCRIPTION: This snippet provides the standard ES module import statement necessary to use the `Avatar` component within a React or TypeScript project utilizing the Sendbird UI Kit. It makes the component available for rendering and integration into your application's UI.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/stories/Avatar.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Avatar from '@sendbird/uikit-react/ui/Avatar';
```

----------------------------------------

TITLE: Configuring Sendbird UIKit React Type Definitions in tsconfig.json (JSON)
DESCRIPTION: This JSON snippet should be added to your `tsconfig.json` file to include the Sendbird UIKit React type definitions. It ensures that the TypeScript compiler can find and use the type declarations provided by the library, enabling type checking and code completion.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/samples/typescript_sample/README.md#_snippet_0

LANGUAGE: JSON
CODE:
```

  "include": [
    "node_modules/@sendbird/uikit-react/index.d.ts"
  ]

```

----------------------------------------

TITLE: Importing UserListItemMenu Components (TSX)
DESCRIPTION: Shows the standard import statement for the new `UserListItemMenu`, `UserListItemMenuProvider`, and `useUserListItemMenuContext` modules from the Sendbird UIKit React library. These are used for customizing the user list item menu.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_10

LANGUAGE: tsx
CODE:
```
import { UserListItemMenu, UserListItemMenuProvider, useUserListItemMenuContext } from '@sendbird/uikit-react/ui/UserListItemMenu';
```

----------------------------------------

TITLE: Importing BottomSheet Component - Sendbird UI Kit React - TypeScript
DESCRIPTION: This code snippet demonstrates the standard way to import the BottomSheet UI component from the Sendbird UI Kit React package into a TypeScript/React project. This import is necessary before the component can be used in any JSX.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/stories/BottomSheet.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import BottomSheet from '@sendbird/uikit-react/ui/BottomSheet';
```

----------------------------------------

TITLE: Importing Checkbox Component (TSX)
DESCRIPTION: This code snippet shows the standard method for importing the Checkbox component from the Sendbird UI Kit React library. To use the Checkbox component in your application, you must have the `@sendbird/uikit-react` package installed. This import statement makes the component available for use in your React components.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/stories/Checkbox.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Checkbox from '@sendbird/uikit-react/ui/Checkbox';
```

----------------------------------------

TITLE: Customizing Message Menu Items (React/TSX)
DESCRIPTION: Illustrates how to customize individual items within the message context menu. This is achieved by providing a function to the `renderMenuItem` prop, which is nested within `renderMessageMenu` inside the `renderMessageContent` prop of the `GroupChannel` component.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_20

LANGUAGE: TSX
CODE:
```
<GroupChannel
  renderMessageContent={(props) => (
    <MessageContent
      {...props}
      renderMessageMenu={(props) => (
        <MessageMenu
          {...props}
          renderMenuItem={(props) => {
            const {
              className,
              onClick,
              dataSbId,
              disable,
              text,
            } = props;
            return <MenuItem /> // Render Custom Menu Item
          }}
        />
      )}
    />
  )}
/>
```

----------------------------------------

TITLE: Importing ChannelSettingsHeader Component (React/JS)
DESCRIPTION: Illustrates how to import the `ChannelSettingsHeader` component, which was exported as default in v3.14.7. This component can be used as a standalone header element within or outside the ChannelSettings module.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
import ChannelSettingsHeader from '@sendbird/uikit-react/ChannelSettings/components/ChannelSettingsHeader'
```

----------------------------------------

TITLE: Importing Mobile Message Menu Components (TSX)
DESCRIPTION: Shows the import statement for the `MobileMenu`, `MobileContextMenu`, and `MobileBottomSheet` components from the `@sendbird/uikit-react/ui/MobileMenu` module. These components are used for rendering context or bottom sheet menus for messages on mobile devices.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_14

LANGUAGE: tsx
CODE:
```
import { MobileMenu, MobileContextMenu, MobileBottomSheet } from '@sendbird/uikit-react/ui/MobileMenu';
```

----------------------------------------

TITLE: Using Button Component with Enum Types - TSX
DESCRIPTION: This TSX snippet demonstrates importing and using the `Button` component from `@sendbird/uikit-react`. It shows how to use the `ButtonTypes` and `ButtonSizes` enums to set the `type` and `size` props, ensuring type safety and using predefined valid values for component configuration.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_53

LANGUAGE: TSX
CODE:
```
import Button, { ButtonTypes, ButtonSizes } from '@sendbird/uikit-react/ui/Button'

<Button
  type={ButtonTypes.PRIMARY}
  size={ButtonSizes.BIG}
/>
```

----------------------------------------

TITLE: Importing Label Component - TSX
DESCRIPTION: Imports the Label component and its associated typography and color enums from the Sendbird UIKit React library. This import statement is required to use the Label component within your application.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/stories/Label.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Label, { LabelTypography, LabelColors } from '@sendbird/uikit-react/ui/Label';
```

----------------------------------------

TITLE: Enabling Form Messages in Sendbird UIKit React (TSX)
DESCRIPTION: This snippet illustrates how to enable the form message feature globally for group channels in Sendbird UIKit React. By setting the `enableFormTypeMessage` option to `true` within the `uikitOptions` prop of the `<App>` component, messages containing a `messageForm` payload will be rendered as interactive forms. This configuration provides a central way to control the display of this feature across the application.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_2

LANGUAGE: tsx
CODE:
```
<App
  appId={appId}
  userId={userId}
  uikitOptions={{
    groupChannel: {
      // Below turns on the form message feature. Default value is false.
      enableFormTypeMessage: true,
    }
  }}
/>
```

----------------------------------------

TITLE: Enabling Multiple Files Message Channel Component/Provider React TSX
DESCRIPTION: This snippet illustrates how to enable the Multiple Files Message feature specifically within the `Channel` context by adding the `isMultipleFilesMessageEnabled` prop to either the `Channel` component or the `ChannelProvider`.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_43

LANGUAGE: tsx
CODE:
```
import Channel from '@sendbird/uikit-react/Channel';
import { ChannelProvider } from '@sendbird/uikit-react/Channel/context';

<Channel
  ...
  isMultipleFilesMessageEnabled
/>
<ChannelProvider
  ...
  isMultipleFilesMessageEnabled
>
  {...}
</ChannelProvider>
```

----------------------------------------

TITLE: Render Prop Signature (After Fix) - Sendbird UIKit React - TypeScript
DESCRIPTION: Shows the updated TypeScript type signature for the 'renderCustomSeparator' prop, including a 'props' object with a 'message' property as a parameter for the rendering function.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_88

LANGUAGE: typescript
CODE:
```
after: renderCustomSeparator={(props: { message }) => ReactElement}
```

----------------------------------------

TITLE: Publishing Message Events PubSub React TSX
DESCRIPTION: This snippet shows how to use the `pubSub` mechanism to publish different stages of sending a file message (pending, failed, succeeded). It demonstrates specifying `publishingModules` to control which parts of the application should receive the event.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_45

LANGUAGE: tsx
CODE:
```
import { useCallback } from 'react'
import { SendbirdProvider, useSendbirdStateContext } from '@sendbird/uikit-react/SendbirdProvider'
import { PUBSUB_TOPICS as topics, PublishingModuleTypes } from '@sendbird/uikit-react/pubSub/topics'

const CustomApp = () => {
  const globalState = useSendbirdStateContext();
  const { stores, config } = globalState;
  const { sdk, initialized } = stores.sdkStore;
  const { pubSub } = config;

  const onSendFileMessageOnlyInChannel = useCallback((channel, params) => {
    channel.sendFileMessage(params)
      .onPending((pendingMessage) => {
        pubSub.publish(topics.SEND_MESSAGE_START, {
          channel,
          message: pendingMessage,
          publishingModules: [PublishingModuleTypes.CHANNEL],
        });
      })
      .onFailed((failedMessage) => {
        pubSub.publish(topics.SEND_MESSAGE_FAILED, {
          channel,
          message: failedMessage,
          publishingModules: [PublishingModuleTypes.CHANNEL],
        });
      })
      .onSucceeded((succeededMessage) => {
        pubSub.publish(topics.SEND_FILE_MESSAGE, {
          channel,
          message: succeededMessage,
          publishingModules: [PublishingModuleTypes.CHANNEL],
        });
      })
  }, []);

  return (<>...</>)
};

const App = () => (
  <SendbirdProvider>
    <CustomApp />
  </SendbirdProvider>
);
```

----------------------------------------

TITLE: Configuring Image Compression Output Format (React/TSX)
DESCRIPTION: Demonstrates how to specify the desired output format for image compression via the `imageCompression.outputFormat` prop on the `SendbirdProvider`. This option accepts 'preserve', 'png', or 'jpeg' and controls the file type of images after compression but before upload.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_19

LANGUAGE: TSX
CODE:
```
<SendbirdProvider
  ...
  imageCompression={{
    outputFormat: 'preserve' | 'png' | 'jpeg',
  }}
>
</SendbirdProvider>
```

----------------------------------------

TITLE: Configuring Suggested Replies Behavior (Global)
DESCRIPTION: This snippet shows how to use the `showSuggestedRepliesFor` option within `uikitOptions.groupChannel` on the `<App />` component to control when suggested replies are displayed for messages. Setting it to 'always' makes the `SuggestedReplies` component visible for all messages with replies.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_23

LANGUAGE: tsx
CODE:
```
<App
  appId={appId}
  userId={userId}
  uikitOptions={{
    groupChannel: {
      // Below setting always shows `SuggestedReplies` component of a message. Default value is 'last_message_only'.
      showSuggestedRepliesFor: 'always',
    }
  }}
/>
```

----------------------------------------

TITLE: Importing sendbirdSelectors in Sendbird UIKit v3 - JavaScript
DESCRIPTION: This snippet shows the updated import path for the `sendbirdSelectors` utility in Sendbird UIKit v3. Note the package name change and the default import.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import sendbirdSelectors from '@sendbird/uikit-react/sendbirdSelectors';
```

----------------------------------------

TITLE: Configuring Suggested Replies Direction (React/TSX)
DESCRIPTION: Shows how to set the scroll direction for suggested replies using the `suggestedRepliesDirection` option within the `App` component's `uikitOptions.groupChannel`. Setting it to 'vertical' changes the default horizontal layout. Requires `enableSuggestedReplies` to be true.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_18

LANGUAGE: TSX
CODE:
```
<App
  appId={appId}
  userId={userId}
  uikitOptions={{
    groupChannel: {
      // Below turns on the `SuggestedReplies` feature (see v3.8.0 release changelog). Default value is false.
      enableSuggestedReplies: true,
      // Below changes scroll direction from horizontal to vertical.
      suggestedRepliesDirection: 'vertical'
    }
  }}
/>
```

----------------------------------------

TITLE: Defining Icon Component Enum Types - TypeScript
DESCRIPTION: This TypeScript snippet defines the `IconTypes` and `IconColors` enums used with the `ui/Icon` component. `IconTypes` lists all available icon names, while `IconColors` lists predefined color options. These enums provide type-safe string literal options for the `type` and `fillColor` props, ensuring valid icons and colors are used.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_54

LANGUAGE: TypeScript
CODE:
```
export enum IconTypes {
  ADD = 'ADD',
  ARROW_LEFT = 'ARROW_LEFT',
  ATTACH = 'ATTACH',
  AUDIO_ON_LINED = 'AUDIO_ON_LINED',
  BAN = 'BAN',
  BROADCAST = 'BROADCAST',
  CAMERA = 'CAMERA',
  CHANNELS = 'CHANNELS',
  CHAT = 'CHAT',
  CHAT_FILLED = 'CHAT_FILLED',
  CHEVRON_DOWN = 'CHEVRON_DOWN',
  CHEVRON_RIGHT = 'CHEVRON_RIGHT',
  CLOSE = 'CLOSE',
  COLLAPSE = 'COLLAPSE',
  COPY = 'COPY',
  CREATE = 'CREATE',
  DELETE = 'DELETE',
  DISCONNECTED = 'DISCONNECTED',
  DOCUMENT = 'DOCUMENT',
  DONE = 'DONE',
  DONE_ALL = 'DONE_ALL',
  DOWNLOAD = 'DOWNLOAD',
  EDIT = 'EDIT',
  EMOJI_MORE = 'EMOJI_MORE',
  ERROR = 'ERROR',
  EXPAND = 'EXPAND',
  FILE_AUDIO = 'FILE_AUDIO',
  FILE_DOCUMENT = 'FILE_DOCUMENT',
  FREEZE = 'FREEZE',
  GIF = 'GIF',
  INFO = 'INFO',
  LEAVE = 'LEAVE',
  MEMBERS = 'MEMBERS',
  MESSAGE = 'MESSAGE',
  MODERATIONS = 'MODERATIONS',
  MORE = 'MORE',
  MUTE = 'MUTE',
  NOTIFICATIONS = 'NOTIFICATIONS',
  NOTIFICATIONS_OFF_FILLED = 'NOTIFICATIONS_OFF_FILLED',
  OPERATOR = 'OPERATOR',
  PHOTO = 'PHOTO',
  PLAY = 'PLAY',
  PLUS = 'PLUS',
  QUESTION = 'QUESTION',
  REFRESH = 'REFRESH',
  REPLY = 'REPLY',
  REMOVE = 'REMOVE',
  SEARCH = 'SEARCH',
  SEND = 'SEND',
  SETTINGS_FILLED = 'SETTINGS_FILLED',
  SLIDE_LEFT = 'SLIDE_LEFT',
  SPINNER = 'SPINNER',
  SUPERGROUP = 'SUPERGROUP',
  THREAD = 'THREAD',
  THUMBNAIL_NONE = 'THUMBNAIL_NONE',
  TOGGLE_OFF = 'TOGGLE_OFF',
  TOGGLE_ON = 'TOGGLE_ON',
  USER = 'USER',
}
export enum IconColors {
  DEFAULT = 'DEFAULT',
  PRIMARY = 'PRIMARY',
  PRIMARY_2 = 'PRIMARY_2',
  SECONDARY = 'SECONDARY',
  CONTENT = 'CONTENT',
  CONTENT_INVERSE = 'CONTENT_INVERSE',
  WHITE = 'WHITE',
  GRAY = 'GRAY',
  THUMBNAIL_ICON = 'THUMBNAIL_ICON',
  SENT = 'SENT',
  READ = 'READ',
  ON_BACKGROUND_1 = 'ON_BACKGROUND_1',
  ON_BACKGROUND_2 = 'ON_BACKGROUND_2',
  ON_BACKGROUND_3 = 'ON_BACKGROUND_3',
  ON_BACKGROUND_4 = 'ON_BACKGROUND_4',
  BACKGROUND_3 = 'BACKGROUND_3',
  ERROR = 'ERROR',
}
```

----------------------------------------

TITLE: Defining onReplyInThread Callback Type - Sendbird UIKit React - TypeScript
DESCRIPTION: Defines the TypeScript type signature for the 'onReplyInThread' callback function, which is invoked when a user clicks 'Reply in thread' on a message context menu. It receives the message object as an argument.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_76

LANGUAGE: typescript
CODE:
```
type onReplyInThread = ({ message: UserMessage | FileMessage }) => void
```

----------------------------------------

TITLE: Defining State Types for Contexts as Enums in TypeScript
DESCRIPTION: This TypeScript snippet defines enums for representing the state of various contexts related to channels, parent messages, and thread lists. These enums provide a clear set of possible states, including NIL, LOADING, INVALID, and INITIALIZED.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_71

LANGUAGE: TypeScript
CODE:
```
enum ChannelStateTypes {
  NIL = 'NIL',
  LOADING = 'LOADING',
  INVALID = 'INVALID',
  INITIALIZED = 'INITIALIZED',
}
enum ParentMessageStateTypes {
  NIL = 'NIL',
  LOADING = 'LOADING',
  INVALID = 'INVALID',
  INITIALIZED = 'INITIALIZED',
}
enum ThreadListStateTypes {
  NIL = 'NIL',
  LOADING = 'LOADING',
  INVALID = 'INVALID',
  INITIALIZED = 'INITIALIZED',
}
```

----------------------------------------

TITLE: Defining App Layout Root Constant (TSX)
DESCRIPTION: Defines the string constant `APP_LAYOUT_ROOT` which holds the ID (`sendbird-app__layout`) that should be assigned to the HTML element wrapping the Sendbird UIKit area. This is necessary for accurate menu position calculations within the UI.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_13

LANGUAGE: tsx
CODE:
```
export const APP_LAYOUT_ROOT = 'sendbird-app__layout';
```

----------------------------------------

TITLE: Adding Voice Message Hook to Channel Context Types - TypeScript
DESCRIPTION: This TypeScript interface adds the `onBeforeSendVoiceMessage` optional property to the `ChannelContextProps`. This prop is a callback function that can be used to modify or preprocess a voice message file before it is sent via the `ChannelProvider` context. It receives the file and optional quoted message and should return `FileMessageCreateParams`.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_48

LANGUAGE: TypeScript
CODE:
```
interface ChannelContextProps {
  onBeforeSendVoiceMessage?: (file: File, quotedMessage?: SendableMessageType) => FileMessageCreateParams;
}
```

----------------------------------------

TITLE: Defining Types for Override User Invitation in TypeScript
DESCRIPTION: This TypeScript snippet defines interfaces and types used for overriding the default user invitation behavior in various components like ChannelList, CreateChannel, and ChannelSettings. It specifies the parameters expected by the override functions.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_69

LANGUAGE: TypeScript
CODE:
```
export type OverrideInviteUserType = {
    users: Array<string>;
    onClose: () => void;
    channelType: 'group' | 'supergroup' | 'broadcast';
};
export interface ChannelListProps {
  overrideInviteUser?(params: OverrideInviteUserType): void;
}
export interface CreateChannelProps {
  overrideInviteUser?(params: OverrideInviteUserType): void;
}
export type OverrideInviteMemberType = {
    users: Array<string>;
    onClose: () => void;
    channel: GroupChannel;
};
ChannelSettings.overrideInviteUser?(params: OverrideInviteMemberType): void;
```

----------------------------------------

TITLE: Importing MessageSearch in Sendbird UIKit v3 (JavaScript)
DESCRIPTION: Illustrates the new import paths for the modularized `MessageSearch` component introduced in version 3 of Sendbird UIKit React.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_46

LANGUAGE: javascript
CODE:
```
import MessageSearch from "@sendbird/uikit-react/MessageSearch"
// Or
import { MessageSearch } from "@sendbird/uikit-react"
```

----------------------------------------

TITLE: Defining Button Component Enum Types - TypeScript
DESCRIPTION: This TypeScript snippet defines the `ButtonTypes` and `ButtonSizes` enums used with the `ui/Button` component. These enums provide type-safe string literal options for the `type` (e.g., PRIMARY, DANGER) and `size` (BIG, SMALL) props, ensuring valid configurations are used.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_52

LANGUAGE: TypeScript
CODE:
```
enum ButtonTypes {
  PRIMARY = 'PRIMARY',
  SECONDARY = 'SECONDARY',
  DANGER = 'DANGER',
  DISABLED = 'DISABLED',
}
enum ButtonSizes {
  BIG = 'BIG',
  SMALL = 'SMALL',
}
```

----------------------------------------

TITLE: Importing Tooltip and TooltipWrapper Components - TSX
DESCRIPTION: This snippet demonstrates the standard way to import the `Tooltip` and `TooltipWrapper` components from the `@sendbird/uikit-react` package. These imports are necessary to use the components in a React application. Dependencies include the `@sendbird/uikit-react` library.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/stories/Tooltip.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Tooltip from '@sendbird/uikit-react/ui/Tooltip';
import TooltipWrapper from '@sendbird/uikit-react/ui/TooltipWrapper';
```

----------------------------------------

TITLE: Enabling Legacy Modules with SendbirdApp (TSX)
DESCRIPTION: Demonstrates how to use the main `SendbirdApp` component and keep the older `Channel` and `ChannelList` modules active instead of automatically switching to the new `GroupChannel` components. This is achieved by passing the `enableLegacyChannelModules` boolean prop to the `SendbirdApp` component.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_COLLECTION.md#_snippet_0

LANGUAGE: tsx
CODE:
```
import SendbirdApp from '@sendbird/uikit-react/App';

const App = () => (
  <SendbirdApp
    // ...
    enableLegacyChannelModules
  />
);
```

----------------------------------------

TITLE: Adding Message Hooks to Thread Context Types - TypeScript
DESCRIPTION: This TypeScript interface adds optional callback props (`onBeforeSendUserMessage`, `onBeforeSendFileMessage`, `onBeforeSendVoiceMessage`) to `ThreadProviderProps`. These functions allow developers to preprocess or modify user, file, and voice messages respectively before they are sent within a thread context. They receive message data/file and optional quoted message.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_50

LANGUAGE: TypeScript
CODE:
```
interface ThreadProviderProps {
  onBeforeSendUserMessage?: (message: string, quotedMessage?: SendableMessageType) => UserMessageCreateParams;
  onBeforeSendFileMessage?: (file: File, quotedMessage?: SendableMessageType) => FileMessageCreateParams;
  onBeforeSendVoiceMessage?: (file: File, quotedMessage?: SendableMessageType) => FileMessageCreateParams;
}
```

----------------------------------------

TITLE: Defining Thread Replies Props Interface - Sendbird UIKit React - TypeScript
DESCRIPTION: Defines the TypeScript interface 'ThreadRepliesProps' for the 'ui/ThreadReplies' component, outlining the expected properties such as className, threadInfo, and an optional onClick handler.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_80

LANGUAGE: typescript
CODE:
```
interface ThreadRepliesProps {
  className?: string;
  threadInfo: ThreadInfo;
  onClick?: (e: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => void;
}
```

----------------------------------------

TITLE: Using Reducer with React useReducer Hook - TypeScript
DESCRIPTION: Shows how to use the previously defined `prefixReducer` and `initialState` within a React functional component. It utilizes the built-in `useReducer` hook to obtain the current state managed by the reducer and a `dispatch` function to send actions that trigger state updates.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/utils/typeHelpers/reducers/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
// in component
import { ${prefix}Reducer, initialState } from "./reducer";
import { ${Prefix}ActionTypes, ${PREFIX}_ACTIONS } from "./actionTypes";

const [state, dispatch] = useReducer(${prefix}Reducer, initialState);
```

----------------------------------------

TITLE: Enabling Legacy Channel Modules (App)
DESCRIPTION: This snippet demonstrates how to opt-in to using the older `Channel` and `ChannelList` components instead of the new `GroupChannel` and `GroupChannelList` modules introduced in v3.12.0. You add the `enableLegacyChannelModules` prop to the `<SendbirdApp />` component.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_29

LANGUAGE: tsx
CODE:
```
import SendbirdApp from '@sendbird/uikit-react/App';
    
const App = () => (
  <SendbirdApp
    // ...
    enableLegacyChannelModules
  />
);
```

----------------------------------------

TITLE: Defining Initial State Interface and Object - TypeScript
DESCRIPTION: Defines the TypeScript interface `PrefixStateType` for the reducer's state, including `sdk` and `loading` properties, and provides the `initialState` object with default values. This sets up the initial shape and content of the state slice.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/utils/typeHelpers/reducers/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// intialState.ts
export interface ${Prefix}StateType {
  sdk: SendbirdChat,
  loading: boolean,
}

const initialState: ${Prefix}StateType = {
  loading: false,
  sdk: {} as SendbirdChat,
};
```

----------------------------------------

TITLE: Sending User Messages in Sendbird UIKit v2 - JavaScript
DESCRIPTION: This snippet demonstrates sending a user message using `getSendUserMessage` in Sendbird UIKit v2. It requires the channel URL and SDK message parameters and returns a Promise.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const sendUserMessage = sendBirdSelectors.getSendUserMessage(store);
const params = new sdk.UserMessageParams();
sendUserMessage('channel-url', params)
	.then((message) => { /* Handle success */ })
	.catch((error) => { /* Handle error */ })
```

----------------------------------------

TITLE: Resending User Message with Sendbird UIKit v2 JavaScript
DESCRIPTION: Demonstrates getting the `getResendUserMessage` selector in v2 to resend a failed user message. It's called with the channel URL and the failed message object, returning a Promise. This method was used for both group and open channels in v2.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_25

LANGUAGE: javascript
CODE:
```
const resendUserMessage = sendBirdSelectors.getResendUserMessage(store);
resendUserMessage('channel-url', failedMessage)
	.then((message) => {})
	.catch((error) => {})
```

----------------------------------------

TITLE: Defining Thread Reply Select Type Enum - Sendbird UIKit React - TypeScript
DESCRIPTION: Defines the 'ThreadReplySelectType' enum, specifying the possible values ('PARENT', 'THREAD') for how replies should be handled or displayed in the Thread feature.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_74

LANGUAGE: typescript
CODE:
```
enum ThreadReplySelectType { PARENT, THREAD }
```

----------------------------------------

TITLE: Migrating CJS Import Path Sendbird UIKit React JS
DESCRIPTION: This snippet shows the required change for importing modules like ChannelList in a Native CJS environment after the migration to sub-path exports in the package.json file. It updates the import path to directly reference the module name.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_40

LANGUAGE: diff
CODE:
```
- const ChannelList = require('@sendbird/uikit-react/cjs/ChannelList');
+ const ChannelList = require('@sendbird/uikit-react/ChannelList');
```

----------------------------------------

TITLE: Setting Up Local Development (Shell)
DESCRIPTION: Commands to install project dependencies and start the local development server using Vite. Requires cloning the repository and setting up a `.env` file with your Sendbird App ID before running.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Freezing Channel by URL in Sendbird UIKit v2 - JavaScript
DESCRIPTION: Shows how to freeze a channel in Sendbird UIKit v2 using the channel URL string parameter with `getFreezeChannel`. It returns a Promise.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const freezeChannel = sendBirdSelectors.getFreezeChannel(store);
freezeChannel('channel-url')
	.then(() => { /* Handle success */ })
	.catch((error) => { /* Handle error */ })
```

----------------------------------------

TITLE: Migrating User Profile Context Hook Name React TSX
DESCRIPTION: This snippet shows the necessary import change due to the renaming of the `useEditUserProfileProviderContext` hook to `useEditUserProfileContext` for accessing user profile editing context.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_46

LANGUAGE: tsx
CODE:
```
import { useEditUserProfileProviderContext } from '@sendbird/uikit-react/EditUserProfile/context'
// to
import { useEditUserProfileContext } from '@sendbird/uikit-react/EditUserProfile/context'
```

----------------------------------------

TITLE: Running Sendbird UIKit React Router Sample - bash
DESCRIPTION: This bash snippet provides the commands required to set up and run the Sendbird UIKit for React sample application that integrates with react-router. It assumes you have already cloned the repository and set the appId. Dependencies must be installed before starting the development server. Requires nodejs@18.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/samples/router/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Implementing Pure Reducer Function with Match - TypeScript
DESCRIPTION: Implements the core reducer logic in the `prefixReducer` function. It accepts the current state and an action, returning a new state object. The implementation uses a `match` utility to pattern-match on the action type and updates the state immutably by spreading the previous state and adding or changing properties according to the action's payload.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/utils/typeHelpers/reducers/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// reducer.ts
import { ${Prefix}ActionTypes, ${PREFIX}_ACTIONS } from "./actionTypes";
import { ${Prefix}StateType } from "./initialState";

export const ${prefix}Reducer = (
  state: ${Prefix}StateType,
  action: ${Prefix}ActionTypes,
): ${Prefix}StateType => {
  return  match(action)
    .with({ type: ${PREFIX}_ACTIONS.SET_SDK }, (action) => ({
      ...state,
      sdk: action.payload.sdk,
    }))
    .with({ type: ${PREFIX}_ACTIONS.SET_LOADING }, (action) => ({
      ...state,
      loading: action.payload,
    }))
};
```

----------------------------------------

TITLE: Using New Icon in React Component
DESCRIPTION: Demonstrates how to import the `Icon` component, `IconTypes`, and `IconColors`, and then render the `Icon` component, specifying the `type` as the newly added `IconTypes.ADD`, setting a `fillColor`, and defining `width` and `height`.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/ui/Icon/README.md#_snippet_3

LANGUAGE: jsx
CODE:
```
  import Icon, { IconTypes, IconColors } from '../../../ui/Icon';

  ...

  <Icon
    type={IconTypes.ADD}
    fillColor={IconColors.PRIMARY}
    width="24px"
    height="24px"
  />
```

----------------------------------------

TITLE: Importing Channel Component with Sendbird UIKit v2 JavaScript
DESCRIPTION: Standard import statement for the `Channel` smart component from the main `sendbird-uikit` package in version 2.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_31

LANGUAGE: javascript
CODE:
```
import { Channel } from "sendbird-uikit";
```

----------------------------------------

TITLE: Defining onMessageHighlighted Callback Type - Sendbird UIKit React - TypeScript
DESCRIPTION: Defines the TypeScript type signature for the 'onMessageHighlighted' callback function, which is called after a message item is highlighted.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_79

LANGUAGE: typescript
CODE:
```
type onMessageHighlighted = () => void
```

----------------------------------------

TITLE: Defining onMessageAnimated Callback Type - Sendbird UIKit React - TypeScript
DESCRIPTION: Defines the TypeScript type signature for the 'onMessageAnimated' callback function, which is called after a message item completes its animation.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_78

LANGUAGE: typescript
CODE:
```
type onMessageAnimated = () => void
```

----------------------------------------

TITLE: Defining onQuoteMessageClick Callback Type - Sendbird UIKit React - TypeScript
DESCRIPTION: Defines the TypeScript type signature for the 'onQuoteMessageClick' callback function, triggered when a user clicks on a quoted message within the channel view. It receives the message object as an argument.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_77

LANGUAGE: typescript
CODE:
```
type onQuoteMessageClick = ({ message: UserMessage | FileMessage }) => {}
```

----------------------------------------

TITLE: Importing OpenChannel in Sendbird UIKit v2 (JavaScript)
DESCRIPTION: Shows the standard import path for the `OpenChannel` component when using version 2 of the Sendbird UIKit React library.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_40

LANGUAGE: javascript
CODE:
```
import { OpenChannel } from "sendbird-uikit";
```

----------------------------------------

TITLE: Unfreezing Channel by URL in Sendbird UIKit v2 - JavaScript
DESCRIPTION: Shows how to unfreeze a channel in Sendbird UIKit v2 using the channel URL string parameter with `getUnfreezeChannel`. It returns a Promise.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_11

LANGUAGE: javascript
CODE:
```
const unfreezeChannel = sendBirdSelectors.getUnfreezeChannel(store);
unfreezeChannel('channel-url')
	.then(() => { /* Handle success */ })
	.catch((error) => { /* Handle error */ })
```

----------------------------------------

TITLE: Defining New Icon Type Constant in Javascript
DESCRIPTION: Defines a new constant `ADD` within the icon type enumeration (likely `IconTypes`) to represent the newly added icon. This type is used later to select the correct icon component.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/ui/Icon/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
ADD: 'ADD',
```

----------------------------------------

TITLE: Creating Open Channel with Sendbird UIKit v2 JavaScript
DESCRIPTION: Demonstrates how to get the function to create an open channel from the Sendbird UIKit v2 store selectors. The function is called with a new `OpenChannelParams` object and returns a Promise.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_15

LANGUAGE: javascript
CODE:
```
const createOpenChannel = sendBirdSelectors.getCreateOpenChannel(store);
const params = new sdk.OpenChannelParams();
createOpenChannel(params)
	.then((channel) => {})
	.catch((error) => {})
```

----------------------------------------

TITLE: Updating User Message with Sendbird UIKit v2 JavaScript
DESCRIPTION: Demonstrates getting the `getUpdateUserMessage` selector in v2 to update a user message. It's called with the channel URL, message ID (as a number), and `UserMessageParams`, returning a Promise. This method was used for both group and open channels in v2.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_21

LANGUAGE: javascript
CODE:
```
const updateUserMessage = sendBirdSelectors.getUpdateUserMessage(store);
const params = new sdk.UserMessageParams();
updateUserMessage('channel-url', 'message-id(number)', params)
	.then((message) => {})
	.catch((error) => {})
```

----------------------------------------

TITLE: Importing ChannelSettings in Sendbird UIKit v2 (JavaScript)
DESCRIPTION: Shows the standard import path for the `ChannelSettings` component when using version 2 of the Sendbird UIKit React library.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_37

LANGUAGE: javascript
CODE:
```
import { ChannelSettings } from "sendbird-uikit";
```

----------------------------------------

TITLE: Defining getOutgoingMessageState Function Signature - Sendbird UIKit React - TypeScript
DESCRIPTION: Defines the TypeScript signature for the 'getOutgoingMessageState' utility function, indicating it takes 'channel' and 'message' objects and returns a value from the 'OutgoingMessageStates' enum.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_82

LANGUAGE: typescript
CODE:
```
function getOutgoingMessageState(channel, message): OutgoingMessageStates
```

----------------------------------------

TITLE: Importing ChannelList Component with Sendbird UIKit v2 JavaScript
DESCRIPTION: Standard import statement for the `ChannelList` component from the main `sendbird-uikit` package in version 2.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_29

LANGUAGE: javascript
CODE:
```
import { ChannelList } from "sendbird-uikit";
```

----------------------------------------

TITLE: Importing sendBirdSelectors in Sendbird UIKit v2 - JavaScript
DESCRIPTION: This snippet shows the import path for the `sendBirdSelectors` utility in Sendbird UIKit v2. This import path has changed in v3.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { sendBirdSelectors } from 'sendbird-uikit';
```

----------------------------------------

TITLE: Accessing Dispatchers in SendbirdSdkContext TSX (Old)
DESCRIPTION: This snippet shows the previous method of accessing various dispatcher functions and the reconnect method via the `dispatchers` object from the `useSendbirdSdkContext` hook. This approach is now deprecated.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/lib/Sendbird/MIGRATION_GUIDE.md#_snippet_0

LANGUAGE: tsx
CODE:
```
const { dispatchers } = useSendbirdSdkContext();
const { sdkDispatcher, userDispatcher, appInfoDispatcher, reconnect } = dispatchers;
```

----------------------------------------

TITLE: Customizing Message Rendering Before GroupChannel (TSX)
DESCRIPTION: Demonstrates the previous way to customize the children of the message component using the `renderMessage` prop on the `Channel` component. This approach fully replaces the default message content with custom JSX.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_COLLECTION.md#_snippet_3

LANGUAGE: tsx
CODE:
```
// Before
<Channel
  renderMessage={(props) => {
    return <div>{'my custom message child'}</div>;
  }}
/>;
```

----------------------------------------

TITLE: Creating Group Channel in Sendbird UIKit v2 - JavaScript
DESCRIPTION: Shows how to create a group channel in Sendbird UIKit v2 using the `getCreateChannel` method with SDK parameters. It returns a Promise.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_13

LANGUAGE: javascript
CODE:
```
const createChannel = sendBirdSelectors.getCreateChannel(store);
const params = new sdk.GroupChannelParams();
createChannel(params)
	.then((channel) => { /* Handle success */ })
	.catch((error) => { /* Handle error */ })
```

----------------------------------------

TITLE: Scaffolding New Component (Shell)
DESCRIPTION: Command using Plop.js to automatically generate boilerplate code and files for new UI components or reducers within the project structure. This tool helps accelerate the component creation process.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/README.md#_snippet_9

LANGUAGE: Shell
CODE:
```
yarn run generate-component
```

----------------------------------------

TITLE: Importing Exported Component (JavaScript)
DESCRIPTION: Example demonstrating how a consumer of the library would import a component that has been configured for export via the Rollup build process using the defined path alias.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/README.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
import SubComponent from '@sendbird/uikit-react/NewComponent/SubComponent';
```

----------------------------------------

TITLE: Running Tests (Shell)
DESCRIPTION: Command to execute the project's test suite. Tests are implemented for dumb UI components using Jest and testing-library to ensure component functionality.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/README.md#_snippet_5

LANGUAGE: Shell
CODE:
```
yarn test
```

----------------------------------------

TITLE: Running Linter (Shell)
DESCRIPTION: Command to run the project's linter. This checks code style and potential issues to maintain code consistency and quality across the project.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/README.md#_snippet_6

LANGUAGE: Shell
CODE:
```
yarn lint
```

----------------------------------------

TITLE: Building Production Bundle (Shell)
DESCRIPTION: Command to build the production-ready JavaScript bundle and CSS file using RollupJS. This process outputs ESM and CJS formats of the library to the `./dist` directory for distribution.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
yarn build
```

----------------------------------------

TITLE: Running the Storybook (Shell)
DESCRIPTION: Command to launch the Storybook server, which provides a visual showcase and documentation for the library's components. Useful for exploring components in isolation during development.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
yarn storybook
```

----------------------------------------

TITLE: Importing MessageSearch in Sendbird UIKit v2 (JavaScript)
DESCRIPTION: Shows the standard import path for the `MessageSearch` component when using version 2 of the Sendbird UIKit React library.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_45

LANGUAGE: javascript
CODE:
```
import { MessageSearch } from "sendbird-uikit";
```

----------------------------------------

TITLE: Corrected SVG Icon for CSS Styling (HTML)
DESCRIPTION: This snippet demonstrates the corrected SVG code after removing 'width', 'height', and 'fill' attributes. This allows the icon's size and color to be controlled effectively using CSS properties.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/svgs/_README_FOR_ADDING_ICON.md#_snippet_1

LANGUAGE: html
CODE:
```
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64">
  <g fill="none">
    <path d="..." />
  </g>
</svg>
```

----------------------------------------

TITLE: Mapping New Icon Type to Component in React
DESCRIPTION: Adds a case to the `changeTypeToIconComponent` function to associate the newly defined `ADD` icon type with the imported `IconAdd` component. This allows the Icon component to render the correct SVG based on the provided type.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/ui/Icon/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
case Type.ADD: return <IconAdd />;
```

----------------------------------------

TITLE: Importing New SVG Icon in React
DESCRIPTION: Imports the new SVG file as a React component named `IconAdd` from the specified relative path. This makes the SVG available for use within the component mapping function.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/ui/Icon/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import IconAdd from '../../svgs/icon-add.svg';
```

----------------------------------------

TITLE: Installing lamejs with npm - Bash
DESCRIPTION: Command to install the lamejs library using the npm package manager. Requires Node.js and npm to be installed. This is the standard way to include it in Node.js projects or bundler-based front-end projects.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/_externals/lamejs/README.md#_snippet_1

LANGUAGE: Bash
CODE:
```
$ npm install lamejs
```

----------------------------------------

TITLE: Rollup External Config (Correct) - Sendbird UIKit React - JavaScript
DESCRIPTION: Provides the correct configuration for Rollup's 'external' option when bundling Sendbird UIKit, showing how to explicitly list specific chat SDK modules to prevent them from being bundled with the UIKit code.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_83

LANGUAGE: javascript
CODE:
```
external: [
  '@sendbird/chat',
  '@sendbird/chat/groupChannel',
  '@sendbird/chat/openChannel',
  '@sendbird/chat/message',
]
```

----------------------------------------

TITLE: Intercepting User Message Creation Before Type Change (TSX)
DESCRIPTION: Shows the older implementation of the `onBeforeSendUserMessage` prop on the `Channel` component. This function received text and quoted message arguments and synchronously returned a `UserMessageCreateParams` object to modify the message before sending.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_COLLECTION.md#_snippet_5

LANGUAGE: tsx
CODE:
```
// Before
<Channel
  onBeforeSendUserMessage={(text, quotedMessage) => {
    const params = new UserMessageCreateParams();
    params.message = text;
    params.parentMessageId = quotedMessage.messageId;
    params.customType = 'custom-type';
    return params;
  }}
/>
```

----------------------------------------

TITLE: Customizing Message Content (Channel/Message - Older Way)
DESCRIPTION: This snippet shows the older, more verbose way to customize `MessageContent` by using the `renderMessage` prop on the `<Channel />` component and then providing a custom `renderMessageContent` prop on the nested `<Message />` component. The new `renderMessageContent` on `Channel` is a simpler alternative.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_32

LANGUAGE: tsx
CODE:
```
<Channel
  renderMessage={(props) => (
    <Message
      {...props}
      renderMessageContent={(props) => (
        <MessageContent {...props} />
      )}
    />
  )}
/>
```

----------------------------------------

TITLE: Render Prop Signature (Before Fix) - Sendbird UIKit React - TypeScript
DESCRIPTION: Shows the previous TypeScript type signature for the 'renderCustomSeparator' prop, which simply returned 'ReactElement'.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_87

LANGUAGE: typescript
CODE:
```
before: renderCustomSeparator={() => ReactElement}
```

----------------------------------------

TITLE: Configuring Rollup Export Path (JavaScript)
DESCRIPTION: Example configuration line used in `./rollup.module-exports.js` to define a new component's export path for consumers. It maps the desired import path alias to the actual file location within the source directory.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/README.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
'NewComponent/SubComponent': 'location/of/NewComponent/SubComponent',
```

----------------------------------------

TITLE: Importing OpenChannelSettings in Sendbird UIKit v2 (JavaScript)
DESCRIPTION: Shows the standard import path for the `OpenChannelSettings` component when using version 2 of the Sendbird UIKit React library.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_43

LANGUAGE: javascript
CODE:
```
import { OpenChannelSettings } from "sendbird-uikit";
```

----------------------------------------

TITLE: Deleting Message with Sendbird UIKit v2 JavaScript
DESCRIPTION: Illustrates getting the `getDeleteMessage` selector in v2 to delete a message. It's called with the channel URL and message object, returning a Promise. This method was used for both group and open channels in v2.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_23

LANGUAGE: javascript
CODE:
```
const deleteMessage = sendBirdSelectors.getDeleteMessage(store);
deleteMessage('channel-url', message)
	.then((message) => {})
	.catch((error) => {})
```

----------------------------------------

TITLE: Resending File Message with Sendbird UIKit v2 JavaScript
DESCRIPTION: Illustrates getting the `getResendFileMessage` selector in v2 to resend a failed file message. It's called with the channel URL and the failed message object, returning a Promise. This method was used for both group and open channels in v2.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_27

LANGUAGE: javascript
CODE:
```
const resendFileMessage = sendBirdSelectors.getResendFileMessage(store);
resendFileMessage('channel-url', failedMessage)
	.then((message) => {})
	.catch((error) => {})
```

----------------------------------------

TITLE: Rollup External Config (Incorrect) - Sendbird UIKit React - JavaScript
DESCRIPTION: Illustrates an incorrect configuration for Rollup's 'external' option, where only the top-level '@sendbird/chat' package is listed, which fails to prevent specific sub-modules from being bundled.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/CHANGELOG.md#_snippet_84

LANGUAGE: javascript
CODE:
```
external: [ '@sendbird/chat', ]
```

----------------------------------------

TITLE: Defining Reducer Action Types and Payloads - TypeScript
DESCRIPTION: Specifies the possible action types using a `const` assertion object `PREFIX_ACTIONS`. It then defines `PREFIX_PAYLOAD_TYPES` to strongly type the payload associated with each action type. Finally, it uses a `CreateAction` helper to create a discriminated union type `PrefixActionTypes` for all possible actions.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/utils/typeHelpers/reducers/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
// actionTypes.ts
import { CreateAction } from "./utils/typeHelpers/reducers/createAction";

export const ${PREFIX}_ACTIONS = {
  SET_SDK: "SET_SDK",
  SET_LOADING: "SET_LOADING",
} as const;

type ${PREFIX}_PAYLOAD_TYPES = {
  [${PREFIX}_ACTIONS.SET_SDK]: {
    sdk: SendbirdChat,
  },
  [${PREFIX}_ACTIONS.SET_LOADING]: boolean,
};

export type ${Prefix}ActionTypes = CreateAction<PAYLOAD_TYPES>;
```

----------------------------------------

TITLE: Entering Open Channel with Sendbird UIKit v2 JavaScript
DESCRIPTION: Illustrates how to get the function to enter a channel (used for open channels in v2) from the store selectors. The function is called with the channel URL and returns a Promise.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_17

LANGUAGE: javascript
CODE:
```
const enterChannel = sendBirdSelectors.getEnterChannel(store);
enterChannel('channel-url')
	.then((channel) => {})
	.catch((error) => {})
```

----------------------------------------

TITLE: Sending File Messages in Sendbird UIKit v2 - JavaScript
DESCRIPTION: Demonstrates sending a file message using `getSendFileMessage` in Sendbird UIKit v2. It requires the channel URL and SDK message parameters and returns a Promise.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const sendFileMessgae = sendBirdSelectors.getSendFileMessage(store);
const params = new sdk.FileMessageParams();
sendFileMessage('channel-url', params)
	.then((message) => { /* Handle success */ })
	.catch((error) => { /* Handle error */ })
```

----------------------------------------

TITLE: Chunked MP3 Encoding - JavaScript (Browser)
DESCRIPTION: A more realistic browser example demonstrating how to encode audio samples in smaller chunks within a loop to process larger audio inputs efficiently. It collects the output data, creates a Blob with the 'audio/mp3' MIME type, and generates a temporary object URL for accessing the encoded MP3 file. Requires including 'lame.all.js'.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/_externals/lamejs/README.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
<script src='lame.all.js'></script>
<script>
channels = 1; //1 for mono or 2 for stereo
sampleRate = 44100; //44.1khz (normal mp3 samplerate)
kbps = 128; //encode 128kbps mp3
mp3encoder = new lamejs.Mp3Encoder(channels, sampleRate, kbps);
var mp3Data = [];

samples = new Int16Array(44100); //one second of silence (get your data from the source you have)
sampleBlockSize = 1152; //can be anything but make it a multiple of 576 to make encoders life easier

var mp3Data = [];
for (var i = 0; i < samples.length; i += sampleBlockSize) {
  sampleChunk = samples.subarray(i, i + sampleBlockSize);
  var mp3buf = mp3encoder.encodeBuffer(sampleChunk);
  if (mp3buf.length > 0) {
      mp3Data.push(mp3buf);
  }
}
var mp3buf = mp3encoder.flush();   //finish writing mp3

if (mp3buf.length > 0) {
    mp3Data.push(new Int8Array(mp3buf));
}

var blob = new Blob(mp3Data, {type: 'audio/mp3'});
var url = window.URL.createObjectURL(blob);
console.log('MP3 URl: ', url);
</script>
```

----------------------------------------

TITLE: Customizing Message Rendering in Channel v2 JavaScript
DESCRIPTION: Example of rendering custom chat messages in Sendbird UIKit v2 using the `renderChatItem` prop of the `Channel` component. The custom component receives message data and action callbacks (`onDeleteMessage`, `onUpdateMessage`) directly as props.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_33

LANGUAGE: javascript
CODE:
```
import { Channel, SendbirdProvider } from "sendbird-uikit";

const MyCustomChatMessage = ({ message, onDeleteMessage, onUpdateMessage }) => (
	<div>
		{message.message}
		<button onClick={() => {
			const callback = () => { console.warn('message deleted'); }
			onDeleteMessage(message, callback);
			}}
			> // Delete message.
		</button>
		<button onClick={() => {
			const updatedMessage = Math.random().toString();
			const callback = () => { console.warn('message updated'); }
			onUpdateMessage(message.messageId, updatedMessage, callback);
			}}
			> // Update message.
		</button>
	</div>
);

const App = () => (
	<SendbirdProvider appId={appId} userId={userId}>
		<div style={{ height: '500px' }}>
			<Channel channelUrl={channelUrl} renderChatItem={MyCustomChatMessage} />
		</div>
	</SendbirdProvider>
);
```

----------------------------------------

TITLE: Exiting Open Channel with Sendbird UIKit v2 JavaScript
DESCRIPTION: Shows how to get the function to exit a channel (used for open channels in v2) from the store selectors. The function is called with the channel URL and returns a Promise.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/MIGRATION_v2-to-v3.md#_snippet_19

LANGUAGE: javascript
CODE:
```
const exitChannel = sendBirdSelectors.getExitChannel(store);
exitChannel('channel-url')
	.then((channel) => {})
	.catch((error) => {})
```

----------------------------------------

TITLE: Quick Start MP3 Encoding - JavaScript (Browser)
DESCRIPTION: A basic browser example showing how to initialize lamejs with mono settings, encode a single buffer of audio samples (represented here as silence), collect the output MP3 data, and flush the encoder to get the final bytes. Requires including 'lame.all.js' via a script tag.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/_externals/lamejs/README.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
<script src='lame.all.js'></script>
<script>
var mp3Data = [];

var mp3encoder = new lamejs.Mp3Encoder(1, 44100, 128); //mono 44.1khz encode to 128kbps
var samples = new Int16Array(44100); //one second of silence replace that with your own samples
var mp3Tmp = mp3encoder.encodeBuffer(samples); //encode mp3

//Push encode buffer to mp3Data variable
mp3Data.push(mp3Tmp);

// Get end part of mp3
mp3Tmp = mp3encoder.flush();

// Write last data to the output data, too
// mp3Data contains now the complete mp3Data
mp3Data.push(mp3Tmp);

console.debug(mp3Data);
</script>
```

----------------------------------------

TITLE: Importing lamejs in Node.js - JavaScript (Node.js)
DESCRIPTION: How to import the lamejs library into a Node.js application using the standard `require` function. This is used after installing the library via npm.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/_externals/lamejs/README.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
var lamejs = require("lamejs");
```

----------------------------------------

TITLE: Stereo MP3 Encoding - JavaScript (Browser)
DESCRIPTION: Browser example demonstrating how to encode stereo audio by providing separate `Int16Array` buffers for the left and right channels to the `encodeBuffer` method within a loop. It collects the output MP3 data. Requires including 'lame.all.js'.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/_externals/lamejs/README.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
<script src='lame.all.js'></script>
<script>
mp3encoder = new lamejs.Mp3Encoder(2, 44100, 128);
var mp3Data = [];

left = new Int16Array(44100); //one second of silence (get your data from the source you have)
right = new Int16Array(44100); //one second of silence (get your data from the source you have)
sampleBlockSize = 1152; //can be anything but make it a multiple of 576 to make encoders life easier

for (var i = 0; i < samples.length; i += sampleBlockSize) {
  leftChunk = left.subarray(i, i + sampleBlockSize);
  rightChunk = right.subarray(i, i + sampleBlockSize);
  var mp3buf = mp3encoder.encodeBuffer(leftChunk, rightChunk);
  if (mp3buf.length > 0) {
    mp3Data.push(mp3buf);
  }
}
var mp3buf = mp3encoder.flush();   //finish writing mp3

if (mp3buf.length > 0) {
    mp3Data.push(mp3buf);
}

console.log(mp3Data);
</script>
```

----------------------------------------

TITLE: Installing lamejs with Bower - Bash
DESCRIPTION: Command to install the lamejs library using the Bower package manager. Requires Bower to be installed globally. This makes the library available for front-end web projects.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/_externals/lamejs/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
$ bower install lamejs --save
```

----------------------------------------

TITLE: Illustrating SVG Attributes to Remove (HTML)
DESCRIPTION: This snippet shows an example of an SVG icon with attributes like 'width', 'height', and 'fill' that should be removed. These attributes interfere with applying size and color styling via CSS.
SOURCE: https://github.com/sendbird/sendbird-uikit-react/blob/main/src/svgs/_README_FOR_ADDING_ICON.md#_snippet_0

LANGUAGE: html
CODE:
```
<svg
  xmlns="http://www.w3.org/2000/svg"
  width="32px"
  height="32px"
  viewBox="0 0 64 64"
>
  <g fill="none">
    <path d="..." fill="black" />
  </g>
</svg>
```