TITLE: Deploying Pipecat Demos with Docker (Shell)
DESCRIPTION: This snippet provides essential shell commands for deploying Pipecat demo applications using Docker. It demonstrates how to build a Docker image from a `Dockerfile`, run the container by mapping ports and loading environment variables, and push the built image to a Docker registry for distribution.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
docker build username/app:tag .

docker run -p 7860:7860 --env-file ./.env username/app:tag

docker push ...
```

----------------------------------------

TITLE: Configuring Environment Variables for Chatbot Server
DESCRIPTION: This snippet shows the required and optional environment variables for the chatbot server. These variables configure API keys for Daily, OpenAI, Gemini, and ElevenLabs, select the bot implementation, and set optional network parameters like host and port.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/server/README.md#_snippet_0

LANGUAGE: ini
CODE:
```
# Required API Keys
DAILY_API_KEY=           # Your Daily API key
OPENAI_API_KEY=          # Your OpenAI API key (required for OpenAI bot)
GEMINI_API_KEY=          # Your Gemini API key (required for Gemini bot)
ELEVENLABS_API_KEY=      # Your ElevenLabs API key

# Bot Selection
BOT_IMPLEMENTATION=      # Options: 'openai' or 'gemini'

# Optional Configuration
DAILY_API_URL=           # Optional: Daily API URL (defaults to https://api.daily.co/v1)
DAILY_SAMPLE_ROOM_URL=   # Optional: Fixed room URL for development
HOST=                    # Optional: Host address (defaults to 0.0.0.0)
FAST_API_PORT=           # Optional: Port number (defaults to 7860)
```

----------------------------------------

TITLE: Building and Pushing Docker Image for Pipecat Agent (Bash)
DESCRIPTION: This sequence of commands builds a Docker image for the agent, tags it with a user-defined name and version, and then pushes it to a Docker repository like Docker Hub. The image is specifically built for ARM architecture for cloud deployment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
# Build the image (targeting ARM architecture for cloud deployment)
docker build --platform=linux/arm64 -t my-first-agent:latest .

# Tag with your Docker username and version
docker tag my-first-agent:latest your-username/my-first-agent:0.1

# Push to Docker Hub
docker push your-username/my-first-agent:0.1
```

----------------------------------------

TITLE: Documenting Python Class with Google-style Docstrings
DESCRIPTION: This Python example demonstrates the required Google-style docstring conventions for classes and properties. It shows how to document class parameters in the class docstring, eliminating the need for a separate `__init__` docstring, and how to document property methods including their purpose and return value.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CONTRIBUTING.md#_snippet_4

LANGUAGE: python
CODE:
```
class MyClass:
    """Class description.

    Additional details about the class.

    Args:
        param1: Description of first parameter.
        param2: Description of second parameter.
    """

    def __init__(self, param1, param2):
        # No docstring required here as parameters are documented above
        self.param1 = param1
        self.param2 = param2

    @property
    def some_property(self) -> str:
        """Get the formatted property value.

        Returns:
            A string representation of the property.
        """
        return f"Property: {self.param1}"
```

----------------------------------------

TITLE: Request Body Configuration for /start Endpoint
DESCRIPTION: This JSON structure outlines the configuration object expected in the request body when calling the `/start` endpoint. It allows customization of various bot behaviors and settings, including prompts, dial-in/dial-out parameters, and specific example configurations like call transfer and voicemail detection.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_12

LANGUAGE: JSON
CODE:
```
{
  "config": {
    "prompts": [
      {
        "name": "call_transfer_initial_prompt",
        "text": "Your custom prompt here"
      },
      {
        "name": "call_transfer_prompt",
        "text": "Your custom prompt here"
      },
      {
        "name": "call_transfer_finished_prompt",
        "text": "Your custom prompt here"
      },
      {
        "name": "voicemail_detection_prompt",
        "text": "Your custom prompt here"
      },
      {
        "name": "voicemail_prompt",
        "text": "Your custom prompt here"
      },
      {
        "name": "human_conversation_prompt",
        "text": "Your custom prompt here"
      }
    ],
    "dialin_settings": {
      "From": "+CALLERS_PHONE",
      "To": "$PURCHASED_PHONE",
      "callId": "callid-read-only-string",
      "callDomain": "callDomain-read-only-string"
    },
    "dialout_settings": [
      {
        "phoneNumber": "+12345678910",
        "callerId": "caller-id-uuid",
        "sipUri": "sip:maria@example.com"
      }
    ],
    "call_transfer": {
      "mode": "dialout",
      "speakSummary": true,
      "storeSummary": false,
      "operatorNumber": "+12345678910",
      "testInPrebuilt": false
    },
    "voicemail_detection": {
      "testInPrebuilt": true
    },
    "simple_dialin": {
      "testInPrebuilt": true
    },
    "simple_dialout": {
      "testInPrebuilt": true
    }
  }
}
```

----------------------------------------

TITLE: Enqueueing Audio for Playback from Protobuf in JavaScript
DESCRIPTION: This function decodes an incoming Protobuf audio frame and enqueues it for playback using the Web Audio API. It resets the `playTime` if there's a significant gap since the last played audio, ensuring smooth continuous playback. The decoded audio buffer is then used to create an `AudioBufferSourceNode` and played at the calculated `playTime` offset.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/index.html#_snippet_5

LANGUAGE: JavaScript
CODE:
```
function enqueueAudioFromProto(arrayBuffer) {
  const parsedFrame = Frame.decode(new Uint8Array(arrayBuffer));
  if (!parsedFrame?.audio) {
    return false;
  }
  // Reset play time if it's been a while we haven't played anything.
  const diffTime = audioContext.currentTime - lastMessageTime;
  if ((playTime == 0) || (diffTime > PLAY_TIME_RESET_THRESHOLD_MS)) {
    playTime = audioContext.currentTime;
  }
  lastMessageTime = audioContext.currentTime;
  // We should be able to use parsedFrame.audio.audio.buffer but for
  // some reason that contains all the bytes from the protobuf message.
  const audioVector = Array.from(parsedFrame.audio.audio);
  const audioArray = new Uint8Array(audioVector);
  audioContext.decodeAudioData(audioArray.buffer, function(buffer) {
    const source = new AudioBufferSourceNode(audioContext);
    source.buffer = buffer;
    source.start(playTime);
    source.connect(audioContext.destination);
    playTime = playTime + buffer.duration;
  });
}
```

----------------------------------------

TITLE: Installing Node.js Dependencies (Bash)
DESCRIPTION: This command uses npm (Node Package Manager) to install all necessary project dependencies defined in the `package.json` file, ensuring the application has all required libraries to run.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/javascript/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Install Dependencies and Prebuild React Native Project (Bash)
DESCRIPTION: This snippet shows the commands needed to install project dependencies using Yarn and then prebuild the native source code using Expo CLI, which is required before compiling the native application. It assumes Node Version Manager (nvm) is used to set the correct Node.js version.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/react-native/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
nvm i
yarn install
npx expo prebuild
```

----------------------------------------

TITLE: Install JavaScript Dependencies
DESCRIPTION: Installs the necessary npm packages and dependencies for the JavaScript client application, as defined in the `package.json` file.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/modal-example/client/javascript/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Establishing WebRTC Peer Connection - JavaScript
DESCRIPTION: This function creates an RTCPeerConnection, configures it, adds audio and video transceivers for send/receive, creates and sets a local offer, fetches an answer from a backend API, and finally sets the remote description to establish the WebRTC connection.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/voice-agent/index.html#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const createSmallWebRTCConnection = async (audioTrack) => {
  const config = {
    iceServers: [],
  };
  const pc = new RTCPeerConnection(config)
  addPeerConnectionEventListeners(pc)
  pc.ontrack = e => audioEl.srcObject = e.streams[0]
  // SmallWebRTCTransport expects to receive both transceivers
  pc.addTransceiver(audioTrack, { direction: 'sendrecv' })
  pc.addTransceiver('video', { direction: 'sendrecv' })
  await pc.setLocalDescription(await pc.createOffer())
  await waitForIceGatheringComplete(pc)
  const offer = pc.localDescription
  const response = await fetch('/api/offer', {
    body: JSON.stringify({ sdp: offer.sdp, type: offer.type}),
    headers: { 'Content-Type': 'application/json' },
    method: 'POST',
  });
  const answer = await response.json()
  await pc.setRemoteDescription(answer)
  return pc
}
```

----------------------------------------

TITLE: Handling Conversation Item Events in OpenAIRealtimeBetaLLMService
DESCRIPTION: This code illustrates how to register asynchronous event handlers for `on_conversation_item_created` and `on_conversation_item_updated` events on an LLM service instance. These handlers enable custom logic to be executed when new conversation items are generated or existing ones are modified, providing real-time insights into the conversation flow.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#_snippet_3

LANGUAGE: python
CODE:
```
@llm.event_handler("on_conversation_item_created")
async def on_conversation_item_created(llm, item_id, item):
  # ...

@llm.event_handler("on_conversation_item_updated")
async def on_conversation_item_updated(llm, item_id, item):
  # `item` may not always be available here
  # ...
```

----------------------------------------

TITLE: Configuring LLM System Message for Cartesia TTS
DESCRIPTION: This Python snippet defines a system message for an LLM, guiding its response formatting for optimal text-to-speech conversion with Cartesia. It specifies rules for punctuation, date formats, pauses, emphasis, and pronunciation guidance, ensuring natural and clear audio output.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/patient-intake/README.md#_snippet_3

LANGUAGE: python
CODE:
```
messages = [
    {
        "role": "system",
        "content": '''You are a helpful AI assistant. Format all responses following these guidelines:

1. Use proper punctuation and end each response with appropriate punctuation
2. Format dates as MM/DD/YYYY
3. Insert pauses using - or <break time='1s' /> for longer pauses
4. Use ?? for emphasized questions
5. Avoid quotation marks unless citing
6. Add spaces between URLs/emails and punctuation marks
7. For domain-specific terms or proper nouns, provide pronunciation guidance in [brackets]
8. Keep responses clear and concise
9. Use appropriate voice/language pairs for multilingual content

Your goal is to demonstrate these capabilities in a succinct way. Your output will be converted to audio, so maintain natural communication flow. Respond creatively and helpfully, but keep responses brief. Start by introducing yourself.'''
    }
]
```

----------------------------------------

TITLE: Defining a Function Schema for Weather API in Python
DESCRIPTION: This Python snippet demonstrates how to define a `FunctionSchema` for a 'get_current_weather' tool. It specifies the function's name, a descriptive purpose, and its input properties ('location' and 'format') along with their types, descriptions, and an enum for 'format'. This schema enables unified function calling across different LLM services.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#_snippet_1

LANGUAGE: Python
CODE:
```
  weather_function = FunctionSchema(
      name="get_current_weather",
      description="Get the current weather",
      properties={
          "location": {
              "type": "string",
              "description": "The city and state, e.g. San Francisco, CA",
          },
          "format": {
              "type": "string",
              "enum": ["celsius", "fahrenheit"],
              "description": "The temperature unit to use. Infer this from the user's location.",
          },
      },
      required=["location"],
  )
  tools = ToolsSchema(standard_tools=[weather_function])
```

----------------------------------------

TITLE: Registering Audio Data Event Handler in Pipecat (Python)
DESCRIPTION: This Python snippet demonstrates how to register an `on_audio_data` event handler with the `AudioBufferProcessor`. This handler is called whenever the `buffer_size` of audio data is reached, providing the accumulated audio, sample rate, and number of channels for custom processing or saving. It allows developers to obtain processed audio data asynchronously.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#_snippet_6

LANGUAGE: Python
CODE:
```
@audiobuffer.event_handler("on_audio_data")
async def on_audio_data(processor, audio, sample_rate, num_channels):
    await save_audio(audio, sample_rate, num_channels)
```

----------------------------------------

TITLE: Creating and Activating Python Virtual Environment
DESCRIPTION: This snippet creates a new Python virtual environment named 'venv' and then activates it. A virtual environment isolates project dependencies, preventing conflicts with other Python projects. The activation command differs slightly for Windows.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/daily-interop-bridge/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
python3 -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

----------------------------------------

TITLE: Create and Activate Python Virtual Environment (Bash)
DESCRIPTION: Creates a new Python virtual environment named 'venv' and activates it. The activation command differs slightly between Unix-like systems (source) and Windows (Scripts\activate).
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/voice-agent/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
python3 -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

----------------------------------------

TITLE: Setting Up Python Virtual Environment (Bash)
DESCRIPTION: These commands create a Python virtual environment, activate it, and then install the Pipecat Cloud CLI. Using a virtual environment isolates project dependencies, preventing conflicts with other Python projects.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
# Create a virtual environment
python -m venv .venv

# Activate it
source .venv/bin/activate  # On Windows: .venv\Scripts\activate

# Install the Pipecat Cloud CLI
pip install pipecatcloud
```

----------------------------------------

TITLE: Setting Up Python Virtual Environment
DESCRIPTION: This snippet demonstrates how to create and activate a Python virtual environment. A virtual environment isolates project dependencies, preventing conflicts with other Python projects on the system.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/server/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python3 -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

----------------------------------------

TITLE: Create and Activate Python Virtual Environment (Bash)
DESCRIPTION: These commands create a new Python virtual environment named 'venv' and then activate it. A virtual environment isolates project dependencies, preventing conflicts with other Python projects. The activation command differs slightly for Windows users.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python3 -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

----------------------------------------

TITLE: Create Python Virtual Environment (Bash)
DESCRIPTION: This command creates a new Python virtual environment named 'venv' within the current directory. Virtual environments are crucial for isolating project dependencies, preventing conflicts with other Python projects or the system-wide Python installation.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python3 -m venv venv
```

----------------------------------------

TITLE: Starting ngrok HTTP Tunnel (sh)
DESCRIPTION: This command initiates an ngrok tunnel, exposing the local server running on port 8765 to the internet via a public URL. This is essential for Plivo to send webhook requests to the locally running FastAPI application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/plivo-chatbot/README.md#_snippet_3

LANGUAGE: sh
CODE:
```
ngrok http 8765
```

----------------------------------------

TITLE: Expose Local Server with ngrok (Bash)
DESCRIPTION: Uses ngrok to create a public URL that tunnels external traffic to the local FastAPI server running on port 7860, enabling testing and webhook integration from outside the local network.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/fastapi-webhook-server/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
ngrok http 7860
```

----------------------------------------

TITLE: Setting Up Moondream Chatbot Environment (Python)
DESCRIPTION: This snippet outlines the initial setup steps for the Moondream chatbot, including creating a Python virtual environment, activating it, installing dependencies from `requirements.txt`, and copying the example environment file for credential configuration.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/moondream-chatbot/README.md#_snippet_0

LANGUAGE: python
CODE:
```
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt

cp env.example .env # and add your credentials
```

----------------------------------------

TITLE: Installing Optional Pipecat AI Dependencies (Shell)
DESCRIPTION: This command shows how to install optional dependencies for Pipecat AI to enable support for third-party AI services. Users should replace 'option,...' with the specific features they need.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
pip install "pipecat-ai[option,...]"
```

----------------------------------------

TITLE: Initializing WebSocket Connection in JavaScript
DESCRIPTION: This function establishes a WebSocket connection to 'ws://localhost:8765'. It sets the binaryType to 'arraybuffer' to ensure received data is directly an ArrayBuffer. Event listeners are attached for 'open', 'message', 'close', and 'error' events to handle the WebSocket lifecycle and incoming data.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/index.html#_snippet_2

LANGUAGE: JavaScript
CODE:
```
function initWebSocket() {
  ws = new WebSocket('ws://localhost:8765');
  // This is so `event.data` is already an ArrayBuffer.
  ws.binaryType = 'arraybuffer';
  ws.addEventListener('open', handleWebSocketOpen);
  ws.addEventListener('message', handleWebSocketMessage);
  ws.addEventListener('close', (event) => {
    console.log('WebSocket connection closed.', event.code, event.reason);
    stopAudio(false);
  });
  ws.addEventListener('error', (event) => console.error('WebSocket error:', event));
}
```

----------------------------------------

TITLE: Initializing Daily.co Call Object and Event Handlers - JavaScript
DESCRIPTION: Initializes the Daily.co call object and sets up event listeners for 'participant-joined', 'participant-left', and 'track-started' events. It manages UI button states and dynamically creates media players based on incoming tracks, forming the core of the call management logic.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-multi-translation/index.html#_snippet_9

LANGUAGE: JavaScript
CODE:
```
function startDaily() { enableJoinButton(true); enableLeaveButton(false); window.callObject = window.DailyIframe.createCallObject({}); callObject.on("participant-joined", (e) => { if (!e.participant.local) { console.log("participant-joined", e.participant); subscribeToTracks(e.participant.session_id); } }); callObject.on("participant-left", (e) => { console.log("participant-left", e.participant.session_id); destroyParticipantPlayers(e.participant.session_id); }); callObject.on("track-started", async (e) => { console.log("track-started", e.track); if (e.track.kind === "video") { await buildVideoPlayer(e.track, e.participant.session_id); } else if (e.track.kind === "audio") { await buildAudioPlayer(e.track, e.participant.session_id); } }); }
```

----------------------------------------

TITLE: Production Webhook Request Format (JSON)
DESCRIPTION: This JSON schema outlines the expected format for production dial-in and dial-out requests to the `/api/dial` endpoint. It includes fields for call identification (`To`, `From`, `callId`, `callDomain`) and an array for dial-out settings, supporting both phone numbers and SIP URIs.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/nextjs-webhook-server/README.md#_snippet_8

LANGUAGE: json
CODE:
```
{
  // for dial-in from webhook
  "To": "+14152251493",
  "From": "+14158483432",
  "callId": "string-contains-uuid",
  "callDomain": "string-contains-uuid",
  // for making a dial out to a phone or SIP
  "dialout_settings": [
    { "phoneNumber": "+14158483432", "callerId": "purchased_phone_uuid" },
    { "sipUri": "sip:username@sip.hostname.com" }
  ]
}
```

----------------------------------------

TITLE: Setup Python Virtual Environment and Install Dependencies (Bash)
DESCRIPTION: Creates a Python virtual environment named 'venv', activates it, and installs project dependencies listed in requirements.txt using pip.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot-daily-twilio-sip/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
pip install -r requirements.txt
```

----------------------------------------

TITLE: Handling WebSocket Open and Microphone Access in JavaScript
DESCRIPTION: This function is called when the WebSocket connection is established. It requests microphone access using `navigator.mediaDevices.getUserMedia` with specified audio constraints (sample rate, channel count, etc.). Upon successful access, it sets up a `ScriptProcessorNode` to capture audio data from the microphone, converts it to S16 PCM, encodes it into a Protobuf frame, and sends it over the WebSocket.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/index.html#_snippet_3

LANGUAGE: JavaScript
CODE:
```
function handleWebSocketOpen(event) {
  console.log('WebSocket connection established.', event)
  navigator.mediaDevices.getUserMedia({ audio: { sampleRate: SAMPLE_RATE, channelCount: NUM_CHANNELS, autoGainControl: true, echoCancellation: true, noiseSuppression: true, } }).then((stream) => {
    microphoneStream = stream;
    // 512 is closest thing to 200ms.
    scriptProcessor = audioContext.createScriptProcessor(512, 1, 1);
    source = audioContext.createMediaStreamSource(stream);
    source.connect(scriptProcessor);
    scriptProcessor.connect(audioContext.destination);
    scriptProcessor.onaudioprocess = (event) => {
      if (!ws) {
        return;
      }
      const audioData = event.inputBuffer.getChannelData(0);
      const pcmS16Array = convertFloat32ToS16PCM(audioData);
      const pcmByteArray = new Uint8Array(pcmS16Array.buffer);
      const frame = Frame.create({ audio: { audio: Array.from(pcmByteArray), sampleRate: SAMPLE_RATE, numChannels: NUM_CHANNELS } });
      const encodedFrame = new Uint8Array(Frame.encode(frame).finish());
      ws.send(encodedFrame);
    };
  }).catch((error) => console.error('Error accessing microphone:', error));
}
```

----------------------------------------

TITLE: Handle Daily on_dialin_ready Event with Flag (Python)
DESCRIPTION: Shows an event handler for the Daily 'on_dialin_ready' event, using a flag to ensure call forwarding logic is executed only once, even if multiple SIP endpoints trigger the event.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot-daily-twilio-sip/README.md#_snippet_5

LANGUAGE: Python
CODE:
```
# Flag to track if call has been forwarded
call_already_forwarded = False

@transport.event_handler("on_dialin_ready")
async def on_dialin_ready(transport, cdata):
    nonlocal call_already_forwarded

    # Skip if already forwarded
    if call_already_forwarded:
        logger.info("Call already forwarded, ignoring this event.")
        return

    # ... forwarding code ...
    call_already_forwarded = True
```

----------------------------------------

TITLE: Building and Running Docker Image
DESCRIPTION: These commands facilitate building a Docker image named 'chatbot' from the current directory and then running it. The `docker run` command maps port 7860 and injects environment variables from the `.env` file, enabling containerized deployment of the chatbot.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/patient-intake/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
docker build -t chatbot .
docker run --env-file .env -p 7860:7860 chatbot
```

----------------------------------------

TITLE: Expose Local Server with Ngrok (Bash)
DESCRIPTION: Uses ngrok to create a public URL for the local server running on port 8000, necessary for configuring the Twilio webhook during local testing.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot-daily-twilio-sip/README.md#_snippet_2

LANGUAGE: Bash
CODE:
```
ngrok http 8000
# Then use the provided URL (e.g., https://abc123.ngrok.io/call) in Twilio
```

----------------------------------------

TITLE: Configuring Pipecat Deployment with TOML (TOML)
DESCRIPTION: This TOML configuration defines the agent's name, Docker image, and associated secret set for deployment. It also includes optional scaling parameters, providing a more maintainable way to manage deployment settings.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_10

LANGUAGE: toml
CODE:
```
agent_name = "my-first-agent"
image = "your-username/my-first-agent:0.1"
secret_set = "my-first-agent-secrets"

[scaling]
    min_instances = 0
```

----------------------------------------

TITLE: Starting ngrok Tunnel
DESCRIPTION: This command starts an ngrok tunnel, exposing the local server running on port 8765 to the internet. This is essential for Telnyx to send webhooks to the locally running FastAPI application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/telnyx-chatbot/README.md#_snippet_3

LANGUAGE: sh
CODE:
```
ngrok http 8765
```

----------------------------------------

TITLE: Starting Ngrok for Local Tunneling
DESCRIPTION: This command starts ngrok, creating a secure tunnel from the internet to the local port 7860. This is essential for exposing a local web server (like the Pipecat web interface) to external services such as Twilio, enabling inbound requests.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/foundational/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
ngrok http 7860
```

----------------------------------------

TITLE: Starting ngrok Tunnel
DESCRIPTION: This command starts an ngrok tunnel, exposing the local server running on port 8765 to the internet. This is necessary for Twilio to send webhooks to the local application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
ngrok http 8765
```

----------------------------------------

TITLE: Standard Call Transfer (Incoming Call) Configuration
DESCRIPTION: Configures a standard incoming call for transfer. It includes `dialin_settings` which are typically populated automatically from webhook data, and `call_transfer` settings for dialing out to an operator, including enabling a summary and specifying the operator's number.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_13

LANGUAGE: json
CODE:
```
{
  "config": {
    "dialin_settings": {
      "from": "+12345678901",
      "to": "+19876543210",
      "call_id": "call-id-string",
      "call_domain": "domain-string"
    },
    "call_transfer": {
      "mode": "dialout",
      "speakSummary": true,
      "operatorNumber": "+12345678910"
    }
  }
}
```

----------------------------------------

TITLE: Starting Jaeger Container with Docker
DESCRIPTION: This command starts a Jaeger 'all-in-one' Docker container in detached mode, exposing necessary ports for trace collection (4317, 4318), Zipkin compatibility (9411), and the Jaeger UI (16686). It enables local collection and visualization of OpenTelemetry traces.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/open-telemetry/jaeger/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker run -d --name jaeger \
  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \
  -p 16686:16686 \
  -p 4317:4317 \
  -p 4318:4318 \
  jaegertracing/all-in-one:latest
```

----------------------------------------

TITLE: Setting Local API Key Environment Variables (Bash)
DESCRIPTION: These commands set environment variables for Cartesia, Daily, and OpenAI API keys, which are required for local testing of the agent. These keys enable the agent to interact with external AI services.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
export CARTESIA_API_KEY="your_cartesia_key"
export DAILY_API_KEY="your_daily_key"
export OPENAI_API_KEY="your_openai_key"
```

----------------------------------------

TITLE: Configuring Input Audio Noise Reduction in Pipecat
DESCRIPTION: This snippet demonstrates how to configure the `input_audio_noise_reduction` session property within `SessionProperties`. It shows setting the noise reduction type to 'near_field', with 'far_field' also being a supported option, to improve audio quality for input audio streams.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#_snippet_2

LANGUAGE: python
CODE:
```
session_properties = SessionProperties(
  # ...
  input_audio_noise_reduction=InputAudioNoiseReduction(
    type="near_field" # also supported: "far_field"
  )
  # ...
)
```

----------------------------------------

TITLE: Setting Up Python Virtual Environment (Server)
DESCRIPTION: Initializes and activates a Python virtual environment named 'venv' for the server-side application. This isolates project dependencies from the system-wide Python installation, with a specific activation command for Windows.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
python3 -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

----------------------------------------

TITLE: Installing Local Pipecat Library for Development
DESCRIPTION: This command installs the local version of the `pipecat` library in editable mode, linking it to the current project. This is useful for development, allowing changes to the `pipecat` source code to be reflected without reinstallation.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/server/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pip install --editable "../../../[daily,deepgram,google,cartesia,openai,silero]"
```

----------------------------------------

TITLE: Copying Environment Variable Template (Bash)
DESCRIPTION: This command copies the 'env.example' file to '.env'. The '.env' file is used to store sensitive configuration details like API keys, which are then loaded by the application at runtime, ensuring proper setup for external services.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp env.example .env
```

----------------------------------------

TITLE: Handling Start Audio Button Click in JavaScript
DESCRIPTION: This function is triggered when the 'Start Audio' button is clicked. It first checks for `getUserMedia` support. If supported, it disables the start button, enables the stop button, initializes a new `AudioContext`, sets the `isPlaying` flag to true, and then calls `initWebSocket()` to establish the WebSocket connection and begin audio streaming.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/index.html#_snippet_7

LANGUAGE: JavaScript
CODE:
```
function startAudioBtnHandler() {
  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
    alert('getUserMedia is not supported in your browser.');
    return;
  }
  startBtn.disabled = true;
  stopBtn.disabled = false;
  audioContext = new (window.AudioContext || window.webkitAudioContext)({ latencyHint: 'interactive', sampleRate: SAMPLE_RATE });
  isPlaying = true;
  initWebSocket();
}
```

----------------------------------------

TITLE: Server Setup - Shell
DESCRIPTION: Steps to set up the server-side application, including navigating to the directory, setting up a Python virtual environment, installing requirements using pip, and configuring environment variables.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/storytelling-chatbot/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
cd ../server
```

LANGUAGE: shell
CODE:
```
python3 -m venv venv
```

LANGUAGE: shell
CODE:
```
source venv/bin/activate
```

LANGUAGE: shell
CODE:
```
pip install -r requirements.txt
```

LANGUAGE: shell
CODE:
```
mv env.example .env
```

----------------------------------------

TITLE: Installing Python Dependencies
DESCRIPTION: This command installs all required Python packages listed in the `requirements.txt` file. It ensures that all necessary libraries for the FastAPI server are available within the active virtual environment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/server/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Running Telnyx Chatbot Docker Container
DESCRIPTION: This command runs the `telnyx-chatbot` Docker image. It maps port 8765 from the container to port 8765 on the host, allows interactive access, and automatically removes the container upon exit.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/telnyx-chatbot/README.md#_snippet_6

LANGUAGE: sh
CODE:
```
docker run -it --rm -p 8765:8765 telnyx-chatbot
```

----------------------------------------

TITLE: Install Python Dependencies (Web Game Server)
DESCRIPTION: Installs all required Python packages listed in the 'requirements.txt' file for the server-side application of the web game.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Dialout with Specific Caller ID (Bash)
DESCRIPTION: Makes a POST request to `/api/dial` to start a call. The JSON payload includes the target phone number and a specific `callerId` (UUID of a purchased number) in `dialout_settings`.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/README.md#_snippet_3

LANGUAGE: Bash
CODE:
```
curl -X POST http://localhost:3000/api/dial \
  -H "Content-Type: application/json" \
  -d '{
    "dialout_settings": [
      {
        "phoneNumber": "+1234567890",
        "callerId": "purchased_phone_uuid"
      }
    ]
  }'
```

----------------------------------------

TITLE: Registering Event Handlers for Pipecat Frame Processors
DESCRIPTION: This snippet illustrates how to register an event handler for a Pipecat frame processor, specifically a TTS service. It uses a decorator to associate an asynchronous function with a specific event, such as 'on_connected', allowing custom logic to be executed when that event occurs. This mechanism enables processors to react to lifecycle events.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#_snippet_7

LANGUAGE: Python
CODE:
```
tts = SomeTTSService(...)

@tts.event_handler("on_connected"):
async def on_connected(processor):
  ...
```

----------------------------------------

TITLE: Setting Up Python Virtual Environment
DESCRIPTION: This snippet demonstrates how to create and activate a Python virtual environment. A virtual environment isolates project dependencies, preventing conflicts with other Python projects. It's a crucial first step for managing project-specific packages.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/foundational/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

----------------------------------------

TITLE: Running the Pipecat Demo Application
DESCRIPTION: This command executes the main Python script `bot.py`, which initiates the Pipecat demo application. Running this script will generate OpenTelemetry traces from the Pipecat service calls, which are then sent to the configured Jaeger backend for visualization.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/open-telemetry/jaeger/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
python bot.py
```

----------------------------------------

TITLE: Converting Float32 to S16 PCM Audio in JavaScript
DESCRIPTION: This utility function converts an array of 32-bit floating-point audio samples (Float32Array), typically obtained from the Web Audio API, into a 16-bit signed integer PCM (Pulse-Code Modulation) format (Int16Array). It clamps the float values between -1 and 1 and scales them to the 16-bit integer range, which is often required for audio encoding or transmission.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/index.html#_snippet_6

LANGUAGE: JavaScript
CODE:
```
function convertFloat32ToS16PCM(float32Array) {
  let int16Array = new Int16Array(float32Array.length);
  for (let i = 0; i < float32Array.length; i++) {
    let clampedValue = Math.max(-1, Math.min(1, float32Array[i]));
    int16Array[i] = clampedValue < 0 ? clampedValue * 32768 : clampedValue * 32767;
  }
  return int16Array;
}
```

----------------------------------------

TITLE: Creating and Activating Python Virtual Environment (Bash)
DESCRIPTION: These commands create a new Python virtual environment named 'venv' and then activate it. A virtual environment isolates project dependencies, preventing conflicts with other Python projects on the system. The activation command varies slightly for Windows.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python3 -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

----------------------------------------

TITLE: Setting Up Python Virtual Environment
DESCRIPTION: This command initializes a Python virtual environment named 'venv' and then activates it. A virtual environment isolates project dependencies, preventing conflicts with other Python projects. The activation command differs slightly for Windows.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/telnyx-chatbot/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
python -m venv venv
source venv/bin/activate  # On Windows, use `venv\Scripts\activate`
```

----------------------------------------

TITLE: Setting Up Development Environment for Chatbot (Python)
DESCRIPTION: This snippet outlines the steps to set up the Python virtual environment, install dependencies from 'requirements.txt', and configure environment variables by copying 'env.example' to '.env'. It ensures all necessary packages are available and credentials are loaded for the chatbot application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/chatbot-audio-recording/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt

cp env.example .env # and add your credentials
```

----------------------------------------

TITLE: Deploying Pipecat Agent to Cloud (Bash)
DESCRIPTION: This command deploys the Docker image of the agent to Pipecat Cloud, associating it with a previously created secret set for API keys. This makes the agent available for use in the cloud environment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_9

LANGUAGE: bash
CODE:
```
pcc deploy my-first-agent your-username/my-first-agent:0.1 --secrets my-first-agent-secrets
```

----------------------------------------

TITLE: Set Up Python Virtual Environment (Web Game Server)
DESCRIPTION: Creates a new Python virtual environment named 'venv' and then activates it. This isolates project dependencies for the web game server.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python3 -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

----------------------------------------

TITLE: Activating Python Virtual Environment (Bash)
DESCRIPTION: This command activates the previously created Python virtual environment. Once activated, any Python packages installed will be specific to this environment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/instant-voice/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

----------------------------------------

TITLE: Setting up Python Virtual Environment and Dependencies
DESCRIPTION: This snippet outlines the steps to create and activate a Python virtual environment, install project dependencies from 'requirements.txt', and copy an example environment file for credential configuration.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
cp env.example .env # and add your credentials
```

----------------------------------------

TITLE: Handling Incoming WebSocket Messages in JavaScript
DESCRIPTION: This function processes incoming WebSocket messages. It expects the message data to be an ArrayBuffer containing encoded audio. If the `isPlaying` flag is true, indicating that audio playback is active, it calls `enqueueAudioFromProto` to decode and play the received audio data.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/index.html#_snippet_4

LANGUAGE: JavaScript
CODE:
```
function handleWebSocketMessage(event) {
  const arrayBuffer = event.data;
  if (isPlaying) {
    enqueueAudioFromProto(arrayBuffer);
  }
}
```

----------------------------------------

TITLE: Installing Pipecat AI Core and Initial Environment Setup (Shell)
DESCRIPTION: This snippet demonstrates how to install the core Pipecat AI module using pip and set up the initial environment by copying the template .env file. These steps are essential for local development.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
pip install pipecat-ai

cp dot-env.template .env
```

----------------------------------------

TITLE: Authenticating with Pipecat Cloud CLI (Bash)
DESCRIPTION: This command initiates the authentication process for the Pipecat Cloud CLI, allowing the user to log in and manage their Pipecat Cloud resources. It's a prerequisite for deploying agents.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pcc auth login
```

----------------------------------------

TITLE: Installing Local Pipecat for Development
DESCRIPTION: This optional snippet illustrates how to install a local, editable version of the `pipecat` library. This is useful for development purposes, allowing changes to the local `pipecat` source to be immediately reflected without reinstallation.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/server/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pip install --editable "../../../[daily,elevenlabs,openai,silero,google]"
```

----------------------------------------

TITLE: Waiting for ICE Gathering Completion - WebRTC JavaScript
DESCRIPTION: This utility function returns a Promise that resolves when the RTCPeerConnection's ICE gathering state becomes 'complete' or after a specified timeout. It actively monitors 'icegatheringstatechange' events to ensure all ICE candidates have been gathered before proceeding.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/voice-agent/index.html#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const waitForIceGatheringComplete = async (pc, timeoutMs = 2000) => {
  if (pc.iceGatheringState === 'complete') return;
  console.log("Waiting for ICE gathering to complete. Current state:", pc.iceGatheringState);
  return new Promise((resolve) => {
    let timeoutId;
    const checkState = () => {
      console.log("icegatheringstatechange:", pc.iceGatheringState);
      if (pc.iceGatheringState === 'complete') {
        cleanup();
        resolve();
      }
    };
    const onTimeout = () => {
      console.warn(`ICE gathering timed out after ${timeoutMs} ms.`);
      cleanup();
      resolve();
    };
    const cleanup = () => {
      pc.removeEventListener('icegatheringstatechange', checkState);
      clearTimeout(timeoutId);
    };
    pc.addEventListener('icegatheringstatechange', checkState);
    timeoutId = setTimeout(onTimeout, timeoutMs);
    // Checking the state again to avoid any eventual race condition
    checkState();
  });
};
```

----------------------------------------

TITLE: Building and Pushing Docker Image for Pipecat Cloud
DESCRIPTION: Executes the `build.sh` script to build, tag, and push the Docker image for the server application. This script assumes Docker Hub as the container registry and requires `DOCKER_USERNAME` and `AGENT_NAME` to be configured.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_9

LANGUAGE: bash
CODE:
```
./build.sh
```

----------------------------------------

TITLE: Setting Up Python Virtual Environment and Dependencies
DESCRIPTION: This snippet initializes a Python virtual environment, activates it, and installs required dependencies from `requirements.txt`. It also instructs to copy `env.example` to `.env` and add credentials for environment configuration.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/sentry-metrics/README.md#_snippet_0

LANGUAGE: python
CODE:
```
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt

cp env.example .env # and add your credentials
```

----------------------------------------

TITLE: Setup Python Virtual Environment and Install Dependencies (Bash)
DESCRIPTION: Commands to set up a Python virtual environment, activate it, install required packages from requirements.txt, and copy the example environment file.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-multi-translation/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt

cp env.example .env # and add your credentials
```

----------------------------------------

TITLE: Configuring Pipecat Cloud Server Deployment
DESCRIPTION: This TOML configuration file defines the settings for deploying a Pipecat server agent to Pipecat Cloud. It specifies the agent's name, Docker image, secret set, Krisp enablement, and scaling parameters for minimum and maximum instances.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_13

LANGUAGE: toml
CODE:
```
agent_name = "word-wrangler"
image = "your-dockerhub-name/word-wrangler:0.1"
secret_set = "word-wrangler-secrets"
enable_krisp = true

[scaling]
  min_instances = 1
  max_instances = 5
```

----------------------------------------

TITLE: Configuring Per-Destination Audio Mixers in Pipecat
DESCRIPTION: This snippet illustrates the updated `TransportParams.audio_mixer` configuration, which now accepts a dictionary. This allows developers to assign a specific `SoundfileMixer` instance to individual audio destination tracks (e.g., 'track-1', 'track-2'), enabling fine-grained control over audio mixing per output. This enhancement provides more flexibility for multi-track audio scenarios.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#_snippet_0

LANGUAGE: Python
CODE:
```
  audio_out_mixer={
      "track-1": SoundfileMixer(...),
      "track-2": SoundfileMixer(...),
      "track-N": SoundfileMixer(...),
  },
```

----------------------------------------

TITLE: Configuring Ruff as Default Formatter in VS Code (JSON)
DESCRIPTION: This JSON snippet for VS Code user settings configures Ruff as the default Python formatter and enables automatic formatting on save. This ensures consistent code style across the project.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#_snippet_12

LANGUAGE: json
CODE:
```
"[python]": {
    "editor.defaultFormatter": "charliermarsh.ruff",
    "editor.formatOnSave": true
}
```

----------------------------------------

TITLE: Building and Running Moondream Chatbot Docker Image (Bash)
DESCRIPTION: These commands build a Docker image for the Moondream chatbot and then run it, mapping port 7860 to the host. The `--env-file .env` flag ensures environment variables are loaded from the specified file.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/moondream-chatbot/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
docker build -t moonbot .
docker run --env-file .env -p 7860:7860 moonbot
```

----------------------------------------

TITLE: Building and Running Chatbot Docker Image (Docker)
DESCRIPTION: These commands demonstrate how to containerize the chatbot application using Docker. The first command builds a Docker image tagged 'chatbot', and the second runs it, mapping port 7860 and injecting environment variables from the '.env' file for isolated deployment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/chatbot-audio-recording/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
docker build -t chatbot .
docker run --env-file .env -p 7860:7860 chatbot
```

----------------------------------------

TITLE: Installing Python Dependencies (Server)
DESCRIPTION: Installs all required Python packages for the server from the `requirements.txt` file into the active virtual environment. This ensures all necessary libraries are available for the application to run correctly.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Setting Up Python Virtual Environment and Dependencies
DESCRIPTION: This snippet outlines the steps to create a Python virtual environment, activate it, install required dependencies from `requirements.txt`, and copy the example environment file for credential configuration. It ensures a clean and isolated development setup.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/translation-chatbot/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt

cp env.example .env # and add your credentials
```

----------------------------------------

TITLE: Subscribing to Daily.co Participant Tracks in JavaScript
DESCRIPTION: Updates a participant's subscription settings via the Daily.co `callObject` to receive audio, video (disabled), and custom tracks. This function is essential for receiving remote participant media streams.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-custom-tracks/index.html#_snippet_7

LANGUAGE: JavaScript
CODE:
```
function subscribeToTracks(participantId) {
  console.log(`subscribing to track`);
  if (participantId === "local") {
    return;
  }
  callObject.updateParticipant(participantId, {
    setSubscribedTracks: {
      audio: true,
      video: false,
      custom: true
    }
  });
}
```

----------------------------------------

TITLE: Installing Git Pre-Commit Hooks for Pipecat (Shell)
DESCRIPTION: This command installs pre-commit hooks, which automate code quality checks and formatting before commits. This helps maintain consistent code style and adherence to project rules.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#_snippet_4

LANGUAGE: shell
CODE:
```
pre-commit install
```

----------------------------------------

TITLE: Running Docker Container for Twilio Chatbot
DESCRIPTION: This command runs the 'twilio-chatbot' Docker image, mapping port 8765 from the container to the host. The `-it` flags provide an interactive terminal, and `--rm` removes the container upon exit.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#_snippet_7

LANGUAGE: Shell
CODE:
```
docker run -it --rm -p 8765:8765 twilio-chatbot
```

----------------------------------------

TITLE: Stopping Audio Streaming and Disconnecting Resources in JavaScript
DESCRIPTION: This function stops the audio streaming process. It resets the `playTime` and `isPlaying` state, updates button states, and optionally closes the WebSocket connection. It also disconnects the `ScriptProcessorNode` and `MediaStreamSource` from the audio graph to release microphone resources and stop audio processing.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/index.html#_snippet_8

LANGUAGE: JavaScript
CODE:
```
function stopAudio(closeWebsocket) {
  playTime = 0;
  isPlaying = false;
  startBtn.disabled = false;
  stopBtn.disabled = true;
  if (ws && closeWebsocket) {
    ws.close();
    ws = null;
  }
  if (scriptProcessor) {
    scriptProcessor.disconnect();
  }
  if (source) {
    source.disconnect();
  }
}
```

----------------------------------------

TITLE: Setting Up Python Environment and Dependencies
DESCRIPTION: This snippet outlines the steps to set up a Python virtual environment, activate it, install project dependencies from `requirements.txt`, and copy the example environment file for credential configuration. These are essential prerequisites for running the chatbot.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/patient-intake/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt

cp env.example .env # and add your credentials
```

----------------------------------------

TITLE: Activate Python Virtual Environment (Bash)
DESCRIPTION: This command activates the previously created Python virtual environment. Activating the environment ensures that any subsequent Python commands or package installations are scoped to this specific environment, using its installed packages rather than global ones. The command differs slightly for Windows users.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

----------------------------------------

TITLE: Run React Native Project on Android (Bash)
DESCRIPTION: Executes the script defined in package.json to build and run the React Native application on a connected Android device configured for debugging.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/react-native/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm run android
```

----------------------------------------

TITLE: Installing Pipecat Cloud CLI
DESCRIPTION: Installs the Pipecat Cloud Command Line Interface (CLI) tool using pip. This CLI is essential for interacting with Pipecat Cloud, enabling tasks such as authentication, managing secrets, and deploying agents.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_10

LANGUAGE: bash
CODE:
```
pip install pipecatcloud
```

----------------------------------------

TITLE: Activate Python Virtual Environment (Bash/CMD)
DESCRIPTION: Activates the created Python virtual environment, ensuring that subsequent Python commands use the isolated environment's packages. Includes commands for both Unix-like systems and Windows.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
source venv/bin/activate
```

LANGUAGE: cmd
CODE:
```
venv\Scripts\activate
```

----------------------------------------

TITLE: Configuring OpenTelemetry HTTP Exporter for Langfuse (Python)
DESCRIPTION: This Python code snippet demonstrates how to initialize an `OTLPSpanExporter` for HTTP, which automatically configures itself using environment variables. It then sets up OpenTelemetry tracing for the 'pipecat-demo' service, directing spans to the specified exporter and optionally enabling console output for debugging purposes based on an environment variable.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/open-telemetry/langfuse/README.md#_snippet_4

LANGUAGE: python
CODE:
```
from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter

# Create the exporter - configured from environment variables
otlp_exporter = OTLPSpanExporter()

# Set up tracing with the exporter
setup_tracing(
    service_name="pipecat-demo",
    exporter=otlp_exporter,
    console_export=bool(os.getenv("OTEL_CONSOLE_EXPORT")),
)
```

----------------------------------------

TITLE: Configuring OpenTelemetry GRPC Exporter in Python
DESCRIPTION: This Python snippet demonstrates how to configure the OpenTelemetry OTLP GRPC span exporter for Jaeger. It initializes the exporter with the Jaeger endpoint from environment variables and then uses a `setup_tracing` utility function to integrate it, enabling trace collection for the 'pipecat-demo' service.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/open-telemetry/jaeger/README.md#_snippet_4

LANGUAGE: python
CODE:
```
from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter

# Create the exporter
otlp_exporter = OTLPSpanExporter(
    endpoint=os.getenv("OTEL_EXPORTER_OTLP_ENDPOINT", "http://localhost:4317"),
    insecure=True,
)

# Set up tracing with the exporter
setup_tracing(
    service_name="pipecat-demo",
    exporter=otlp_exporter,
    console_export=bool(os.getenv("OTEL_CONSOLE_EXPORT")),
)
```

----------------------------------------

TITLE: Installing Node.js Dependencies (Client)
DESCRIPTION: Installs all required Node.js packages for the client application, as defined in its `package.json` file. This command fetches and sets up all front-end dependencies necessary for the client to run.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Install Node.js Dependencies (npm)
DESCRIPTION: Executes `npm install` to download and set up all required Node.js packages defined in the project's `package.json` file, ensuring the application's dependencies are met.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/instant-voice/client/javascript/README.md#_snippet_1

LANGUAGE: Bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Installing Dependencies with npm (Bash)
DESCRIPTION: This command installs all required Node.js packages and their dependencies, as specified in the `package.json` file, ensuring the project has all necessary libraries to run.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/client/typescript/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Creating Secret Set from .env File (Bash)
DESCRIPTION: These commands copy an example environment file, prompt the user to edit it with their API keys, and then create a secret set in Pipecat Cloud from this file. This method securely manages sensitive credentials for deployment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
# Copy the example env file
cp env.example .env

# Edit .env to add your API keys:
# CARTESIA_API_KEY=your_cartesia_key
# OPENAI_API_KEY=your_openai_key

# Create a secret set from your .env file
pcc secrets set my-first-agent-secrets --file .env
```

----------------------------------------

TITLE: Base64 Encoding Langfuse API Keys (Bash)
DESCRIPTION: This command base64 encodes the Langfuse public and secret API keys, which are then used in the `OTEL_EXPORTER_OTLP_HEADERS` environment variable for authentication with the Langfuse OTLP endpoint.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/open-telemetry/langfuse/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
echo -n "pk-lf-1234567890:sk-lf-1234567890" | base64
```

----------------------------------------

TITLE: Installing Pipecat AI Editable Mode with Optional Dependencies (Shell)
DESCRIPTION: This command extends the editable installation to include specific optional dependencies like 'daily', 'deepgram', 'cartesia', 'openai', and 'silero'. This is useful for developing features that rely on these integrations.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#_snippet_6

LANGUAGE: shell
CODE:
```
pip install -e ".[daily,deepgram,cartesia,openai,silero]"
```

----------------------------------------

TITLE: Configuring Daily Domain Dial-in Settings (Bash)
DESCRIPTION: This `curl` command demonstrates how to configure pinless dial-in settings for a domain using the Daily REST API. It sets up a phone number, specifies a webhook URL for call handling, and defines a timeout message.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl --request POST \
--url https://api.daily.co/v1/domain-dialin-config \
--header 'Authorization: Bearer $TOKEN' \
--header 'Content-Type: application/json' \
--data-raw '{
	"type": "pinless_dialin",
	"name_prefix": "Customer1",
    "phone_number": "+1PURCHASED_NUM",
	"room_creation_api": "https://example.com/api/dial",
    "hold_music_url": "https://example.com/static/ringtone.mp3",
	"timeout_config": {
		"message": "No agent is available right now"
	}
}'
```

----------------------------------------

TITLE: Activating Python Virtual Environment (Windows)
DESCRIPTION: This command activates a Python virtual environment on Windows, isolating project dependencies. This is a standard practice for managing Python projects to avoid conflicts between different project requirements. This command should be run after creating the virtual environment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/server/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
venv\Scripts\activate
```

----------------------------------------

TITLE: Uploading Environment Secrets to Pipecat Cloud
DESCRIPTION: Uploads the contents of the local `.env` file as a secrets set named `pcc-smart-turn-secrets` to Pipecat Cloud. This securely provides necessary API keys and configurations to the deployed agent.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_12

LANGUAGE: bash
CODE:
```
pcc secrets set pcc-smart-turn-secrets --file .env
```

----------------------------------------

TITLE: Setup Python Virtual Environment and Dependencies
DESCRIPTION: Create a Python virtual environment and install the necessary dependencies listed in the requirements.txt file using pip.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-custom-tracks/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
```

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: This command copies the 'env.example' file to '.env'. The '.env' file is used to store sensitive configuration details like API keys, which are then loaded by the application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/daily-interop-bridge/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
cp env.example .env
```

----------------------------------------

TITLE: Copy Example Environment File (Shell)
DESCRIPTION: Command to copy the example environment file (`env.example`) to `.env`, which will be edited to include necessary API keys and configuration.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
cp env.example .env
```

----------------------------------------

TITLE: Installing Local Pipecat in Editable Mode
DESCRIPTION: This command installs a local version of the `pipecat` package in editable mode, allowing for development and testing against the current repository's code rather than a published version. It includes specific extras for Daily, Cartesia, and OpenAI integrations.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/server/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
pip install --editable "../../../[daily,cartesia,openai]"
```

----------------------------------------

TITLE: Installing Pipecat AI in Editable Mode (Shell)
DESCRIPTION: This command installs the Pipecat AI package in editable mode, allowing developers to modify the source code directly without needing to reinstall the package after every change.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#_snippet_5

LANGUAGE: shell
CODE:
```
pip install -e .
```

----------------------------------------

TITLE: Deploying the Fly.io machine
DESCRIPTION: This command deploys the application to Fly.io, building and launching the machine based on the `fly.toml` configuration. It pushes the latest changes to the deployed application, ensuring your bot is running the most recent code.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/flyio-example/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
fly deploy
```

----------------------------------------

TITLE: Adding WebRTC Peer Connection Event Listeners - JavaScript
DESCRIPTION: This function attaches essential event listeners to the RTCPeerConnection object. It monitors 'oniceconnectionstatechange' and 'onconnectionstatechange' to log and update the UI based on the connection's status, and 'onicecandidate' to log new ICE candidates as they are gathered.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/voice-agent/index.html#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const addPeerConnectionEventListeners = (pc) => {
  pc.oniceconnectionstatechange = () => {
    console.log("oniceconnectionstatechange", pc?.iceConnectionState)
  }
  pc.onconnectionstatechange = () => {
    console.log("onconnectionstatechange", pc?.connectionState)
    let connectionState = pc?.connectionState
    if (connectionState === 'connected') {
      _onConnected()
    } else if (connectionState === 'disconnected') {
      _onDisconnected()
    }
  }
  pc.onicecandidate = (event) => {
    if (event.candidate) {
      console.log("New ICE candidate:", event.candidate);
    } else {
      console.log("All ICE candidates have been sent.");
    }
  };
}
```

----------------------------------------

TITLE: Loading Protobuf Definition in JavaScript
DESCRIPTION: This code block loads the 'frames.proto' Protobuf definition file. Upon successful loading, it looks up the 'pipecat.Frame' message type, which is essential for encoding and decoding audio frames. It also updates a progress text element and enables/disables UI buttons to indicate readiness.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/index.html#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const proto = protobuf.load('frames.proto', (err, root) => {
  if (err) {
    throw err;
  }
  Frame = root.lookupType('pipecat.Frame');
  const progressText = document.getElementById('progressText');
  progressText.textContent = 'We are ready! Make sure to run the server and then click `Start Audio`.';
  startBtn.disabled = false;
  stopBtn.disabled = true;
});
```

----------------------------------------

TITLE: Setting Up Python Virtual Environment (sh)
DESCRIPTION: This command sequence initializes a Python virtual environment named 'venv' and then activates it. This isolates project dependencies from the system-wide Python installation, preventing conflicts. The activation command differs slightly for Windows.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/plivo-chatbot/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
python -m venv venv
source venv/bin/activate  # On Windows, use `venv\Scripts\activate`
```

----------------------------------------

TITLE: Configuring Environment Variables for Chatbot Server
DESCRIPTION: This snippet shows the required and optional environment variables for the FastAPI server. These keys are essential for integrating with various AI and communication APIs like Daily, Deepgram, Google, and Cartesia, and for configuring server host and port. Copy these to a `.env` file and fill in your API keys.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/server/README.md#_snippet_0

LANGUAGE: ini
CODE:
```
# Required API Keys
DAILY_API_KEY=           # Your Daily API key
DEEPGRAM_API_KEY=        # Your Deepgram API key
GOOGLE_API_KEY=          # Your Google/Gemini API key
CARTESIA_API_KEY=        # Your Cartesia API key

# Optional Configuration
DAILY_API_URL=           # Optional: Daily API URL (defaults to https://api.daily.co/v1)
DAILY_SAMPLE_ROOM_URL=   # Optional: Fixed room URL for development
HOST=                    # Optional: Host address (defaults to 0.0.0.0)
FAST_API_PORT=           # Optional: Port number (defaults to 7860)
```

----------------------------------------

TITLE: Setting up Python Virtual Environment
DESCRIPTION: This command initializes a Python virtual environment named 'venv' and then activates it. It's recommended for isolating project dependencies. The activation command differs slightly for Windows.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
python -m venv venv
source venv/bin/activate  # On Windows, use `venv\Scripts\activate`
```

----------------------------------------

TITLE: Starting Next.js Development Server (Client)
DESCRIPTION: Starts the Next.js development server for the client application. This command enables features like hot-reloading and provides a local URL (http://localhost:3000) for accessing the client UI during development.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Run Web Game Client Locally
DESCRIPTION: Starts the client-side development server for the web game, typically enabling hot-reloading and other development features.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Building Video Player for Participant - JavaScript
DESCRIPTION: Creates and appends a new HTML video element to the 'video-container', associating it with a participant ID. It then initializes and starts the video playback using the provided track, making the participant's video visible.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-multi-translation/index.html#_snippet_6

LANGUAGE: JavaScript
CODE:
```
async function buildVideoPlayer(track, participantId) { const videoContainer = document.getElementById("video-container"); const player = document.createElement("video"); player.dataset.participantId = participantId; videoContainer.appendChild(player); await startPlayer(player, track); await player.play(); return player; }
```

----------------------------------------

TITLE: Run Client Development Server (npm)
DESCRIPTION: Initiates the client application in development mode using `npm run dev`, typically starting a local server and making the application accessible for testing and development.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/instant-voice/client/javascript/README.md#_snippet_2

LANGUAGE: Bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Customize Voicemail Prompt via API - Shell
DESCRIPTION: This curl command sends a POST request to the Pipecat API's /start endpoint. It includes a JSON payload in the request body that specifies a custom configuration. The configuration overrides the default 'voicemail_prompt' text and provides a phone number in 'dialout_settings'. This allows for replacing the standard voicemail message with a custom one for a specific call.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_21

LANGUAGE: shell
CODE:
```
curl -X POST \"http://localhost:7860/start\" \\
\t -H \"Content-Type: application/json\" \\
\t -d '{ \n\t\t \"config\": { \n\t\t\t \"prompts\": [ \n\t\t\t\t { \n\t\t\t\t\t \"name\": \"voicemail_prompt\", \n\t\t\t\t\t \"text\": \"Hello, this is ACME Corporation calling. Please call us back at 555-123-4567 regarding your recent order. Thank you!\" \n\t\t\t\t } \n\t\t\t ], \n\t\t\t \"dialout_settings\": [{ \n\t\t\t\t \"phoneNumber\": \"+12345678910\" \n\t\t\t }], \n\t\t\t \"voicemail_detection\": { \n\t\t\t\t \"testInPrebuilt\": false \n\t\t\t } \n\t\t } \n\t  }'
```

----------------------------------------

TITLE: Building and Running Moondream Chatbot Docker Image for Intel GPUs (Bash)
DESCRIPTION: These commands provide specific instructions for building and running the Moondream chatbot Docker image optimized for Intel GPUs. It uses a different Dockerfile (`Dockerfile.intel`) and mounts the `/dev/dri` device for GPU access.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/moondream-chatbot/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
docker build -t moonbot -f Dockerfile.intel .
docker run --env-file .env -p 7860:7860 --device /dev/dri moonbot
```

----------------------------------------

TITLE: Initiating WebRTC Connection - JavaScript
DESCRIPTION: This asynchronous function orchestrates the process of connecting to the WebRTC agent. It first updates the UI to a 'connecting' state, then requests access to the user's audio media, and finally calls `createSmallWebRTCConnection` with the obtained audio track to establish the peer connection.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/voice-agent/index.html#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const connect = async () => {
  _onConnecting()
  const audioStream = await navigator.mediaDevices.getUserMedia({audio: true})
  peerConnection= await createSmallWebRTCConnection(audioStream.getAudioTracks()[0])
}
```

----------------------------------------

TITLE: Committing Changes - Bash
DESCRIPTION: This command commits your staged changes to the current branch with a descriptive message. The message should clearly summarize the modifications made in the commit.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CONTRIBUTING.md#_snippet_2

LANGUAGE: bash
CODE:
```
git commit -m "Description of your changes"
```

----------------------------------------

TITLE: Standard Voicemail Detection Configuration
DESCRIPTION: Configures standard voicemail detection for an outgoing call. It requires `dialout_settings` to specify the recipient's phone number and sets `testInPrebuilt` to `false` for a non-test environment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_16

LANGUAGE: json
CODE:
```
{
  "config": {
    "dialout_settings": [
      {
        "phoneNumber": "+12345678910"
      }
    ],
    "voicemail_detection": {
      "testInPrebuilt": false
    }
  }
}
```

----------------------------------------

TITLE: Setting Up Pipecat Chatbot Virtual Environment (Shell)
DESCRIPTION: This shell script guides users through setting up a Python virtual environment for a Pipecat chatbot. It involves navigating to the project directory, creating and activating a `venv`, and installing all required Python packages from `requirements.txt` to ensure a clean and isolated development environment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
cd pipecat-ai/examples/simple-chatbot

python -m venv venv

source venv/bin/activate

pip install -r requirements.txt
```

----------------------------------------

TITLE: Test Mode: Simple Dialin in Daily Prebuilt Configuration
DESCRIPTION: Configures a simple dial-in scenario for testing within Daily Prebuilt. It enables test mode (`testInPrebuilt: true`) within the `simple_dialin` configuration object.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_18

LANGUAGE: json
CODE:
```
{
  "config": {
    "simple_dialin": {
      "testInPrebuilt": true
    }
  }
}
```

----------------------------------------

TITLE: Simple Dialin (Incoming Call) Configuration
DESCRIPTION: Configures a basic incoming call scenario using the `simple_dialin` bot type. It includes `dialin_settings`, which are automatically populated for incoming calls.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_17

LANGUAGE: json
CODE:
```
{
  "config": {
    "dialin_settings": {
      "from": "+12345678901",
      "to": "+19876543210",
      "call_id": "call-id-string",
      "call_domain": "domain-string"
    },
    "simple_dialin": {}
  }
}
```

----------------------------------------

TITLE: Configuring Environment Variables for Tracing
DESCRIPTION: This .env file configuration enables OpenTelemetry tracing by setting `ENABLE_TRACING` to true and specifies the Jaeger OTLP endpoint. It also includes placeholders for various service API keys required by the Pipecat demo, ensuring traces are sent to the correct backend.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/open-telemetry/jaeger/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
ENABLE_TRACING=true
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317  # Point to your Jaeger backend
# OTEL_CONSOLE_EXPORT=true  # Set to any value for debug output to console

# Service API keys
DEEPGRAM_API_KEY=your_key_here
CARTESIA_API_KEY=your_key_here
OPENAI_API_KEY=your_key_here
```

----------------------------------------

TITLE: Updating UI for WebRTC Connection States - JavaScript
DESCRIPTION: These helper functions are responsible for updating the user interface's status text and button label based on the current WebRTC connection state. They ensure the UI accurately reflects whether the agent is connecting, connected, or disconnected.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/voice-agent/index.html#_snippet_5

LANGUAGE: JavaScript
CODE:
```
const _onConnecting = () => {
  statusEl.textContent = "Connecting"
  buttonEl.textContent = "Disconnect"
  connected = true
}
const _onConnected = () => {
  statusEl.textContent = "Connected"
  buttonEl.textContent = "Disconnect"
  connected = true
}
const _onDisconnected = () => {
  statusEl.textContent = "Disconnected"
  buttonEl.textContent = "Connect"
  connected = false
}
```

----------------------------------------

TITLE: Creating Environment Configuration File
DESCRIPTION: This command copies the example environment file (`env.example`) to `.env`. The `.env` file is used to store sensitive configuration variables, such as API keys or URLs, which should be updated with specific project settings.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/telnyx-chatbot/README.md#_snippet_2

LANGUAGE: sh
CODE:
```
cp env.example .env
```

----------------------------------------

TITLE: Copy Environment Example File (Bash)
DESCRIPTION: Copies the `env.example` file to `.env`, creating the local environment configuration file that needs to be updated with specific credentials for the application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/fastapi-webhook-server/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
cp env.example .env
```

----------------------------------------

TITLE: Starting Media Player with Daily.co Track in JavaScript
DESCRIPTION: Initializes an HTML media player (audio or video) by setting it to autoplay, unmuting it, and assigning a MediaStream from a Daily.co track if provided. This prepares the player for media playback.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-custom-tracks/index.html#_snippet_5

LANGUAGE: JavaScript
CODE:
```
async function startPlayer(player, track) {
  player.muted = false;
  player.autoplay = true;
  if (track != null) {
    player.srcObject = new MediaStream([track]);
  }
}
```

----------------------------------------

TITLE: Building and Running Docker Image for Chatbot
DESCRIPTION: These commands build a Docker image named `chatbot` from the current directory and then run a container from this image, mapping port 7860 and loading environment variables from the `.env` file.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/sentry-metrics/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
docker build -t chatbot .
docker run --env-file .env -p 7860:7860 chatbot
```

----------------------------------------

TITLE: Build and Run Docker Image (Bash)
DESCRIPTION: Commands to build a Docker image for the application and run it, exposing the necessary port and loading environment variables from the .env file.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-multi-translation/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
docker build -t daily-multi-translation .
docker run --env-file .env -p 7860:7860 daily-multi-translation
```

----------------------------------------

TITLE: Creating Environment Variables File (Server)
DESCRIPTION: Copies the example environment variables file (`env.example`) to `.env`. This file will contain sensitive API keys required for the server to function, which must be provided by the user for proper operation.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
cp env.example .env
```

----------------------------------------

TITLE: Exposing Local Server with ngrok Subdomain (Bash)
DESCRIPTION: This command extends the ngrok usage to include a subdomain, providing a consistent and predictable public URL for the local server. This is useful for development and testing scenarios where a stable endpoint is required.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/nextjs-webhook-server/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
ngrok http -subdomain=mydomain http://localhost:7860
```

----------------------------------------

TITLE: Attaching Event Listeners and Initializing UI State in JavaScript
DESCRIPTION: This snippet attaches click event listeners to the 'Start Audio' and 'Stop Audio' buttons, linking them to their respective handler functions. It also sets the initial disabled state for both buttons, ensuring they are disabled until the Protobuf definition is loaded and the application is ready.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/index.html#_snippet_10

LANGUAGE: JavaScript
CODE:
```
startBtn.addEventListener('click', startAudioBtnHandler);
stopBtn.addEventListener('click', stopAudioBtnHandler);
startBtn.disabled = true;
stopBtn.disabled = true;
```

----------------------------------------

TITLE: Initializing Daily.co Call Object and Event Listeners in JavaScript
DESCRIPTION: Initializes the Daily.co `callObject` and sets up event listeners for `participant-joined`, `participant-left`, and `track-started` events. It manages UI button states and orchestrates the handling of participant media.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-custom-tracks/index.html#_snippet_8

LANGUAGE: JavaScript
CODE:
```
function startDaily() {
  enableJoinButton(true);
  enableLeaveButton(false);
  window.callObject = window.DailyIframe.createCallObject({});
  callObject.on("participant-joined", (e) => {
    if (!e.participant.local) {
      console.log("participant-joined", e.participant);
      subscribeToTracks(e.participant.session_id);
    }
  });
  callObject.on("participant-left", (e) => {
    console.log("participant-left", e.participant.session_id);
    destroyParticipantPlayers(e.participant.session_id);
  });
  callObject.on("track-started", async (e) => {
    console.log("track-started", e.track);
    if (e.track.kind === "audio") {
      await buildAudioPlayer(e.track, e.participant.session_id);
    }
  });
}
```

----------------------------------------

TITLE: Handling Connect/Disconnect Button Click - JavaScript
DESCRIPTION: This snippet attaches an asynchronous event listener to the main action button. When clicked, it checks the current connection status; if not connected, it initiates a new WebRTC connection, otherwise, it triggers the disconnection process.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/voice-agent/index.html#_snippet_7

LANGUAGE: JavaScript
CODE:
```
buttonEl.addEventListener("click", async () => {
  if (!connected) {
    await connect()
  } else {
    disconnect()
  }
});
```

----------------------------------------

TITLE: Advanced Dialout with Features (Bash)
DESCRIPTION: Sends a POST request to `/api/dial` with an extended JSON body. Includes `dialout_settings`, `voicemail_detection`, and `call_transfer` configurations for advanced call handling.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/README.md#_snippet_5

LANGUAGE: Bash
CODE:
```
curl -X POST http://localhost:3000/api/dial \
  -H "Content-Type: application/json" \
  -d '{
    "To": "+1234567890",
    "From": "+1987654321",
    "callId": "call-uuid-123",
    "callDomain": "domain-uuid-456",
    "sipHeader": {},
    "dialout_settings": [
      {
        "phoneNumber": "+1234567890",
        "callerId": "purchased_phone_uuid"
      }
    ],
    "voicemail_detection": {
      "testInPrebuilt": true
    },
    "call_transfer": {
      "mode": "dialout",
      "speakSummary": true,
      "storeSummary": true,
      "operatorNumber": "+1234567890",
      "testInPrebuilt": true
    }
  }'
```

----------------------------------------

TITLE: Joining Daily.co Meeting Room - JavaScript
DESCRIPTION: Initiates joining a Daily.co meeting room using the URL from the 'meeting-url' input field. It configures initial video/audio states and track subscription settings, and updates UI button states to reflect the active call status.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-multi-translation/index.html#_snippet_10

LANGUAGE: JavaScript
CODE:
```
async function joinRoom() { enableJoinButton(false); enableLeaveButton(true); const meetingUrl = document.getElementById("meeting-url").value; callObject.join({ url: meetingUrl, startVideoOff: true, startAudioOff: true, subscribeToTracksAutomatically: false, receiveSettings: { base: { video: { layer: 0 } } } }); }
```

----------------------------------------

TITLE: Subscribing to Participant Tracks - JavaScript
DESCRIPTION: Subscribes to audio, video, and custom tracks for a given participant using the 'callObject.updateParticipant' method. This ensures that media streams from remote participants are received, while local participant tracks are intentionally skipped.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-multi-translation/index.html#_snippet_8

LANGUAGE: JavaScript
CODE:
```
function subscribeToTracks(participantId) { console.log(`subscribing to track`); if (participantId === "local") { return; } callObject.updateParticipant(participantId, { setSubscribedTracks: { audio: true, video: true, custom: true } }); }
```

----------------------------------------

TITLE: Closing WebRTC Peer Connection - JavaScript
DESCRIPTION: This function handles the disconnection process for the WebRTC agent. It checks if an active peer connection exists, closes it, nullifies the `peerConnection` variable, and then calls a UI update function to reflect the disconnected state.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/voice-agent/index.html#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const disconnect = () => {
  if (!peerConnection) {
    return
  }
  peerConnection.close()
  peerConnection = null
  _onDisconnected()
}
```

----------------------------------------

TITLE: Start Call Transfer Example Bot (Daily Prebuilt)
DESCRIPTION: This command uses `curl` to send a POST request to the local `/start` endpoint, initiating the call transfer example bot. It includes configuration to enable testing within a Daily Prebuilt room, setting the transfer mode to dialout and specifying operator details.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_10

LANGUAGE: Shell
CODE:
```
curl -X POST "http://localhost:7860/start" \
	 -H "Content-Type: application/json" \
	 -d '{
		 "config": {
			"call_transfer": {
			   "mode": "dialout",
			   "speakSummary": true,
			   "storeSummary": false,
			   "operatorNumber": "+12345678910",
			   "testInPrebuilt": true
			}
		 }
	  }'
```

----------------------------------------

TITLE: Leaving Daily.co Meeting Room and Cleaning Up - JavaScript
DESCRIPTION: Leaves the current Daily.co meeting and clears all video and audio player elements from their respective containers. It also updates the UI button states to reflect the disconnected status, ensuring a clean exit.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-multi-translation/index.html#_snippet_11

LANGUAGE: JavaScript
CODE:
```
async function leaveRoom() { enableJoinButton(true); enableLeaveButton(false); callObject.leave(); const videoContainer = document.getElementById("video-container"); videoContainer.replaceChildren(); const audioContainer = document.getElementById("audio-container"); audioContainer.replaceChildren(); }
```

----------------------------------------

TITLE: Initializing DOM Elements and Connection State - JavaScript
DESCRIPTION: This snippet selects necessary DOM elements by their IDs and initializes global variables used to manage the WebRTC connection state, including a flag for connection status and a placeholder for the RTCPeerConnection object.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/voice-agent/index.html#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const statusEl = document.getElementById("status")
const buttonEl = document.getElementById("connect-btn")
const audioEl = document.getElementById("audio-el")
let connected = false
let peerConnection = null
```

----------------------------------------

TITLE: Launching Pipecat Agent Locally (Bash)
DESCRIPTION: This command launches the `bot.py` script locally, setting `LOCAL_RUN` to 1. This allows for testing the conversational AI agent in a local development environment before deployment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
LOCAL_RUN=1 python bot.py
```

----------------------------------------

TITLE: Configuring Environment Variables for FastAPI Server
DESCRIPTION: This INI configuration defines the environment variables required for the FastAPI server. It includes essential API keys for Daily and Cartesia, along with optional settings for the Daily API URL, a sample room URL for development, and the server's host and port.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/server/README.md#_snippet_0

LANGUAGE: ini
CODE:
```
# Required API Keys
DAILY_API_KEY=           # Your Daily API key
CARTESIA_API_KEY=        # Your Cartesia API key

# Optional Configuration
DAILY_API_URL=           # Optional: Daily API URL (defaults to https://api.daily.co/v1)
DAILY_SAMPLE_ROOM_URL=   # Optional: Fixed room URL for development
HOST=                    # Optional: Host address (defaults to 0.0.0.0)
FAST_API_PORT=           # Optional: Port number (defaults to 7860)
```

----------------------------------------

TITLE: Start FastAPI Server (Python)
DESCRIPTION: Executes the `server.py` script, which initiates the FastAPI application. The server will run locally, typically on `http://localhost:7860`, and listen for incoming API requests.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/fastapi-webhook-server/README.md#_snippet_3

LANGUAGE: python
CODE:
```
python server.py
```

----------------------------------------

TITLE: Running FastAPI Application with Python
DESCRIPTION: This command starts the FastAPI application directly using Python. Ensure the virtual environment is activated before running this command.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#_snippet_5

LANGUAGE: Shell
CODE:
```
python server.py
```

----------------------------------------

TITLE: Start Python Bot Server (Bash)
DESCRIPTION: Executes the 'server.py' script using the Python interpreter from the active virtual environment, which starts the bot server application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
python server.py
```

----------------------------------------

TITLE: Running Pipecat Android Client with Gradle
DESCRIPTION: This command executes the `runDebug` task using the Gradle Wrapper, which compiles and runs the Android client application in debug mode. It requires the `simple-chatbot` server to be running as a prerequisite.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/android/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
./gradlew runDebug
```

----------------------------------------

TITLE: Set Up Python Virtual Environment (Phone Game)
DESCRIPTION: Creates a new Python virtual environment named 'venv' and then activates it. This isolates project dependencies for the phone game.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_9

LANGUAGE: bash
CODE:
```
python3 -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

----------------------------------------

TITLE: Setting Up Python Virtual Environment
DESCRIPTION: These commands initialize a new Python virtual environment named 'venv' and then activate it. A virtual environment isolates project dependencies, preventing conflicts with other Python projects. The activation command differs slightly for Windows users.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/server/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python3 -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

----------------------------------------

TITLE: Joining Daily.co Meeting Room in JavaScript
DESCRIPTION: Joins a Daily.co meeting using a URL retrieved from a UI input field. It configures initial video/audio states and track subscription settings, and updates the UI button states accordingly.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-custom-tracks/index.html#_snippet_9

LANGUAGE: JavaScript
CODE:
```
async function joinRoom() {
  enableJoinButton(false);
  enableLeaveButton(true);
  const meetingUrl = document.getElementById("meeting-url").value;
  callObject.join({
    url: meetingUrl,
    startVideoOff: true,
    startAudioOff: true,
    subscribeToTracksAutomatically: false,
    receiveSettings: {
      base: {
        video: {
          layer: 0
        }
      }
    }
  });
}
```

----------------------------------------

TITLE: Destroying Participant Media Players - JavaScript
DESCRIPTION: Removes all video, audio, and button elements associated with a specific participant ID from the DOM. It utilizes the 'destroyPlayers' utility function to clean up resources when a participant leaves.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-multi-translation/index.html#_snippet_4

LANGUAGE: JavaScript
CODE:
```
function destroyParticipantPlayers(participantId) { destroyPlayers(`video[data-participant-id="${participantId}"]`); destroyPlayers(`audio[data-participant-id="${participantId}"]`); destroyPlayers(`button[data-participant-id="${participantId}"]`); }
```

----------------------------------------

TITLE: Removing Participant Media Players in Daily.co JavaScript
DESCRIPTION: This function removes all audio and button elements associated with a specific participant ID from the DOM. It's typically invoked when a participant leaves a Daily.co call to clean up their media players.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-custom-tracks/index.html#_snippet_4

LANGUAGE: JavaScript
CODE:
```
function destroyParticipantPlayers(participantId) {
  destroyPlayers(`audio\[data-participant-id=\"${participantId}\"\]`);
  destroyPlayers(`button\[data-participant-id=\"${participantId}\"\]`);
}
```

----------------------------------------

TITLE: Daily API Dial Request Body (JSON)
DESCRIPTION: Defines the JSON structure for the request body sent to the `/api/dial` endpoint to initiate a PSTN/SIP call. It includes 'To' and 'From' numbers, call identifiers, dialout settings, voicemail detection, and call transfer parameters.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/fastapi-webhook-server/README.md#_snippet_6

LANGUAGE: json
CODE:
```
{
  "To": "+14152251493",
  "From": "+14158483432",
  "callId": "string-contains-uuid",
  "callDomain": "string-contains-uuid",
  "dialout_settings": [
    {
      "phoneNumber": "+14158483432",
      "callerId": "+14152251493"
    }
  ],
  "voicemail_detection": {
    "testInPrebuilt": true
  },
  "call_transfer": {
    "mode": "dialout",
    "speakSummary": true,
    "storeSummary": true,
    "operatorNumber": "+14152250006",
    "testInPrebuilt": true
  }
}
```

----------------------------------------

TITLE: Deploying Pipecat FastAPI App on Modal
DESCRIPTION: Commands to navigate to the server directory, copy the environment variable example file, test the application locally using `modal serve`, and finally deploy the application to production on Modal.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/modal-example/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cd server
```

LANGUAGE: bash
CODE:
```
cp env.example .env
```

LANGUAGE: bash
CODE:
```
modal serve app.py
```

LANGUAGE: bash
CODE:
```
modal deploy app.py
```

----------------------------------------

TITLE: Running Pipecat Unit Tests (Shell)
DESCRIPTION: This command executes the test suite for the Pipecat framework using pytest. It should be run from the root directory of the repository to ensure all tests are discovered and run correctly.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#_snippet_9

LANGUAGE: shell
CODE:
```
pytest
```

----------------------------------------

TITLE: Standard Dialout Example (Bash)
DESCRIPTION: Demonstrates a standard dialout request using a POST to `/api/dial`. The request body contains the target number and a specified `callerId` within the `dialout_settings` array.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/README.md#_snippet_4

LANGUAGE: Bash
CODE:
```
curl -X POST http://localhost:3000/api/dial \
  -H "Content-Type: application/json" \
  -d '{
    "dialout_settings": [
      {
        "phoneNumber": "+1234567890",
        "callerId": "purchased_phone_uuid"
      }
    ]
  }'
```

----------------------------------------

TITLE: Running Pipecat Example with Custom Network Settings (Bash)
DESCRIPTION: This snippet demonstrates how to execute a Pipecat example script, allowing the user to specify a custom host address and port for the application's network binding. This is particularly useful for configuring access in different network environments or resolving port conflicts.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/foundational/README.md#_snippet_6

LANGUAGE: Bash
CODE:
```
python <example-name> --host 0.0.0.0 --port 8080
```

----------------------------------------

TITLE: Installing Pipecat Development Dependencies (Shell)
DESCRIPTION: This command installs all development-specific dependencies listed in dev-requirements.txt. These packages are necessary for contributing to the framework itself.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#_snippet_3

LANGUAGE: shell
CODE:
```
pip install -r dev-requirements.txt
```

----------------------------------------

TITLE: Starting Pipecat Smart Turn Server Locally
DESCRIPTION: Starts the Pipecat Smart Turn server in local development mode. The `LOCAL=1` environment variable configures the server for local use, and `server.py` serves as the main entry point for the application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
LOCAL=1 python server.py
```

----------------------------------------

TITLE: Cloning Pipecat Cloud Starter Project (Bash)
DESCRIPTION: This command sequence clones the Pipecat Cloud starter project from GitHub and navigates into its directory, preparing the environment for further setup. It's the initial step to acquire the project files.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/daily-co/pipecat-cloud-starter
cd pipecat-cloud-starter
```

----------------------------------------

TITLE: Installing Python Dependencies
DESCRIPTION: This command installs all required Python packages listed in the `requirements.txt` file. This ensures that all necessary libraries for running the Pipecat examples are available in the active virtual environment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/foundational/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Installing Python Dependencies (Bash)
DESCRIPTION: This command uses pip to install all Python packages listed in the 'requirements.txt' file. These packages are necessary for the bot server to function correctly.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/instant-voice/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Install Python Dependencies (Bash)
DESCRIPTION: Installs all required Python packages and their versions, as specified in the 'requirements.txt' file, into the currently active virtual environment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Install Python Dependencies (Shell)
DESCRIPTION: Command to install the required Python packages listed in the `requirements.txt` file using pip.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Install Node.js Dependencies (Web Game Client)
DESCRIPTION: Installs all required Node.js packages for the client-side application of the web game, as defined in 'package.json'.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Building and Running Docker Image for Chatbot
DESCRIPTION: These commands build a Docker image named 'chatbot' from the current directory's Dockerfile and then run a container from that image. The container is configured to use environment variables from `.env` and map port 7860 to the host, making the chatbot accessible via Docker.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/translation-chatbot/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
docker build -t chatbot .
docker run --env-file .env -p 7860:7860 chatbot
```

----------------------------------------

TITLE: Test Simple Dial-out in Daily Prebuilt (Shell)
DESCRIPTION: Curl command to trigger the simple dial-out example in Daily Prebuilt mode, allowing testing the bot's basic conversation capabilities in a browser-based Daily room without making actual phone calls.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_6

LANGUAGE: shell
CODE:
```
curl -X POST "http://localhost:7860/start" \
	 -H "Content-Type: application/json" \
	 -d '{
		 "config": {
			"simple_dialout": {
			   "testInPrebuilt": true
			}
		 }
	  }'
```

----------------------------------------

TITLE: Daily Webhook Payload for Incoming Calls
DESCRIPTION: This JSON object represents the payload sent by Daily to the configured webhook endpoint (`/start`) when an incoming phone call is received. It provides essential information about the call, including the caller's number, the purchased number receiving the call, and unique call identifiers.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_11

LANGUAGE: JSON
CODE:
```
{
  "From": "+CALLERS_PHONE",
  "To": "$PURCHASED_PHONE",
  "callId": "callid-read-only-string",
  "callDomain": "callDomain-read-only-string"
}
```

----------------------------------------

TITLE: Webhook Payload for Incoming Dial-in Call (JSON)
DESCRIPTION: This JSON object shows the structure of the payload received by the webhook endpoint (`room_creation_api`) when Daily receives an incoming PSTN or SIP call. It includes call details like `To`, `From`, `callId`, `callDomain`, and custom `sipHeaders`.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  // for dial-in from webhook
  "To": "+14152251493",
  "From": "+14158483432",
  "callId": "string-contains-uuid",
  "callDomain": "string-contains-uuid",
  "sipHeaders": {
    "X-My-Custom-Header": "value",
    "x-caller": "+1234567890",
    "x-called": "+19876567890"
   }
}
```

----------------------------------------

TITLE: Building Docker Image for Telnyx Chatbot
DESCRIPTION: This command builds a Docker image named `telnyx-chatbot` from the Dockerfile in the current directory. This containerizes the FastAPI application, making it portable and easy to deploy.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/telnyx-chatbot/README.md#_snippet_5

LANGUAGE: sh
CODE:
```
docker build -t telnyx-chatbot .
```

----------------------------------------

TITLE: Running Client Application in Development Mode
DESCRIPTION: This command starts the client application in development mode, typically launching a local server and enabling features like hot-reloading for easier development and testing.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/client/javascript/README.md#_snippet_2

LANGUAGE: Bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Installing Demo Dependencies - React Native (Bash)
DESCRIPTION: This snippet outlines the essential steps to install project dependencies and prepare the native source code for a React Native application. It covers using `nvm` for Node.js version management, installing npm packages, running `expo prebuild` to generate native code, and configuring environment variables for server connection.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/client/react-native/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Use the version of node specified in .nvmrc
nvm i

# Install dependencies
npm i

# Before a native app can be compiled, the native source code must be generated.
npx expo prebuild

# Configure the environment variable to connect to the local server
cp env.example .env
# edit .env and add your local ip address, for example: http://192.168.1.16:7860
```

----------------------------------------

TITLE: Setting Up Python Virtual Environment (Linux/macOS)
DESCRIPTION: These commands create and activate a Python virtual environment on Linux or macOS, isolating project dependencies. This is a standard practice for managing Python projects to avoid conflicts between different project requirements.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/server/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python3 -m venv venv
source venv/bin/activate
```

----------------------------------------

TITLE: Create & Activate Python Virtual Environment (Shell)
DESCRIPTION: Commands to create a Python virtual environment and activate it, preparing the environment for installing dependencies. The activation command differs slightly between Unix-like systems and Windows.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
python3 -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

----------------------------------------

TITLE: Setting Up Python Virtual Environment for Pipecat Development (Shell)
DESCRIPTION: This snippet outlines the steps to create and activate a Python virtual environment. It's a crucial prerequisite for isolating project dependencies and ensuring a clean development setup.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
python3 -m venv venv
source venv/bin/activate
```

----------------------------------------

TITLE: Creating Python Virtual Environment (Bash)
DESCRIPTION: This command creates a new Python virtual environment named 'venv' in the current directory. Virtual environments isolate project dependencies, preventing conflicts with other Python projects.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/instant-voice/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python3 -m venv venv
```

----------------------------------------

TITLE: Creating Environment Configuration File (sh)
DESCRIPTION: This command copies the example environment file `env.example` to `.env`. The `.env` file is used to store sensitive configuration variables, which should then be updated with specific project settings.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/plivo-chatbot/README.md#_snippet_2

LANGUAGE: sh
CODE:
```
cp env.example .env
```

----------------------------------------

TITLE: Cloning Pipecat Repository - Bash
DESCRIPTION: This command clones your forked Pipecat repository from GitHub to your local machine. Replace `your-username` with your actual GitHub username to ensure you clone your personal fork.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CONTRIBUTING.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/your-username/pipecat
```

----------------------------------------

TITLE: Setting Fly.io app secrets from .env
DESCRIPTION: This command reads environment variables from the `.env` file, converts newlines to spaces, and then uses `flyctl secrets set` to upload them as secrets to the Fly.io application. This automates the process of configuring sensitive data securely without manual input.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/flyio-example/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
cat .env | tr '\n' ' ' | xargs flyctl secrets set
```

----------------------------------------

TITLE: Building Docker Image for Twilio Chatbot
DESCRIPTION: This command builds a Docker image named 'twilio-chatbot' from the current directory's Dockerfile. This packages the application and its dependencies into a portable container.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#_snippet_6

LANGUAGE: Shell
CODE:
```
docker build -t twilio-chatbot .
```

----------------------------------------

TITLE: Building Daily.co Audio Player and Control in JavaScript
DESCRIPTION: Creates an HTML audio player and a corresponding control button for a given Daily.co track and participant. It appends these elements to the 'audio-container' and sets up play/pause functionality for the audio.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-custom-tracks/index.html#_snippet_6

LANGUAGE: JavaScript
CODE:
```
async function buildAudioPlayer(track, participantId) {
  const audioContainer = document.getElementById("audio-container");
  const player = document.createElement("audio");
  player.dataset.participantId = participantId;
  // Create a new button for controlling audio
  const audioControlButton = document.createElement("button");
  audioControlButton.className = "ui primary green button";
  audioControlButton.innerText = track._mediaTag == "cam-audio" ? "english" : track._mediaTag;
  audioControlButton.dataset.participantId = participantId;
  audioControlButton.onclick = () => {
    if (player.paused) {
      player.play();
      audioControlButton.className = "ui primary red button";
    } else {
      player.pause();
      audioControlButton.className = "ui primary green button";
    }
  };
  audioContainer.appendChild(player);
  audioContainer.appendChild(audioControlButton);
  await startPlayer(player, track);
  player.pause();
  return player;
}
```

----------------------------------------

TITLE: Installing Documentation Dependencies - Bash
DESCRIPTION: Installs all necessary Python packages required for building the Pipecat documentation by reading them from the `requirements.txt` file.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Starting Pipecat Agent Session (Bash)
DESCRIPTION: This command initiates a session with the deployed Pipecat agent within a Daily room, enabling real-time conversational interaction. It returns a URL to connect to the running agent.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_16

LANGUAGE: bash
CODE:
```
pcc agent start my-first-agent --use-daily
```

----------------------------------------

TITLE: Creating Public API Key for Agent Access (Bash)
DESCRIPTION: This command creates a public API key for accessing the deployed Pipecat agent. This key is essential for external applications or services to interact with the agent securely.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_14

LANGUAGE: bash
CODE:
```
pcc organizations keys create
```

----------------------------------------

TITLE: Leaving Daily.co Meeting Room in JavaScript
DESCRIPTION: Leaves the current Daily.co meeting and clears all dynamically added audio players from the 'audio-container' element. It also updates the UI button states to reflect the disconnected status.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-custom-tracks/index.html#_snippet_10

LANGUAGE: JavaScript
CODE:
```
async function leaveRoom() {
  enableJoinButton(true);
  enableLeaveButton(false);
  callObject.leave();
  const audioContainer = document.getElementById("audio-container");
  audioContainer.replaceChildren();
}
```

----------------------------------------

TITLE: Running Pipecat Example with Daily Transport
DESCRIPTION: This command runs the `07-interruptible.py` example, explicitly specifying 'daily' as the transport mechanism using the `-t` flag. This allows the agent to connect and interact via Daily.co services, requiring `DAILY_SAMPLE_ROOM_URL` and `DAILY_API_KEY` environment variables.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/foundational/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
python 07-interruptible.py -t daily
```

----------------------------------------

TITLE: Deploying Self-Serve LLM on Modal
DESCRIPTION: Commands to clone the modal-examples repository, navigate to the vLLM inference example directory, and deploy the OpenAI-compatible LLM service to Modal.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/modal-example/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/modal-labs/modal-examples
```

LANGUAGE: bash
CODE:
```
cd modal-examples
```

LANGUAGE: bash
CODE:
```
modal deploy 06_gpu_and_ml/llm-serving/vllm_inference.py
```

----------------------------------------

TITLE: Running a Pipecat Example
DESCRIPTION: This command executes a specific Pipecat example script, `01-say-one-thing.py`. This is the standard way to start any of the foundational examples after setting up the environment and API keys.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/foundational/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
python 01-say-one-thing.py
```

----------------------------------------

TITLE: Run Pipecat Daily Bot
DESCRIPTION: Start the Pipecat bot application, providing the Daily room URL as a command-line argument. The bot will wait for a participant and then mirror the 'pipecat' custom track.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-custom-tracks/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python bot.py -u ROOM_URL
```

----------------------------------------

TITLE: Creating Local Environment File (Bash)
DESCRIPTION: This command copies the example environment file `env.local.example` to `.env.local`. The `.env.local` file is used to store local environment variables and sensitive credentials, which are loaded by Next.js during development.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/nextjs-webhook-server/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
cp env.local.example .env.local
```

----------------------------------------

TITLE: Installing Python Project Dependencies
DESCRIPTION: This snippet shows how to install the required Python packages listed in `requirements.txt`. This step ensures all necessary libraries for the server to run are available in the virtual environment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/server/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Installing Dependencies with pip
DESCRIPTION: This command installs all necessary Python packages listed in the `requirements.txt` file. It ensures that all project dependencies, including `pipecat`, `Textual`, and `Whisper`, are available in the current environment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/local-input-select-stt/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Starting Media Player with Track - JavaScript
DESCRIPTION: Initializes a given HTML media player (video or audio) by unmuting it, enabling autoplay, and optionally assigning a MediaStream from a provided track. This prepares the player for immediate playback.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-multi-translation/index.html#_snippet_5

LANGUAGE: JavaScript
CODE:
```
async function startPlayer(player, track) { player.muted = false; player.autoplay = true; if (track != null) { player.srcObject = new MediaStream([track]); } }
```

----------------------------------------

TITLE: Creating Secret Set Directly via CLI (Bash)
DESCRIPTION: This command directly creates a secret set in Pipecat Cloud by providing API keys as arguments. This offers an alternative to using an `.env` file for managing sensitive credentials.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
pcc secrets set my-first-agent-secrets \
  CARTESIA_API_KEY=your_cartesia_key \
  OPENAI_API_KEY=your_openai_key
```

----------------------------------------

TITLE: Installing Python Dependencies
DESCRIPTION: Installs all required Python packages listed in the 'requirements.txt' file using pip, ensuring all necessary libraries for the studypal application are available.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/studypal/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Simple Dialout (Outgoing Call) Configuration
DESCRIPTION: Configures a basic outgoing call scenario using the `simple_dialout` bot type. It requires `dialout_settings` to specify the recipient's phone number.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_19

LANGUAGE: json
CODE:
```
{
  "config": {
    "dialout_settings": [
      {
        "phoneNumber": "+12345678910"
      }
    ],
    "simple_dialout": {}
  }
}
```

----------------------------------------

TITLE: Authenticating with Pipecat Cloud CLI
DESCRIPTION: Initiates the login process for the Pipecat Cloud CLI. Users will be prompted to authenticate with their Pipecat Cloud account, which is a mandatory step to perform deployment and management operations.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_11

LANGUAGE: bash
CODE:
```
pcc auth login
```

----------------------------------------

TITLE: Client Setup - Shell
DESCRIPTION: Steps to set up the client-side application, including navigating to the directory, installing dependencies using npm, and building the project.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/storytelling-chatbot/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
cd client
```

LANGUAGE: shell
CODE:
```
npm install
```

LANGUAGE: shell
CODE:
```
npm run build
```

----------------------------------------

TITLE: Configuring Environment Variables for Langfuse Tracing
DESCRIPTION: This `.env` file configures environment variables to enable OpenTelemetry tracing for Langfuse, specifying the OTLP endpoint, base64-encoded API key for authorization, and optional console export. It also includes placeholders for service-specific API keys required by the Pipecat demo.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/open-telemetry/langfuse/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
ENABLE_TRACING=true
# OTLP endpoint for Langfuse
OTEL_EXPORTER_OTLP_ENDPOINT=http://cloud.langfuse.com/api/public/otel
OTEL_EXPORTER_OTLP_HEADERS=Authorization=Basic%20<base64_encoded_api_key>
# Set to any value to enable console output for debugging
# OTEL_CONSOLE_EXPORT=true

# Service API keys
DEEPGRAM_API_KEY=your_key_here
CARTESIA_API_KEY=your_key_here
OPENAI_API_KEY=your_key_here
```

----------------------------------------

TITLE: Configure Daily Room SIP Parameters (Python)
DESCRIPTION: Defines the parameters for configuring SIP capabilities in a Daily room, specifying display name, audio-only mode, dial-in mode, and the number of endpoints.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot-daily-twilio-sip/README.md#_snippet_6

LANGUAGE: Python
CODE:
```
sip_params = DailyRoomSipParams(
    display_name="phone-user",  # This will show up in the Daily UI; optional display the dialer's number
    video=False,                # Audio-only call
    sip_mode="dial-in",         # For receiving calls (vs. dial-out)
    num_endpoints=1,            # Number of SIP endpoints to create
)
```

----------------------------------------

TITLE: Running Plivo Chatbot Docker Container (sh)
DESCRIPTION: This command runs the `plivo-chatbot` Docker image. It maps port 8765 from the container to port 8765 on the host, allows interactive access (`-it`), and automatically removes the container upon exit (`--rm`). This starts the FastAPI application within a Docker container.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/plivo-chatbot/README.md#_snippet_7

LANGUAGE: sh
CODE:
```
docker run -it --rm -p 8765:8765 plivo-chatbot
```

----------------------------------------

TITLE: Building Audio Player with Control Button - JavaScript
DESCRIPTION: Creates and appends a new HTML audio element to the 'audio-container', associating it with a participant ID. It also creates a control button to toggle playback and displays the track's media tag, defaulting to 'english' for 'cam-audio', allowing user control over audio streams.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-multi-translation/index.html#_snippet_7

LANGUAGE: JavaScript
CODE:
```
async function buildAudioPlayer(track, participantId) { const audioContainer = document.getElementById("audio-container"); const player = document.createElement("audio"); player.dataset.participantId = participantId; // Create a new button for controlling audio const audioControlButton = document.createElement("button"); audioControlButton.className = "ui primary green button"; audioControlButton.innerText = track._mediaTag == "cam-audio" ? "english" : track._mediaTag; audioControlButton.dataset.participantId = participantId; audioControlButton.onclick = () => { if (player.paused) { player.play(); audioControlButton.className = "ui primary red button"; } else { player.pause(); audioControlButton.className = "ui primary green button"; } }; audioContainer.appendChild(player); audioContainer.appendChild(audioControlButton); await startPlayer(player, track); player.pause(); return player; }
```

----------------------------------------

TITLE: Building Plivo Chatbot Docker Image (sh)
DESCRIPTION: This command builds a Docker image named `plivo-chatbot` from the Dockerfile in the current directory. This containerizes the FastAPI application, making it portable and easily deployable across different environments.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/plivo-chatbot/README.md#_snippet_6

LANGUAGE: sh
CODE:
```
docker build -t plivo-chatbot .
```

----------------------------------------

TITLE: Installing Node.js Dependencies (npm)
DESCRIPTION: This command installs all necessary Node.js packages defined in the 'package.json' file for the JavaScript client application, ensuring all project dependencies are met before execution.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/client/javascript/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Installing Python Dependencies
DESCRIPTION: This command installs all required Python packages listed in the 'requirements.txt' file. It's crucial for setting up the project's dependencies after activating the virtual environment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/daily-interop-bridge/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Installing Python Dependencies
DESCRIPTION: This command installs all required Python packages listed in the `requirements.txt` file. This ensures that all necessary libraries for the FastAPI application are available in the current environment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/telnyx-chatbot/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Installing Python Dependencies
DESCRIPTION: This command installs all required Python packages listed in the 'requirements.txt' file. It ensures all necessary libraries for the FastAPI application are available.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Running React Development Server (Bash)
DESCRIPTION: This command starts the development server for the React client application, making it accessible via a local URL (e.g., `http://localhost:5173`) for testing and development purposes.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/react/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Running Development Server (Bash)
DESCRIPTION: This command starts the Next.js development server, making the API routes accessible locally. The server typically runs on `http://localhost:7860` and automatically reloads on code changes, facilitating rapid development and testing.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/nextjs-webhook-server/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Install Python Dependencies (Bash)
DESCRIPTION: Installs all required Python packages listed in `requirements.txt` using pip, ensuring the server has all necessary libraries to function correctly.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/fastapi-webhook-server/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Installing Python Dependencies (Bash)
DESCRIPTION: This command uses pip to install all Python packages listed in the 'requirements.txt' file. It ensures that all necessary libraries for the server application are available within the activated virtual environment, preparing the project for execution.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Install Python Dependencies (Phone Game)
DESCRIPTION: Installs all required Python packages listed in the 'requirements.txt' file for the phone game application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_10

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Configuring Minimum Agent Instances (Bash)
DESCRIPTION: This command updates the deployment configuration to ensure at least one warm instance of the agent is always available. This reduces cold start times, improving responsiveness for frequently used agents.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_12

LANGUAGE: bash
CODE:
```
pcc deploy my-first-agent your-username/my-first-agent:0.1 --min-instances 1
```

----------------------------------------

TITLE: Running the Python Server (Bash)
DESCRIPTION: This command executes the 'server.py' script using the Python interpreter. It starts the Pipecat bot server, making it ready to handle audio and video streams and apply transformations, serving as the core of the application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
python server.py
```

----------------------------------------

TITLE: Retrieving Conversation Items from LLM Service
DESCRIPTION: This snippet demonstrates how to use the `retrieve_conversation_item` method to asynchronously fetch a specific conversation item from the server using its unique `item_id`. This method allows for detailed introspection and retrieval of information about a conversation segment, which can be useful for logging, analysis, or further processing.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#_snippet_4

LANGUAGE: python
CODE:
```
item = await llm.retrieve_conversation_item(item_id)
```

----------------------------------------

TITLE: Building Documentation Directly with Sphinx - Bash
DESCRIPTION: Directly invokes `sphinx-build` to generate HTML documentation. The `-W` flag treats warnings as errors, and `--keep-going` ensures all errors are reported before stopping.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
sphinx-build -b html . _build/html -W --keep-going
```

----------------------------------------

TITLE: Expose Local Server with ngrok Subdomain (Bash)
DESCRIPTION: Uses ngrok to create a public URL with a consistent subdomain, tunneling traffic to the local FastAPI server on port 7860. This provides a stable external endpoint for development and testing.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/fastapi-webhook-server/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
ngrok http -subdomain=mydomain http://localhost:7860
```

----------------------------------------

TITLE: Exposing Local Server with ngrok (Bash)
DESCRIPTION: This command uses ngrok to create a secure tunnel to the local development server running on port 7860. This allows the local server to be accessible from the internet, which is necessary for testing webhooks from external services like Daily.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/nextjs-webhook-server/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
ngrok http 7860
```

----------------------------------------

TITLE: Start ngrok Public Endpoint (Shell)
DESCRIPTION: Command to start ngrok, creating a public URL (`yourdomain.ngrok.app`) that forwards external traffic to the local server running on port 7860, making it accessible to external services.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_4

LANGUAGE: shell
CODE:
```
ngrok http --domain yourdomain.ngrok.app 7860
```

----------------------------------------

TITLE: Adding Image Pull Secret for Private Repository (Bash)
DESCRIPTION: These commands create an image pull secret for a private Docker repository and then deploy the agent using these credentials. This is necessary when the Docker image is hosted in a private registry requiring authentication.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_11

LANGUAGE: bash
CODE:
```
# Create pull secret (you’ll be prompted for credentials)
pcc secrets image-pull-secret pull-secret https://index.docker.io/v1/

# Deploy with credentials
pcc deploy my-first-agent your-username/my-first-agent:0.1 --credentials pull-secret
```

----------------------------------------

TITLE: Basic Dialout Request (Bash)
DESCRIPTION: Initiates a dialout call via a POST request to `/api/dial`. The request body specifies the target phone number in `dialout_settings`. This uses any available purchased number as caller ID.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/README.md#_snippet_2

LANGUAGE: Bash
CODE:
```
curl -X POST http://localhost:3000/api/dial \
  -H "Content-Type: application/json" \
  -d '{
    "dialout_settings": [
      {
        "phoneNumber": "+1234567890"
      }
    ]
  }'
```

----------------------------------------

TITLE: Running the Development Server - Bash
DESCRIPTION: Provides commands to start the Next.js development server using different package managers (npm, yarn, pnpm, bun). This allows you to view the application locally.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/storytelling-chatbot/client/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Test Mode: Call Transfer in Daily Prebuilt Configuration
DESCRIPTION: Configures call transfer for testing within Daily Prebuilt. In this mode, `dialin_settings` are not required. It enables test mode (`testInPrebuilt: true`) and specifies the call transfer parameters, including the operator number.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_14

LANGUAGE: json
CODE:
```
{
  "config": {
    "call_transfer": {
      "mode": "dialout",
      "speakSummary": true,
      "operatorNumber": "+12345678910",
      "testInPrebuilt": true
    }
  }
}
```

----------------------------------------

TITLE: Configuring Twilio Streams XML for Local Testing
DESCRIPTION: This XML configuration directs Twilio to establish a WebSocket stream to a local server endpoint for testing purposes. It specifies the local WebSocket URL and includes a pause.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#_snippet_8

LANGUAGE: XML
CODE:
```
<?xml version="1.0" encoding="UTF-8"?>
<Response>
  <Connect>
    <Stream url="ws://localhost:8765/ws"></Stream>
  </Connect>
  <Pause length="40"/>
</Response>
```

----------------------------------------

TITLE: Checking Pipecat Agent Deployment Status (Bash)
DESCRIPTION: This command retrieves and displays the current status of a deployed Pipecat agent. It provides information on the agent's health, scaling, and operational state.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_13

LANGUAGE: bash
CODE:
```
pcc agent status my-first-agent
```

----------------------------------------

TITLE: Running Pipecat Example with Twilio Transport
DESCRIPTION: This command executes the `07-interruptible.py` example, configuring it to use Twilio as the transport. The `-x` flag specifies the ngrok host name, which is necessary for Twilio to send requests to the local Pipecat application. This setup enables voice interactions via a Twilio phone number.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/foundational/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
python 07-interruptible.py -t twilio -x NGROK_HOST_NAME (no protocol)
```

----------------------------------------

TITLE: Installing Vercel CLI Globally
DESCRIPTION: Installs the Vercel Command Line Interface (CLI) tool globally using npm. The Vercel CLI is used to deploy web projects, including Next.js applications, to the Vercel platform.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_14

LANGUAGE: bash
CODE:
```
npm install -g vercel
```

----------------------------------------

TITLE: Launching a new Fly.io project
DESCRIPTION: This command initializes a new application on Fly.io. You can optionally specify an organization using the `--org` flag to deploy the application under a specific organization, which is useful for managing multiple projects or teams.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/flyio-example/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
fly launch
```

LANGUAGE: Shell
CODE:
```
fly launch --org your-org-name
```

----------------------------------------

TITLE: Installing Python Project Requirements (Bash)
DESCRIPTION: This command installs all necessary Python dependencies listed in the `requirements.txt` file. It ensures that the local environment has all the packages required to run the agent.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Start Pipecat Bot Runner Service (Shell)
DESCRIPTION: Command to start the Pipecat bot runner service, which handles incoming requests and manages bot processes, listening on the specified host (localhost in this case).
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_3

LANGUAGE: shell
CODE:
```
python bot_runner.py --host localhost
```

----------------------------------------

TITLE: Running Client Application in Development Mode (Bash)
DESCRIPTION: This command executes the 'dev' script defined in the `package.json` file, typically starting a local development server and enabling features like hot-reloading for efficient development.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/client/typescript/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Running FastAPI Application with Python (sh)
DESCRIPTION: This command starts the FastAPI server by executing `server.py`. It's crucial to run this command from the project directory with the virtual environment activated to ensure all dependencies are correctly loaded and the application listens on its configured port (8765).
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/plivo-chatbot/README.md#_snippet_5

LANGUAGE: sh
CODE:
```
# Make sure you're in the project directory and your virtual environment is activated
python server.py
```

----------------------------------------

TITLE: Running the Python Bot
DESCRIPTION: This command executes the main Python bot script, which likely initializes the Websocket server and its logic.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python bot.py
```

----------------------------------------

TITLE: Run Local Phone Game Bot
DESCRIPTION: Starts the local development version of the phone game bot, enabling testing before deployment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_12

LANGUAGE: bash
CODE:
```
LOCAL_RUN=1 python bot_phone_local.py
```

----------------------------------------

TITLE: Installing Python Dependencies
DESCRIPTION: This command installs all required Python packages listed in `requirements.txt` into the active virtual environment. It ensures all necessary libraries for the server are available.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/server/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Install Python Dependencies (Bash)
DESCRIPTION: This command installs all necessary Python packages and libraries listed in the 'requirements.txt' file into the active virtual environment. This step ensures that all dependencies required for the bot server to function correctly are available.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Running the Pipecat Demo (Bash)
DESCRIPTION: This command executes the `bot.py` script, which starts the Pipecat demo application. This script is configured to send traces to Langfuse via OpenTelemetry, allowing for observability of the service's operations.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/open-telemetry/langfuse/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
python bot.py
```

----------------------------------------

TITLE: Run Daily Multi Translation Server (Bash)
DESCRIPTION: Command to execute the Python server script that handles the Daily room and translation logic.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-multi-translation/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python server.py
```

----------------------------------------

TITLE: Connecting to the bot via POST request
DESCRIPTION: This `curl` command sends a POST request to the deployed Fly.io application's URL. It waits for the machine to enter a 'starting' state and then returns a room URL and token, which are necessary to join the bot session and interact with it.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/flyio-example/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
curl --location --request POST 'https://YOUR_FLY_APP_NAME/'
```

----------------------------------------

TITLE: Configuring Environment Variables (Bash)
DESCRIPTION: This snippet shows the essential environment variables that need to be configured in the `.env.local` file. These variables include the Pipecat Cloud API key, the agent name, the HMAC secret for signature validation, and the logging level.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/nextjs-webhook-server/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
PIPECAT_CLOUD_API_KEY=pk_*
AGENT_NAME=my-first-agent
PINLESS_HMAC_SECRET=your_hmac_secret
LOG_LEVEL=info
```

----------------------------------------

TITLE: Deploying Next.js Client to Vercel
DESCRIPTION: Deploys the Next.js client application to Vercel. This command guides the user through prompts to configure and deploy the project, making it accessible via a Vercel URL.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_17

LANGUAGE: bash
CODE:
```
vercel
```

----------------------------------------

TITLE: Running the Pipecat Bot Server
DESCRIPTION: This command executes the 'server.py' script, which starts the main Pipecat bot server. The server must be running before any clients attempt to connect to ensure proper interoperability.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/daily-interop-bridge/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
python server.py
```

----------------------------------------

TITLE: Running the Chatbot Server
DESCRIPTION: This command starts the main Python server for the chatbot application. After execution, the chatbot will be accessible via a web interface, typically at `http://localhost:7860/` as indicated in the surrounding text.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/patient-intake/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python server.py
```

----------------------------------------

TITLE: Running the studypal Application
DESCRIPTION: Executes the main Python script 'studypal.py' to start the conversational AI application. This command initiates the server and prepares the application for interaction.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/studypal/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
python3 studypal.py
```

----------------------------------------

TITLE: Running the FastAPI Chatbot Server
DESCRIPTION: This snippet provides the command to start the FastAPI chatbot server. Executing this command launches the server, making its defined endpoints accessible for client connections and bot management.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/server/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
python server.py
```

----------------------------------------

TITLE: Start Pipecat Bot Server (Bash)
DESCRIPTION: This command executes the 'server.py' script using the Python interpreter, which initiates the Pipecat bot server. It is essential to ensure all necessary dependencies are installed and API keys are properly configured in the .env file before running this command.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
python server.py
```

----------------------------------------

TITLE: Running the FastAPI Server
DESCRIPTION: This command starts the FastAPI server, making its endpoints available for client connections. The server will listen on the configured host and port, handling bot instance management and Pipecat client interactions.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/server/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
python server.py
```

----------------------------------------

TITLE: Start Bot Server (Bash)
DESCRIPTION: This command executes the 'server.py' script using the Python interpreter within the active virtual environment. Running this script initiates the FastAPI bot server, which is responsible for handling real-time audio/video interactions and connecting to the chosen AI backend.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
python server.py
```

----------------------------------------

TITLE: Starting the Bot Server (Bash)
DESCRIPTION: This command initiates the bot server by executing a Python script. This server is a prerequisite for establishing a connection to the chatbot via Daily's Prebuilt UI, allowing the application to run locally.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/prebuilt/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
python server/server.py
```

----------------------------------------

TITLE: Installing Node Dependencies (Bash)
DESCRIPTION: This command installs all required Node.js packages and dependencies for the React client application, as specified in the `package.json` file, ensuring the project has all necessary libraries to run.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/react/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Installing Node.js Dependencies with npm
DESCRIPTION: This command installs all required Node.js packages listed in the `package.json` file for the client application, ensuring all necessary libraries are available for execution.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/client/javascript/README.md#_snippet_1

LANGUAGE: Bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Declaring Global Constants and Variables in JavaScript
DESCRIPTION: This snippet declares global constants for audio parameters like sample rate and number of channels, along with variables to hold references to the Protobuf message type, WebSocket connection, Web Audio API objects (AudioContext, MediaStreamSource, ScriptProcessor), microphone stream, and UI elements. These variables manage the state and resources for the audio streaming application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/index.html#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const SAMPLE_RATE = 16000;
const NUM_CHANNELS = 1;
const PLAY_TIME_RESET_THRESHOLD_MS = 1.0; // The protobuf type. We will load it later.
let Frame = null; // The websocket connection.
let ws = null; // The audio context
let audioContext = null; // The audio context media stream source
let source = null; // The microphone stream from getUserMedia. SHould be sampled to the
// proper sample rate.
let microphoneStream = null; // Script processor to get data from microphone.
let scriptProcessor = null; // AudioContext play time.
let playTime = 0; // Last time we received a websocket message.
let lastMessageTime = 0; // Whether we should be playing audio.
let isPlaying = false;
let startBtn = document.getElementById('startAudioBtn');
let stopBtn = document.getElementById('stopAudioBtn');
```

----------------------------------------

TITLE: Deploying Pipecat Agent to Pipecat Cloud
DESCRIPTION: Deploys the Pipecat agent to Pipecat Cloud based on the settings defined in the `pcc-deploy.toml` file. This command orchestrates the deployment of the Docker image and associated configurations.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_13

LANGUAGE: bash
CODE:
```
pcc deploy
```

----------------------------------------

TITLE: Starting the Bot Server (Python/Bash)
DESCRIPTION: This command executes the main server script 'server.py' using the Python interpreter. It initiates the bot server, making it ready to handle connections and manage Daily rooms.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/instant-voice/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
python src/server.py
```

----------------------------------------

TITLE: Running the FastAPI Chatbot Server
DESCRIPTION: This command starts the FastAPI server, making it ready to accept client connections. The server will listen on the configured host and port, managing bot instances and handling the Pipecat client connection endpoint.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/server/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
python server.py
```

----------------------------------------

TITLE: Running the Translation Chatbot Server
DESCRIPTION: This command executes the `server.py` script, which starts the translation chatbot application. After running, the application will be accessible via a web browser at `http://localhost:7860/`.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/translation-chatbot/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python server.py
```

----------------------------------------

TITLE: Running FastAPI Application with Python
DESCRIPTION: This command starts the FastAPI application by executing the `server.py` script. It assumes the virtual environment is activated and all dependencies are installed, making the application accessible locally on port 8765.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/telnyx-chatbot/README.md#_snippet_4

LANGUAGE: sh
CODE:
```
python server.py
```

----------------------------------------

TITLE: Running the Chatbot Server
DESCRIPTION: This command starts the Python server for the chatbot application. After execution, the chatbot will be accessible via a web browser at `http://localhost:7860/`.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/sentry-metrics/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python server.py
```

----------------------------------------

TITLE: Logging into Vercel Account
DESCRIPTION: This command initiates the login process for your Vercel account via the command line, typically opening a browser for authentication.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_16

LANGUAGE: bash
CODE:
```
vercel login
```

----------------------------------------

TITLE: Running the Main Application Script
DESCRIPTION: This command executes the main Python script `bot.py`, which launches the Pipecat audio transcription application. Upon execution, an interactive Textual interface will appear, prompting the user to select an audio input device before starting real-time transcription.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/local-input-select-stt/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python bot.py
```

----------------------------------------

TITLE: Configure Twilio Hold Music (Python)
DESCRIPTION: Demonstrates how to use the Twilio VoiceResponse object to play an audio file (MP3) as hold music for the caller while waiting to be connected to the bot.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot-daily-twilio-sip/README.md#_snippet_4

LANGUAGE: Python
CODE:
```
resp = VoiceResponse()
resp.play(
    url="https://your-custom-audio-file-url.mp3",
    loop=10,
)
```

----------------------------------------

TITLE: Initializing DeepgramSTTService with Nova-2 Model (Python)
DESCRIPTION: This snippet demonstrates how to initialize the DeepgramSTTService to use the 'nova-2-general' model instead of the default 'nova-3' model. It shows passing LiveOptions with the desired model name to the 'live_options' parameter during service instantiation. This is useful for maintaining compatibility with older models or for specific use cases requiring 'nova-2'.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#_snippet_5

LANGUAGE: python
CODE:
```
stt = DeepgramSTTService(..., live_options=LiveOptions(model="nova-2-general"))
```

----------------------------------------

TITLE: Run Application Locally - Shell
DESCRIPTION: Commands to navigate back to the root directory and run the server-side application locally, with options for specifying a custom host and port.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/storytelling-chatbot/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
cd ..
```

LANGUAGE: shell
CODE:
```
python server/bot_runner.py --host localhost
```

LANGUAGE: shell
CODE:
```
python server/bot_runner.py --host somehost --p someport
```

----------------------------------------

TITLE: Deploying Client to Vercel
DESCRIPTION: This command deploys the current project directory to Vercel, initiating the build and deployment process for the client application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_17

LANGUAGE: bash
CODE:
```
vercel
```

----------------------------------------

TITLE: Destroying Media Players by Query - JavaScript
DESCRIPTION: Removes HTML elements matching a given CSS selector query from the DOM. This is a general utility used to clean up dynamically created elements like video, audio, or control buttons.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-multi-translation/index.html#_snippet_3

LANGUAGE: JavaScript
CODE:
```
function destroyPlayers(query) { const items = document.querySelectorAll(query); if (items) { for (const item of items) { item.remove(); } } }
```

----------------------------------------

TITLE: Enabling/Disabling UI Button in JavaScript
DESCRIPTION: This utility function enables or disables a specified HTML button element based on its ID. It's used to control the interactivity of UI elements.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-custom-tracks/index.html#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function enableButton(buttonId, enable) {
  const button = document.getElementById(buttonId);
  button.disabled = !enable;
}
```

----------------------------------------

TITLE: Removing DOM Elements by Query in JavaScript
DESCRIPTION: This function removes all HTML elements from the DOM that match a given CSS selector query. It's commonly used for cleaning up dynamically created elements.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-custom-tracks/index.html#_snippet_3

LANGUAGE: JavaScript
CODE:
```
function destroyPlayers(query) {
  const items = document.querySelectorAll(query);
  if (items) {
    for (const item of items) {
      item.remove();
    }
  }
}
```

----------------------------------------

TITLE: Setting Default API Key for Agent (Bash)
DESCRIPTION: This command sets the newly created API key as the default for interacting with the agent. It simplifies subsequent commands by not requiring explicit key specification.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#_snippet_15

LANGUAGE: bash
CODE:
```
pcc organizations keys use
```

----------------------------------------

TITLE: Installing SSL Certificates on macOS
DESCRIPTION: This snippet provides the command to install SSL certificates on macOS for Python. This step resolves the `SSLCertVerificationError` by ensuring Python can properly verify SSL certificates from external APIs like Daily.co.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/server/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
/Applications/Python\ 3.12/Install\ Certificates.command
```

----------------------------------------

TITLE: Test Mode: Simple Dialout in Daily Prebuilt Configuration
DESCRIPTION: Configures a simple dial-out scenario for testing within Daily Prebuilt. It enables test mode (`testInPrebuilt: true`) within the `simple_dialout` configuration object.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_20

LANGUAGE: json
CODE:
```
{
  "config": {
    "simple_dialout": {
      "testInPrebuilt": true
    }
  }
}
```

----------------------------------------

TITLE: Troubleshooting SSL Certificate Verification Error
DESCRIPTION: This snippet shows a common `aiohttp` SSL certificate verification error that can occur when Python cannot verify the SSL certificate for `api.daily.co`. This issue typically arises from missing or improperly configured CA certificates on the system.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/server/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
aiohttp.client_exceptions.ClientConnectorCertificateError: Cannot connect to host api.daily.co:443 ssl:True [SSLCertVerificationError: (1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1000)')]
```

----------------------------------------

TITLE: Start the Webhook Server (Bash)
DESCRIPTION: Executes the server.py script to start the webhook server that listens for incoming calls from Twilio.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot-daily-twilio-sip/README.md#_snippet_3

LANGUAGE: Bash
CODE:
```
python server.py
```

----------------------------------------

TITLE: Running Chatbot Server (Python)
DESCRIPTION: This command initiates the chatbot server, making the application accessible via a web browser, typically at `http://localhost:7860/`. It's the primary method to launch the chatbot after the environment setup is complete.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/chatbot-audio-recording/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python server.py
```

----------------------------------------

TITLE: Logging In to Vercel Account
DESCRIPTION: Initiates the login process for the Vercel CLI. Users will be prompted to authenticate with their Vercel account, which is required to deploy projects to the Vercel platform.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_16

LANGUAGE: bash
CODE:
```
vercel login
```

----------------------------------------

TITLE: Make Actual Simple Dial-out Call (Shell)
DESCRIPTION: Curl command to trigger the simple dial-out example, instructing the bot runner to make an actual phone call to the specified number (`+12345678910`) using the configured Daily dial-out settings.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_7

LANGUAGE: shell
CODE:
```
curl -X POST "http://localhost:7860/start" \
	 -H "Content-Type: application/json" \
	 -d '{
		 "config": {
			"dialout_settings": [{
			   "phoneNumber": "+12345678910"
			}],
			"simple_dialout": {
			   "testInPrebuilt": false
			}
		 }
	  }'
```

----------------------------------------

TITLE: Copying Plivo Streams XML Template (sh)
DESCRIPTION: This command copies the `streams.xml.template` file to `streams.xml`. This local copy will then be modified to include the ngrok URL, configuring how Plivo streams audio to the application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/plivo-chatbot/README.md#_snippet_4

LANGUAGE: sh
CODE:
```
cp templates/streams.xml.template templates/streams.xml
```

----------------------------------------

TITLE: Run Daily Custom Track Sender
DESCRIPTION: Execute the custom track sender application, specifying the Daily room URL and the path to the audio input file. This application sends the audio as a custom track named 'pipecat'.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-custom-tracks/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
python custom_track_sender.py -u ROOM_URL -i office-ambience-mono-16000.mp3
```

----------------------------------------

TITLE: Make Actual Voicemail Detection Call (Shell)
DESCRIPTION: Curl command to trigger the voicemail detection example, instructing the bot runner to make an actual phone call to the specified number (`+12345678910`) and apply the voicemail detection logic.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_9

LANGUAGE: shell
CODE:
```
curl -X POST "http://localhost:7860/start" \
	 -H "Content-Type: application/json" \
	 -d '{
		 "config": {
			"dialout_settings": [{
			   "phoneNumber": "+12345678910"
			}],
			"voicemail_detection": {
			   "testInPrebuilt": false
			}
		 }
	  }'
```

----------------------------------------

TITLE: Running React Native App on iOS (Bash)
DESCRIPTION: This command starts the React Native application on an iOS simulator or a connected iOS device. Successful execution requires Xcode to be installed locally and the native source code to have been prebuilt using `npx expo prebuild`.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/client/react-native/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm run ios
```

----------------------------------------

TITLE: Verifying Vercel CLI Installation
DESCRIPTION: Checks the installed version of the Vercel CLI to confirm it was successfully installed and is accessible in the system's PATH. This is a quick verification step before proceeding with Vercel operations.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_15

LANGUAGE: bash
CODE:
```
vercel --version
```

----------------------------------------

TITLE: Enabling/Disabling Join Button - JavaScript
DESCRIPTION: Enables or disables the 'join-button' by calling the generic 'enableButton' utility function. This controls the user's ability to initiate a call, typically enabled when not in a call.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-multi-translation/index.html#_snippet_1

LANGUAGE: JavaScript
CODE:
```
function enableJoinButton(enable) { enableButton("join-button", enable); }
```

----------------------------------------

TITLE: Installing Vercel CLI
DESCRIPTION: This command installs the Vercel command-line interface globally, allowing for easy deployment and management of Next.js, React, and TypeScript projects to Vercel.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_14

LANGUAGE: bash
CODE:
```
npm install -g vercel
```

----------------------------------------

TITLE: Running the Client Development Server (Bash)
DESCRIPTION: This command executes the 'dev' script configured in the project's `package.json`, typically starting a local development server for the JavaScript client application, making it accessible via a web browser.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/javascript/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Create Environment File (Web Game Server)
DESCRIPTION: Copies the example environment file to create a new '.env' file, which will store API keys and configuration variables for the web game server.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp env.example .env
```

----------------------------------------

TITLE: Running JavaScript Client Development Server (npm)
DESCRIPTION: This command initiates the development server for the JavaScript client application, typically configured to serve the application locally and enable features like hot-reloading for efficient development.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/client/javascript/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Starting a Local HTTP Server for Web Client
DESCRIPTION: This command starts a simple Python HTTP server to host the static web client files, making them accessible via a web browser at 'http://localhost:8000'.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
python -m http.server
```

----------------------------------------

TITLE: Creating Local Environment Variables File (Client)
DESCRIPTION: Copies the example local environment variables file (`env.local.example`) to `.env.local`. This file is used by Next.js for local development configuration, though no keys typically need modification for this specific demo.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
cp env.local.example .env.local
```

----------------------------------------

TITLE: Create Local Environment File (Web Game Client)
DESCRIPTION: Copies the example environment file to create a new '.env.local' file for client-side environment variables specific to the web game.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
cp env.example .env.local
```

----------------------------------------

TITLE: Run React Native Project on iOS (Bash)
DESCRIPTION: Executes the script defined in package.json to build and run the React Native application on a connected iOS device. Requires prior setup in Xcode for signing and provisioning.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/react-native/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm run ios
```

----------------------------------------

TITLE: Running React Native App on Android (Bash)
DESCRIPTION: This command initiates the build and deployment of the React Native application to a connected Android device. It assumes the Android device is properly configured for debugging and all project dependencies and native code have been prebuilt.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/client/react-native/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm run android
```

----------------------------------------

TITLE: Configuring Pyvenv-auto for Virtual Environments in Emacs (Emacs Lisp)
DESCRIPTION: This Emacs Lisp snippet configures 'pyvenv-auto' to automatically load Python virtual environments when entering Python mode. This ensures that Emacs uses the correct interpreter and dependencies for the project.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#_snippet_11

LANGUAGE: elisp
CODE:
```
(use-package pyvenv-auto
  :ensure t
  :defer t
  :hook ((python-mode . pyvenv-auto-run)))
```

----------------------------------------

TITLE: Create Python Virtual Environment (Bash)
DESCRIPTION: Creates a new Python virtual environment named 'venv' within the current directory to isolate project dependencies and avoid conflicts with system-wide packages.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
python3 -m venv venv
```

----------------------------------------

TITLE: Enabling Join Button in Daily.co JavaScript UI
DESCRIPTION: A convenience function that specifically enables or disables the 'join-button' element by calling the generic 'enableButton' utility.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-custom-tracks/index.html#_snippet_1

LANGUAGE: JavaScript
CODE:
```
function enableJoinButton(enable) {
  enableButton("join-button", enable);
}
```

----------------------------------------

TITLE: Run Web Game Server Locally
DESCRIPTION: Starts the Python server application for the web game in local development mode, indicated by the 'LOCAL_RUN' environment variable.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
LOCAL_RUN=1 python server.py
```

----------------------------------------

TITLE: Configuring Ruff Formatter in Emacs (Emacs Lisp)
DESCRIPTION: This Emacs Lisp snippet configures the 'lazy-ruff' package to integrate Ruff for Python formatting and checking. It sets the commands for 'ruff format' and 'ruff check' within Emacs' Python mode.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#_snippet_10

LANGUAGE: elisp
CODE:
```
(use-package lazy-ruff
  :ensure t
  :hook ((python-mode . lazy-ruff-mode))
  :config
  (setq lazy-ruff-format-command "ruff format")
  (setq lazy-ruff-check-command "ruff check --select I"))
```

----------------------------------------

TITLE: Configuring Ruff Formatter File Watcher in PyCharm (Shell)
DESCRIPTION: This snippet outlines the configuration for a PyCharm file watcher to automatically run 'ruff format' on Python files upon save. It specifies the program path and arguments for the formatter.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#_snippet_13

LANGUAGE: shell
CODE:
```
"$PyInterpreterDirectory$/ruff" format "$FilePath$"
```

----------------------------------------

TITLE: Running Test Client for FastAPI Server
DESCRIPTION: This command runs a client script to test the FastAPI server locally. It connects to the specified URL and can simulate multiple concurrent clients using the `-c` flag.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#_snippet_10

LANGUAGE: Shell
CODE:
```
python client.py -u http://localhost:8765 -c 2
```

----------------------------------------

TITLE: Handling Stop Audio Button Click in JavaScript
DESCRIPTION: This simple function serves as the event handler for the 'Stop Audio' button. It calls the `stopAudio` utility function, passing `true` to indicate that the WebSocket connection should also be closed when stopping audio.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/index.html#_snippet_9

LANGUAGE: JavaScript
CODE:
```
function stopAudioBtnHandler() {
  stopAudio(true);
}
```

----------------------------------------

TITLE: Enabling/Disabling UI Button - JavaScript
DESCRIPTION: A utility function to enable or disable a specified HTML button element based on its ID. It sets the 'disabled' property of the button, controlling user interaction.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-multi-translation/index.html#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function enableButton(buttonId, enable) { const button = document.getElementById(buttonId); button.disabled = !enable; }
```

----------------------------------------

TITLE: Creating Environment Configuration File
DESCRIPTION: This command copies the example environment file 'env.example' to '.env'. The '.env' file will contain sensitive configuration settings for the application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
cp env.example .env
```

----------------------------------------

TITLE: Copy Environment Variable Example File (Bash)
DESCRIPTION: Copies the example environment variable file (.env.example) to .env, which should then be edited with actual API keys required for the project.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot-daily-twilio-sip/README.md#_snippet_1

LANGUAGE: Bash
CODE:
```
cp .env.example .env
# Edit .env with your API keys
```

----------------------------------------

TITLE: Create Environment File in Server Directory (Phone Game)
DESCRIPTION: Navigates to the 'server' directory and copies the example environment file to create a new '.env' file for API keys and configuration specific to the phone game.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_11

LANGUAGE: bash
CODE:
```
cd server
cp env.example .env
```

----------------------------------------

TITLE: Navigating to Client Directory
DESCRIPTION: Changes the current working directory to the 'client' subdirectory. This is a necessary step before executing any client-specific commands or managing front-end dependencies.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
cd client
```

----------------------------------------

TITLE: Navigate to Server Directory (Bash)
DESCRIPTION: Changes the current directory to `fastapi-webhook-server`, which is a prerequisite for installing dependencies and running the server.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/fastapi-webhook-server/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd fastapi-webhook-server
```

----------------------------------------

TITLE: Navigating to Client Directory (Bash)
DESCRIPTION: This command changes the current directory to the `client/react` folder, which is a prerequisite for installing dependencies and running the React client application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/react/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd client/react
```

----------------------------------------

TITLE: Enabling Leave Button in Daily.co JavaScript UI
DESCRIPTION: A convenience function that specifically enables or disables the 'leave-button' element by calling the generic 'enableButton' utility.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-custom-tracks/index.html#_snippet_2

LANGUAGE: JavaScript
CODE:
```
function enableLeaveButton(enable) {
  enableButton("leave-button", enable);
}
```

----------------------------------------

TITLE: Building Documentation Locally with Script - Bash
DESCRIPTION: Executes the `build-docs.sh` script to build the documentation locally. This script automatically opens the generated documentation in a browser upon completion.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
./build-docs.sh
```

----------------------------------------

TITLE: Enabling/Disabling Leave Button - JavaScript
DESCRIPTION: Enables or disables the 'leave-button' by calling the generic 'enableButton' utility function. This controls the user's ability to end a call, typically enabled when in an active call.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-multi-translation/index.html#_snippet_2

LANGUAGE: JavaScript
CODE:
```
function enableLeaveButton(enable) { enableButton("leave-button", enable); }
```

----------------------------------------

TITLE: Copying Twilio Streams XML Template
DESCRIPTION: This command copies the Twilio streams XML template file to a local version. This file defines how Twilio should stream audio to the WebSocket endpoint.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
cp templates/streams.xml.template templates/streams.xml
```

----------------------------------------

TITLE: Creating a New Branch - Bash
DESCRIPTION: This command creates a new local branch for your contributions and switches to it. Replace `your-branch-name` with a descriptive name for your feature or fix.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CONTRIBUTING.md#_snippet_1

LANGUAGE: bash
CODE:
```
git checkout -b your-branch-name
```

----------------------------------------

TITLE: Installing Pipecat AI from Local Path with Options (Shell)
DESCRIPTION: This optional command allows installing the Pipecat AI package from a local file path, including specific optional dependencies. It's useful for integrating a local development version into another project.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#_snippet_7

LANGUAGE: shell
CODE:
```
pip install "path_to_this_repo[option,...]"
```

----------------------------------------

TITLE: Installing Python Dependencies (Bash)
DESCRIPTION: This command installs the required Python dependencies listed in `requirements.txt` for the Pipecat demo. It's important to ensure only the HTTP exporter is installed to avoid potential conflicts with other OpenTelemetry exporters.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/open-telemetry/langfuse/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Install Python Dependencies (Bash)
DESCRIPTION: This command uses pip, Python's package installer, to install all required packages listed in the 'requirements.txt' file. These dependencies are crucial for the Pipecat bot server to operate correctly and provide its intended functionality.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Installing Python Dependencies
DESCRIPTION: This command installs all required Python packages listed in the `requirements.txt` file. It is a crucial step for setting up the Pipecat environment and ensuring all OpenTelemetry and service-specific libraries are available for the demo application to run correctly.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/open-telemetry/jaeger/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Installing Node.js Dependencies (Bash)
DESCRIPTION: This command installs all required Node.js packages and their dependencies listed in the `package.json` file. It must be run from the project's root directory to ensure all necessary libraries for the Next.js server are available.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/nextjs-webhook-server/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Installing Python Dependencies (sh)
DESCRIPTION: This command installs all required Python packages listed in the `requirements.txt` file. It ensures that all necessary libraries for the FastAPI application are available in the active virtual environment.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/plivo-chatbot/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Verifying Vercel CLI Installation
DESCRIPTION: This command checks and displays the installed version of the Vercel CLI, confirming its successful installation and readiness for use.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_15

LANGUAGE: bash
CODE:
```
vercel --version
```

----------------------------------------

TITLE: Navigating to Server Directory (Bash)
DESCRIPTION: This command changes the current working directory to the 'server' subdirectory. It is the first step required to access the server-side files and execute server-related commands for the Pipecat bot.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd server
```

----------------------------------------

TITLE: Navigate to Server Directory (Web Game)
DESCRIPTION: Changes the current directory to the 'server' directory, which contains the backend code for the web game.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd server
```

----------------------------------------

TITLE: Running FastAPI Server in Test Mode
DESCRIPTION: This command starts the FastAPI server in a special test mode, indicated by the `-t` flag. This mode is designed for automated testing without requiring actual phone calls.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#_snippet_9

LANGUAGE: Shell
CODE:
```
python server.py -t
```

----------------------------------------

TITLE: Testing ReadTheDocs Build Process - Bash
DESCRIPTION: Runs the `rtd-test.py` script to simulate the documentation build process as it would occur on ReadTheDocs. This script creates an isolated environment, installs dependencies, and handles conflicts.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
./rtd-test.py
```

----------------------------------------

TITLE: Pushing Changes to Remote - Bash
DESCRIPTION: This command pushes your local branch and its commits to your forked repository on GitHub. Replace `your-branch-name` with the name of the branch you created.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CONTRIBUTING.md#_snippet_3

LANGUAGE: bash
CODE:
```
git push origin your-branch-name
```

----------------------------------------

TITLE: Change Directory to JavaScript Client
DESCRIPTION: Navigates the terminal into the `client/javascript` directory where the JavaScript client application is located.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/modal-example/client/javascript/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd client/javascript
```

----------------------------------------

TITLE: Navigating to Client Directory in Bash
DESCRIPTION: This command changes the current working directory to the `client/javascript` folder, which is a prerequisite for installing dependencies and running the client application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/client/javascript/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
cd client/javascript
```

----------------------------------------

TITLE: Navigating to Project Directory (Bash)
DESCRIPTION: This command changes the current directory to `nextjs-webhook-server`, which is the root directory of the Next.js webhook server project. This is a prerequisite step before installing dependencies or running the server.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/nextjs-webhook-server/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd nextjs-webhook-server
```

----------------------------------------

TITLE: Test Mode: Voicemail Detection in Daily Prebuilt Configuration
DESCRIPTION: Configures voicemail detection specifically for testing within Daily Prebuilt. It enables test mode (`testInPrebuilt: true`) within the `voicemail_detection` configuration object.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_15

LANGUAGE: json
CODE:
```
{
  "config": {
    "voicemail_detection": {
      "testInPrebuilt": true
    }
  }
}
```

----------------------------------------

TITLE: Navigate to Client Directory (Web Game)
DESCRIPTION: Changes the current directory to the 'client' directory, which contains the frontend code for the web game.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/word-wrangler-gemini-live/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
cd client
```

----------------------------------------

TITLE: Change Directory to JavaScript Client (Bash)
DESCRIPTION: This command navigates into the `client/javascript` directory, which is the prerequisite location for installing project dependencies and running the client application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/instant-voice/client/javascript/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
cd client/javascript
```

----------------------------------------

TITLE: Open Daily Multi Translation Client HTML (Bash)
DESCRIPTION: Command to open the client-side HTML file in a web browser to interact with the Daily room and listen to translations.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-multi-translation/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
open index.html
```

----------------------------------------

TITLE: Navigate to Server Directory (Bash)
DESCRIPTION: This command changes the current working directory to the 'server' directory, which contains the bot server implementation. It is the initial step required before proceeding with the server setup and execution.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd server
```

----------------------------------------

TITLE: Navigating to Server Directory for Deployment
DESCRIPTION: Changes the current directory to the 'server' subdirectory. This action is a prerequisite for performing server-specific deployment operations, such as building Docker images or deploying to Pipecat Cloud.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
cd server
```

----------------------------------------

TITLE: Test Simple Dial-in in Daily Prebuilt (Shell)
DESCRIPTION: Curl command to trigger the simple dial-in example in Daily Prebuilt mode, which allows testing the bot's basic conversation capabilities in a browser-based Daily room without making actual phone calls.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_5

LANGUAGE: shell
CODE:
```
curl -X POST "http://localhost:7860/start" \
	 -H "Content-Type: application/json" \
	 -d '{
		 "config": {
			"simple_dialin": {
			   "testInPrebuilt": true
			}
		 }
	  }'
```

----------------------------------------

TITLE: Test Voicemail Detection in Daily Prebuilt (Shell)
DESCRIPTION: Curl command to trigger the voicemail detection example in Daily Prebuilt mode, allowing testing the bot's logic for detecting voicemail versus a human in a browser-based Daily room without making actual phone calls.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#_snippet_8

LANGUAGE: shell
CODE:
```
curl -X POST "http://localhost:7860/start" \
	 -H "Content-Type: application/json" \
	 -d '{
		 "config": {
			"voicemail_detection": {
			   "testInPrebuilt": true
			}
		 }
	  }'
```

----------------------------------------

TITLE: Navigating to JavaScript Client Directory (Bash)
DESCRIPTION: This Bash command changes the current working directory to the 'client/javascript' folder, which is the prerequisite step to manage the client-side application files.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/client/javascript/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd client/javascript
```

----------------------------------------

TITLE: Navigate to Server Directory (Bash)
DESCRIPTION: This command changes the current working directory to the 'server' subdirectory. It is the initial step required to set up and run the Pipecat bot server, ensuring subsequent commands are executed in the correct context.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd server
```

----------------------------------------

TITLE: Example Test Webhook Request (JSON)
DESCRIPTION: This JSON payload represents a test request sent to the `/api/dial` endpoint. Including `"Test": "test"` allows verification of the webhook setup without triggering actual call handling logic, confirming connectivity and configuration.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/nextjs-webhook-server/README.md#_snippet_7

LANGUAGE: json
CODE:
```
{
  "Test": "test"
}
```

----------------------------------------

TITLE: Installing Pipecat Test Dependencies (Shell)
DESCRIPTION: This command installs all dependencies required for running tests, as specified in test-requirements.txt. It's a prerequisite for verifying the framework's functionality.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#_snippet_8

LANGUAGE: shell
CODE:
```
pip install -r test-requirements.txt
```

----------------------------------------

TITLE: Pipecat Documentation Directory Structure - Text
DESCRIPTION: Illustrates the hierarchical organization of files and directories within the Pipecat documentation project, showing the purpose of key folders like `api/`, `_build/`, and configuration files.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/README.md#_snippet_8

LANGUAGE: text
CODE:
```
.\n├── api/            # Auto-generated API documentation\n├── _build/         # Built documentation\n├── _static/        # Static files (images, css, etc.)\n├── conf.py         # Sphinx configuration\n├── index.rst       # Main documentation entry point\n├── requirements-base.txt    # Base documentation dependencies\n├── requirements-riva.txt    # Riva-specific dependencies\n├── requirements-playht.txt  # PlayHT-specific dependencies\n├── build-docs.sh   # Local build script\n└── rtd-test.py     # ReadTheDocs test build script
```

----------------------------------------

TITLE: Navigating to Client Directory (Bash)
DESCRIPTION: This command changes the current working directory to the `client/typescript` folder, which is necessary before installing dependencies or running the client application.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/client/typescript/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd client/typescript
```

----------------------------------------

TITLE: Navigating to JavaScript Client Directory (Bash)
DESCRIPTION: This Bash command changes the current working directory to the `client/javascript` folder, which is essential for accessing and managing the JavaScript client application's files.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/javascript/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd client/javascript
```

----------------------------------------

TITLE: Navigate to Server Directory (Bash)
DESCRIPTION: Changes the current working directory to the 'server' directory, which contains the main bot server application files.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd server
```

----------------------------------------

TITLE: Navigating to Server Directory (Bash)
DESCRIPTION: This command changes the current working directory to the 'server' directory, which is the first step to setting up and running the bot server.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/instant-voice/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd server
```

----------------------------------------

TITLE: Making Build Scripts Executable - Bash
DESCRIPTION: Grants execute permissions to the `build-docs.sh` and `rtd-test.py` scripts, allowing them to be run directly from the command line.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
chmod +x build-docs.sh rtd-test.py
```

----------------------------------------

TITLE: Open Daily Client HTML
DESCRIPTION: Open the local index.html file in a web browser to access the Daily client interface and join the room to hear the custom tracks.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/daily-custom-tracks/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
open index.html
```

----------------------------------------

TITLE: Opening Built Documentation (macOS) - Bash
DESCRIPTION: Opens the generated `index.html` file in the default web browser on macOS, allowing users to view the built documentation.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
open _build/html/index.html
```

----------------------------------------

TITLE: Opening Built Documentation (Linux) - Bash
DESCRIPTION: Opens the generated `index.html` file in the default web browser on Linux systems using `xdg-open`, which handles various file types.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
xdg-open _build/html/index.html
```

----------------------------------------

TITLE: Opening Built Documentation (Windows) - Bash
DESCRIPTION: Opens the generated `index.html` file in the default web browser on Windows using the `start` command, which launches files with their associated applications.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
start _build/html/index.html
```

----------------------------------------

TITLE: Example Smart Turn Inference Log Output
DESCRIPTION: An example log line showing the real-time debug information for a Smart Turn inference. It includes the turn detection status, probability, and various latency metrics for model inference, server processing, and end-to-end performance.
SOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/fal-smart-turn/README.md#_snippet_18

LANGUAGE: text
CODE:
```
Smart Turn: COMPLETE, Probability: 95.3%, Model inference: 65.23ms, Server processing: 82.09ms, End-to-end: 245.43ms
```

--

TITLE: Releasing CallClient Resources to Resolve Circular Dependencies in Python
DESCRIPTION: This snippet demonstrates the recommended way to release `CallClient` resources and break circular dependencies. By calling `self.call_client.release()` after `self.call_client.leave()`, resources are explicitly freed, allowing Python's garbage collector to properly manage memory. The `release()` function also blocks until asynchronous operations complete, providing a convenient way to confirm completion.
SOURCE: https://github.com/daily-co/daily-python/blob/main/CHANGELOG.md#_snippet_3

LANGUAGE: python
CODE:
```
class MyClient(EventHandler):

  def __init__(self):
    self.call_client=CallClient(event_handler=self)

  def leave(self):
    self.call_client.leave()
    self.call_client.release()

  ...
```

----------------------------------------

TITLE: Setting Up Python Virtual Environment
DESCRIPTION: This command sequence creates a new Python virtual environment named '.venv' and then activates it. Using a virtual environment helps manage project dependencies in isolation, preventing conflicts with system-wide Python packages.
SOURCE: https://github.com/daily-co/daily-python/blob/main/demos/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
python3 -m venv .venv
source .venv/bin/activate
```

----------------------------------------

TITLE: Configuring Custom Audio Track as Microphone Input in Daily Python
DESCRIPTION: This snippet demonstrates how to initialize a `CustomAudioTrack` from a `CustomAudioSource` and then configure it as the primary microphone input when joining a Daily room. This allows for sending custom audio data as the main microphone stream during a call.
SOURCE: https://github.com/daily-co/daily-python/blob/main/CHANGELOG.md#_snippet_0

LANGUAGE: Python
CODE:
```
audio_source = CustomAudioSource(...)

audio_track = CustomAudioTrack(audio_source)

client.join("YOUR_DAILY_ROOM", client_settings={
    "inputs": {
        "microphone": {
            "isEnabled": True,
            "settings": {
               "customTrack": {
                   "id": audio_track.id
               }
            }
        }
    }
})
```

----------------------------------------

TITLE: Installing Daily Python SDK
DESCRIPTION: This command installs the `daily-python` SDK using pip, making it available for use in Python projects. It's the standard way to add the SDK to your development environment.
SOURCE: https://github.com/daily-co/daily-python/blob/main/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
pip install daily-python
```

----------------------------------------

TITLE: Reading Audio Frames (New Method) - Python
DESCRIPTION: This snippet shows the improved `VirtualSpeakerDevice.read_frames()` method. It no longer requires manual timing or `time.sleep()`, allowing a single call to read a specified duration of audio frames. This simplifies the code, minimizes potential audio issues, and improves overall timing control internally.
SOURCE: https://github.com/daily-co/daily-python/blob/main/CHANGELOG.md#_snippet_5

LANGUAGE: python
CODE:
```
SECONDS_TO_READ = 10
FRAMES_TO_READ = SAMPLE_RATE * SECONDS_TO_READ
buffer = speaker.read_frames(FRAMES_TO_READ)
```

----------------------------------------

TITLE: Installing Project Dependencies with pip
DESCRIPTION: This command installs all Python packages listed in the 'requirements.txt' file. These packages are necessary for the various Daily Python SDK demos to function correctly.
SOURCE: https://github.com/daily-co/daily-python/blob/main/demos/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
pip3 install -r requirements.txt
```

----------------------------------------

TITLE: Initializing and Analyzing Voice Activity Detection (VAD) in Python
DESCRIPTION: This snippet demonstrates how to initialize a native Voice Activity Detection (VAD) instance using `Daily.create_native_vad` and then analyze audio frames for voice activity using `vad.analyze_frames`. The `create_native_vad` function takes parameters for frame duration, sample rate, and number of channels. The `analyze_frames` method returns a confidence score indicating the presence of voice.
SOURCE: https://github.com/daily-co/daily-python/blob/main/CHANGELOG.md#_snippet_1

LANGUAGE: python
CODE:
```
vad = Daily.create_native_vad(1000, 16000, 1)
confidence = vad.analyze_frames(audio_frames)
```

----------------------------------------

TITLE: Installing Python Dependencies for Flask/Celery Demo - Bash
DESCRIPTION: This command installs the necessary Python packages, Flask, Celery, and Redis, which are required for the daily-python demo application to function. These packages enable the web framework, background task processing, and in-memory data store, respectively.
SOURCE: https://github.com/daily-co/daily-python/blob/main/demos/flask/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip3 install flask celery redis
```

----------------------------------------

TITLE: Making a POST Request to Connect a Bot with Curl - Bash
DESCRIPTION: This curl command demonstrates how to send a POST request to the Flask application's endpoint to connect a bot to a Daily meeting. It includes the JSON request body with bot_name and meeting_url, sets the Content-Type header, and targets the local Flask server.
SOURCE: https://github.com/daily-co/daily-python/blob/main/demos/flask/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
curl -d '{"bot_name": "BOT_NAME", "meeting_url":"DAILY_MEETING_URL"}' -H "Content-Type: application/json" -X POST http://localhost:5000
```

----------------------------------------

TITLE: Running Flask Application for Flask/Celery Demo - Bash
DESCRIPTION: This command starts the Flask development server, making the daily-python application accessible via HTTP requests, typically on http://localhost:5000. It allows users to interact with the application's endpoints, such as the one for connecting bots to Daily meetings.
SOURCE: https://github.com/daily-co/daily-python/blob/main/demos/flask/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
flask run
```

----------------------------------------

TITLE: Running Celery Worker for Flask/Celery Demo - Bash
DESCRIPTION: This command starts the Celery worker process, which is responsible for executing background tasks asynchronously for the Flask application. The --loglevel INFO flag sets the logging level to provide informative output during operation.
SOURCE: https://github.com/daily-co/daily-python/blob/main/demos/flask/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
celery -A app.celery worker --loglevel INFO
```

----------------------------------------

TITLE: Upgrading Daily Python SDK
DESCRIPTION: This command upgrades an existing installation of the `daily-python` SDK to the latest version available on PyPI. The `-U` flag ensures that all dependencies are also updated.
SOURCE: https://github.com/daily-co/daily-python/blob/main/README.md#_snippet_1

LANGUAGE: Bash
CODE:
```
pip install -U daily-python
```

----------------------------------------

TITLE: Installing Daily Python SDK
DESCRIPTION: This command manually installs the 'daily-python' SDK. It's noted that this SDK is not included in the 'requirements.txt' file and must be installed separately to run the demos.
SOURCE: https://github.com/daily-co/daily-python/blob/main/demos/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
pip3 install daily-python
```

----------------------------------------

TITLE: Example JSON Request Body for Bot Connection - JSON
DESCRIPTION: This JSON object defines the structure for the request body when connecting a bot to a Daily meeting. It requires bot_name to identify the bot and meeting_url to specify the Daily meeting to join. This structure is used in POST requests to the Flask application.
SOURCE: https://github.com/daily-co/daily-python/blob/main/demos/flask/README.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  "bot_name": "BOT_NAME",
  "meeting_url": "DAILY_MEETING_URL"
}
```

----------------------------------------

TITLE: Illustrating CallClient Circular Dependency in Python
DESCRIPTION: This snippet illustrates a common pattern where a `MyClient` class, acting as an `EventHandler`, creates a `CallClient` instance, passing itself as the event handler. This setup creates a circular dependency between `MyClient` and `CallClient`, which can hinder Python's garbage collection when multiple `CallClient` instances are created and released within an application.
SOURCE: https://github.com/daily-co/daily-python/blob/main/CHANGELOG.md#_snippet_2

LANGUAGE: python
CODE:
```
class MyClient(EventHandler):

  def __init__(self):
    self.call_client=CallClient(event_handler=self)

  ...
```

----------------------------------------

TITLE: Reading Audio Frames (Old Method) - Python
DESCRIPTION: This snippet demonstrates the previous method for reading audio frames using `VirtualSpeakerDevice.read_frames()`. It required manual calculation of frames and explicit `time.sleep()` calls within a loop to manage timing, which could lead to potential audio issues and increased code complexity.
SOURCE: https://github.com/daily-co/daily-python/blob/main/CHANGELOG.md#_snippet_4

LANGUAGE: python
CODE:
```
SAMPLE_RATE = 16000
READ_INTERVAL = 0.01
FRAMES_TO_READ = int(SAMPLE_RATE * READ_INTERVAL)
SECONDS_TO_READ = 10.0

for _ in range (int(SECONDS_TO_READ / READ_INTERVAL)):
  buffer = speaker.read_frames(FRAMES_TO_READ)
  time.sleep(READ_INTERVAL)
```

---

TITLE: Initializing Daily React with DailyProvider (JSX)
DESCRIPTION: Demonstrates how to wrap your React application with the DailyProvider component, passing the room URL to establish the initial Daily context.
SOURCE: https://github.com/daily-co/daily-react/blob/main/README.md#_snippet_0

LANGUAGE: jsx
CODE:
```
import { DailyProvider } from '@daily-co/daily-react';

function App({ roomUrl }) {
  return <DailyProvider url={roomUrl}>{/* … */}</DailyProvider>;
}
```

----------------------------------------

TITLE: Installing Daily React Dependencies (Bash)
DESCRIPTION: Commands to install the daily-react package and its peer dependencies (@daily-co/daily-js and jotai) using either npm or yarn.
SOURCE: https://github.com/daily-co/daily-react/blob/main/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm install @daily-co/daily-react @daily-co/daily-js jotai
```

LANGUAGE: bash
CODE:
```
yarn add @daily-co/daily-react @daily-co/daily-js jotai
```

----------------------------------------

TITLE: Accessing Participant Data with Hooks (JSX)
DESCRIPTION: Illustrates the use of useParticipantIds and useParticipantProperty hooks to fetch and display participant information, such as username, video, and audio states, filtering and sorting remote participants.
SOURCE: https://github.com/daily-co/daily-react/blob/main/README.md#_snippet_1

LANGUAGE: jsx
CODE:
```
import {
  useParticipantIds,
  useParticipantProperty,
} from '@daily-co/daily-react';

function ParticipantRow({ id }) {
  const [username, videoState, audioState] = useParticipantProperty(id, [
    'user_name',
    'tracks.video.state',
    'tracks.audio.state',
  ]);

  return (
    <li style={{ display: 'flex', gap: 8 }}>
      <span>{username ?? 'Guest'}</span>
      <span>📷{videoState === 'playable' ? '✅' : '❌'}</span>
      <span>🎙️{audioState === 'playable' ? '✅' : '❌'}</span>
    </li>
  );
}

function Participants() {
  const participantIds = useParticipantIds({
    filter: 'remote',
    sort: 'user_name',
  });

  return (
    <ul>
      {participantIds.map((id) => (
        <ParticipantRow key={id} id={id} />
      ))}
    </ul>
  );
}
```

----------------------------------------

TITLE: Retrieving All Participants with useParticipants (TSX)
DESCRIPTION: Returns an array containing all `DailyParticipant` objects currently in the call. It can optionally accept arguments for handling participant join, update, and leave events.
SOURCE: https://github.com/daily-co/daily-react/blob/main/API_PROPOSAL.md#_snippet_2

LANGUAGE: tsx
CODE:
```
interface UseParticipantsArgs {
  onParticipantJoined?(ev: DailyEventObjectParticipant): void;
  onParticipantUpdated?(ev: DailyEventObjectParticipant): void;
  onParticipantLeft?(ev: DailyEventObjectParticipant): void;
}
useParticipants(args: UseParticipantsArgs): DailyParticipant[];
```

----------------------------------------

TITLE: Managing Media Devices with useDevices (TSX)
DESCRIPTION: Provides access to lists of available cameras, microphones, and speakers, along with methods to select or cycle through them, and enable/disable camera or microphone. It can optionally handle camera errors.
SOURCE: https://github.com/daily-co/daily-react/blob/main/API_PROPOSAL.md#_snippet_4

LANGUAGE: tsx
CODE:
```
interface UseDevicesArgs {
  onCameraError?(ev: DailyEventObjectCameraError): void;
}
useDevices(): {
  cams: MediaDeviceInfo[];
  cycleCamera(): void;
  disableCam(): void;
  disableMic(): void;
  enableCam(): void;
  enableMic(): void;
  mics: MediaDeviceInfo[];
  selectCam(deviceId: string): void;
  selectMic(deviceId: string): void;
  selectSpeaker(deviceId: string): void;
  speakers: MediaDeviceInfo[];
}
```

----------------------------------------

TITLE: Registering Daily Events with useDailyEvent (TSX)
DESCRIPTION: Registers a listener for a specific Daily event. The listener is automatically cleaned up when the component or hook using `useDailyEvent` unmounts, preventing memory leaks.
SOURCE: https://github.com/daily-co/daily-react/blob/main/API_PROPOSAL.md#_snippet_10

LANGUAGE: tsx
CODE:
```
useDailyEvent(event: DailyEvent, callback: Function): void;
```

----------------------------------------

TITLE: Retrieving a Specific Participant with useParticipant (TSX)
DESCRIPTION: Retrieves a single `DailyParticipant` object. The hook requires the `session_id` of the desired participant as an argument.
SOURCE: https://github.com/daily-co/daily-react/blob/main/API_PROPOSAL.md#_snippet_1

LANGUAGE: tsx
CODE:
```
useParticipant(session_id: string): DailyParticipant;
```

----------------------------------------

TITLE: Managing Screen Sharing with useScreenShare (TSX)
DESCRIPTION: Provides information about active screen shares, including whether the local user is sharing. It includes methods to initiate and terminate screen sharing.
SOURCE: https://github.com/daily-co/daily-react/blob/main/API_PROPOSAL.md#_snippet_6

LANGUAGE: tsx
CODE:
```
useScreenShare(): {
  isScreenSharing: boolean; // whether the local user is sharing a screen
  screens: Array<{
    audio: DailyTrackState; // Track state for associated screenAudio
    session_id: string; // Session ID of user
    video: DailyTrackState; // Track state for associated screenVideo
  }>;
  startScreenShare(): void;
  stopScreenShare(): void;
}
```

----------------------------------------

TITLE: Monitoring Network State with useNetwork (TSX)
DESCRIPTION: Provides real-time network statistics and topology information. It automatically updates network stats and can accept arguments to handle network quality and connection change events.
SOURCE: https://github.com/daily-co/daily-react/blob/main/API_PROPOSAL.md#_snippet_9

LANGUAGE: tsx
CODE:
```
interface UseNetworkArgs {
  onNetworkQualityChange?(ev: DailyEventObjectNetworkQualityEvent): void;
  onNetworkConnection?(ev: DailyEventObjectNetworkConnectionEvent): void;
}
useNetwork(args: UseNetworkArgs): {
  stats: DailyNetworkStats; // Same as getNetworkStats(), but automatically updated
  topology: 'peer' | 'sfu';
}
```

----------------------------------------

TITLE: Integrating App Messages with useAppMessage (TSX)
DESCRIPTION: Enables the integration of custom application-level messages within the call. It provides a method to send messages and can accept arguments to handle incoming app messages.
SOURCE: https://github.com/daily-co/daily-react/blob/main/API_PROPOSAL.md#_snippet_5

LANGUAGE: tsx
CODE:
```
interface UseAppMessageArgs {
  onAppMessage?(ev: DailyEventObjectAppMessage): void;
}
useAppMessage(args: UseAppMessageArgs): {
  sendAppMessage(data: any, to: string): void;
}
```

----------------------------------------

TITLE: Managing Call Recording with useRecording (TSX)
DESCRIPTION: Provides the current recording state and related information. It includes methods to start and stop recordings, accepting options similar to the daily-js equivalent, and supports arguments for handling various recording events.
SOURCE: https://github.com/daily-co/daily-react/blob/main/API_PROPOSAL.md#_snippet_7

LANGUAGE: tsx
CODE:
```
interface UseRecordingArgs {
  onRecordingData?(ev: DailyEvent): void;
  onRecordingError?(ev: DailyEvent): void;
  onRecordingStarted?(ev: DailyEvent): void;
  onRecordingStats?(ev: DailyEvent): void;
  onRecordingStopped?(ev: DailyEvent): void;
  onRecordingUploadCompleted?(ev: DailyEvent): void;
}
useRecording(): {
  isRecording: boolean; // whether the call is being recorded
  startRecording(): void; // Accepts same options as daily-js equivalent
  stopRecording(); void;
}
```

----------------------------------------

TITLE: Managing Live Streaming with useLiveStreaming (TSX)
DESCRIPTION: Provides the current live streaming state and information. It includes methods to start, stop, and update live streams, accepting options similar to the daily-js equivalent, and supports arguments for handling live streaming events.
SOURCE: https://github.com/daily-co/daily-react/blob/main/API_PROPOSAL.md#_snippet_8

LANGUAGE: tsx
CODE:
```
interface UseLiveStreamingArgs {
  onLiveStreamingError?(ev: DailyEvent): void;
  onLiveStreamingStarted?(ev: DailyEvent): void;
  onLiveStreamingStopped?(ev: DailyEvent): void;
}
useLiveStreaming(args: UseLiveStreamingArgs): {
  isLiveStreaming: boolean;
  startLiveStreaming(): void;  // Accepts same options as daily-js equivalent
  stopLiveStreaming(): void;
  updateLiveStreaming(): void;  // Accepts same options as daily-js equivalent
}
```

----------------------------------------

TITLE: Retrieving Waiting Participants with useWaitingParticipants (TSX)
DESCRIPTION: Returns an array of participants currently in the waiting room. It supports arguments for handling events related to waiting participants being added, updated, or removed.
SOURCE: https://github.com/daily-co/daily-react/blob/main/API_PROPOSAL.md#_snippet_3

LANGUAGE: tsx
CODE:
```
interface UseWaitingParticipantsArgs {
  onWaitingParticipantAdded?(ev: DailyEventObjectWaitingParticipant): void;
  onWaitingParticipantUpdated?(ev: DailyEventObjectWaitingParticipant): void;
  onWaitingParticipantRemoved?(ev: DailyEventObjectWaitingParticipant): void;
}
useWaitingParticipants(args: UseWaitingParticipantsArgs): DailyParticipant[];
```

----------------------------------------

TITLE: Initializing Daily Call Object with useDaily (TSX)
DESCRIPTION: Initializes a Daily `callObject` instance. This is the primary hook for configuration, automatically handling required parameters for `join` and `preAuth`. It accepts a `UseDailyArgs` object for various settings.
SOURCE: https://github.com/daily-co/daily-react/blob/main/API_PROPOSAL.md#_snippet_0

LANGUAGE: tsx
CODE:
```
interface UseDailyArgs {
  audioSource?: boolean | string | MediaStreamTrack;
  experimentalChromeVideoMuteLightOff?: boolean;
  receiveSettings?: object;
  subscribeToTracksAutomatically?: boolean;
  token?: string;
  url: string;
  userName?: string;
  videoSource?: boolean | string | MediaStreamTrack;
}
useDaily(args: UseDailyArgs): DailyCall;
```

----------------------------------------

TITLE: Running Daily React Tests (Bash)
DESCRIPTION: Commands to execute the automated test suite for the daily-react library using either npm or yarn.
SOURCE: https://github.com/daily-co/daily-react/blob/main/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm test
```

LANGUAGE: bash
CODE:
```
yarn test
```

----------------------------------------

TITLE: Running Daily React Jest Tests - Bash
DESCRIPTION: These bash commands demonstrate how to navigate to the correct directory and execute the Jest tests for the @daily-co/daily-react workspace using yarn. It includes commands for running all tests and running tests in watch mode.
SOURCE: https://github.com/daily-co/daily-react/blob/main/README-TEMPLATE.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd north-star
# Runs all tests
yarn workspace @daily-co/daily-react test
# Opens jest in watch mode
yarn workspace @daily-co/daily-react test --watch
```

---

